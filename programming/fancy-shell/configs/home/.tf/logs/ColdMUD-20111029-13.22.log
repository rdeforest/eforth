ColdGOO

    create  name password    To create a new character
    connect name password    To connect to an existing character
    @quit                    To leave

!The user "Crag" does not exist.
*** Connected ***
Nowhere
You see nothing special.
--> $list
ColdGOO

    create  name password    To create a new character
    connect name password    To connect to an existing character
    @quit                    To leave

!The user "Crag" does not exist.
*** Connected ***
Nowhere
You see nothing special.
--> $string
--> ['matchr]
--> ["foo.bar", "foo", ".", "bar"]
--> ["foo.", "foo", ".", ""]
--> [".", "", ".", ""]
--> 0
Enter text for method match_subject.
Method compiled.
Caught error ~objnf (No object foo in environment.)
    Extra data was: "foo"
    tb[2]      was: ['method, 'match_environment, $admin_1, $vr, 146]
  $located.match_environment (on $admin_1): ~objnf
  $programmer.match_subject (on $admin_1): ~objnf
  $admin_1.tmp_eval (on $admin_1): ~methoderr
  $root.eval (on $admin_1): ~methoderr
--> [[$admin_1], "method", "bar", 0]
--> $admin_1
Enter text for method current_object.
Method compiled.
--> [$admin_1, "method", "bar", 0]
--> [$nowhere, "method", "bar", 0]
--> $nowhere
!Line 2: syntax error
!Line 2: syntax error
yay
--> "$admin_1"
Enter text for method summarize_object.
!Line 4: syntax error
Enter text for method summarize_object.
Method compiled.
$admin_1:
Child of: [#39]
Children: []
--> $admin_1
$root:
Child of: []
Children: [#0, #2, #3, #4, #5, #6, #7, #12, #13, #14, #40, #48]
--> $admin_1
--> ["arg name;", "", "if (!public && !.is_owned_by(sender()))", "    throw(~perm, \"Not public and sender not an owner.\");", "return (> list_method(name) <);"]
--> ["disallow_overrides;", "", "return \"$\" + substr(toliteral(name), 2);"]
--> ["", "return \"$\" + substr(toliteral(name), 2);"]
--> ["", "return name;"]
--> ["", "if (!public && !.is_owned_by(sender()))", "    throw(~perm, \"Not public and sender not an owner.\");", "return (> list_method(name) <);"]
--> ["arg name;", "", "if (!public && !.is_owned_by(sender()))", "    throw(~perm, \"Not public and sender not an owner.\");", "return (> list_method(name) <);"]
--> ["arg name;", "", "if (!public && !.is_owned_by(sender()))", "    throw(~perm, \"Not public and sender not an owner.\");", "return (> list_method(name) <);"]
--> "arg name;"
--> "arg"
--> "g name;"
--> "name;"
Caught error ~range (Segment length (-2) is less than zero.)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $admin_1.tmp_eval (on $admin_1): ~range
  $root.eval (on $admin_1): ~methoderr
--> "name;"
!Line 1: Unknown function length.
--> 3
Enter text for method substr.
!Line 1: syntax error
!Line 2: syntax error
!Line 1: syntax error
!Line 2: syntax error
Caught error ~what (what)
    Extra data was: 0
    tb[2]      was: ['method, 'tmp_eval, $admin_1, $admin_1, 6]
  $root.eval (on $admin_1): ~what
!Line 2: syntax error
.tell(.list_method('tmp_eval));
arg [x];

.tell(.list_method('tmp_eval));
Caught error ~numargs (#51.tmp_eval called with no arguments, requires two or more.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'MESSAGE]
  $root.eval (on $admin_1): ~numargs
!Line 1: syntax error
Enter text for method substr.
Method compiled.
--> "fo"
@program $string.substr
    arg str, begin, [end];
    
    end = [@end, strlen(str)][1];
    if (end < 0)
        end = strlen(str) + end + 1;
    return substr(str, begin, end);
.
Enter text for method substr.
Method compiled.
Caught error ~range (Segment extends to 10, past the end of the object (6).)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $string.substr (on $string): ~range
  $admin_1.tmp_eval (on $admin_1): ~methoderr
  $root.eval (on $admin_1): ~methoderr
Enter text for method substr.
Method compiled.
--> "fooba"
--> "ooba"
Enter text for method substr.
Method compiled.
--> "foobar"
--> "obar"
--> "r"
--> "bar"
--> "fooba"
Enter text for method method_args.
Method compiled.
Methods:
Methods:
  add_owner
  add_parameter
  all_children
  ancestors
  change_parents
  children
  chparents
  compile
  data
  del_method
  del_owner
  del_parameter
  destroy
  eval
  fertile
  find_method
  find_next_method
  has_ancestor
  implements
  init_root
  initialize
  is_owned_by
  list_method
  method_args
  methods
  name
  name_str
  notify_ancestors
  owners
  parameters
  parents
  public
  set_fertile
  set_name
  set_owners
  set_public
  show
  spawn
  uninitialize
  will_inherit
--> ["obj"]
--> ["str", "begin", "[end]"]
Enter text for method display_methods.
Method compiled.
$nowhere:
Child of: [#18]
Children: []
--> $admin_1
Caught error ~methodnf (Method summarize_methods not found.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'MESSAGE]
  $admin_1.tmp_eval (on $admin_1): ~methodnf
  $root.eval (on $admin_1): ~methoderr
--> $admin_1
Caught error ~namenf (Can't find object name o.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'NAME]
  $programmer.display_methods (on $admin_1): ~namenf
  $admin_1.tmp_eval (on $admin_1): ~methoderr
  $root.eval (on $admin_1): ~methoderr
Enter text for method display_methods.
Method compiled.
Caught error ~type (["prefix", "lines"] must be string.)
    Extra data was: 0
    tb[2]      was: ['opcode, '+]
  $programmer.display_methods (on $admin_1): ~type
  $admin_1.tmp_eval (on $admin_1): ~methoderr
  $root.eval (on $admin_1): ~methoderr
--> ['indent, 'range, 'to_string, 'to_english, 'map, 'map_on, 'filter, 'filter_on, 'sort, '_sort, 'columnize, 'map_tostr, 'english_vr_object_list]
@program $list.to_string
    arg l, sep;
    var r, e;
    
    if (!l)
        return "";
    r = tostr(l[1]);
    for e in (delete(l, 1))
        r = r + sep + tostr(e);
    return r;
.
Enter text for method display_methods.
Method compiled.
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
--> $admin_1
--> $admin_1
@program $programmer.display_cmd
    arg dummy1, subject;
    var object, parts;
    
    parts = .match_subject(subject);
.
Enter text for method display_cmd.
Method compiled.
!I don't understand that.
!I don't understand that.
$nowhere:
Child of: [#18]
Children: []
--> $admin_1
$nowhere:
Child of: [#18]
Children: []
--> $admin_1
Enter text for method match_subject.
Method compiled.
!I don't understand that.
--> $admin_1
$nowhere:
Child of: [#18]
Children: []
$nowhere:
Child of: [#18]
Children: []
@program $programmer.display_cmd
    arg dummy1, subject;
    var object, parts;
    
    parts = .match_subject(subject);
    .summarize_object(.current_object());
    if (!parts)
        return;
    if (parts[1] == 'method)
        .display_methods(parts[2], parts[3]);
    if (parts[1] == 'var)
        .display_vars(parts[2], parts[3]);
.
--> ['method, "", 0]
--> $admin_1
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
--> $admin_1
$nowhere:
Child of: [#18]
Children: []
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
$string:
Child of: [#7]
Children: []
    $string.matchr(pat, str)
    $string.substr(str, begin, [end])
$list:
Child of: [#7]
Children: []
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
$admin_1:
Child of: [#39]
Children: []
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
--> $admin_1
$admin_1:
Child of: [#39]
Children: []
Caught error ~paramnf (No such parameter me.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'GET_OBJ_VAR]
  $admin_1.tmp_eval (on $admin_1): ~paramnf
  $root.eval (on $admin_1): ~methoderr
$admin_1:
Child of: [#39]
Children: []
$admin_1:
Child of: [#39]
Children: []
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
--> $admin_1
--> [$admin_1, $admin, $programmer, $builder, $user, $proto_user, $person, $located, $container, $vr, $described, $has_verbs, $has_commands, $root]
--> "$string"
Enter text for method display_cmd.
Method compiled.
$admin_1:
Child of: [#39]
Children: []
Enter text for method display_cmd.
Method compiled.
$admin_1:
Child of: [#39]
Children: []
---
$admin_1:
Child of: [#39]
Children: []
---
$programmer:
Child of: [#37]
Children: [#39]
    $programmer.init_programmer()
    $programmer.uninit_programmer()
    $programmer.parse_command(str)
    $programmer.programming_line(str)
    $programmer.program_done()
    $programmer.eval_cmd(dummy1, s)
    $programmer.program_cmd(dummy1, name, dummy2, obj)
    $programmer.show_cmd(dummy1, name)
    $programmer.params_cmd(dummy1, name)
    $programmer.methods_cmd(dummy1, name)
    $programmer.verbs_cmd(dummy1, name)
    $programmer.list_cmd(dummy1, method, dummy2, name)
    $programmer.display_cmd(dummy1, subject)
    $programmer.current_object([set_to])
    $programmer.match_subject(subject_str)
    $programmer.object_cmd(cmd, obj_str)
Caught error ~range (Segment extends to 3, past the end of the object (0).)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $root.method_args (on $programmer): ~range
  $programmer.display_methods (on $admin_1): ~methoderr
  $programmer.display_cmd (on $admin_1): ~methoderr
  $user.parse_command (on $admin_1): ~methoderr
  $programmer.parse_command (on $admin_1): ~methoderr
--> $programmer
    $programmer.init_programmer()
    $programmer.uninit_programmer()
    $programmer.parse_command(str)
    $programmer.programming_line(str)
    $programmer.program_done()
    $programmer.eval_cmd(dummy1, s)
    $programmer.program_cmd(dummy1, name, dummy2, obj)
    $programmer.show_cmd(dummy1, name)
    $programmer.params_cmd(dummy1, name)
    $programmer.methods_cmd(dummy1, name)
    $programmer.verbs_cmd(dummy1, name)
    $programmer.list_cmd(dummy1, method, dummy2, name)
    $programmer.display_cmd(dummy1, subject)
    $programmer.current_object([set_to])
    $programmer.match_subject(subject_str)
    $programmer.object_cmd(cmd, obj_str)
Caught error ~range (Segment extends to 3, past the end of the object (0).)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $root.method_args (on $programmer): ~range
  $programmer.display_methods (on $admin_1): ~methoderr
  $admin_1.tmp_eval (on $admin_1): ~methoderr
  $root.eval (on $admin_1): ~methoderr
Enter text for method display_methods.
Method compiled.
$admin_1:
Child of: [#39]
Children: []
Methods:
---
$admin_1:
Child of: [#39]
Children: []
Methods:
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
---
$list:
Child of: [#7]
Children: []
Methods:
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
---
--> $list
--> [$list, $utils, $root]
Enter text for method display_methods.
!Line 5: Unknown function current_object.
Enter text for method display_methods.
Method compiled.
Methods:
    $list.indent(prefix, lines)
    $list.range(x, y)
    $list.to_string(l, sep)
    $list.to_english(l, [rest])
    $list.map(l, method, [args])
    $list.map_on(l, object, method, [args])
    $list.filter(l, method, [args])
    $list.filter_on(l, object, method, [args])
    $list.sort(lst)
    $list._sort(lst, x, y)
    $list.columnize(l, n, [rest])
    $list.map_tostr(l)
    $list.english_vr_object_list(l, [otherargs])
--> $admin_1
--> $list
$admin_1:
Child of: [#39]
Children: []
---
$admin_1:
Child of: [#39]
Children: []
Methods:
---
$admin_1:
Child of: [#39]
Children: []
Methods:
    $admin.init_admin()
    $admin.uninit_admin()
    $admin.eval_as_cmd(dummy1, objname, dummy2, line)
    $admin.eval_as_to_cmd(dummy1, objname, dummy2, targetname, dummy3, line)
    $programmer.init_programmer()
    $programmer.uninit_programmer()
    $programmer.parse_command(str)
    $programmer.programming_line(str)
    $programmer.program_done()
    $programmer.eval_cmd(dummy1, s)
    $programmer.program_cmd(dummy1, name, dummy2, obj)
    $programmer.show_cmd(dummy1, name)
    $programmer.params_cmd(dummy1, name)
    $programmer.methods_cmd(dummy1, name)
    $programmer.verbs_cmd(dummy1, name)
    $programmer.list_cmd(dummy1, method, dummy2, name)
    $programmer.display_cmd(dummy1, subject)
    $programmer.current_object([set_to])
    $programmer.match_subject(subject_str)
    $programmer.object_cmd(cmd, obj_str)
Caught error ~range (Segment extends to 3, past the end of the object (0).)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $root.method_args (on $programmer): ~range
  $programmer.display_methods (on $admin_1): ~methoderr
  $programmer.display_cmd (on $admin_1): ~methoderr
  $user.parse_command (on $admin_1): ~methoderr
  $programmer.parse_command (on $admin_1): ~methoderr
--> ['init_programmer, 'uninit_programmer, 'parse_command, 'programming_line, 'program_done, 'eval_cmd, 'program_cmd, 'show_cmd, 'params_cmd, 'methods_cmd, 'verbs_cmd, 'list_cmd, 'display_cmd, 'current_object, 'match_subject, 'object_cmd, 'parent_cmd, 'var_cmd, 'method_cmd, 'summarize_object, 'display_methods]
@program $programmer.parent_cmd
.
Caught error ~range (Segment extends to 3, past the end of the object (0).)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $root.method_args (on $programmer): ~range
  $admin_1.tmp_eval (on $admin_1): ~methoderr
  $root.eval (on $admin_1): ~methoderr
--> []
Caught error ~range (Segment length (-1) is less than zero.)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $string.substr (on $string): ~range
  $admin_1.tmp_eval (on $admin_1): ~methoderr
  $root.eval (on $admin_1): ~methoderr
Enter text for method substr.
Method compiled.
Caught error ~range (Segment length (-1) is less than zero.)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $string.substr (on $string): ~range
  $admin_1.tmp_eval (on $admin_1): ~methoderr
  $root.eval (on $admin_1): ~methoderr
Enter text for method substr.
Method compiled.
--> ""
$admin_1:
Child of: [#39]
Children: []
Methods:
    $admin.init_admin()
    $admin.uninit_admin()
    $admin.eval_as_cmd(dummy1, objname, dummy2, line)
    $admin.eval_as_to_cmd(dummy1, objname, dummy2, targetname, dummy3, line)
    $programmer.init_programmer()
    $programmer.uninit_programmer()
    $programmer.parse_command(str)
    $programmer.programming_line(str)
    $programmer.program_done()
    $programmer.eval_cmd(dummy1, s)
    $programmer.program_cmd(dummy1, name, dummy2, obj)
    $programmer.show_cmd(dummy1, name)
    $programmer.params_cmd(dummy1, name)
    $programmer.methods_cmd(dummy1, name)
    $programmer.verbs_cmd(dummy1, name)
    $programmer.list_cmd(dummy1, method, dummy2, name)
    $programmer.display_cmd(dummy1, subject)
    $programmer.current_object([set_to])
    $programmer.match_subject(subject_str)
    $programmer.object_cmd(cmd, obj_str)
Caught error ~range (Segment extends to 3, past the end of the object (0).)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $root.method_args (on $programmer): ~range
  $programmer.display_methods (on $admin_1): ~methoderr
  $programmer.display_cmd (on $admin_1): ~methoderr
  $user.parse_command (on $admin_1): ~methoderr
  $programmer.parse_command (on $admin_1): ~methoderr
Caught error ~range (Segment extends to 3, past the end of the object (0).)
    Extra data was: 0
    tb[2]      was: ['function, 'substr]
  $root.method_args (on $programmer): ~range
  $admin_1.tmp_eval (on $admin_1): ~methoderr
  $root.eval (on $admin_1): ~methoderr
Enter text for method method_args.
Method compiled.
--> []
$admin_1:
Child of: [#39]
Children: []
Methods:
    $admin.init_admin()
    $admin.uninit_admin()
    $admin.eval_as_cmd(dummy1, objname, dummy2, line)
    $admin.eval_as_to_cmd(dummy1, objname, dummy2, targetname, dummy3, line)
    $programmer.init_programmer()
    $programmer.uninit_programmer()
    $programmer.parse_command(str)
    $programmer.programming_line(str)
    $programmer.program_done()
    $programmer.eval_cmd(dummy1, s)
    $programmer.program_cmd(dummy1, name, dummy2, obj)
    $programmer.show_cmd(dummy1, name)
    $programmer.params_cmd(dummy1, name)
    $programmer.methods_cmd(dummy1, name)
    $programmer.verbs_cmd(dummy1, name)
    $programmer.list_cmd(dummy1, method, dummy2, name)
    $programmer.display_cmd(dummy1, subject)
    $programmer.current_object([set_to])
    $programmer.match_subject(subject_str)
    $programmer.object_cmd(cmd, obj_str)
    $programmer.parent_cmd()
    $programmer.var_cmd()
    $programmer.method_cmd()
    $programmer.summarize_object(o)
    $programmer.display_methods(pattern, ancestors)
    $builder.dig_cmd(dummy1, name)
    $builder.dig_to_cmd(dummy1, exitname, dummy2, roomname)
    $user.init_user()
    $user.uninit_user()
    $user.set_vr_name(new_name)
    $user.spawn([args])
    $user.will_move(mover, place)
    $user.doing()
    $user.set_doing(s)
    $user.connected_at()
    $user.last_command_at()
    $user.tell(what)
    $user.err(what)
    $user.msg(what)
    $user.set_password(str)
    $user.check_password(str)
    $user.did_move([args])
    $user.parse_line(s)
    $user.parse_command(str)
    $user.connection_logged_in(addr, port)
    $user.connection_gone(addr, port)
    $user.login(connection)
    $user.login_again(connection)
    $user.logout(connection)
    $user.connections()
    $user.connected()
    $user.who_cmd(dummy)
    $user.doing_cmd(dummy, s)
    $user.quit_cmd(dummy)
    $user.inventory_cmd(dummy)
    $user.page_cmd(dummy1, recipient, dummy2, message)
    $user.sample_edit_cmd(dummy, str)
    $user.sample_edit_done(text)
    $user.report_traceback(t, [s])
    $person.environment()
    $person.msg()
    $person.err()
    $person.tell()
    $person.whisper_verb(dummy1, message, dummy2, dummy3)
    $located.init_located()
    $located.uninit()
    $located.environment()
    $located.match_environment(s)
    $located.location()
    $located.move(place)
    $located.will_move(mover, place)
    $located.did_move(mover, old_place)
    $container.init_container()
    $container.uninit_container()
    $container.environment()
    $container.contents()
    $container.contains(obj)
    $container.put(obj)
    $container.take(obj)
    $container.will_arrive(old_place)
    $container.will_leave(place)
    $container.did_arrive(place)
    $container.did_leave(place)
    $container.add_sender_to_contents()
    $container.remove_sender_from_contents()
    $vr.init_vr()
    $vr.uninit_vr()
    $vr.set_vr_name(new_name)
    $vr.vr_name()
    $vr.environment()
    $vr.match_environment(s)
    $vr.local_to_environment(obj)
    $described.init_described()
    $described.description()
    $described.full_description()
    $described.set_description(s)
    $described.look_verb(dummy1, dummy2)
    $described.describe_verb(dummy1, dummy2, dummy3, desc)
    $has_verbs.init_has_verbs()
    $has_verbs.uninit_has_verbs()
    $has_verbs.verb_templates()
    $has_verbs.add_verb(template, method, remote)
    $has_verbs.del_verb(template)
    $has_verbs.verb_info(template)
    $has_verbs.local_verb_info(template)
    $has_commands.init_has_commands()
    $has_commands.uninit_has_commands()
    $has_commands.add_command(template, method)
    $has_commands.del_command(method)
    $has_commands.add_shortcut(pattern, method, subs)
    $has_commands.del_shortcut(method)
    $has_commands.match_command(str)
    $has_commands.commands()
    $has_commands.all_commands()
    $has_commands.shortcuts()
    $has_commands.all_shortcuts()
    $has_commands.sub_shortcut_fields(subs, fields)
    $root.init_root()
    $root.notify_ancestors(event_name, [rest])
    $root.initialize()
    $root.uninitialize()
    $root.change_parents(parents)
    $root.chparents(parents)
    $root.will_inherit(obj)
    $root.name()
    $root.name_str()
    $root.owners()
    $root.is_owned_by(obj)
    $root.public()
    $root.fertile()
    $root.set_fertile(val)
    $root.set_name(new_name)
    $root.set_public(val)
    $root.set_owners(owners_arg)
    $root.add_owner(obj)
    $root.del_owner(obj)
    $root.spawn([suffix])
    $root.destroy()
    $root.add_parameter(name)
    $root.parameters()
    $root.del_parameter(name)
    $root.del_method(name)
    $root.methods()
    $root.parents()
    $root.children()
    $root.ancestors()
    $root.find_method(name)
    $root.find_next_method(name, after)
    $root.list_method(name)
    $root.compile(code, name)
    $root.show()
    $root.has_ancestor(obj)
    $root.eval(code, [dest])
    $root.implements(interface)
    $root.data()
    $root.all_children()
    $root.method_args(name)
---
$root:
Child of: []
Children: [#0, #2, #3, #4, #5, #6, #7, #12, #13, #14, #40, #48]
Methods:
    $root.init_root()
    $root.notify_ancestors(event_name, [rest])
    $root.initialize()
    $root.uninitialize()
    $root.change_parents(parents)
    $root.chparents(parents)
    $root.will_inherit(obj)
    $root.name()
    $root.name_str()
    $root.owners()
    $root.is_owned_by(obj)
    $root.public()
    $root.fertile()
    $root.set_fertile(val)
    $root.set_name(new_name)
    $root.set_public(val)
    $root.set_owners(owners_arg)
    $root.add_owner(obj)
    $root.del_owner(obj)
    $root.spawn([suffix])
    $root.destroy()
    $root.add_parameter(name)
    $root.parameters()
    $root.del_parameter(name)
    $root.del_method(name)
    $root.methods()
    $root.parents()
    $root.children()
    $root.ancestors()
    $root.find_method(name)
    $root.find_next_method(name, after)
    $root.list_method(name)
    $root.compile(code, name)
    $root.show()
    $root.has_ancestor(obj)
    $root.eval(code, [dest])
    $root.implements(interface)
    $root.data()
    $root.all_children()
    $root.method_args(name)
---
$sys:
Child of: [#1]
Children: []
Methods:
    $sys.start_core()
    $sys._notify_all_objects(event_name)
    $sys.validate_core()
    $sys.log_tb(context, tb, [notes])
    $sys.startup(args)
    $sys.new_connection()
    $sys.doing_poll()
    $sys.set_doing_poll(s)
    $sys.new_user_class()
    $sys.set_new_user_class(obj)
    $sys.create_user(name, password)
    $sys.connection_starting()
    $sys.admins()
    $sys.is_admin(obj)
    $sys.binary_dump()
    $sys.text_dump()
    $sys.shutdown()
    $sys.change_sender_parents(parents)
    $sys.spawn_sender(suffix, owner)
    $sys.create_object(parents, name, owner)
    $sys.destroy_sender()
    $sys.remote_verb_templates()
    $sys.new_remote_template(template)
    $sys.removed_remote_template(template)
    $sys.user_going_away()
    $sys.log(str)
    $sys.connect([args])
    $sys.heartbeat()
    $sys.do_backup()
    $sys.schedule_task(time, method, args)
    $sys.remove_first_task()
    $sys.ps()
    $sys.backup_interval()
    $sys.set_backup_interval(val)
    $sys.sender_data()
    $sys.starting_room()
    $sys.set_starting_room(obj)
    $sys.exit_starting_room()
    $sys.set_exit_starting_room(obj)
    $sys.assign_name(name)
    $sys.deassign_name(name)
    $sys.new_admin()
    $sys.admin_going_away()
    $sys.bind(port, listener)
    $sys.unbind(port)
    $sys.obj_data(o)
---
