path = require 'path'

mangle = (moduleName) ->
  moduleName.replace /[^a-zA-Z0-9_](.)/g, ([fullMatch, firstMatch]) -> firstMatch.toUpperCase()

initialized = false

initializer = (opts = {}) ->
  opts.mangle ?= true

  if initialized
    return module.exports

  initialized = true

  baseDir = opts.baseDir or path.resolve __dirname, '..'
  packageFile = opts.packageFile or "package.json"
  packageFilePath = path.resolve baseDir, packageFile

  {dependencies} = require packageFilePath

  for name of dependencies when name isnt 'all'
    mangleName = name

    if opts.mangle
      mangledName = mangle name

    if module.exports[mangledName]
      throw new Error "Namespace conflict for '#{name}'#{
        if mangledName
          " (mangled to #{mangledName})"
        else
          ""
      }"

    module.exports[mangledName] = require name

  module.exports.all =
    comment: """
      I require everything listed in ../package.json, and
      export it as a dictionary.

      For example, imagine a project with this file structure:

          index.js containing
            pkgs = (require 'all')()
            console.log pkgs.somePackage

          package.json containing
            "dependencies": { "some-package", ... }

          node_modules/
            some-package/
              index.js
                module.exports = "That is SOME package!"

      Running the top level file would output "That is SOME package!"
    """

  module.exports


proxy = new Proxy initializer,
  get: (propname) ->
    initializer()

    initializer[propname]

  set: (propname, value) ->
    initializer()

    initializer[propname] = value


module.exports = proxy
