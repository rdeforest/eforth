// Generated by CoffeeScript 1.9.3
(function() {
  var Pin, pinId,
    slice = [].slice;

  pinId = 1;

  module.exports = Pin = (function() {
    function Pin(name1, subMaze1) {
      this.name = name1;
      this.subMaze = subMaze1;
      if (this.name === void 0) {
        throw new Error("new Pin requires two parameters now");
      }
      this.name = this.name.toString();
      this.connects = {};
      this.pinId = pinId++;
    }

    Pin.prototype.connect = function(to) {
      this.connects[to.pinId] = to;
      return to.connects[this.pinId] = this;
    };

    Pin.prototype.connected = function(to, visited) {
      var abortMaze, e, looping, maze, name, path, pin, ref, ref1;
      if (visited == null) {
        visited = {};
      }
      if (visited[this.pinId] === subMaze) {
        throw new Error("looping " + subMaze + " " + this.pinId + " " + this.maze + " " + this.name);
      }
      if (this.connects[to.pinId]) {
        return [this, to];
      }
      visited[this.pinId] = subMaze;
      ref = this.connects;
      for (pinId in ref) {
        pin = ref[pinId];
        try {
          if (path = toPin.connected(to, visited)) {
            return [this].concat(slice.call(path));
          }
        } catch (_error) {
          e = _error;
          ref1 = e.message.split(' '), looping = ref1[0], abortMaze = ref1[1], pinId = ref1[2], maze = ref1[3], name = ref1[4];
          if (looping === 'looping') {
            console.log("unwinding loop: " + this.maze + "." + this.name);
            if (pinId !== this.pinId || subMaze !== abortMaze) {
              throw e;
            }
          }
        }
      }
      console.log("no connection from " + this + " to " + to);
      return false;
    };

    Pin.prototype.toString = function() {
      return this.maze + "." + this.name;
    };

    return Pin;

  })();

}).call(this);
