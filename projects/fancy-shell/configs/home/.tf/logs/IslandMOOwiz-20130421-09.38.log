Welcome to IslandMOO

Have a pleasant visit.
*** Connected ***
#$#mcp version: 2.1 to: 2.1
The Note Editor

Do a 'look' to get the list of commands, or 'help' for assistance.

Last connected Sun Apr 21 09:25:53 2013 PDT from localhost
Before going anywhere, you might want to describe yourself; type `help describe' for information.
#$#mcp-negotiate-can 154499138 package: mcp-negotiate min-version: 1.0 max-version: 2.0
#$#mcp-negotiate-can 154499138 package: mcp-cord min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-can 154499138 package: dns-org-mud-moo-simpleedit min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-end 154499138
The Note Editor
Commands:

say         <text>                      w*hat       
emote       <text>                      mode        [string|list]
lis*t       [<range>] [nonum]           e*dit       <note>
ins*ert     [<ins>] ["<text>]           save        [<note>]
n*ext,p*rev [n] ["<text>]               abort       
enter                                   q*uit,done,pause 
del*ete     [<range>]                   
f*ind       /<str>[/[c][<range>]]       
s*ubst      /<str1>/<str2>[/[g][c][<range>]]
m*ove,c*opy [<range>] to <ins>          
j,joinl     [<range>]                   
fill        [<range>] [@<col>]          

----  Do `help <cmdname>' for help with a given command.  ----

  <ins> ::= $ (the end) | [^]n (above line n) | _n (below line n) | . (current)
<range> ::= <lin> | <lin>-<lin> | from <lin> | to <lin> | from <lin> to <lin>
  <lin> ::= n | [n]$ (n from the end) | [n]_ (n before .) | [n]^ (n after .)
`help insert' and `help ranges' describe these in detail.
The Northern Entrance
You see nothing special.
Delegates handle work for their delegators. They know what verbs they provide and register them with their delegators when they are added. They know what properties they need and register those as well. They know how well they can handle tasks. They handle those tasks.
You drop the Generic Table.
You are empty-handed.
You now have vase with object number #281 and parent generic thing (#5).
You put the vase in the Generic Table.
You see nothing special.
Contents:
  a vase
@integrate_room table isn't set.
@integrate_player table isn't set.
@integrate_container table isn't set.
@in table is "in"
@put_fail table is "You can't put %dd %tx{in} that."
@remove_fail table is "You can't remove that."
@remove table is "%Nd %n:(removes) %di from %id."
@put table is "%Nd %n:(puts) %dd %tx{in} %id."
@empty table is "%Ts %t:(is) empty."
@integrate_sep table is "  "
You set the "in" message of the Generic Table (#280).
You see no "vase" here.
You remove a vase from the Generic Table.
You put the vase on the Generic Table.
You remove a vase from the Generic Table.
The Northern Entrance
You see nothing special.
You see a Generic Table here.
Crag arrives from the North Vestibule.
Object #2 does not define that verb, but its ancestor #6 does.
Last modified Fri Jun 11 20:53:16 2004 PDT by Xplat (#4014) (on Waterpoint).
#6:"home" none none none
 1:  start = this.location;
 2:  home = this.home;
 3:  if (start == home)
 4:    player:tell("You're already home!");
 5:    return;
 6:  elseif (typeof(home) != OBJ)
 7:    player:tell("You've got a weird home, pal.  I've reset it to the default one.");
 8:    this.home = $player_start;
 9:  elseif (!$recycler:valid(home))
10:    player:tell("Oh no!  Your home's been recycled.  Time to look around for a new one.");
11:    this.home = $player_start;
12:  endif
13:  "Lose all followers.  --Doug, 5/4/94";
14:  for p in (this.followers)
15:    p.following = setremove(p.following, this);
16:  endfor
17:  this.followers = {};
18:  home = this.home;
19:  if (!$recycler:valid(start) || !this:walkto(home))
20:    player:tell("You click your heels three times.");
21:    this:moveto(home);
22:    if (!valid(start))
23:    elseif (start == this.location)
24:      start:announce(player:name(), " learns that you can never go home...");
25:    else
26:      start:announce(player:name(), " goes home.");
27:    endif
28:    if (this.location == home)
29:      this.location:announce(player:name(), " comes home.");
30:    elseif (this.location == start)
31:      player:tell("Either home doesn't want you, or you don't really want to go.");
32:    else
33:      player:tell("Wait a minute!  This isn't your home...");
34:      if (valid(this.location))
35:        this.location:announce(player:name(), " arrives, looking quite bewildered.");
36:      endif
37:    endif
38:  endif
    #6:home                     Core-Wizard (#184)   r d    none none none
-------------------------------- finished ---------------------------------
This room has no conventional exits.
Exit from Northern Entrance (#267) to North Vestibule (#70) via {"south"} created with id #283.
-----
@DIG
====

Syntax:  @dig <exit-spec> to <new-room-names>
         @dig <exit-spec> to <old-room-object-number>

This is the basic building tool.  It creates an exit leading from your current location to another room, and optionally another exit leading back.  The destination room may already exist, or it may be created by the @dig command.

An <exit-spec> has one of the following two forms:
        <names>
        <names>|<names>
where the first form is used when you only want to create one exit, from your current room to the destination room, and the second form when you also want an exit back.

The <names> piece is just a list of names for the exit, as described in `help @rename':
        <name-and-alias>,<alias>,...,<alias> [preferred]
        <name>:<alias>,...,<alias>           [not preferred]
These are the names of the commands people can type to use the exit.  It is usually a good idea to include explicitly the standard abbreviations for direction names (e.g., 'n' for 'north', 'se' for 'southeast', etc.).  DO NOT put spaces in the names of exits; they are useless in MOO.

If you give an object number for the indirect object of the command (<old-room-object-number>), then that object will be used as the destination room.  Otherwise, that part of the command is another set of names and aliases, which will be used to create a new room.

NOTE: You must own the room at one end or the other of the exits you create.  If you own both, everything is fine.  If you own only one end, then after creating the exits you should write down their object numbers.  You must then get the owner of the other room to use @add-exit and @add-entrance to link your new exits to their room.

You can determine what objects will be used as the parents of new exits and rooms that @dig creates by setting your building options:
    @options building room=<parent class>
and
    @options building exit=<parent class>
will set your defaults.  You can also specify "-room" or "-exit" to use the global defaults ($room and $exit).

Examples:

    @dig north,n to "The North Pole"
creates a new room and also an exit linking the player's current location to the new room; players would say either 'north' or 'n' to get from here to the new room.  No way to get back from that room is created.

    @dig west,w|east,e,out to "The Department of Auto-Musicology"
creates a new room and two exits, one taking players from here to the new room (via the commands 'west' or 'w') and one taking them from the new room to here (via 'east', 'e', or 'out').

    @dig up,u to #7164
creates an exit leading from the player's current room to #7164, which must be an existing room.

South (#283) leads to the North Vestibule (#70) via {south}.
Alias "s" added to south(#283).
Aliases for south(#283) are now {"south", "s"}
=> {#283}
Line 1:  Unknown built-in function: rand
1 error.
=> 2
=> 8
-----
RANDOM()
========

Syntax:  random ([int <mod>])   => int

<mod> must be a positive integer; otherwise, `E_INVARG' is raised.  An integer is chosen randomly from the range `[1..<mod>]' and returned.  If <mod> is not provided, it defaults to the largest MOO integer, 2147483647.

generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
    #7:recycle                  Core-Wizard (#184)   rxd    this none this
    #7:"leave_msg oleave_msg arrive_msg oarrive_msg nogo_msg onogo_msg no_one_msg" Core-Wizard (#184) rxd this none this
    #7:set_name                 Core-Wizard (#184)   rxd    this none this
    #7:set_aliases              Core-Wizard (#184)   rxd    this none this
    #7:defaulting_oleave_msg    Core-Wizard (#184)   rxd    this none this
    #7:moveto                   Core-Wizard (#184)   rxd    this none this
    #7:examine_key              Core-Wizard (#184)   rxd    this none this
    #7:substitute               Core-Wizard (#184)   rxd    this none this
    #7:dest_who                 Core-Wizard (#184)   rxd    this none this
    #7:dest_contents            Core-Wizard (#184)   rxd    this none this
    #7:dest_description         Core-Wizard (#184)   rxd    this none this
    #7:set_message              Core-Wizard (#184)   rxd    this none this
    #7:set_description          Core-Wizard (#184)   rxd    this none this
    #7:invoke                   Core-Wizard (#184)   rxd    this none this
    #7:integrate_in             Core-Wizard (#184)   rxd    this none this
    #7:"direction sub_direction" unknown hacker (#35) rxd   this none this
    #7:description              Core-Wizard (#184)   rxd    this none this
    #7:sub_who                  Core-Wizard (#184)   rxd    this none this
    #7:move                     Core-Wizard (#184)   rxd    this none this
    #7:sweep_for_followers      Core-Wizard (#184)   rxd    this none this
    #7:obvious                  unknown hacker (#35) rxd    this none this
    #7:defaulting_oarrive_msg   unknown hacker (#35) rxd    this none this
    #7:integrate_room_msg       Core-Wizard (#184)   rxd    this none this
    #7:dependents_event_move_by_exit_* Core-Wizard (#184) rxd this none this
    #7:"other_side obj_other_side" Core-Wizard (#184) rxd   this none this
    #7:set_walking_cost         unknown hacker (#35) rxd    this none this
    #7:walking_cost             unknown hacker (#35) rxd    this none this
    #7:"obj_dest obj_source"    unknown hacker (#35) rxd    this none this
    #7:"moddir_d moddir_i"      unknown hacker (#35) rxd    this none this
    #7:moddir_*                 unknown hacker (#35) rxd    this none this
    #7:through_msg              Core-Wizard (#184)   rxd    this none this
    #7:where_are_you            Core-Wizard (#184)   rxd    this none this
    #7:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Crag drops a microphone.
Crag goes south.
You see no "crag" here.
The microphone disappears suddenly for parts unknown, moved by Wizard.
Moved.
Crag arrives from the North Vestibule.
Crag goes south.
-----
GENERAL INFORMATION ON $LIST_UTILS[1]
=====================================

append            (list,list,..) => result of concatenating the given lists
flatten           (list of lists)=> list of all non-list elements
reverse           (list)         => reversed list
remove_duplicates (list)         => list with all duplicates removed
compress          (list)         => list with consecutive duplicates removed
setremove_all     (list,elt)     => list with all occurrences of elt removed
find_insert       (sortedlist,e) => index of first element > e in sortedlist
sort              (list[,keys])  => sorted list

make              (n[,e])        => list of n copies of e
range             (m,n)          => {m,m+1,...,n}

arrayset   (list,val,i[,j,k...]) => array modified so that list[i][j][k]==val

-- Mapping functions (take a list and do something to each element):

map_prop ({o...},prop)              => list of o.(prop)            for all o
map_verb ({o...},verb[,args)        => list of o:(verb)(@args)     for all o
map_arg  ([n,]obj,verb,{a...},args) => list of obj:(verb)(a,@args) for all a

-- Association list functions --

An association list (alist) is a list of pairs (2-element lists), though the following functions have been generalized for lists of n-tuples (n-element lists).  In each case i defaults to 1.

make_alist      (lists[,pad]) => alist from list of parallel lists
assoc        (targ,alist[,i]) => 1st tuple in alist whose i-th element is targ
iassoc       (targ,alist[,i]) => index of same.
assoc_prefix (targ,alist[,i]) => ... whose i-th element has targ as a prefix
iassoc_prefix(targ,alist[,i]) => index of same.
slice             (alist[,i]) => list of i-th elements
sort_alist        (alist[,i]) => alist sorted on i-th elements.

Verb added [40] (39).
list utilities (#49)   generic utilities (#146)   Abstract class (#254)   root class (#1)
The generic utilities(#146) has 23 kids.
Generic BigList Utilities (#13)   wizard utilities (#24)   math utilities (#26)   set utilities (#27)   sequence utilities (#32)   gender utilities (#38)   time utilities (#39)   object utilities (#47)   lock utilities (#48)   list utilities (#49)   command utilities (#50)   code utilities (#53)   permissions utilities (#130)   building utilities (#19)   string utilities (#18)   English Utilities (#72)   integration utils (#74)   Name Utilities (#177)   Parsing Utilities (#117)   walking utils (#182)   room matching utilities (#190)   Generic Quota Utils Parent (#88)   Group Utilities (#248)
-----
HELP ON THE SET UTILITIES
=========================

No help found.

set utilities (#27) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #27:union                    unknown hacker (#35) rxd    this none this
   #27:intersection             unknown hacker (#35) rxd    this none this
   #27:diff*erence              unknown hacker (#35) rxd    this none this
   #27:contains                 unknown hacker (#35) rxd    this none this
   #27:"exclusive_or xor"       unknown hacker (#35) rxd    this none this
   #27:"difference_suspended diff_suspended" unknown hacker (#35) rxd this none this
   #27:equals                   unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Searching for core verbs containing the string ":grep" ...

#49:grep_l [+d Core-Wizard (#184)]:  "Usage: $list_utils:grep_l(<strings>,<pattern>[,<delimited>])";
#49:grep_ll [+d Core-Wizard (#184)]:        if (found = $list_utils:grep_l(par, grepstr))
#81:description [+d unknown hacker (#35)]:    if ($list_utils:grep_l(desc, this:name()))
#81:desc_sitting_text [+d unknown hacker (#35)]:    if (what == this && $list_utils:grep_l(desc, this:name()))
#151:look_self [+d unknown hacker (#35)]:  if ($list_utils:grep_l(desc, this:name()))

Total: 5 verbs.
list utilities (#49) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #49:make                     unknown hacker (#35) rxd    this none this
   #49:range                    unknown hacker (#35) rxd    this none this
   #49:map_prop*erty            Core-Wizard (#184)   rxd    this none this
   #49:map_verb                 Core-Wizard (#184)   rx     this none this
   #49:map_arg                  Core-Wizard (#184)   rxd    this none this
   #49:map_builtin              Core-Wizard (#184)   rxd    this none this
   #49:find_insert              unknown hacker (#35) rx     this none this
   #49:remove_duplicates        unknown hacker (#35) rxd    this none this
   #49:arrayset                 unknown hacker (#35) rxd    this none this
   #49:setremove_all            unknown hacker (#35) rxd    this none this
   #49:append                   unknown hacker (#35) rxd    this none this
   #49:reverse                  unknown hacker (#35) rxd    this none this
   #49:_reverse                 unknown hacker (#35) rxd    this none this
   #49:compress                 unknown hacker (#35) rxd    this none this
   #49:sort                     unknown hacker (#35) rxd    this none this
   #49:slice                    unknown hacker (#35) rxd    this none this
   #49:assoc                    unknown hacker (#35) rxd    this none this
   #49:iassoc                   unknown hacker (#35) rxd    this none this
   #49:iassoc_suspended         Core-Wizard (#184)   rxd    this none this
   #49:assoc_prefix             unknown hacker (#35) rxd    this none this
   #49:iassoc_prefix            unknown hacker (#35) rxd    this none this
   #49:iassoc_sorted            unknown hacker (#35) rxd    this none this
   #49:sort_alist               unknown hacker (#35) rxd    this none this
   #49:sort_alist_suspended     Core-Wizard (#184)   rxd    this none this
   #49:randomly_permute         unknown hacker (#35) rxd    this none this
   #49:passoc                   unknown hacker (#35) rxd    this none this
   #49:check_type               unknown hacker (#35) rxd    this none this
   #49:random_permutation       Core-Wizard (#184)   rxd    this none this
   #49:max_length               unknown hacker (#35) rxd    this none this
   #49:any_of                   Core-Wizard (#184)   rxd    this none this
   #49:flatten                  unknown hacker (#35) rxd    this none this
   #49:grep_l                   Core-Wizard (#184)   rxd    this none this
   #49:grep_ll                  Core-Wizard (#184)   rxd    this none this
   #49:slice_suspended          unknown hacker (#35) rxd    this none this
   #49:sort_suspended           Core-Wizard (#184)   rxd    this none this
   #49:make_alist               Core-Wizard (#184)   rxd    this none this
   #49:"longest shortest"       unknown hacker (#35) rxd    this none this
   #49:count                    unknown hacker (#35) rxd    this none this
   #49:map_verb_safe            Core-Wizard (#184)   rxd    this none this
   #49:grep                     Wizard (#2)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
$LIST_UTILS:GREP_L
==================

grep_l -- returns a list of indices into a list of strings representing the locations of the search string in the target list

Usage: $list_utils:grep_l(<strings>,<pattern>[,<delimited>])

       $list_utils:grep_l({"foo", "bar", "baa"},"a")

          => {{2, {2}}, {3, {2, 3}}}

-----
$LIST_UTILS:GREP_LL
===================

grep -- returns a list of indices into a list of list of strings representing the locations of the search string

-----
$LIST_UTILS:GREP
================

(No documentation.)

Verb name changed.
The Verb Editor

Do a 'look' to get the list of commands, or 'help' for assistance.

Now editing #49:"grep_o" this none this.
____
^^^^
That is not a valid command.
The Verb Editor
Commands:

say         <text>                      w*hat       
emote       <text>                      e*dit       <obj>:<verb>
lis*t       [<range>] [nonum]           com*pile    [as <obj>:<verb>]
ins*ert     [<ins>] ["<text>]           abort       
n*ext,p*rev [n] ["<text>]               q*uit,done,pause 
enter                                   
del*ete     [<range>]                   
f*ind       /<str>[/[c][<range>]]       
s*ubst      /<str1>/<str2>[/[g][c][<range>]]
m*ove,c*opy [<range>] to <ins>          
j,joinl     [<range>]                   
fill        [<range>] [@<col>]          

----  Do `help <cmdname>' for help with a given command.  ----

  <ins> ::= $ (the end) | [^]n (above line n) | _n (below line n) | . (current)
<range> ::= <lin> | <lin>-<lin> | from <lin> | to <lin> | from <lin> to <lin>
  <lin> ::= n | [n]$ (n from the end) | [n]_ (n before .) | [n]^ (n after .)
`help insert' and `help ranges' describe these in detail.
The Northern Entrance
You see nothing special.
You see a Generic Table here.
=> {3, 4}
Line 1:  syntax error
1 error.
Line 1:  syntax error
1 error.
=> 0
Crag arrives from the North Vestibule.
Crag goes south.
Crag arrives from the North Vestibule.
Crag goes south.
Crag arrives from the North Vestibule.
Crag goes south.
*** Redirecting connection to new port ***
