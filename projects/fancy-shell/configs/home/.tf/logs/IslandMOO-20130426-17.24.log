Welcome to IslandMOO

Have a pleasant visit.
*** Connected ***
#$#mcp version: 2.1 to: 2.1
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, and a How $staff will notice people rummaging here.
Last connected Fri Apr 26 08:19:11 2013 PDT from localhost
#$#mcp-negotiate-can 579044058 package: mcp-negotiate min-version: 1.0 max-version: 2.0
#$#mcp-negotiate-can 579044058 package: mcp-cord min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-can 579044058 package: dns-org-mud-moo-simpleedit min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-end 579044058
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           North Vestibule               0 seconds                         
stormagnet     East Servant's Passage        45 seconds                        

Total: 2 people, both of whom have been active recently.
You don't know of any way to get from here to the East Servant's Passage.
stormagnet arrives from the Great Hall.
-----
`HELP COPY' AMBIGUOUS
=====================

Sorry, the topic `copy' is ambiguous.  I don't know which of the following topics you mean:

`help @copy'[1]         `help @copy-x'[2]       `help copyright'[3]

-----
@COPY
=====

Syntax:  @copy   <object>:<verb> to [<newobject>][:<newverb>]
         @copy-x <object>:<verb> to [<newobject>][:<newverb>]

Copies the code of the named verb to the new object and verbname.  Permissions, and arguments of the new verb are set to match those of the old verb in the event that the new verb does not already exist.  One of <newobject> or :<newverb> must be supplied.  If no new verbname is given, the old name is retained.  Likewise, <newobject> defaults to <object> if not given.

@copy-x is like @copy but causes any new verb to be created with its x flag reset.

Examples:
  @copy me:verbname to myobject
  @copy me:test_verb to myobject:real_verb
  @copy-x me:verbname to verbname(old)

In general, @copy'ing verbs is a bad idea.  In the vast majority of cases, the desired effect can be accomplished with parenting (i.e., having <object> be an ancestor of <newobject>), which has the advantage that if a verb is updated or fixed, this immediately becomes available to child objects that inherit this verb.  In such a case, copies that were made using @copy have to be tracked down and fixed by hand.

This facility is provided for those rare occasions where one has no choice but to actually copy the verb.  @copy-x is useful for making unusable backup copies of verbcode.

chaise longues (#274) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  Location North Vestibule (#70).
-------------------------------- finished ---------------------------------
chaise longues (#274) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  Location North Vestibule (#70).
 squeeze                 stormagnet (#246)     r c    0
,seats                   stormagnet (#246)     r c    6
,sit_msg                 stormagnet (#246)     r c    {#69, "do", {"name", "p..
 squeeze_msg             stormagnet (#246)     r c    {#69, "do", {"name", "d..
 stand_msg               stormagnet (#246)     r c    {#69, "do", {"name", "d..
 fall_msg                stormagnet (#246)     r c    {#69, "do", {"name", "d..
 shove_msg               stormagnet (#246)     r c    {#69, "do", {"dname", "..
 also_shove_msg          stormagnet (#246)     r c    {#69, "do", {"dname", "..
 nosqueeze_msg           stormagnet (#246)     r c    {#69, "do", "There's no..
,integrate_empty_msg     stormagnet (#246)     r c    {#69, "do", {"name", "t..
 integrate_sitters_msg   stormagnet (#246)     r c    {#69, "do", "  ", {"nam..
 next_to_msg             stormagnet (#246)     r c    {#69, "do", " ", {"noun..
 obvious_seat            stormagnet (#246)     r c    1
 already_sitting_msg     stormagnet (#246)     r c    {#69, "do", "You are al..
 move_next_to_msg        stormagnet (#246)     r c    {#69, "do", {"name", "p..
 help_text               stormagnet (#246)     r c    {"Users can sit on, sho..
,desc_sitting_msg        stormagnet (#246)     r c    {#69, "do"}
 desc_empty_msg          stormagnet (#246)     r c    ""
,sitting                 unknown hack (#35)    r      {}
 empty_msg               stormagnet (#246)     r c    {#69, "do"}
,sitting_msg             stormagnet (#246)     r c    {#69, "do", "lounging"}
 on_msg                  stormagnet (#246)     r c    {#69, "do", "on"}
 desc_along_with_msg     stormagnet (#246)     r c    {#69, "do", "along with"}
 drop_failed_msg         stormagnet (#246)     r c    {#69, "do", "You can't ..
 drop_succeeded_msg      stormagnet (#246)     r c    {#69, "do", "You drop "..
 odrop_failed_msg        stormagnet (#246)     r c    {#69, "do", {"verb", "p..
 odrop_succeeded_msg     stormagnet (#246)     r c    {#69, "do", {"verb", "p..
 otake_succeeded_msg     stormagnet (#246)     r c    {#69, "do", {"verb", "p..
 otake_failed_msg        stormagnet (#246)     r c    ""
 take_succeeded_msg      stormagnet (#246)     r c    {#69, "do", "You take "..
 take_failed_msg         stormagnet (#246)     r c    {#69, "do", "You can't ..
,key                     stormagnet (#246)       c    0
,aliases                 stormagnet (#246)     r c    {"chaise longues", "cha..
,description             stormagnet (#246)     r c    "A low walnut chaise lo..
 visible                 unknown hack (#35)    r      1
,integrate_room_msg      stormagnet (#246)     r c    {#69, "do", {"name", "t..
 integrate_player_msg    stormagnet (#246)     r c    ""
 integrate_container_msg stormagnet (#246)     r c    ""
 unique                  stormagnet (#246)     r c    0
 proper                  stormagnet (#246)     r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
,number                  unknown hack (#35)    r      2
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {2560, 1366989279}
 core_names              stormagnet (#246)     r c    {"$thing", "$furniture"}
-------------------------------- finished ---------------------------------
-----
@DUMP
=====

Syntax:  @dump <object> [with [id=#<id>] [noprops] [noverbs] [create]]

This spills out all the properties and verbs on an object, calling suspend at appropriate intervals.

  o  id=#<id> -- specifies an idnumber to use in place of the object's actual id (for porting to another MOO)
  o  noprops  -- don't show properties.
  o  noverbs  -- don't show verbs.
  o  create   -- indicates that a @create command should be generated and all of the verbs be introduced with @verb rather than @args; the default assumption is that the object already exists and you're just doing this to have a look at it.

You see no "chaise create" here.
@create $furniture named chaise longues:chaise longues,chaise
;#274.("seats") = 6
@sit #274 is "%Nd %n:(lounges) %tx{on} %td"
@integrate_empty #274 is "%Ti sit under the windows."
@desc_sitting #274 is ""
;#274.("sitting") = {}
@sitting #274 is "lounging"
;#274.("key") = 0
;#274.("aliases") = {"chaise longues", "chaise"}
;#274.("description") = "A low walnut chaise longue, upholhstered in a golf fern-figured damask."
@integrate_room #274 is "%Ti sit under the windows."
;#274.("number") = 2
;#274.("offered") = #-1
;#274.("object_size") = {2560, 1366989279}

"***finished***
Category  Command            Used for
--------  -------            --------
edit      @edit-options      the editors
mail      @mail-options      the mail system
who       @who-options       the @who command
misc      @misc-options      assorted preferences
client    @client-options    client capabilities
parse     @parse-options     command parsing
building  @building-options  options for building
list      @list-options      the @list command
display   @display-options   the @display command
eval      @eval-options      the eval command
--------  -------            --------
Current building options:

-room          No default room set, uses $room
-exit          No default exit set, uses $exit
-furnishing    @created objects are carried by you, unlocked
-create-set-co @create doesn't change your current object.
-bi-create     @create/@recycle re-use object numbers.
+create-set-co @create sets your current object to the one created.
@building-option +create-set-co
@create $furniture named chaise longues:chaise longues,chaise
;_.("seats") = 6
@sit _ is "%Nd %n:(lounges) %tx{on} %td"
@integrate_empty _ is "%Ti sit under the windows."
@desc_sitting _ is ""
;_.("sitting") = {}
@sitting _ is "lounging"
;_.("key") = 0
;_.("aliases") = {"chaise longues", "chaise"}
;_.("description") = "A low walnut chaise longue, upholhstered in a golf fern-figured damask."
@integrate_room _ is "%Ti sit under the windows."
;_.("number") = 2
;_.("offered") = #-1
;_.("object_size") = {2560, 1366989279}

"***finished***
You now have chaise longues (aka chaise) with object number #500 and parent generic piece of furniture (#81).
The created object is now your current object.
=> 6
You set the "sit" message of the chaise longues (#500).
You set the "integrate_empty" message of the chaise longues (#500).
You set the "desc_sitting" message of the chaise longues (#500).
=> {}
You set the "sitting" message of the chaise longues (#500).
=> 0
=> {"chaise longues", "chaise"}
=> "A low walnut chaise longue, upholhstered in a golf fern-figured damask."
You set the "integrate_room" message of the chaise longues (#500).
=> 2
=> #-1 <$nothing>
=> {2560, 1366989279}
Carrying:
 some Group Utilities                    a Generic Nesting Decoration
 a MCP parent                            a Generic Delegator
 a Parsing objects                       a Generic Delegate
 a Text generation objects               a New Generic Room
 an Abstract class                       a Room Exit Delegate
 a Generic Pilable Thing                 some chaise longues
 a Generic Pile                          
stormagnet (#246) contains a Generic Wind-Up Toy (#260), a generic rug (#259), a leather couch (#245), a butler's key (#276), a generic bot (#289), a Generic Table (#280), and some chaise longue (#499).
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  Location stormagnet (#246).
-------------------------------- finished ---------------------------------
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  Location stormagnet (#246).
 squeeze                 stormagnet (#246)     r c    0
,seats                   stormagnet (#246)     r c    6
,sit_msg                 stormagnet (#246)     r c    {#69, "do", {"name", "p..
 squeeze_msg             stormagnet (#246)     r c    {#69, "do", {"name", "d..
 stand_msg               stormagnet (#246)     r c    {#69, "do", {"name", "d..
 fall_msg                stormagnet (#246)     r c    {#69, "do", {"name", "d..
 shove_msg               stormagnet (#246)     r c    {#69, "do", {"dname", "..
 also_shove_msg          stormagnet (#246)     r c    {#69, "do", {"dname", "..
 nosqueeze_msg           stormagnet (#246)     r c    {#69, "do", "There's no..
,integrate_empty_msg     stormagnet (#246)     r c    {#69, "do", {"name", "t..
 integrate_sitters_msg   stormagnet (#246)     r c    {#69, "do", "  ", {"nam..
 next_to_msg             stormagnet (#246)     r c    {#69, "do", " ", {"noun..
 obvious_seat            stormagnet (#246)     r c    1
 already_sitting_msg     stormagnet (#246)     r c    {#69, "do", "You are al..
 move_next_to_msg        stormagnet (#246)     r c    {#69, "do", {"name", "p..
 help_text               stormagnet (#246)     r c    {"Users can sit on, sho..
,desc_sitting_msg        stormagnet (#246)     r c    {#69, "do"}
 desc_empty_msg          stormagnet (#246)     r c    ""
,sitting                 unknown hack (#35)    r      {}
 empty_msg               stormagnet (#246)     r c    {#69, "do"}
,sitting_msg             stormagnet (#246)     r c    {#69, "do", "lounging"}
 on_msg                  stormagnet (#246)     r c    {#69, "do", "on"}
 desc_along_with_msg     stormagnet (#246)     r c    {#69, "do", "along with"}
 drop_failed_msg         stormagnet (#246)     r c    {#69, "do", "You can't ..
 drop_succeeded_msg      stormagnet (#246)     r c    {#69, "do", "You drop "..
 odrop_failed_msg        stormagnet (#246)     r c    {#69, "do", {"verb", "p..
 odrop_succeeded_msg     stormagnet (#246)     r c    {#69, "do", {"verb", "p..
 otake_succeeded_msg     stormagnet (#246)     r c    {#69, "do", {"verb", "p..
 otake_failed_msg        stormagnet (#246)     r c    ""
 take_succeeded_msg      stormagnet (#246)     r c    {#69, "do", "You take "..
 take_failed_msg         stormagnet (#246)     r c    {#69, "do", "You can't ..
,key                     stormagnet (#246)       c    0
,aliases                 stormagnet (#246)     r c    {"chaise longue", "chai..
 description             stormagnet (#246)     r c    "A generic piece of fur..
 visible                 unknown hack (#35)    r      1
,integrate_room_msg      stormagnet (#246)     r c    {#69, "do", {"name", "t..
 integrate_player_msg    stormagnet (#246)     r c    ""
 integrate_container_msg stormagnet (#246)     r c    ""
 unique                  stormagnet (#246)     r c    0
 proper                  stormagnet (#246)     r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
,number                  unknown hack (#35)    r      2
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {2560, 1366989279}
 core_names              stormagnet (#246)     r c    {"$thing", "$furniture"}
-------------------------------- finished ---------------------------------
Crag (#243) contains some Group Utilities (#248), a MCP parent (#251), a Parsing objects (#252), a Text generation objects (#253), an Abstract class (#254), a Generic Pilable Thing (#255), a Generic Pile (#242), a Generic Nesting Decoration (#265), a Generic Delegator (#269), a Generic Delegate (#270), a New Generic Room (#271), a Room Exit Delegate (#279), and some chaise longues (#500).
Sure you want to recycle the chaise longues (#500)? [Enter `yes' or `no']
The chaise longues (#500) recycled.
@building-option +create-set-co
@create $furniture named chaise longues:chaise longues,chaise
;_.("seats") = 6
@sit _ is "%Nd %n:(lounges) %tx{on} %td"
@integrate_empty _ is "%Ti sit under the windows."
@desc_sitting _ is ""
;_.("sitting") = {}
@sitting _ is "lounging"
;_.("key") = 0
;_.("aliases") = {"chaise longues", "chaise"}
;_.("description") = "A low walnut chaise longue, upholhstered in a golf fern-figured damask."
@integrate_room _ is "%Ti sit under the windows."
;_.("number") = 2
;_.("offered") = #-1
;_.("object_size") = {2560, 1366989279}

"***finished***
@building-option +create-set-co
@create $furniture named chaise longue:chaise longue,chaise
;_.("seats") = 6
@sit _ is "%Nd %n:(lounges) %tx{on} %td"
@integrate_empty _ is "%Ti sit under the windows."
@desc_sitting _ is ""
;_.("sitting") = {}
@sitting _ is "lounging"
;_.("key") = 0
;_.("aliases") = {"chaise longue", "chaise"}
@integrate_room _ is "%Ti sit under the windows."
;_.("number") = 2
;_.("offered") = #-1
;_.("object_size") = {2560, 1366989279}

"***finished***
Objects owned by stormagnet (from #0 to #500):
  6K #246 stormagnet                *[North Vestibule]
  5K #260 Generic Wind-Up Toy        [stormagnet]
  2K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows            *North Vestibule->Northern Entrance
  1K #267 Northern Entrance         
  1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [stormagnet]
 <1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling           *[generic room]
 <1K #273 timbered ceiling          *[North Vestibule]
  2K #274 chaise longues            *[North Vestibule]
  2K #275 butler's desk             *[North Vestibule]
 <1K #276 butler's key               [stormagnet]
  1K #277 demi-lune table           *[North Vestibule]
  1K #278 silver salver              [demi-lune table]
  1K #284 calling cards              [silver salver]
  1K #285 chandelier                 [timbered ceiling]
  2K #286 porter's chair            *[North Vestibule]
  1K #287 Great Hall                
 <1K #288 south                      *North Vestibule->Great Hall
 <1K #289 generic bot                [stormagnet]
  2K #249 tracery windows            Northern Entrance->*North Vestibule
  1K #292 Northeast Tower           
 <1K #293 east                       Great Hall->Northeast Tower
  1K #294 Northwest Tower           
 <1K #295 west                       Great Hall->Northwest Tower
  1K #296 East Hall                 
 <1K #297 south                      Northeast Tower->East Hall
  1K #298 Atrium                    
 <1K #300 north                      East Hall->Northeast Tower
 <1K #301 west                       Northeast Tower->Great Hall
  1K #302 Atrium                    
 <1K #303 south                      Great Hall->Atrium
  1K #304 West Hall                 
 <1K #305 south                      Northwest Tower->West Hall
 <1K #306 north                      West Hall->Northwest Tower
 <1K #307 east                       West Hall->Atrium
 <1K #308 east                       Northwest Tower->Great Hall
 <1K #309 north                      Great Hall->*North Vestibule
  1K #310 East Foyer                
 <1K #311 east                       East Hall->East Foyer
 <1K #299 west                       East Hall->Atrium
  1K #312 Southeast Tower           
 <1K #313 south                      East Hall->Southeast Tower
 <1K #314 north                      Southeast Tower->East Hall
  1K #315 South Hall                
 <1K #316 west                       Southeast Tower->South Hall
 <1K #317 north                      South Hall->Atrium
  1K #318 South Vestibule           
 <1K #319 south                      South Hall->South Vestibule
 <1K #320 east                       South Hall->Southeast Tower
  1K #321 Southwest Tower           
 <1K #322 west                       South Hall->Southwest Tower
  1K #323 Muscician's Gallery       
 <1K #324 up                         East Hall->Muscician's Gallery
 <1K #325 north                      Atrium->Great Hall
 <1K #326 south                      Atrium->South Hall
 <1K #327 east                       Atrium->East Hall
 <1K #328 west                       Atrium->West Hall
 <1K #329 west                       East Foyer->East Hall
  1K #330 Ballroom                  
 <1K #331 south                      East Foyer->Ballroom
  1K #332 Smoking Room Doorway      
 <1K #333 north1                     East Foyer->Smoking Room Doorwa
  1K #334 Dining Room Doorway       
 <1K #335 north2                     East Foyer->Dining Room Doorway
  1K #336 Drawing Room Doorway      
 <1K #337 north3                     East Foyer->Drawing Room Doorwa
  1K #338 Side Foyer                
 <1K #339 turn corner                East Foyer->Side Foyer
 <1K #340 north                      Side Foyer->East Foyer
 <1K #341 down                       Muscician's Gallery->East Hall
 <1K #342 north                      Southwest Tower->West Hall
 <1K #343 east                       Southwest Tower->South Hall
 <1K #344 north                      South Vestibule->South Hall
 <1K #345 north                      Ballroom->East Foyer
  1K #346 Refreshment Room          
 <1K #347 south1                     Ballroom->Refreshment Room
  1K #348 Card Room                 
 <1K #349 south2                     Ballroom->Card Room
  1K #350 Smoking Room              
 <1K #351 south                      Card Room->Smoking Room
 <1K #352 north                      Card Room->Ballroom
  1K #353 East Servant's Passage    
 <1K #354 east                       Card Room->East Servant's Pass
 <1K #355 north                      Smoking Room->Card Room
 <1K #356 north                      Refreshment Room->Ballroom
  1K #357 Fainting Room             
 <1K #358 south                      Refreshment Room->Fainting Room
 <1K #359 north                      Fainting Room->Refreshment Room
 <1K #360 south                      Smoking Room Doorwa->East Foyer
  1K #361 Smoking Room              
 <1K #362 north                      Smoking Room Doorwa->Smoking Room
 <1K #363 south                      Smoking Room->Smoking Room Doorwa
  1K #364 Dining Room               
 <1K #365 east                       Smoking Room->Dining Room
 <1K #366 west                       Dining Room->Smoking Room
 <1K #367 south                      Dining Room->Dining Room Doorway
  1K #368 Red Drawing Room          
 <1K #369 east                       Dining Room->Red Drawing Room
 <1K #370 north                      Dining Room Doorway->Dining Room
 <1K #371 south                      Dining Room Doorway->East Foyer
 <1K #372 west                       Red Drawing Room->Dining Room
 <1K #373 south                      Red Drawing Room->Drawing Room Doorwa
  1K #374 Blue Drawing Room         
 <1K #375 east                       Red Drawing Room->Blue Drawing Room
 <1K #376 north                      Drawing Room Doorwa->Red Drawing Room
 <1K #377 south                      Drawing Room Doorwa->East Foyer
 <1K #378 west                       Blue Drawing Room->Red Drawing Room
  1K #379 Solarium                  
 <1K #380 east                       Blue Drawing Room->Solarium
  1K #381 Morning Room              
 <1K #382 south                      Blue Drawing Room->Morning Room
 <1K #383 north                      Morning Room->Blue Drawing Room
 <1K #384 east                       Morning Room->Solarium
  1K #385 Breakfast Room            
 <1K #386 south                      Morning Room->Breakfast Room
 <1K #387 north                      Breakfast Room->Morning Room
 <1K #388 east                       Breakfast Room->Solarium
 <1K #389 west1                      Solarium->Blue Drawing Room
 <1K #390 west2                      Solarium->Morning Room
 <1K #391 west3                      Solarium->Breakfast Room
 <1K #392 west4                      Solarium->Breakfast Room
  1K #393 West Foyer                
 <1K #394 west                       West Hall->West Foyer
 <1K #395 east                       West Foyer->West Hall
  1K #396 South Foyer               
 <1K #397 south                      West Foyer->South Foyer
  1K #398 Front Parlour             
  1K #399 n1                         West Foyer->Front Parlour
  1K #400 Music Room                
  1K #401 n2                         West Foyer->Music Room
  1K #402 Green Drawing Room        
  1K #403 n3                         West Foyer->Green Drawing Room
  1K #404 Lower Library Doorway     
  1K #405 south1                     West Foyer->Lower Library Doorw
  1K #406 Billiard Room Doorway     
  1K #407 south2                     West Foyer->Billiard Room Doorw
 <1K #408 south                      Front Parlour->West Foyer
 <1K #409 west                       Front Parlour->Music Room
 <1K #410 south                      Music Room->West Foyer
 <1K #411 east                       Music Room->Front Parlour
 <1K #412 west                       Music Room->Green Drawing Room
 <1K #413 south                      Green Drawing Room->West Foyer
 <1K #414 east                       Green Drawing Room->Music Room
  1K #415 Conservatory              
 <1K #416 west                       Green Drawing Room->Conservatory
  1K #418 northeast                  Conservatory->Green Drawing Room
  1K #417 southeast                  Conservatory->West Foyer
  1K #419 Lower Library             
 <1K #420 south                      Lower Library Doorw->Lower Library
 <1K #421 north                      Lower Library Doorw->West Foyer
  1K #422 West Servant's Passage    
 <1K #423 west                       Lower Library Doorw->West Servant's Pass
 <1K #424 north                      Lower Library->Lower Library Doorw
 <1K #425 east                       West Servant's Pass->Lower Library Doorw
 <1K #426 west                       West Servant's Pass->Billiard Room Doorw
 <1K #427 north                      Billiard Room Doorw->West Foyer
  1K #428 Billiard Room             
 <1K #429 south                      Billiard Room Doorw->Billiard Room
 <1K #430 east                       Billiard Room Doorw->West Servant's Pass
  1K #431 Billiard Room Servant's P 
 <1K #432 west                       Billiard Room Doorw->Billiard Room Serva
 <1K #433 north                      Billiard Room->Billiard Room Doorw
  1K #434 Back Parlour              
 <1K #435 south                      Billiard Room->Back Parlour
 <1K #436 north                      Back Parlour->Billiard Room
  1K #437 Back Parlour Doorway      
 <1K #438 west                       Back Parlour->Back Parlour Doorwa
 <1K #439 north                      Back Parlour Doorwa->Billiard Room Serva
 <1K #440 east                       Back Parlour Doorwa->Back Parlour
 <1K #441 west                       Back Parlour Doorwa->South Foyer
  1K #442 Back Parlour Servant's Pa 
 <1K #443 south                      Back Parlour Doorwa->Back Parlour Servan
 <1K #444 north                      Back Parlour Servan->Back Parlour Doorwa
  1K #446 White Drawing Room Doorwa 
 <1K #447 south                      Back Parlour Servan->White Drawing Room 
  1K #449 White Drawing Room        
 <1K #450 east                       White Drawing Room ->White Drawing Room
 <1K #451 west                       White Drawing Room ->South Foyer
  1K #452 Back Scullery Servant's P 
 <1K #453 south                      White Drawing Room ->Back Scullery Serva
 <1K #454 north                      White Drawing Room ->Back Parlour Servan
 <1K #455 west                       White Drawing Room->White Drawing Room 
 <1K #456 north                      Back Scullery Serva->White Drawing Room 
  1K #457 Back Scullery             
 <1K #458 east                       Back Scullery Serva->Back Scullery
 <1K #459 south                      Billiard Room Serva->Back Parlour Doorwa
 <1K #460 east                       Billiard Room Serva->Billiard Room Doorw
 <1K #461 west                       Back Scullery->South Foyer
  1K #462 Winter Hall               
 <1K #463 south                      South Foyer->Winter Hall
 <1K #464 east                       South Foyer->West Foyer
  1K #465 Dining Room Servant's Pas 
 <1K #466 west                       Dining Room Doorway->Dining Room Servant
  1K #467 Drawing Room Servant's Pa 
 <1K #468 east                       Dining Room Doorway->Drawing Room Servan
 <1K #469 east                       Dining Room Servant->Dining Room Doorway
 <1K #470 west                       Dining Room Servant->Smoking Room Doorwa
 <1K #471 east                       Smoking Room Doorwa->Dining Room Servant
 <1K #472 west                       Drawing Room Servan->Dining Room Doorway
 <1K #473 east                       Drawing Room Servan->Drawing Room Doorwa
 <1K #474 west                       Drawing Room Doorwa->Drawing Room Servan
 <1K #475 east                       Drawing Room Doorwa->East Servant's Pass
 <1K #476 west                       East Servant's Pass->Card Room
 <1K #477 north                      East Servant's Pass->Drawing Room Doorwa
 <1K #478 north                      Winter Hall->South Foyer
 <1K #479 first east                 South Foyer->Back Parlour Doorwa
 <1K #480 second east                South Foyer->White Drawing Room 
  1K #481 Water Closet              
 <1K #482 third east                 South Foyer->Water Closet
 <1K #483 fourth east                South Foyer->Back Scullery
 <1K #484 first west                 South Foyer->Conservatory
  1K #485 Summer Hall               
 <1K #486 second west                South Foyer->Summer Hall
  1K #487 Theater                   
 <1K #488 third west                 South Foyer->Theater
  1K #489 Backstage                 
 <1K #490 fourth west                South Foyer->Backstage
 <1K #491 east                       Backstage->South Foyer
  1K #492 Stage                     
 <1K #493 north                      Backstage->Stage
 <1K #494 south                      Stage->Backstage
 <1K #495 down                       Stage->Theater
 <1K #496 up                         Theater->Stage
 <1K #497 east                       Theater->South Foyer
 <1K #498 east                       Summer Hall->South Foyer
  2K #499 chaise longue              [stormagnet]
  2K #500 chaise longues             [stormagnet]
-- 229 objects.  Total bytes: 252,792.----------------------------------------
chaise longues (#274) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  Location North Vestibule (#70).
-------------------------------- finished ---------------------------------
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  Location stormagnet (#246).
  #499:lounge                   stormagnet (#246)    rxd    this none this
-------------------------------- finished ---------------------------------
stormagnet drops a chaise longue.
   #81:sit                      unknown hacker (#35) rxd    any on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
Last modified Fri Apr 26 18:20:09 2013 PDT by stormagnet (#246).
#499:"lounge" this none this
this:sit(@args);
That is not a valid command.
stormagnet picks up the chaise longue.
Verb arguments changed.
From that distance? Don't stuff about with my chaise longue.
stormagnet drops a chaise longue.
You lounge on the chaise longue.
You stand up from the chaise longue.
=> #499 (chaise longue)
You haven't specified which "here->chaise" you mean.
You haven't specified which "chaise" you mean.
"chaise" is not the name of any player.
"chais" is not the name of any player.
The North Vestibule (#70) contains a brown Persian rug (#257), a detailed painting (#262), a timbered ceiling (#273), some chaise longues (#274), a butler's desk (#275), a demi-lune table (#277), Wind-Up Duck (#261), a microphone (#282), a porter's chair (#286), a How $staff will notice people rummaging (#290), Crag (#243), stormagnet (#246), and a chaise longue (#499).
The generic piece of furniture(#81) has 4 kids.
leather couch (#245)   chaise longues (#274)   porter's chair (#286)   chaise longue (#499)
You lounge on the chaise longues.
You stand up from the chaise longues.
The chaise longue disappears suddenly for parts unknown, moved by stormagnet.
stormagnet lounges on the chaise longues.
Crag | @args #499:lounge none on this
-----
@ARGS
=====

Syntax:  @args  <object>:<verb-name> <dobj> [<prep> [<iobj>]]
         @args  <object>:<verb-name> (<named args>)
         @args# <object>:<verb-number> <dobj> [<prep> [<iobj>]]
         @args# <object>:<verb-number> (<named args>)

Changes the direct object, preposition, and/or indirect object specifiers for the named verb on the named object.  Any specifiers not provided on the command line are not changed.  The direct and indirect object specifiers (<dobj> and <iobj>) must be either 'none', 'this', or 'any'.  The preposition specifier (<prep>) must be either 'none', 'any', or one of the prepositional phrases listed in `help prepositions'[1].

The verb :sit is on   Crag(#243)--generic player(#6)   North Vestibule(#70)--generic room(#3)   chaise longues(#274)--generic piece of furniture(#81)   porter's chair(#286)--generic piece of furniture(#81)   stormagnet(#246)--generic player(#6)
   #81:sit                      unknown hacker (#35) rxd    any on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
    #3:sit                      unknown hacker (#35) rxd    none none none
-------------------------------- finished ---------------------------------
stormagnet says, "...We will use the special arguments "this none this" in our @verb command. This is a special kluge that means this verb is not a command, and cannot be typed at the command line. It also won't show up in @examine commands. This helps to keep down the clutter of @examine, and because this verb is only an internal function, it wouldn't make sense to type as a command line.""
stormagnet stands up from the chaise longues.
stormagnet lounges on the chaise longues.
stormagnet stands up from the chaise longues.
@integrate_room chaise is "%Ti sit under the windows."
@integrate_player chaise isn't set.
@integrate_container chaise isn't set.
@drop_failed chaise is "You can't seem to drop %td here."
@drop_succeeded chaise is "You drop %td."
@odrop_failed chaise is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded chaise is "%n:(drops) %ti."
@otake_succeeded chaise is "%n:(picks) up %td."
@otake_failed chaise isn't set.
@take_succeeded chaise is "You take %td."
@take_failed chaise is "You can't pick up %td."
@empty chaise is ""
@sitting chaise is "lounging"
@on chaise is "on"
@desc_along_with chaise is "along with"
@sit chaise is "%Nd %n:(lounges) %tx{on} %td"
@squeeze chaise is "%Dd %d:(is) squeezed off %td."
@stand chaise is "%Dd %d:(stands) up from %td."
@fall chaise is "%Dd %d:(falls) off %td."
@shove chaise is "%Nd %n:(shoves) %dd off %td!"
@also_shove chaise is "%Nd %n:(takes) %dd with %no."
@nosqueeze chaise is "There's no room %tx{on} %td."
@integrate_empty chaise is "%Ti sit under the windows."
@integrate_sitters chaise is "  %Ni %n:(is) %tx{sitting} %tx{on} %to."
@next_to chaise is " %d'(beside/between) %dd"
@already_sitting chaise is "You are already %tx{sitting} %tx{on} %td."
@move_next_to chaise is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting chaise is ""
@desc_empty chaise isn't set.
stormagnet lounges on the chaise longues.
A delicate flower.
She is awake and looks alert.
Carrying:
 a Generic Wind-Up Toy                   a butler's key
 a generic rug                           a generic bot
 a leather couch                         a Generic Table
   #81:sit                      unknown hacker (#35) rxd    any on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
stormagnet stands up from the chaise longues.
stormagnet lounges on the chaise longues.
[on the chaise longues]
You lounge on the chaise longues beside stormagnet.
stormagnet stands up from the chaise longues.
stormagnet lounges on the chaise longues beside you.
You stand up from the chaise longues.
Category  Command            Used for
--------  -------            --------
edit      @edit-options      the editors
mail      @mail-options      the mail system
who       @who-options       the @who command
misc      @misc-options      assorted preferences
client    @client-options    client capabilities
parse     @parse-options     command parsing
building  @building-options  options for building
list      @list-options      the @list command
display   @display-options   the @display command
eval      @eval-options      the eval command
--------  -------            --------
Current building options:

-room          No default room set, uses $room
-exit          No default exit set, uses $exit
-furnishing    @created objects are carried by you, unlocked
+create-set-co @create sets your current object to the one created.
-bi-create     @create/@recycle re-use object numbers.
-----
@BUILDING-OPTIONS
=================

Usage:  @building-options
        @building-option <option>

These options (see `help options'[1]) allow you to customize your building environment.

The first form displays all of your building options.  The second shows or sets a given option.  Current building options are:

  room=<object> Type of object the @dig command should create.
 !room          Default ($room).

  exit=<object> Type of exit the @dig command should create.
 !exit          Default ($exit).

The @dig command (see `help @dig'[2]) creates rooms and/or exits when you're building.  These two options let you determine what parent classes are used for the objects created.

 +furnishing    @created objects are locked in the room you're in
 -furnishing    @created objects are carried by you, unlocked

By default, when @create makes an object, the object is placed in your inventory.  While this is handy for programming, it's often not what you want when you're furnishing rooms.  If you have this option set, the objects created will be placed in the room you're in, and locked down.

 +create-set-co @create sets your current object to the one created.
 -create-set-co @create doesn't change your current object.

When this option is set, a @create command will set your current object (see `help current-object'[3]) to the newly created object.  This is useful primarily for porting (an object creation script can start with a @create, then refer to _ in the rest of the script), but can also be handy for general creation.

 +bi-create     @create/@recycle call create()/recycle() directly.
 -bi-create     @create/@recycle re-use object numbers.

This option determines whether @create and other commands will use the server's create() and recycle() primitives or the database's $recycle.

Objects owned by Crag (from #0 to #500):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Crag]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
-- 25 objects.  Total bytes: 46,163.------------------------------------------
Your current object is now chaise longues (#500).
Your current object is now vr_root (#291).
chair (#500) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
-------------------------------- finished ---------------------------------
Your current object is now room2 (#271).
Your current object is now delegator (#269).
Your current object is now delegator (#269).
Your current object is now $local.group (#244).
generic group (#244) [ readable ]
  Child of Abstract class (#254).
,key                     Crag (#243)             c    0
,aliases                 Crag (#243)           r c    {"group"}
,description             Crag (#243)           r c    {"Generic Groups implem..
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Crag (#243)           r c    ""
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
,unique                  Crag (#243)           r c    0
 proper                  Crag (#243)           r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {1850, 1366989279}
,core_names              Crag (#243)           r c    {"$root_class", "$local..
-------------------------------- finished ---------------------------------
generic group (#244) [ readable ]
  Child of Abstract class (#254).
-------------------------------- finished ---------------------------------
generic group (#244) [ readable ]
  Child of Abstract class (#254).
-------------------------------- finished ---------------------------------
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
generic player (#6) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
  Location generic room (#3).
.features                unknown hack (#35)    r      {#67, #68}
.previous_connection     Core-Wizard (#184)           0
.mail_lists              Core-Wizard (#184)    r c    {}
.email_address           Core-Wizard (#184)           ""
.last_disconnect_time    Core-Wizard (#184)    r      0
.help                    Core-Wizard (#184)    r c    {#173, #100, #235, #238..
.linetask                unknown hack (#35)    r      {0, 0}
.linesleft               unknown hack (#35)    r      0
.linebuffer              unknown hack (#35)           {}
.pagelen                 unknown hack (#35)    r      0
._mail_task              Core-Wizard (#184)    r c    0
.owned_objects           Quota (#185)          r      {}
.linelen                 unknown hack (#35)    r      -79
.current_folder          Core-Wizard (#184)      c    1
.all_connect_places      Core-Wizard (#184)           {}
.last_connect_place      Core-Wizard (#184)           "?"
.dict                    Core-Wizard (#184)    r c    {}
.messages_going          Core-Wizard (#184)      c    {}
.responsible             Core-Wizard (#184)      c    {}
.lines                   Core-Wizard (#184)      c    20
.page_absent_msg         Core-Wizard (#184)    r c    {#69, "do", {"dname", "..
.page_origin_msg         Core-Wizard (#184)    r c    ""
.page_echo_msg           Core-Wizard (#184)    r c    0
.mail_notify             Core-Wizard (#184)    r c    {}
.mail_forward            Core-Wizard (#184)    r c    {}
.edit_options            Core-Wizard (#184)    r c    {}
.mail_options            Core-Wizard (#184)    r c    {}
.current_message         Core-Wizard (#184)      c    {0, 0}
.messages                Core-Wizard (#184)      c    {}
.last_connect_time       Core-Wizard (#184)    r      0
.ownership_quota         Quota (#185)                 0
.gender                  Core-Wizard (#184)    r c    #158
.home                    unknown hack (#35)    r      #70
.password                Core-Wizard (#184)           "impossible password to..
.gaglist                 Core-Wizard (#184)    r c    {}
.paranoid                Core-Wizard (#184)    r c    0
.spoof_attribution_msg   Core-Wizard (#184)    r c    "     --"
.pronoun_sub_style       Core-Wizard (#184)    r c    #78
.last_player_paged       unknown hack (#35)    r      "Everyman"
.contributed_line        Core-Wizard (#184)    r      ""
.contributed_links       Core-Wizard (#184)    r      {}
.followers               unknown hack (#35)    r      {}
.followable              unknown hack (#35)    r      1
.integrate_sep_msg       Core-Wizard (#184)    r c    "  "
.integration_enabled     Core-Wizard (#184)    r c    1
.jtext_form              Core-Wizard (#184)    r      "linemode"
.focus_object            Core-Wizard (#184)    r      #-1
.misc_options            Core-Wizard (#184)    r c    {{"fstamp", "[ $o:$M $p..
.authentication_key      Core-Wizard (#184)           0
.client_options          Core-Wizard (#184)    r c    {}
.link_shepherd           unknown hack (#35)    r      #-1
.walking_task            unknown hack (#35)    r      0
.temp_brief              Core-Wizard (#184)    r c    0
.jaddress_stack          unknown hack (#35)    r      {}
.total_started           Core-Wizard (#184)           0
.total_connect_time      Core-Wizard (#184)           0
.started_keeping_total   Core-Wizard (#184)           0
.current_object          Core-Wizard (#184)    r      {#0, "#0"}
.current_object_stack    Core-Wizard (#184)    r      {}
.following               unknown hack (#35)    r      {}
.walk_randomness         Core-Wizard (#184)    r      {1, 8}
.client_features         Core-Wizard (#184)    r c    {}
.client_authkey          Core-Wizard (#184)    r c    ""
.client_disfuncs         Core-Wizard (#184)    r c    {}
.client_debug            Core-Wizard (#184)    r c    0
.remote_emote_prefix_msg Core-Wizard (#184)    r c    {#69, "do", "(from ", {..
.who_options             Core-Wizard (#184)    r      {{"columns", {"name", "..
.last_entrance_time      Core-Wizard (#184)    r      768064450
.dozing_msg              Core-Wizard (#184)    r c    {#69, "do", "idling"}
.idle_start_time         Core-Wizard (#184)    r c    0
.idle_msg                Core-Wizard (#184)    r c    {#69, "do", "real life ..
.idle_string             Core-Wizard (#184)    r c    ""
.dozing_string           Core-Wizard (#184)    r c    ""
.doing_string            unknown hack (#35)    r      ""
.doing_msg               Core-Wizard (#184)    r      {#69, "do"}
.disconnect_task         Core-Wizard (#184)    r      0
.last_password_time      Core-Wizard (#184)           0
.last_timestamp          Core-Wizard (#184)    r      830677321
.size_quota              Quota (#185)                 {0, 0, 0, 0}
.shout_msg               Core-Wizard (#184)    r c    {#69, "do", {"name", "p..
.contributed_document    Core-Wizard (#184)           E_NONE
.walking_dest            unknown hack (#35)    r      #-1
.use_do_command          Core-Wizard (#184)    r c    0
.first_connect_time      Core-Wizard (#184)    r      2147483647
.out_of_band_session     unknown hack (#35)    r      #-1
.parse_options           Core-Wizard (#184)    r c    {"guess_object", "repor..
.timezone                unknown hack (#35)    r      #39
.queued_task_limit       Core-Wizard (#184)    r      -1
-------------------------------- finished ---------------------------------
-----
`HELP CURRENT' AMBIGUOUS
========================

Sorry, the topic `current' is ambiguous.  I don't know which of the following topics you mean:

`help current-object'[1]                        `help @current-object'[2]
`help @currentobject'[3]                        

Your current object is $local.group, a generic group (#244).
=> {}
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
.legal_name_regexp       unknown hack (#35)    r      "^[a-z_][a-z0-9_]*$"
.free_addition           unknown hack (#35)    r      0
.group                   Crag (#243)           r      #244
.pile                    Crag (#243)           r      #242
.helpful                 Crag (#243)           r      #250
.pilable                 Crag (#243)           r      #255
.toy                     unknown hack (#35)    r c    #260
.chaise                  stormagnet (#246)     r      #499
.chair                   stormagnet (#246)     r      #500
-------------------------------- finished ---------------------------------
Objects owned by Crag (from #0 to #500):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Crag]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
-- 25 objects.  Total bytes: 46,163.------------------------------------------
Generic Virtual Reality Object (#291) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Generic Virtual Reality Object (#291) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
The Generic Virtual Reality Object(#291) has no kids.
Crag (#243)   generic wizard (#51)   generic programmer (#52)   generic builder (#4)   generic player (#6)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
Generic Virtual Reality Object (#291)   root class (#1)
Parent changed.
North Vestibule (#70)   generic room (#3)   generic containing object (#145)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   root class (#1)
generic thing (#5)   Helpful Object (#250)   root class (#1)
You see nothing special.
Helpful Object (#250) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Helpful Object (#250) [ readable ]
  Child of root class (#1).
  #250:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Searching for verbs   containing the string ":help_text" ...

#30:objectdoc [+d Core-Wizard (#184)]:    return object:help_text();
#91:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#92:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#109:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#111:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#123:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#151:feature [+d unknown hacker (#35)]:  if (typeof(help = feature:help_text()) != LIST)
#173:find_topics [+d unknown hacker (#35)]:  elseif (o:help_text())
#173:get_topic [+d unknown hacker (#35)]:  text = o:help_text();
#238:get_topic [+d unknown hacker (#35)]:  return this:to_jtext(group:help_text());
#250:help_text [+d unknown hacker (#35)]:  "Copied from generic thing (#5):help_text by Crag (#243) Sun Apr 14 23:53:11 2013 PDT";

Total: 11 verbs.
Last modified Sun Apr 14 23:53:11 2013 PDT by Crag (#243).
#250:"help_text" this none this
all_help = `this.help_text ! E_PROPNF' || {};
if (typeof(all_help) == STR)
  all_help = {all_help};
endif
helpless = {};
for vrb in (this:help_verbs(player))
  if (typeof(vrb) == LIST)
    vrb = vrb[2];
    if (space = index(vrb, " "))
      vrb = vrb[1..space - 1];
    endif
    vrb = strsub(vrb, "*", "");
  endif
  if (loc = $object_utils:has_verb(this, vrb))
    $command_utils:suspend_if_needed(0);
    help = $code_utils:verb_documentation(loc[1], vrb);
    if (help)
      msg = verb_info(loc[1], vrb)[3];
      underline = $string_utils:space(length(msg), "=");
      if (all_help)
        // all_help = {@all_help, "", tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {@all_help, "", msg, underline, "", @help};
      else
        // all_help = {tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {msg, underline, "", @help};
      endif
    else
      helpless = {@helpless, vrb};
    endif
  endif
endfor
if (helpless)
  if (all_help)
    all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
  else
    return {tostr("Sorry, but no help is avilable on ", name = this:name(), "(", this, ").", "  Try `examine ", name, "'.")};
  endif
endif
return all_help ? {@all_help, "", "----"} | {};
// Copied from generic thing (#5):help_text by Crag (#243) Sun Apr 14 23:53:11 2013 PDT
Searching for verbs   containing the string ":help_text" ...

#30:objectdoc [+d Core-Wizard (#184)]:    return object:help_text();
#91:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#92:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#109:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#111:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#123:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#151:feature [+d unknown hacker (#35)]:  if (typeof(help = feature:help_text()) != LIST)
#173:find_topics [+d unknown hacker (#35)]:  elseif (o:help_text())
#173:get_topic [+d unknown hacker (#35)]:  text = o:help_text();
#238:get_topic [+d unknown hacker (#35)]:  return this:to_jtext(group:help_text());
#250:help_text [+d unknown hacker (#35)]:  "Copied from generic thing (#5):help_text by Crag (#243) Sun Apr 14 23:53:11 2013 PDT";

Total: 11 verbs.
The Helpful Object(#250) has 7 kids.
generic thing (#5)   network utils (#82)   Registrar (#108)   old FTP (#234)   generic module (#203)   feature object registry (#151)   Recycling Center (#55)
Helpful Object (#250) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Parent changed.
Parent changed.
The Generic Virtual Reality Object(#291) has 2 kids.
generic event dispatching object (#110)   generic thing (#5)
The generic event dispatching object(#110) has 2 kids.
generic exit (#7)   generic containing object (#145)
The generic thing(#5) has 11 kids.
generic note (#9)   generic sittable object (#80)   topic sign (#178)   Generic Pilable Thing (#255)   Generic Wind-Up Toy (#260)   generic rug (#259)   butler's key (#276)   vase (#281)   microphone (#282)   chandelier (#285)   generic bot (#289)
Objects owned by Crag (from #0 to #500):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Crag]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
-- 25 objects.  Total bytes: 46,163.------------------------------------------
Generic Virtual Reality Object (#291) [ readable ]
  Child of Helpful Object (#250).
-------------------------------- finished ---------------------------------
The verb :pile is on   Generic Pilable Thing(#255)   Generic Pile(#242)
Your current object is now a Generic Pilable Thing (#255).
,core_names              Crag (#243)           r c    {"$thing", "$local.pilable"}
-------------------------------- finished ---------------------------------
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:core_objects this none this" name: "MOO verb: #243:core_objects this none this" type: moo-code content*: "" _data-tag: 67694542851
#$#* 67694542851 content: // Find all objects with core names (like $local)
#$#* 67694542851 content: o = {@args, #0}[1];
#$#* 67694542851 content: pfx = {@args, "$", "$"}[2];
#$#* 67694542851 content: seen = {@args, {}, {}, {}}[3];
#$#* 67694542851 content: for p in (properties(o))
#$#* 67694542851 content:   v = o.(p);
#$#* 67694542851 content:   if (typeof(v) == OBJ && valid(v) && !(v in seen))
#$#* 67694542851 content:     seen = {@seen, v};
#$#* 67694542851 content:     name = pfx + p;
#$#* 67694542851 content:     player:tell(pfx + p + " => " + v:name_and_number());
#$#* 67694542851 content:     if (!(name in v.core_names))
#$#* 67694542851 content:       v.core_names = {@v.core_names, name};
#$#* 67694542851 content:     endif
#$#* 67694542851 content:     this:core_objects(v, pfx + p + ".", seen);
#$#* 67694542851 content:   endif
#$#* 67694542851 content: endfor
#$#: 67694542851
0 errors.
Verb programmed.
#243:core_objects, line 5:  Variable not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:core_objects this none this" name: "MOO verb: #243:core_objects this none this" type: moo-code content*: "" _data-tag: 4416081852
#$#* 4416081852 content: // Find all objects with core names (like $local)
#$#* 4416081852 content: {?o = #0, ?pfx = "$", ?seend = {}} = args;
#$#* 4416081852 content: for p in (properties(o))
#$#* 4416081852 content:   v = o.(p);
#$#* 4416081852 content:   if (typeof(v) == OBJ && valid(v) && !(v in seen))
#$#* 4416081852 content:     seen = {@seen, v};
#$#* 4416081852 content:     name = pfx + p;
#$#* 4416081852 content:     player:tell(pfx + p + " => " + v:name_and_number());
#$#* 4416081852 content:     if (!(name in v.core_names))
#$#* 4416081852 content:       v.core_names = {@v.core_names, name};
#$#* 4416081852 content:     endif
#$#* 4416081852 content:     this:core_objects(v, pfx + p + ".", seen);
#$#* 4416081852 content:   endif
#$#* 4416081852 content: endfor
#$#: 4416081852
0 errors.
Verb programmed.
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => North Vestibule (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$lock_utils.player => Crag (#243)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => North Vestibule (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
$jtext.link.browser => Browser Link Tag (#95)
$jtext.root => Tag Root (#91)
$jtext.vgroup => Vgroup Tag (#97)
$jtext.header => Header Tag (#102)
$jtext.title => Title Tag (#96)
$jtext.string => String Tag (#84)
$jtext.list_of_strings => List Of Strings Tag (#86)
$jtext.paragraph => Paragraph Tag (#101)
$jtext.dlist => Definition List Tag (#98)
$jtext.plaintext => Plaintext Tag (#128)
$jtext.list => List Tag (#129)
$jtext.index => Index Tag (#120)
$jtext.itemize => Itemize Tag (#138)
$jtext.itemize_unnumbered => Unnumbered Itemization Tag (#114)
$jtext.itemize_numbered => Numbered Itemization Tag (#125)
$jtext.isindex => ISINDEX Tag (#119)
$jtext.hr => Horizontal Rule Tag (#134)
$feature_help => feature object help database (#100)
$jaddress => Jaddress Dispatcher (#111)
$jaddress.root => Address Root (#109)
$jaddress.help => Help Address (#131)
$jaddress.browser_object => Browser Object Address (#90)
$jaddress.note => Note Address (#118)
$jaddress.browser_verb => Browser Verb Address (#143)
$jaddress.browser_inherited_properties => Browser Inherited Properties Address (#144)
$jaddress.resolved_help => Resolved Help Address (#172)
$misc_options => Miscellaneous Options (#112)
$client_options => Client Options (#116)
$building_options => building options (#122)
$it => it (#154)
$furniture => generic piece of furniture (#81)
$sittable => generic sittable object (#80)
$I => I (#160)
$everything => everything (#139)
$all => all (#103)
$admin_group => generic admin group (#163)
$admin_group.leader => Wizard (#2)
$steering_committee => Steering Committee (#137)
$db_group => DB Group (#148)
$unix_group => Unix Group (#147)
$community_group => Community Group (#165)
$community_group.feature => Community Group Commands (#149)
$tech_group => Tech Group (#164)
$admin_mail_recipient => Generic Administrators Mailing List (#107)
$registrar => Registrar (#108)
$event_dispatcher => generic event dispatching object (#110)
$prog_group => Programming Group (#124)
$openable_container => generic openable container (#8)
$containing_object => generic containing object (#145)
$utils => generic utilities (#146)
$boot_log => Boot-Log (#85)
$help_editor => help text editor (#171)
$object_help => Object Help Database (#173)
$tester => generic testing player (#99)
$failed_help => last resort help database (#127)
$failed_help.help_recipient => Bug-reports (#140)
$who_options => Who Options (#89)
$event_handler => generic event handler (#133)
$eval_options => Eval Options (#136)
$he => he (#156)
$she => she (#157)
$e => e (#158)
$we => we (#159)
$plural_you => you (#161)
$either => s/he (#162)
$splat => *e (#166)
$gender => generic gender object (#64)
$none => none (#167)
$topic => topic sign (#178)
$builder_help => Builder Help (#155)
$name_utils => Name Utilities (#177)
$name_utils.dummy => name-subbing dummy object (#132)
$name_utils.dummy_builder => dummy name builder (#236)
$guest_help => guest help database (#168)
$parse_utils => Parsing Utilities (#117)
$admin => administration (#170)
$core_wizard => Core-Wizard (#184)
$first_wizard => Wizard (#2)
$door => generic door (#121)
$ftp => old FTP (#234)
$quota_utils => Byte Quota Utilities (#174)
$quota_utils.working => Beaker (#256)
$window => generic window (#179)
$server_options => server options (#188)
$walking_utils => walking utils (#182)
$checkpointer => checkpointer (#175)
$startup => startup handler (#189)
$syslog => syslog (#183)
$generic_biglist_home => Generic BigList Resident (#75)
$http => http (#87)
$module => generic module (#203)
$property_farm => generic property farm (#206)
$modules => module registry (#205)
$modules.module => module system module (#202)
$modules.module.obj_sink_player => spam-player sink (#208)
$modules.module.obj_sink_note => generate note sink (#195)
$modules.module.obj_source_generic => generic source (#200)
$modules.module.obj_source_http => http source (#194)
$modules.module.obj_source_player => read() player source (#198)
$modules.module.obj_sink_generic_spam => generic gather-then-spam sink (#199)
$modules.module.obj_sink_generic => generic sink (#207)
$modules.module.obj_generic_source_or_sink => generic source or sink (#196)
$modules.module.obj_ftp_sink => FTP URL sink (#231)
$modules.module.obj_ftp_source => ftp source (#229)
$modules.mcp => MCP 2.1 module (#214)
$modules.mcp.obj_mcp => MCP 2.1 (#213)
$modules.mcp.obj_mcp.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp.session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp.package => generic MCP package (#216)
$modules.mcp.obj_mcp.negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp.registry => MCP package registry (#209)
$modules.mcp.obj_mcp.cord => mcp-cord (#217)
$modules.mcp.obj_mcp_parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp_package => generic MCP package (#216)
$modules.mcp.obj_mcp_negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp_cord => mcp-cord (#217)
$modules.mcp.obj_cord_stub => generic cord stub (#222)
$modules.mcp.obj_type_root => generic cord type (#218)
$modules.mcp.obj_message_dispatcher => generic message dispatch object (#219)
$modules.simpleedit => simpleedit module (#220)
$modules.simpleedit.obj_simpleedit_package => dns-org-mud-moo-simpleedit (#201)
$modules.smtp => SMTP module (#226)
$modules.smtp.obj_smtp => SMTP (#212)
$modules.listeners => listeners module (#228)
$modules.listeners.obj_listener => generic listener (#224)
$modules.listeners.obj_daemon => generic daemon listener (#211)
$modules.listeners.obj_daemon_handler => generic daemon service handler (#210)
$modules.listeners.obj_redlist_daemon => generic daemon listener with flood control (#225)
$modules.core_features => core feature objects (#233)
$modules.core_features.obj_stage_talk => Stage-Talk Feature (#67)
$modules.core_features.obj_thinking => Thinking Feature (#68)
$smtp => SMTP (#212)
$cord => Cord Dispatcher (#223)
$cord.root => generic cord stub (#222)
$cord.type_root => generic cord type (#218)
$mcp => MCP 2.1 (#213)
$mcp.parser => MCP 2.1 parser (#221)
$mcp.session => generic MCP 2.1 session (#204)
$mcp.package => generic MCP package (#216)
$mcp.negotiate => mcp-negotiate (#215)
$mcp.registry => MCP package registry (#209)
$mcp.cord => mcp-cord (#217)
$parse_options => Parsing Options (#191)
$ftp_client => FTP (#230)
$local => Local Namespace (#193)
$local.group => generic group (#244)
$local.pile => Generic Pile (#242)
$local.helpful => Helpful Object (#250)
$local.pilable => Generic Pilable Thing (#255)
$local.toy => Generic Wind-Up Toy (#260)
$local.chaise => chaise longue (#499)
$local.chair => chair (#500)
$building_group => Building Group (#192)
$documentation_group => documentation group (#232)
$room_matching_utils => room matching utilities (#190)
$policy_help => policy help database (#235)
$admin_help => administration group help (#238)
$jhcore_help => JHCore Help DB (#237)
$namebuilder_i => namebuilder_i for #1 (#227)
$namebuilder_d => namebuilder_d for #1 (#239)
$delegator => Generic Delegator (#269)
$delegate => Generic Delegate (#270)
$ceiling => generic ceiling (#272)
$nesting_decoration => Generic Nesting Decoration (#265)
$table => Generic Table (#280)
$bot => generic bot (#289)
#243:core_objects, line 9:  Type mismatch
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:core_objects this none this" name: "MOO verb: #243:core_objects this none this" type: moo-code content*: "" _data-tag: 132270649253
#$#* 132270649253 content: // Find all objects with core names (like $local)
#$#* 132270649253 content: {?o = #0, ?pfx = "$", ?seen = {}} = args;
#$#* 132270649253 content: for p in (properties(o))
#$#* 132270649253 content:   v = o.(p);
#$#* 132270649253 content:   if (typeof(v) == OBJ && valid(v) && !(v in seen))
#$#* 132270649253 content:     seen = {@seen, v};
#$#* 132270649253 content:     name = pfx + p;
#$#* 132270649253 content:     player:tell(pfx + p + " => " + v:name_and_number());
#$#* 132270649253 content:     if (!(name in v.core_names))
#$#* 132270649253 content:       v.core_names = {@v.core_names, name};
#$#* 132270649253 content:     endif
#$#* 132270649253 content:     this:core_objects(v, pfx + p + ".", seen);
#$#* 132270649253 content:   endif
#$#* 132270649253 content: endfor
#$#: 132270649253
0 errors.
Verb programmed.
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => North Vestibule (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$lock_utils.player => Crag (#243)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => North Vestibule (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
$jtext.link.browser => Browser Link Tag (#95)
$jtext.root => Tag Root (#91)
$jtext.vgroup => Vgroup Tag (#97)
$jtext.header => Header Tag (#102)
$jtext.title => Title Tag (#96)
$jtext.string => String Tag (#84)
$jtext.list_of_strings => List Of Strings Tag (#86)
$jtext.paragraph => Paragraph Tag (#101)
$jtext.dlist => Definition List Tag (#98)
$jtext.plaintext => Plaintext Tag (#128)
$jtext.list => List Tag (#129)
$jtext.index => Index Tag (#120)
$jtext.itemize => Itemize Tag (#138)
$jtext.itemize_unnumbered => Unnumbered Itemization Tag (#114)
$jtext.itemize_numbered => Numbered Itemization Tag (#125)
$jtext.isindex => ISINDEX Tag (#119)
$jtext.hr => Horizontal Rule Tag (#134)
$feature_help => feature object help database (#100)
$jaddress => Jaddress Dispatcher (#111)
$jaddress.root => Address Root (#109)
$jaddress.help => Help Address (#131)
$jaddress.browser_object => Browser Object Address (#90)
$jaddress.note => Note Address (#118)
$jaddress.browser_verb => Browser Verb Address (#143)
$jaddress.browser_inherited_properties => Browser Inherited Properties Address (#144)
$jaddress.resolved_help => Resolved Help Address (#172)
$misc_options => Miscellaneous Options (#112)
$client_options => Client Options (#116)
$building_options => building options (#122)
$it => it (#154)
$furniture => generic piece of furniture (#81)
$sittable => generic sittable object (#80)
$I => I (#160)
$everything => everything (#139)
$all => all (#103)
$admin_group => generic admin group (#163)
$admin_group.leader => Wizard (#2)
$steering_committee => Steering Committee (#137)
$db_group => DB Group (#148)
$unix_group => Unix Group (#147)
$community_group => Community Group (#165)
$community_group.feature => Community Group Commands (#149)
$tech_group => Tech Group (#164)
$admin_mail_recipient => Generic Administrators Mailing List (#107)
$registrar => Registrar (#108)
$event_dispatcher => generic event dispatching object (#110)
$prog_group => Programming Group (#124)
$openable_container => generic openable container (#8)
$containing_object => generic containing object (#145)
$utils => generic utilities (#146)
$boot_log => Boot-Log (#85)
$help_editor => help text editor (#171)
$object_help => Object Help Database (#173)
$tester => generic testing player (#99)
$failed_help => last resort help database (#127)
$failed_help.help_recipient => Bug-reports (#140)
$who_options => Who Options (#89)
$event_handler => generic event handler (#133)
$eval_options => Eval Options (#136)
$he => he (#156)
$she => she (#157)
$e => e (#158)
$we => we (#159)
$plural_you => you (#161)
$either => s/he (#162)
$splat => *e (#166)
$gender => generic gender object (#64)
$none => none (#167)
$topic => topic sign (#178)
$builder_help => Builder Help (#155)
$name_utils => Name Utilities (#177)
$name_utils.dummy => name-subbing dummy object (#132)
$name_utils.dummy_builder => dummy name builder (#236)
$guest_help => guest help database (#168)
$parse_utils => Parsing Utilities (#117)
$admin => administration (#170)
$core_wizard => Core-Wizard (#184)
$first_wizard => Wizard (#2)
$door => generic door (#121)
$ftp => old FTP (#234)
$quota_utils => Byte Quota Utilities (#174)
$quota_utils.working => Beaker (#256)
$window => generic window (#179)
$server_options => server options (#188)
$walking_utils => walking utils (#182)
$checkpointer => checkpointer (#175)
$startup => startup handler (#189)
$syslog => syslog (#183)
$generic_biglist_home => Generic BigList Resident (#75)
$http => http (#87)
$module => generic module (#203)
$property_farm => generic property farm (#206)
$modules => module registry (#205)
$modules.module => module system module (#202)
$modules.module.obj_sink_player => spam-player sink (#208)
$modules.module.obj_sink_note => generate note sink (#195)
$modules.module.obj_source_generic => generic source (#200)
$modules.module.obj_source_http => http source (#194)
$modules.module.obj_source_player => read() player source (#198)
$modules.module.obj_sink_generic_spam => generic gather-then-spam sink (#199)
$modules.module.obj_sink_generic => generic sink (#207)
$modules.module.obj_generic_source_or_sink => generic source or sink (#196)
$modules.module.obj_ftp_sink => FTP URL sink (#231)
$modules.module.obj_ftp_source => ftp source (#229)
$modules.mcp => MCP 2.1 module (#214)
$modules.mcp.obj_mcp => MCP 2.1 (#213)
$modules.mcp.obj_mcp.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp.session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp.package => generic MCP package (#216)
$modules.mcp.obj_mcp.negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp.registry => MCP package registry (#209)
$modules.mcp.obj_mcp.cord => mcp-cord (#217)
$modules.mcp.obj_mcp_parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp_package => generic MCP package (#216)
$modules.mcp.obj_mcp_negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp_cord => mcp-cord (#217)
$modules.mcp.obj_cord_stub => generic cord stub (#222)
$modules.mcp.obj_type_root => generic cord type (#218)
$modules.mcp.obj_message_dispatcher => generic message dispatch object (#219)
$modules.simpleedit => simpleedit module (#220)
$modules.simpleedit.obj_simpleedit_package => dns-org-mud-moo-simpleedit (#201)
$modules.smtp => SMTP module (#226)
$modules.smtp.obj_smtp => SMTP (#212)
$modules.listeners => listeners module (#228)
$modules.listeners.obj_listener => generic listener (#224)
$modules.listeners.obj_daemon => generic daemon listener (#211)
$modules.listeners.obj_daemon_handler => generic daemon service handler (#210)
$modules.listeners.obj_redlist_daemon => generic daemon listener with flood control (#225)
$modules.core_features => core feature objects (#233)
$modules.core_features.obj_stage_talk => Stage-Talk Feature (#67)
$modules.core_features.obj_thinking => Thinking Feature (#68)
$smtp => SMTP (#212)
$cord => Cord Dispatcher (#223)
$cord.root => generic cord stub (#222)
$cord.type_root => generic cord type (#218)
$mcp => MCP 2.1 (#213)
$mcp.parser => MCP 2.1 parser (#221)
$mcp.session => generic MCP 2.1 session (#204)
$mcp.package => generic MCP package (#216)
$mcp.negotiate => mcp-negotiate (#215)
$mcp.registry => MCP package registry (#209)
$mcp.cord => mcp-cord (#217)
$parse_options => Parsing Options (#191)
$ftp_client => FTP (#230)
$local => Local Namespace (#193)
$local.group => generic group (#244)
$local.pile => Generic Pile (#242)
$local.helpful => Helpful Object (#250)
$local.pilable => Generic Pilable Thing (#255)
$local.toy => Generic Wind-Up Toy (#260)
$local.chaise => chaise longue (#499)
$local.chair => chair (#500)
$building_group => Building Group (#192)
$documentation_group => documentation group (#232)
$room_matching_utils => room matching utilities (#190)
$policy_help => policy help database (#235)
$admin_help => administration group help (#238)
$jhcore_help => JHCore Help DB (#237)
$namebuilder_i => namebuilder_i for #1 (#227)
$namebuilder_d => namebuilder_d for #1 (#239)
$delegator => Generic Delegator (#269)
$delegate => Generic Delegate (#270)
$ceiling => generic ceiling (#272)
$nesting_decoration => Generic Nesting Decoration (#265)
$table => Generic Table (#280)
$bot => generic bot (#289)
$vr_root => Generic Virtual Reality Object (#291)
$achievement => Generic Achievement (#445)
$chaise => chaise longue (#499)
$chair => chair (#500)
=> 0
=> {"$root_class"}
=> #1 (root class)
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => North Vestibule (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$lock_utils.player => Crag (#243)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => North Vestibule (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
$jtext.link.browser => Browser Link Tag (#95)
$jtext.root => Tag Root (#91)
$jtext.vgroup => Vgroup Tag (#97)
$jtext.header => Header Tag (#102)
$jtext.title => Title Tag (#96)
$jtext.string => String Tag (#84)
$jtext.list_of_strings => List Of Strings Tag (#86)
$jtext.paragraph => Paragraph Tag (#101)
$jtext.dlist => Definition List Tag (#98)
$jtext.plaintext => Plaintext Tag (#128)
$jtext.list => List Tag (#129)
$jtext.index => Index Tag (#120)
$jtext.itemize => Itemize Tag (#138)
$jtext.itemize_unnumbered => Unnumbered Itemization Tag (#114)
$jtext.itemize_numbered => Numbered Itemization Tag (#125)
$jtext.isindex => ISINDEX Tag (#119)
$jtext.hr => Horizontal Rule Tag (#134)
$feature_help => feature object help database (#100)
$jaddress => Jaddress Dispatcher (#111)
$jaddress.root => Address Root (#109)
$jaddress.help => Help Address (#131)
$jaddress.browser_object => Browser Object Address (#90)
$jaddress.note => Note Address (#118)
$jaddress.browser_verb => Browser Verb Address (#143)
$jaddress.browser_inherited_properties => Browser Inherited Properties Address (#144)
$jaddress.resolved_help => Resolved Help Address (#172)
$misc_options => Miscellaneous Options (#112)
$client_options => Client Options (#116)
$building_options => building options (#122)
$it => it (#154)
$furniture => generic piece of furniture (#81)
$sittable => generic sittable object (#80)
$I => I (#160)
$everything => everything (#139)
$all => all (#103)
$admin_group => generic admin group (#163)
$admin_group.leader => Wizard (#2)
$steering_committee => Steering Committee (#137)
$db_group => DB Group (#148)
$unix_group => Unix Group (#147)
$community_group => Community Group (#165)
$community_group.feature => Community Group Commands (#149)
$tech_group => Tech Group (#164)
$admin_mail_recipient => Generic Administrators Mailing List (#107)
$registrar => Registrar (#108)
$event_dispatcher => generic event dispatching object (#110)
$prog_group => Programming Group (#124)
$openable_container => generic openable container (#8)
$containing_object => generic containing object (#145)
$utils => generic utilities (#146)
$boot_log => Boot-Log (#85)
$help_editor => help text editor (#171)
$object_help => Object Help Database (#173)
$tester => generic testing player (#99)
$failed_help => last resort help database (#127)
$failed_help.help_recipient => Bug-reports (#140)
$who_options => Who Options (#89)
$event_handler => generic event handler (#133)
$eval_options => Eval Options (#136)
$he => he (#156)
$she => she (#157)
$e => e (#158)
$we => we (#159)
$plural_you => you (#161)
$either => s/he (#162)
$splat => *e (#166)
$gender => generic gender object (#64)
$none => none (#167)
$topic => topic sign (#178)
$builder_help => Builder Help (#155)
$name_utils => Name Utilities (#177)
$name_utils.dummy => name-subbing dummy object (#132)
$name_utils.dummy_builder => dummy name builder (#236)
$guest_help => guest help database (#168)
$parse_utils => Parsing Utilities (#117)
$admin => administration (#170)
$core_wizard => Core-Wizard (#184)
$first_wizard => Wizard (#2)
$door => generic door (#121)
$ftp => old FTP (#234)
$quota_utils => Byte Quota Utilities (#174)
$quota_utils.working => Beaker (#256)
$window => generic window (#179)
$server_options => server options (#188)
$walking_utils => walking utils (#182)
$checkpointer => checkpointer (#175)
$startup => startup handler (#189)
$syslog => syslog (#183)
$generic_biglist_home => Generic BigList Resident (#75)
$http => http (#87)
$module => generic module (#203)
$property_farm => generic property farm (#206)
$modules => module registry (#205)
$modules.module => module system module (#202)
$modules.module.obj_sink_player => spam-player sink (#208)
$modules.module.obj_sink_note => generate note sink (#195)
$modules.module.obj_source_generic => generic source (#200)
$modules.module.obj_source_http => http source (#194)
$modules.module.obj_source_player => read() player source (#198)
$modules.module.obj_sink_generic_spam => generic gather-then-spam sink (#199)
$modules.module.obj_sink_generic => generic sink (#207)
$modules.module.obj_generic_source_or_sink => generic source or sink (#196)
$modules.module.obj_ftp_sink => FTP URL sink (#231)
$modules.module.obj_ftp_source => ftp source (#229)
$modules.mcp => MCP 2.1 module (#214)
$modules.mcp.obj_mcp => MCP 2.1 (#213)
$modules.mcp.obj_mcp.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp.session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp.package => generic MCP package (#216)
$modules.mcp.obj_mcp.negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp.registry => MCP package registry (#209)
$modules.mcp.obj_mcp.cord => mcp-cord (#217)
$modules.mcp.obj_mcp_parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp_package => generic MCP package (#216)
$modules.mcp.obj_mcp_negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp_cord => mcp-cord (#217)
$modules.mcp.obj_cord_stub => generic cord stub (#222)
$modules.mcp.obj_type_root => generic cord type (#218)
$modules.mcp.obj_message_dispatcher => generic message dispatch object (#219)
$modules.simpleedit => simpleedit module (#220)
$modules.simpleedit.obj_simpleedit_package => dns-org-mud-moo-simpleedit (#201)
$modules.smtp => SMTP module (#226)
$modules.smtp.obj_smtp => SMTP (#212)
$modules.listeners => listeners module (#228)
$modules.listeners.obj_listener => generic listener (#224)
$modules.listeners.obj_daemon => generic daemon listener (#211)
$modules.listeners.obj_daemon_handler => generic daemon service handler (#210)
$modules.listeners.obj_redlist_daemon => generic daemon listener with flood control (#225)
$modules.core_features => core feature objects (#233)
$modules.core_features.obj_stage_talk => Stage-Talk Feature (#67)
$modules.core_features.obj_thinking => Thinking Feature (#68)
$smtp => SMTP (#212)
$cord => Cord Dispatcher (#223)
$cord.root => generic cord stub (#222)
$cord.type_root => generic cord type (#218)
$mcp => MCP 2.1 (#213)
$mcp.parser => MCP 2.1 parser (#221)
$mcp.session => generic MCP 2.1 session (#204)
$mcp.package => generic MCP package (#216)
$mcp.negotiate => mcp-negotiate (#215)
$mcp.registry => MCP package registry (#209)
$mcp.cord => mcp-cord (#217)
$parse_options => Parsing Options (#191)
$ftp_client => FTP (#230)
$local => Local Namespace (#193)
$local.group => generic group (#244)
$local.pile => Generic Pile (#242)
$local.helpful => Helpful Object (#250)
$local.pilable => Generic Pilable Thing (#255)
$local.toy => Generic Wind-Up Toy (#260)
$local.chaise => chaise longue (#499)
$local.chair => chair (#500)
$building_group => Building Group (#192)
$documentation_group => documentation group (#232)
$room_matching_utils => room matching utilities (#190)
$policy_help => policy help database (#235)
$admin_help => administration group help (#238)
$jhcore_help => JHCore Help DB (#237)
$namebuilder_i => namebuilder_i for #1 (#227)
$namebuilder_d => namebuilder_d for #1 (#239)
$delegator => Generic Delegator (#269)
$delegate => Generic Delegate (#270)
$ceiling => generic ceiling (#272)
$nesting_decoration => Generic Nesting Decoration (#265)
$table => Generic Table (#280)
$bot => generic bot (#289)
$vr_root => Generic Virtual Reality Object (#291)
$achievement => Generic Achievement (#445)
$chaise => chaise longue (#499)
$chair => chair (#500)
=> 0
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:core_objects this none this" name: "MOO verb: #243:core_objects this none this" type: moo-code content*: "" _data-tag: 80923683754
#$#* 80923683754 content: // Find all objects with core names (like $local)
#$#* 80923683754 content: {?o = #0, ?pfx = "$", ?seen = {}} = args;
#$#* 80923683754 content: for p in (properties(o))
#$#* 80923683754 content:   v = o.(p);
#$#* 80923683754 content:   if (typeof(v) == OBJ && valid(v) && !(v in seen))
#$#* 80923683754 content:     seen = {@seen, v};
#$#* 80923683754 content:     name = pfx + p;
#$#* 80923683754 content:     player:tell(pfx + p + " => " + v:name_and_number());
#$#* 80923683754 content:     if (typeof(v) != LIST)
#$#* 80923683754 content:       v.core_names = {};
#$#* 80923683754 content:     endif
#$#* 80923683754 content:     if (!(name in v.core_names))
#$#* 80923683754 content:       v.core_names = {@v.core_names, name};
#$#* 80923683754 content:     endif
#$#* 80923683754 content:     this:core_objects(v, pfx + p + ".", seen);
#$#* 80923683754 content:   endif
#$#* 80923683754 content: endfor
#$#: 80923683754
0 errors.
Verb programmed.
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient._mgr => Generic BigList Utilities (#13)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => North Vestibule (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$trig_utils => math utilities (#26)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$generic_editor.help => Editor Help (#40)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$lock_utils.player => Crag (#243)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$player => generic player (#6)
$player.gender => e (#158)
$player.home => North Vestibule (#70)
$player.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player.timezone => time utilities (#39)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => North Vestibule (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$site_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$pronoun_sub.two_letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$language => English Utilities (#72)
$language.here => here (#180)
$language.all => all (#103)
$language.everything => everything (#139)
$language.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
$jtext.link.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root => Link Tag (#104)
$jtext.link.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.preceding => generic preceding link tag (#142)
$jtext.link.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root.root => Link Tag (#104)
#60:get (this == #112), line 8:  Too many verb calls
... called from #6:misc_option client_option who_option parse_option (this == #243), line 4
... called from #6:tell (this == #243), line 21
... called from #243:core_objects, line 9
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #243:core_objects, line 16
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:core_objects this none this" name: "MOO verb: #243:core_objects this none this" type: moo-code content*: "" _data-tag: 2916234555
#$#* 2916234555 content: // Find all objects with core names (like $local)
#$#* 2916234555 content: {?o = #0, ?pfx = "$", ?seen = {}} = args;
#$#* 2916234555 content: for p in (properties(o))
#$#* 2916234555 content:   v = o.(p);
#$#* 2916234555 content:   // if (typeof(v) == OBJ && valid(v) && !(v in seen))
#$#* 2916234555 content:   if (typeof(v) == OBJ && valid(v))
#$#* 2916234555 content:     // seen = {@seen, v};
#$#* 2916234555 content:     name = pfx + p;
#$#* 2916234555 content:     player:tell(pfx + p + " => " + v:name_and_number());
#$#* 2916234555 content:     if (typeof(v) != LIST)
#$#* 2916234555 content:       v.core_names = {};
#$#* 2916234555 content:     endif
#$#* 2916234555 content:     if (!(name in v.core_names))
#$#* 2916234555 content:       v.core_names = {@v.core_names, name};
#$#* 2916234555 content:     endif
#$#* 2916234555 content:     this:core_objects(v, pfx + p + ".", seen);
#$#* 2916234555 content:   endif
#$#* 2916234555 content: endfor
#$#: 2916234555
=> #91 (Tag Root)
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> {"$jtext.root"}
Jtext Dispatcher (#92) [ readable ]
  Owned by J. Text (#176).
  Child of generic property farm (#206).
.hgroup                  J. Text (#176)        r c    #93
.link                    J. Text (#176)        r c    #123
.root                    J. Text (#176)        r c    #91
.vgroup                  J. Text (#176)        r c    #97
.header                  J. Text (#176)        r c    #102
.title                   J. Text (#176)        r c    #96
.string                  J. Text (#176)        r c    #84
.list_of_strings         J. Text (#176)        r c    #86
.paragraph               J. Text (#176)        r c    #101
.dlist                   J. Text (#176)        r c    #98
.plaintext               J. Text (#176)        r c    #128
.list                    J. Text (#176)        r c    #129
.index                   J. Text (#176)        r      #120
.itemize                 J. Text (#176)        r c    #138
.itemize_unnumbered      J. Text (#176)        r c    #114
.itemize_numbered        J. Text (#176)        r c    #125
.isindex                 J. Text (#176)        r c    #119
.hr                      J. Text (#176)        r      #134
-------------------------------- finished ---------------------------------
.hgroup                  J. Text (#176)        r c    #93
.link                    J. Text (#176)        r c    #123
.root                    J. Text (#176)        r c    #91
.vgroup                  J. Text (#176)        r c    #97
.header                  J. Text (#176)        r c    #102
.title                   J. Text (#176)        r c    #96
.string                  J. Text (#176)        r c    #84
.list_of_strings         J. Text (#176)        r c    #86
.paragraph               J. Text (#176)        r c    #101
.dlist                   J. Text (#176)        r c    #98
.plaintext               J. Text (#176)        r c    #128
.list                    J. Text (#176)        r c    #129
.index                   J. Text (#176)        r      #120
.itemize                 J. Text (#176)        r c    #138
.itemize_unnumbered      J. Text (#176)        r c    #114
.itemize_numbered        J. Text (#176)        r c    #125
.isindex                 J. Text (#176)        r c    #119
.hr                      J. Text (#176)        r      #134
-------------------------------- finished ---------------------------------
J. Text (#176) [ readable (player) ]
  Child of generic player (#6).
  Location Limbo (#15).
-------------------------------- finished ---------------------------------
.link                    J. Text (#176)        r c    #123
-------------------------------- finished ---------------------------------
link dispatcher tag (#123) [ readable ]
  Owned by J. Text (#176).
  Child of root class (#1).
.preceding               J. Text (#176)        r c    #142
.root                    J. Text (#176)        r c    #104
.browser                 J. Text (#176)        r c    #95
-------------------------------- finished ---------------------------------
Link Tag (#104) [ readable fertile ]
  Owned by J. Text (#176).
  Child of Tag Root (#91).
.preceding               J. Text (#176)        r c    #142
.root                    J. Text (#176)        r c    #104
.link_type               unknown hack (#35)    r      "root"
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient._mgr => Generic BigList Utilities (#13)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => North Vestibule (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$trig_utils => math utilities (#26)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$generic_editor.help => Editor Help (#40)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$lock_utils.player => Crag (#243)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$player => generic player (#6)
$player.gender => e (#158)
$player.home => North Vestibule (#70)
$player.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player.timezone => time utilities (#39)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => North Vestibule (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$site_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$pronoun_sub.two_letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$language => English Utilities (#72)
$language.here => here (#180)
$language.all => all (#103)
$language.everything => everything (#139)
$language.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
$jtext.link.root.preceding => generic preceding link tag (#142)
$jtext.link.browser => Browser Link Tag (#95)
$jtext.root => Tag Root (#91)
$jtext.vgroup => Vgroup Tag (#97)
$jtext.header => Header Tag (#102)
$jtext.title => Title Tag (#96)
$jtext.string => String Tag (#84)
$jtext.list_of_strings => List Of Strings Tag (#86)
$jtext.paragraph => Paragraph Tag (#101)
$jtext.dlist => Definition List Tag (#98)
$jtext.plaintext => Plaintext Tag (#128)
$jtext.list => List Tag (#129)
$jtext.index => Index Tag (#120)
$jtext.itemize => Itemize Tag (#138)
$jtext.itemize_unnumbered => Unnumbered Itemization Tag (#114)
$jtext.itemize_numbered => Numbered Itemization Tag (#125)
$jtext.isindex => ISINDEX Tag (#119)
$jtext.hr => Horizontal Rule Tag (#134)
$feature_help => feature object help database (#100)
$jaddress => Jaddress Dispatcher (#111)
$jaddress.root => Address Root (#109)
$jaddress.help => Help Address (#131)
$jaddress.help.default_player_class => generic wizard (#51)
$jaddress.browser_object => Browser Object Address (#90)
$jaddress.note => Note Address (#118)
$jaddress.browser_verb => Browser Verb Address (#143)
$jaddress.browser_inherited_properties => Browser Inherited Properties Address (#144)
$jaddress.resolved_help => Resolved Help Address (#172)
$misc_options => Miscellaneous Options (#112)
$client_options => Client Options (#116)
$building_options => building options (#122)
$it => it (#154)
$nobody => nobody (#36)
$furniture => generic piece of furniture (#81)
$sittable => generic sittable object (#80)
$I => I (#160)
$everything => everything (#139)
$all => all (#103)
$admin_group => generic admin group (#163)
$admin_group.leader => Wizard (#2)
$steering_committee => Steering Committee (#137)
$db_group => DB Group (#148)
$unix_group => Unix Group (#147)
$community_group => Community Group (#165)
$community_group.feature => Community Group Commands (#149)
$tech_group => Tech Group (#164)
$admin_mail_recipient => Generic Administrators Mailing List (#107)
$registrar => Registrar (#108)
$event_dispatcher => generic event dispatching object (#110)
$prog_group => Programming Group (#124)
$openable_container => generic openable container (#8)
$containing_object => generic containing object (#145)
$utils => generic utilities (#146)
$biglist_utils => Generic BigList Utilities (#13)
$english_utils => English Utilities (#72)
$english_utils.here => here (#180)
$english_utils.all => all (#103)
$english_utils.everything => everything (#139)
$english_utils.suggestions_recipient => Wizard (#2)
$boot_log => Boot-Log (#85)
$help_editor => help text editor (#171)
$object_help => Object Help Database (#173)
$tester => generic testing player (#99)
$failed_help => last resort help database (#127)
$failed_help.help_recipient => Bug-reports (#140)
$who_options => Who Options (#89)
$who_utils => Who Options (#89)
$event_handler => generic event handler (#133)
$eval_options => Eval Options (#136)
$he => he (#156)
$she => she (#157)
$e => e (#158)
$we => we (#159)
$plural_you => you (#161)
$either => s/he (#162)
$splat => *e (#166)
$gender => generic gender object (#64)
$gender.gender => it (#154)
$neuter => it (#154)
$egotistical => I (#160)
$plural => they (#71)
$royal => we (#159)
$male => he (#156)
$female => she (#157)
$Spivak => e (#158)
$second => you (#34)
$second_plural => you (#161)
$singular => it (#154)
$none => none (#167)
$topic => topic sign (#178)
$builder_help => Builder Help (#155)
$name_utils => Name Utilities (#177)
$name_utils.dummy => name-subbing dummy object (#132)
$name_utils.dummy_builder => dummy name builder (#236)
$guest_help => guest help database (#168)
$parse_utils => Parsing Utilities (#117)
$admin => administration (#170)
$core_wizard => Core-Wizard (#184)
$first_wizard => Wizard (#2)
$door => generic door (#121)
$ftp => old FTP (#234)
$quota_utils => Byte Quota Utilities (#174)
$quota_utils.working => Beaker (#256)
$window => generic window (#179)
$server_options => server options (#188)
$walking_utils => walking utils (#182)
$checkpointer => checkpointer (#175)
$startup => startup handler (#189)
$syslog => syslog (#183)
$generic_biglist_home => Generic BigList Resident (#75)
$generic_biglist_home.mowner => unknown hacker (#35)
$generic_biglist_home._mgr => Generic BigList Utilities (#13)
$http => http (#87)
$module => generic module (#203)
$property_farm => generic property farm (#206)
$modules => module registry (#205)
$modules.module => module system module (#202)
$modules.module.obj_sink_player => spam-player sink (#208)
$modules.module.obj_sink_note => generate note sink (#195)
$modules.module.obj_source_generic => generic source (#200)
$modules.module.obj_source_http => http source (#194)
$modules.module.obj_source_player => read() player source (#198)
$modules.module.obj_sink_generic_spam => generic gather-then-spam sink (#199)
$modules.module.obj_sink_generic => generic sink (#207)
$modules.module.obj_generic_source_or_sink => generic source or sink (#196)
$modules.module.obj_ftp_sink => FTP URL sink (#231)
$modules.module.obj_ftp_source => ftp source (#229)
$modules.module.obj_property_farm => generic property farm (#206)
$modules.mcp => MCP 2.1 module (#214)
$modules.mcp.obj_mcp => MCP 2.1 (#213)
$modules.mcp.obj_mcp.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp.session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp.session.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp.package => generic MCP package (#216)
$modules.mcp.obj_mcp.negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp.registry => MCP package registry (#209)
$modules.mcp.obj_mcp.registry.group => Programming Group (#124)
$modules.mcp.obj_mcp.cord => mcp-cord (#217)
$modules.mcp.obj_mcp_parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp_session.mcp => MCP 2.1 (#213)
$modules.mcp.obj_mcp_session.mcp.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_session.mcp.package => generic MCP package (#216)
$modules.mcp.obj_mcp_session.mcp.negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp_session.mcp.registry => MCP package registry (#209)
$modules.mcp.obj_mcp_session.mcp.registry.group => Programming Group (#124)
$modules.mcp.obj_mcp_session.mcp.cord => mcp-cord (#217)
$modules.mcp.obj_mcp_session.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_package => generic MCP package (#216)
$modules.mcp.obj_mcp_negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp_cord => mcp-cord (#217)
$modules.mcp.obj_cord_stub => generic cord stub (#222)
$modules.mcp.obj_type_root => generic cord type (#218)
$modules.mcp.obj_type_root.cord_class => generic cord stub (#222)
$modules.mcp.obj_message_dispatcher => generic message dispatch object (#219)
$modules.simpleedit => simpleedit module (#220)
$modules.simpleedit.obj_simpleedit_package => dns-org-mud-moo-simpleedit (#201)
$modules.smtp => SMTP module (#226)
$modules.smtp.obj_smtp => SMTP (#212)
$modules.listeners => listeners module (#228)
$modules.listeners.obj_listener => generic listener (#224)
$modules.listeners.obj_daemon => generic daemon listener (#211)
$modules.listeners.obj_daemon_handler => generic daemon service handler (#210)
$modules.listeners.obj_redlist_daemon => generic daemon listener with flood control (#225)
$modules.core_features => core feature objects (#233)
$modules.core_features.obj_stage_talk => Stage-Talk Feature (#67)
$modules.core_features.obj_thinking => Thinking Feature (#68)
$smtp => SMTP (#212)
$cord => Cord Dispatcher (#223)
$cord.root => generic cord stub (#222)
$cord.type_root => generic cord type (#218)
$cord.type_root.cord_class => generic cord stub (#222)
$mcp => MCP 2.1 (#213)
$mcp.parser => MCP 2.1 parser (#221)
$mcp.session => generic MCP 2.1 session (#204)
$mcp.session.parser => MCP 2.1 parser (#221)
$mcp.package => generic MCP package (#216)
$mcp.negotiate => mcp-negotiate (#215)
$mcp.registry => MCP package registry (#209)
$mcp.registry.group => Programming Group (#124)
$mcp.cord => mcp-cord (#217)
$parse_options => Parsing Options (#191)
$ftp_client => FTP (#230)
$local => Local Namespace (#193)
$local.group => generic group (#244)
$local.pile => Generic Pile (#242)
$local.helpful => Helpful Object (#250)
$local.pilable => Generic Pilable Thing (#255)
$local.toy => Generic Wind-Up Toy (#260)
$local.chaise => chaise longue (#499)
$local.chair => chair (#500)
$building_group => Building Group (#192)
$documentation_group => documentation group (#232)
$room_matching_utils => room matching utilities (#190)
$policy_help => policy help database (#235)
$admin_help => administration group help (#238)
$jhcore_help => JHCore Help DB (#237)
$namebuilder_i => namebuilder_i for #1 (#227)
$namebuilder_d => namebuilder_d for #1 (#239)
$root => root class (#1)
$delegator => Generic Delegator (#269)
$delegate => Generic Delegate (#270)
$ceiling => generic ceiling (#272)
$nesting_decoration => Generic Nesting Decoration (#265)
$table => Generic Table (#280)
$bot => generic bot (#289)
$vr_root => Generic Virtual Reality Object (#291)
$achievement => Generic Achievement (#445)
$chaise => chaise longue (#499)
$chair => chair (#500)
=> 0
=> {"$modules.module.obj_property_farm"}
=> {"$root"}
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> #202 (module system module)
.obj_property_farm       Core-Wizard (#184)    r      #206
-------------------------------- finished ---------------------------------
=> {"$root"}
Error programming Crag:core_objects[1](0).
Line 3:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient._mgr => Generic BigList Utilities (#13)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => North Vestibule (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$trig_utils => math utilities (#26)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$generic_editor.help => Editor Help (#40)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$lock_utils.player => Crag (#243)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$player => generic player (#6)
$player.gender => e (#158)
$player.home => North Vestibule (#70)
$player.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player.timezone => time utilities (#39)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => North Vestibule (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$site_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$pronoun_sub.two_letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$language => English Utilities (#72)
$language.here => here (#180)
$language.all => all (#103)
$language.everything => everything (#139)
$language.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
#47:descendants descendents, line 7:  Task ran out of ticks
... called from #47:descendants descendents, line 5
... called from #47:descendants descendents, line 5
... called from #47:descendants descendents, line 5
... called from #47:descendants descendents, line 5
... called from #47:descendants descendents, line 5
... called from #243:core_objects, line 2
... called from #243:core_objects, line 14
... called from #243:core_objects, line 14
... called from #243:core_objects, line 14
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
#47:descendants descendents, line 4:  Task ran out of ticks
... called from #243:core_objects, line 2
... called from #243:core_objects, line 14
... called from #243:core_objects, line 14
... called from #243:core_objects, line 14
... called from #243:core_objects, line 14
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
=> 0
=> {}
=> {"$root", "$root_class"}
=> {}
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
-------------------------------- finished ---------------------------------
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
.legal_name_regexp       unknown hack (#35)    r      "^[a-z_][a-z0-9_]*$"
.free_addition           unknown hack (#35)    r      0
.group                   Crag (#243)           r      #244
.pile                    Crag (#243)           r      #242
.helpful                 Crag (#243)           r      #250
.pilable                 Crag (#243)           r      #255
.toy                     unknown hack (#35)    r c    #260
.chaise                  stormagnet (#246)     r      #499
.chair                   stormagnet (#246)     r      #500
.bed                     stormagnet (#246)     r      #501
-------------------------------- finished ---------------------------------
=> {}
#1:core_names (this == #243), line 11:  Variable not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
#1:core_names (this == #243), line 11:  Variable not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Object #243 does not define that verb, but its ancestor #1 does.
Last modified Mon Apr 22 22:54:24 2013 PDT by Crag (#243).
#1:"core_names" this none this
// :core_names() => list of strings which, when prefixed with $, reference this
//                  object in code
{?node = #0, ?prefix = ""} = {#0, ""};
names = {};
for propname in (properties(node))
  name = prefix + propname;
  value = node.(propname);
  if (value == this)
    names = setadd(names, prefix + propname);
  endif
  if (typeof(v) == OBJ && valid(v))
    for name in (this:core_names(v, name + "."))
      setadd(names, name);
    endfor
  endif
endfor
return names;
0 errors.
Verb programmed.
#1:core_names (this == #243), line 11:  Variable not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Object #243 does not define that verb, but its ancestor #1 does.
Last modified Mon Apr 22 22:54:24 2013 PDT by Crag (#243).
#1:"core_names" this none this
// :core_names() => list of strings which, when prefixed with $, reference this
//                  object in code
{?node = #0, ?prefix = ""} = {#0, ""};
names = {};
for propname in (properties(node))
  name = prefix + propname;
  value = node.(propname);
  if (value == this)
    names = setadd(names, prefix + propname);
  endif
  if (typeof(v) == OBJ && valid(v))
    for name in (this:core_names(v, name + "."))
      setadd(names, name);
    endfor
  endif
endfor
return names;
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:core_names this none this" name: "MOO verb: #243:core_names this none this" type: moo-code content*: "" _data-tag: 49076016056
#$#* 49076016056 content: Crag (#243) does not define a :core_names verb.  The following code is from its ancestor, the root class (#1).
#$#* 49076016056 content: // :core_names() => list of strings which, when prefixed with $, reference this
#$#* 49076016056 content: //                  object in code
#$#* 49076016056 content: {?node = #0, ?prefix = ""} = {#0, ""};
#$#* 49076016056 content: names = {};
#$#* 49076016056 content: for propname in (properties(node))
#$#* 49076016056 content:   name = prefix + propname;
#$#* 49076016056 content:   value = node.(propname);
#$#* 49076016056 content:   if (value == this)
#$#* 49076016056 content:     names = setadd(names, prefix + propname);
#$#* 49076016056 content:   endif
#$#* 49076016056 content:   if (typeof(v) == OBJ && valid(v))
#$#* 49076016056 content:     for name in (this:core_names(v, name + "."))
#$#* 49076016056 content:       setadd(names, name);
#$#* 49076016056 content:     endfor
#$#* 49076016056 content:   endif
#$#* 49076016056 content: endfor
#$#* 49076016056 content: return names;
#$#: 49076016056
Object #243 does not define that verb, but its ancestor #1 does.
Last modified Mon Apr 22 22:54:24 2013 PDT by Crag (#243).
#1:"core_names" this none this
 1:  // :core_names() => list of strings which, when prefixed with $, reference this
 2:  //                  object in code
 3:  {?node = #0, ?prefix = ""} = {#0, ""};
 4:  names = {};
 5:  for propname in (properties(node))
 6:    name = prefix + propname;
 7:    value = node.(propname);
 8:    if (value == this)
 9:      names = setadd(names, prefix + propname);
10:    endif
11:    if (typeof(v) == OBJ && valid(v))
12:      for name in (this:core_names(v, name + "."))
13:        setadd(names, name);
14:      endfor
15:    endif
16:  endfor
17:  return names;
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
-------------------------------- finished ---------------------------------
That object has no verb matching that name + args.
Last modified Fri Apr 26 19:12:02 2013 PDT by Crag (#243).
#243:"core_objects" this none this
// Find all objects with core names (like $local)
{?o = #0, ?pfx = "$", ?seen = {}} = args;
for o in ($object_utils:descendents(#1))
  o.core_names = {};
endfor
for p in (properties(o))
  v = o.(p);
  if (typeof(v) == OBJ && valid(v))
    name = pfx + p;
    player:tell(name + " => " + v:name_and_number());
    if (!(name in v.core_names))
      v.core_names = {@v.core_names, name};
    endif
    if (!(v in seen))
      this:core_objects(v, pfx + p + ".", {@seen, v});
    endif
  endif
endfor
=> 0
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
,core_names              Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:core_objects this none this" name: "MOO verb: #243:core_objects this none this" type: moo-code content*: "" _data-tag: 43464308157
#$#* 43464308157 content: // Find all objects with core names (like $local)
#$#* 43464308157 content: {?o = #0, ?pfx = "$", ?seen = {}} = args;
#$#* 43464308157 content: for o in ($object_utils:descendents(#1))
#$#* 43464308157 content:   o.core_names = {};
#$#* 43464308157 content: endfor
#$#* 43464308157 content: for p in (properties(o))
#$#* 43464308157 content:   v = o.(p);
#$#* 43464308157 content:   if (typeof(v) == OBJ && valid(v))
#$#* 43464308157 content:     name = pfx + p;
#$#* 43464308157 content:     player:tell(name + " => " + v:name_and_number());
#$#* 43464308157 content:     if (!(name in v.core_names))
#$#* 43464308157 content:       v.core_names = {@v.core_names, name};
#$#* 43464308157 content:     endif
#$#* 43464308157 content:     if (!(v in seen))
#$#* 43464308157 content:       this:core_objects(v, pfx + p + ".", {@seen, v});
#$#* 43464308157 content:     endif
#$#* 43464308157 content:   endif
#$#* 43464308157 content: endfor
#$#: 43464308157
0 errors.
Verb programmed.
Last modified Mon Apr 22 22:54:24 2013 PDT by Crag (#243).
#1:"core_names" this none this
// :core_names() => list of strings which, when prefixed with $, reference this
//                  object in code
{?node = #0, ?prefix = ""} = {#0, ""};
names = {};
for propname in (properties(node))
  name = prefix + propname;
  value = node.(propname);
  if (value == this)
    names = setadd(names, prefix + propname);
  endif
  if (typeof(v) == OBJ && valid(v))
    for name in (this:core_names(v, name + "."))
      setadd(names, name);
    endfor
  endif
endfor
return names;
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#1:core_names this none this" name: "MOO verb: #1:core_names this none this" type: moo-code content*: "" _data-tag: 9096858
#$#* 9096858 content: // :core_names() => list of strings which, when prefixed with $, reference this
#$#* 9096858 content: //                  object in code
#$#* 9096858 content: {?node = #0, ?prefix = ""} = {#0, ""};
#$#* 9096858 content: names = {};
#$#* 9096858 content: for propname in (properties(node))
#$#* 9096858 content:   name = prefix + propname;
#$#* 9096858 content:   value = node.(propname);
#$#* 9096858 content:   if (value == this)
#$#* 9096858 content:     names = setadd(names, prefix + propname);
#$#* 9096858 content:   endif
#$#* 9096858 content:   if (typeof(v) == OBJ && valid(v))
#$#* 9096858 content:     for name in (this:core_names(v, name + "."))
#$#* 9096858 content:       setadd(names, name);
#$#* 9096858 content:     endfor
#$#* 9096858 content:   endif
#$#* 9096858 content: endfor
#$#* 9096858 content: return names;
#$#: 9096858
0 errors.
Verb programmed.
=> {}
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:core_objects this none this" name: "MOO verb: #243:core_objects this none this" type: moo-code content*: "" _data-tag: 2224345459
#$#* 2224345459 content: // Find all objects with core names (like $local)
#$#* 2224345459 content: {?o = #0, ?pfx = "$", ?seen = {}} = args;
#$#* 2224345459 content: for o in ($object_utils:descendents(#1))
#$#* 2224345459 content:   o.core_names = {};
#$#* 2224345459 content: endfor
#$#* 2224345459 content: for p in (properties(o))
#$#* 2224345459 content:   v = o.(p);
#$#* 2224345459 content:   if (typeof(v) == OBJ && valid(v))
#$#* 2224345459 content:     name = pfx + p;
#$#* 2224345459 content:     player:tell(name + " => " + v:name_and_number());
#$#* 2224345459 content:     if (!(name in v.core_names))
#$#* 2224345459 content:       v.core_names = {@v.core_names, name};
#$#* 2224345459 content:     endif
#$#* 2224345459 content:     if (!(v in seen))
#$#* 2224345459 content:       this:core_objects(v, pfx + p + ".", {@seen, v});
#$#* 2224345459 content:     endif
#$#* 2224345459 content:   endif
#$#* 2224345459 content: endfor
#$#: 2224345459
Line 1:  syntax error
1 error.
=> {}
-----
`HELP $STRING_UTILS:' NOT FOUND
===============================

Sorry, but no help is available on `$string_utils:'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
GENERAL INFORMATION ON $STRING_UTILS[1]
=======================================

For a complete description of a given verb, do `help $string_utils:verbname'[2]

    Conversion routines:

:char_list    (string)                               => {"a", "b", "c"}
:to_list      (string)                               => {"a", "foo", "bear"}
 (see also :explode, below)

:from_list    (list [,sep])                          => "foo1foo2foo3"
:english_list (str-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
:title_list*c (obj-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
                                                  or => "Foo1, foo2, and foo3"

:[i|d]name[c]_and_number                             => "foo (#123)"
:[i|d]name[c]_list (obj-list, name-args)             => english list of names
                                                        in appropriate style
:[i|d]name[c]_and_number_list(obj-list, name-args)   => same, plus " (#123)"
:names_of     (obj-list)  => "foo1 (#123)   foo2 (#456)   foo3 (#789)"

:to_value       (string)                             => {1, value}
                                                  or => {0, error message}
:prefix_to_value(string)                             => {rest-of-string, value}
                                                  or => {0, error message}
:end_expression (string)                             => index of expression

:from_value[_suspended] (value [,quoteflag [,maxlistdepth]])
                                                     => "{foo1, foo2, foo3}"
:print[_suspended] (value)                           => "{foo1, foo2, foo3}"
:print_truncated   (value, length, suffix)           => "{foo1, fo.."
:print_with_names  (value)                           => "{foo1, foo2 (#123)}"

:english_number(42 [,zero])  => "forty-two"
:english_ordinal(42)         => "forty-second"
:ordinal(42)                 => "42nd"
:group_number(42135 [,sep])  => "42,135"
:from_seconds (num)          => "an hour" or "3 days" or "15 seconds"

:glob_to_regexp("foo*b?r")   => "^foo.*b.r$"
:xglob_to_regexp("f*ba[rz]") => "^f.*ba[rz]$"

    Type checking:

:is_numeric   (string) => return true if string is composed entirely of digits

    String Matching:

:match_string(string, pattern, options) => * wildcard matching
:find_prefix(prefix, string-list)       => list index of element starting
                                           with prefix
:match_stringlist(string, string-list)  => index/$ambiguous_match/$failed_match
:index_delimited(string,target[, case]) => index of delimited string occurrence
:index_all(string, target[, delimited]) => all occurrences of target in string
:next_index(str1, str2, prev[, case])   => index, after index `prev'

    Object Matching (see also $command_utils):

:literal_object(string)                        => object match independent
                                                  of location
:match        (string, [obj-list, prop-name]+) => matching object
:match_player (string-list[,me-object])        => list of matching players
:match_object (string, location)               => default object match
:match_player_or_object(@string-list)          => matching object or player
:match_room   (string)                         => matching room object

    Parsing:

:explode (string,char) -- string => list of words delimited by char
 (see also :to_list, above)
:words   (string)      -- string => list of words (as with command line parser)
:word_start (string)   -- string => list of start-end pairs.
:first_word (string)   -- string => {first word, rest of string} or {}

:parse_command(cmd_line[, player]) -- string => parsed command info

    Pretty printing:

:space         (n/string[,filler])     => n spaces
:left          (string,width[,filler]) => left justified string in field 
:right         (string,width[,filler]) => right justified string in field
:center/re     (string,width[,filler]) => centered string in field
:columnize/se[_suspended](list,n[,width])
                                       => list of strings in n columns
:columnize/se_no_truncate(list,n[,linelen])
                                       => same, but will not truncate items
:columnize/se_with_headers(headers, fields) => columnize, plus headers

    Substitutions

:substitute (string, subst_list [,case])  -- general substitutions.
:substitute_delimited(...)                -- same, but with word boundaries.
:pronoun_sub (string/list[,who[,thing[,location]]])
                                          -- pronoun substitutions.
:pronoun_sub_secure (string[,who[,thing[,location]]],default)
                                          -- substitute and check for names.
:pronoun_quote (string/list/subst_list)   -- quoting for pronoun substitutions.
:regexp_quote(string)                     -- quoting for regexps.

    Miscellaneous string munging:

:trim         (string)       => string with outside whitespace removed.
:triml        (string)       => string with leading whitespace removed.
:trimr        (string)       => string with trailing whitespace removed.
:strip_chars  (string,chars) => string with all chars in `chars' removed.
:strip_all_but(string,chars) => string with all chars not in `chars' removed.
:capitalize/se(string)       => string with first letter capitalized.
:uppercase/lowercase(string) => string with all letters upper or lowercase.
:reverse      (string)       => string, backwards.

:common(string1, string2)    => length of longest common prefix.
:is_uppercase (string)       => true iff no lowercase letters in string
:is_lowercase (string)       => true iff no uppercase letters in string
:nonblank     (string)       => true iff any non-whitespace characters

:connection_hostname(string) => hostname part of connection identifier.

    Conversions to and from common string formats:

:character_to_ascii(char)    => integer ASCII rep of char
:character_to_hex_ascii(char) => two-digit hexadecimal string ASCII rep of char
:ascii_to_character(num)     => character represented in ASCII by num
:hex_ascii_to_character(hex) => ASCII character represented by two-character hexadecimal string hex

    A few useful properties:

alphabet                    => "abcdefghijklmnopqrstuvwxyz"
tab                         => a single tab character

0 errors.
Verb programmed.
=> {}
=> 0
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
Last modified Sat Apr 20 14:44:47 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile = $local.pile:create_pile(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
.pile                    Crag (#243)           r      #242
-------------------------------- finished ---------------------------------
That is not a valid command.
Your current object is now #242.
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  Location Crag (#243).
  #242:pile                     Crag (#243)          r d    any on top of/on/onto/upon this
  #242:create_pile              Crag (#243)          rxd    this none this
  #242:create_pile              Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
That object does not define that verb.
-----
@LIST
=====

Usage:  @list <object>:<verb>
              [with|without parentheses|numbers]
              [<dobj> <prep> <iobj>] | [(<named args>)]
              [all]
              [ranges]
        @list# <object>:<verb-number>
              [with|without parentheses|numbers] [all] [ranges]

Prints out the code for the MOO program associated with the named verb on the named object.  

Normally, the code is shown with each line numbered and with only those parentheses that are necessary to show the meaning of the program.  You can e.g., specify `without numbers' to have the numbers omitted or `with parentheses' to include all parentheses or even `with parentheses without numbers' to do both.

Type `@list $room:@move' to see the code for the `@move' command, or even `@list $prog:@list' to see the code implementing @list itself...

Giving an args (dobj/prep/iobj) specification indicates that verbs whose verb_args do not matching that specification are to be ignored.

The `@list#' form of the command is available for specifying a verb by number, in case you have an object with inaccessible verbs (e.g,. say the 3rd verb is named "*" and you want to view the 4th).  For example

    @list# object:2

lists the second verb on `object'.

Specifying `all', indicates that all verbs on <object> or its ancestors matching the given name (and args specification, if given) should be listed.

One may also specify one or more ranges of the form <number>..<number> to indicate that only particular subranges of the lines of the verb code should be listed.

These may combined in any order, e.g.,

  @list frobule:burfle this in front of any without numbers all

which would be useful if `frobule' had more than one `burfle' verb and we are only interested in those that have `this' `in front of' `any' as its respective dobj/prep/iobj specifiers, and we want to see ALL such verbs on frobule or its ancestors.

#242:"create_pile" ()
That verb has not been programmed.
#242:"create_pile" ()
That verb has not been programmed.
Verb #242:create_pile [3] {this none this} removed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create_pile ()" name: "MOO verb: #242:create_pile ()" type: moo-code content*: "" _data-tag: 38050912160
#$#: 38050912160
That object does not define that verb.
The verb :create is nowhere to be found.
Searching for core verbs containing the string ":create" ...

#10:cr*eate @cr*eate [+d Core-Wizard (#184)]:  elseif (typeof(new = $player_db:create_registered_player(name = check[2], {name}, password, "", "", $new_player_log.autoregistration_player, 0)) != OBJ)
#10:@req*uest req*uest @register register [+d Core-Wizard (#184)]:    "elseif (typeof(new = $player_db:create_registered_player(name = check[2], {name}, $wiz_utils:random_password(), email, \"from $login\", $new_player_log.autoregistration_player, 1)) != OBJ)";
#10:t*est [+d Core-Wizard (#184)]:  elseif (typeof(new = $player_db:create_player(name = $player_db:gensym_name("Tester"), {name}, $tester, $nothing, crypt(password = $wiz_utils:random_password()))) != OBJ)
#24:set_programmer [+d Core-Wizard (#184)]:      "must fork in case this is part of a $login:create.  if :send_message suspeded it would prevent the login from happening";
#24:do_make_guest [+d Core-Wizard (#184)]:  newguest = $player_db:create_player(name, {@aliases, $player_db:gensym_name("guest")}, $guest, $hacker, $guest.password);
#24:do_make_player [-d Core-Wizard (#184)]:    new = $player_db:create_registered_player(name, aliases, password, email, comments, player, sendmail);
#31:@register @request*-character [+d Core-Wizard (#184)]:  elseif (typeof(new = $player_db:create_registered_player(name = check[2], {name}, $wiz_utils:random_password(), address = check[3], "", $new_player_log.autoregistration_player, 1)) == OBJ)
#37:create_registered_player [+d Core-Wizard (#184)]:  elseif (typeof(new = this:create_player(name, aliases, $player_class, $nothing, crypt(password))) != OBJ)
#7:move [+d Core-Wizard (#184)]:    dest = dest[1]:create(listdelete(dest, 1));
#213:initialize_connection [+d Core-Wizard (#184)]:  return this:create_session(who);

Total: 10 verbs.
Last modified Sat Jan 13 14:33:18 2001 PST by Xplat (#4014) (on Waterpoint).
#10:"cr*eate @cr*eate" any none any
if (caller != #0)
  return E_PERM;
  // ... caller isn't :do_login_command()...
elseif (!this:player_creation_enabled(player))
  this:notify_lines(this.registration_string ? this:registration_string() | this:registration_text(this.create_enabled ? "blacklisted" | "create"));
  // ... we've disabled player creation ...
elseif (length(args) != 2)
  notify(player, tostr("Usage:  ", verb, " <new-player-name> <new-password>"));
elseif (!(password = args[2]))
  notify(player, "You must set a password for your player.");
elseif (!(check = $player_db:check_name_request(args[1], $nothing))[1])
  this:notify_lines(check[2]);
elseif (typeof(new = $player_db:create_registered_player(name = check[2], {name}, password, "", "", $new_player_log.autoregistration_player, 0)) != OBJ)
  notify(player, tostr(new));
else
  if ($player_class.programmer)
    $wiz_utils:set_programmer(new, 1);
  endif
  this:record_connection(new);
  return new;
endif
return 0;
The verb :@create is on   Crag(#243)--generic builder(#4)   stormagnet(#246)--generic builder(#4)
    #4:@create                  Core-Wizard (#184)   r d    any any any
-------------------------------- finished ---------------------------------
Last modified Sun Jan  7 10:45:53 2001 PST by Xplat (#4014) (on Waterpoint).
#4:"@create" any any any
if (player != this)
  player:tell("Sorry, you can't do that.");
  return;
endif
set_task_perms(player);
nargs = length(args);
pos = "named" in args;
if (pos <= 1 || pos == nargs)
  pos = "called" in args;
endif
if (pos <= 1 || pos == nargs)
  player:notify("Usage:  @create <parent-class> named [name:]alias,...,alias");
  player:notify("   or:  @create <parent-class> named name-and-alias,alias,...,alias");
  return;
endif
parentstr = $string_utils:from_list(args[1..pos - 1], " ");
namestr = $string_utils:from_list(args[pos + 1..nargs], " ");
parent = player:my_match_object(parentstr);
if (parentstr[1] == "$" && !valid(parent))
  player:notify(tostr("\"", parentstr, "\" does not name an object."));
  return;
elseif ($command_utils:object_match_failed(parent, parentstr))
  return;
endif
object = player:_create(parent);
if (typeof(object) == ERR)
  player:notify(tostr(object));
  return;
endif
object.r = 1;
`move(object, player) ! E_NACC';
$building_utils:set_names(object, namestr);
if (other_names = setremove(object.aliases, object.name))
  aka = " (aka " + $string_utils:english_list(other_names) + ")";
else
  aka = "";
endif
if (player:building_option("furnishing"))
  `object:moveto(this.location) ! E_NACC';
  if ($object_utils:isa(object, $thing))
    object.key = this.location;
    if (object.location == this.location)
      player:notify(tostr("Created ", object.name, aka, " with object number ", object, " and parent ", parent:name(), " (", parent, "), and locked it to ", this.location:dname(), "."));
    else
      player:notify(tostr("Created ", object.name, aka, " with object number ", object, " and parent ", parent:name(), " (", parent, "), and locked it to ", this.location:dname(), ".  (However, it couldn't be moved there.)"));
    endif
  else
    if (object.location == this.location)
      player:notify(tostr("Created ", object.name, aka, " with object number ", object, " and parent ", parent:name(), " (", parent, "), and moved it to ", this.location:dname(), "."));
    else
      player:notify(tostr("Created ", object.name, aka, " with object number ", object, " and parent ", parent:name(), " (", parent, "), but couldn't move it to ", this.location:dname(), "."));
    endif
  endif
else
  player:notify(tostr("You now have ", object.name, aka, " with object number ", object, " and parent ", parent:name(), " (", parent, ")."));
endif
if (this:building_option("create_set_co"))
  co = {object, object.name};
  if (stack = this.current_object_stack)
    stack[length(stack)] = co;
    this:set_current_object_stack(stack);
  endif
  this:set_current_object(co);
  player:tell("The created object is now your current object.");
endif
Object #243 does not define that verb, but its ancestor #4 does.
#4:"_create" this none this
set_task_perms(caller_perms());
if (this:building_option("bi_create"))
  return $quota_utils:bi_create(@args);
else
  return $recycler:(verb)(@args);
endif
    #4:_create                  Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#55:"_create" this none this
// :_create(parent[, owner]) => OBJ or ERR
e = set_task_perms(caller_perms());
if (typeof(e) == ERR)
  return e;
else
  val = this:_recreate(@args);
  return val == E_NONE ? $quota_utils:bi_create(@args) | val;
endif
stormagnet drops a settee.
A generic chaise longue.
Crag . o O ( seti )
You see no "seti" here.
settee (#502) [ readable ]
  Owned by stormagnet (#246).
  Child of chaise longue (#499).
  Location North Vestibule (#70).
-------------------------------- finished ---------------------------------
Last modified Fri Apr 26 19:21:33 2013 PDT by stormagnet (#246).
#499:"lie" none (on top of/on/onto/upon) this
this.sitting = this.sitting + 2;
this:sit(@args);
,sitting                 unknown hacker (#35)  r      {#31, #6, #4, #52, #51}
-------------------------------- finished ---------------------------------
You see no "this" here.
#81:"sit" any (on top of/on/onto/upon) this
if (!valid(caller_perms()) && dobjstr && dobjstr != "down")
  player:tell("You can't do that.");
  return;
endif
if (player in this.sitting)
  player:tell($string_utils:pronoun_sub(this:already_sitting_msg()));
elseif (player == this.location)
  player:tell("Perhaps you should put it down first.");
elseif (player.location != this.location)
  player:tell("From that distance? Don't stuff about with my ", this:name(), ".");
elseif (this.squeeze < 0 && length(this.sitting) >= this.seats)
  player:tell($string_utils:pronoun_sub(this.nosqueeze_msg));
else
  p = random(1 + length(this.sitting));
  this:insert_sitting(player, p);
  if (length(this.sitting) >= this.seats + random(1 + max(this.squeeze, 0)))
    if (random(2) == 1)
      who = this.sitting[1];
    else
      who = this.sitting[length(this.sitting)];
    endif
    this:delete_sitting(who, this:squeeze_msg(who));
  endif
endif
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
.legal_name_regexp       unknown hack (#35)    r      "^[a-z_][a-z0-9_]*$"
.free_addition           unknown hack (#35)    r      0
.group                   Crag (#243)           r      #244
.pile                    Crag (#243)           r      #242
.helpful                 Crag (#243)           r      #250
.pilable                 Crag (#243)           r      #255
.toy                     unknown hack (#35)    r c    #260
.chaise                  stormagnet (#246)     r      #499
.chair                   stormagnet (#246)     r      #500
.bed                     stormagnet (#246)     r      #501
-------------------------------- finished ---------------------------------
.chaise                  stormagnet (#246)     r      #499
-------------------------------- finished ---------------------------------
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  #499:lounge                   stormagnet (#246)    rxd    none on top of/on/onto/upon this
  #499:lounge                   stormagnet (#246)    rxd    this none this
  #499:lie                      stormagnet (#246)    r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
Your current object is now a chaise longue (#499).
#499:"lounge" ()
That verb has not been programmed.
Verb #499:lounge [2] {this none this} removed.
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
-------------------------------- finished ---------------------------------
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  #499:lounge                   stormagnet (#246)    rxd    none on top of/on/onto/upon this
  #499:lie                      stormagnet (#246)    r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
Property added with value {}.
#81:"sit" any (on top of/on/onto/upon) this
if (!valid(caller_perms()) && dobjstr && dobjstr != "down")
  player:tell("You can't do that.");
  return;
endif
if (player in this.sitting)
  player:tell($string_utils:pronoun_sub(this:already_sitting_msg()));
elseif (player == this.location)
  player:tell("Perhaps you should put it down first.");
elseif (player.location != this.location)
  player:tell("From that distance? Don't stuff about with my ", this:name(), ".");
elseif (this.squeeze < 0 && length(this.sitting) >= this.seats)
  player:tell($string_utils:pronoun_sub(this.nosqueeze_msg));
else
  p = random(1 + length(this.sitting));
  this:insert_sitting(player, p);
  if (length(this.sitting) >= this.seats + random(1 + max(this.squeeze, 0)))
    if (random(2) == 1)
      who = this.sitting[1];
    else
      who = this.sitting[length(this.sitting)];
    endif
    this:delete_sitting(who, this:squeeze_msg(who));
  endif
endif
Verb added [19] (18).
Verb added [3] (2).
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#81:seats_left ()" name: "MOO verb: #81:seats_left ()" type: moo-code content*: "" _data-tag: 103993474161
#$#: 103993474161
.squeeze                 unknown hacker (#35)  r c    0
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
Verb name changed.
Verb name changed.
That object does not define that verb.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#81:seats_in_use ()" name: "MOO verb: #81:seats_in_use ()" type: moo-code content*: "" _data-tag: 28695865162
#$#: 28695865162
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#499:seats_in_use ()" name: "MOO verb: #499:seats_in_use ()" type: moo-code content*: "" _data-tag: 42255720663
#$#: 42255720663
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#499:seats_in_use this none this" name: "MOO verb: #499:seats_in_use this none this" type: moo-code content*: "" _data-tag: 154712677064
#$#* 154712677064 content: return pass(@args) + length(this.liars);
#$#: 154712677064
0 errors.
Verb programmed.
Property name changed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#81:sit any on this" name: "MOO verb: #81:sit any on this" type: moo-code content*: "" _data-tag: 167026446065
#$#* 167026446065 content: if (!valid(caller_perms()) && dobjstr && dobjstr != "down")
#$#* 167026446065 content:   player:tell("You can't do that.");
#$#* 167026446065 content:   return;
#$#* 167026446065 content: endif
#$#* 167026446065 content: if (player in this.sitting)
#$#* 167026446065 content:   player:tell($string_utils:pronoun_sub(this:already_sitting_msg()));
#$#* 167026446065 content: elseif (player == this.location)
#$#* 167026446065 content:   player:tell("Perhaps you should put it down first.");
#$#* 167026446065 content: elseif (player.location != this.location)
#$#* 167026446065 content:   player:tell("From that distance? Don't stuff about with my ", this:name(), ".");
#$#* 167026446065 content: elseif (this.squeeze < 0 && length(this.sitting) >= this.seats)
#$#* 167026446065 content:   player:tell($string_utils:pronoun_sub(this.nosqueeze_msg));
#$#* 167026446065 content: else
#$#* 167026446065 content:   p = random(1 + length(this.sitting));
#$#* 167026446065 content:   this:insert_sitting(player, p);
#$#* 167026446065 content:   if (length(this.sitting) >= this.seats + random(1 + max(this.squeeze, 0)))
#$#* 167026446065 content:     if (random(2) == 1)
#$#* 167026446065 content:       who = this.sitting[1];
#$#* 167026446065 content:     else
#$#* 167026446065 content:       who = this.sitting[length(this.sitting)];
#$#* 167026446065 content:     endif
#$#* 167026446065 content:     this:delete_sitting(who, this:squeeze_msg(who));
#$#* 167026446065 content:   endif
#$#* 167026446065 content: endif
#$#: 167026446065
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#499:sit any on this" name: "MOO verb: #499:sit any on this" type: moo-code content*: "" _data-tag: 162092647166
#$#* 162092647166 content: The chaise longue (#499) does not define a :sit verb.  The following code is from its ancestor, a generic piece of furniture (#81).
#$#* 162092647166 content: if (!valid(caller_perms()) && dobjstr && dobjstr != "down")
#$#* 162092647166 content:   player:tell("You can't do that.");
#$#* 162092647166 content:   return;
#$#* 162092647166 content: endif
#$#* 162092647166 content: if (player in this.sitting)
#$#* 162092647166 content:   player:tell($string_utils:pronoun_sub(this:already_sitting_msg()));
#$#* 162092647166 content: elseif (player == this.location)
#$#* 162092647166 content:   player:tell("Perhaps you should put it down first.");
#$#* 162092647166 content: elseif (player.location != this.location)
#$#* 162092647166 content:   player:tell("From that distance? Don't stuff about with my ", this:name(), ".");
#$#* 162092647166 content: elseif (this.squeeze < 0 && length(this.sitting) >= this.seats)
#$#* 162092647166 content:   player:tell($string_utils:pronoun_sub(this.nosqueeze_msg));
#$#* 162092647166 content: else
#$#* 162092647166 content:   p = random(1 + length(this.sitting));
#$#* 162092647166 content:   this:insert_sitting(player, p);
#$#* 162092647166 content:   if (this:seats_in_use() >= this.seats + random(1 + max(this.squeeze, 0)))
#$#* 162092647166 content:     if (random(2) == 1)
#$#* 162092647166 content:       who = this.sitting[1];
#$#* 162092647166 content:     else
#$#* 162092647166 content:       who = this.sitting[length(this.sitting)];
#$#* 162092647166 content:     endif
#$#* 162092647166 content:     this:delete_sitting(who, this:squeeze_msg(who));
#$#* 162092647166 content:   endif
#$#* 162092647166 content: endif
#$#: 162092647166
That object has no verb matching that name + args.
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  #499:lounge                   stormagnet (#246)    rxd    none on top of/on/onto/upon this
  #499:lie                      stormagnet (#246)    r d    none on top of/on/onto/upon this
  #499:seats_in_use             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb added [4] (3).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#499:sit ()" name: "MOO verb: #499:sit ()" type: moo-code content*: "" _data-tag: 131196664467
#$#: 131196664467
-----
SETREMOVE()
===========

Syntax:  setadd (list <list>, <value>)   => list
      setremove (list <list>, <value>)   => list

Returns a copy of <list> with the given <value> added or removed, as appropriate.  `setadd()' only adds <value> if it is not already an element of <list>; <list> is thus treated as a mathematical set.  <value> is added at the end of the resulting list, if at all.  Similarly, `setremove()' returns a list identical to <list> if <value> is not an element.  If <value> appears more than once in <list>, only the first occurrence is removed in the returned copy.

    setadd({1, 2, 3}, 3)         =>   {1, 2, 3}
    setadd({1, 2, 3}, 4)         =>   {1, 2, 3, 4}
    setremove({1, 2, 3}, 3)      =>   {1, 2}
    setremove({1, 2, 3}, 4)      =>   {1, 2, 3}
    setremove({1, 2, 3, 2}, 2)   =>   {1, 3, 2}

0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#499:sit this none this" name: "MOO verb: #499:sit this none this" type: moo-code content*: "" _data-tag: 17052009768
#$#* 17052009768 content: this.liers = setremove(this.liers, player);
#$#: 17052009768
0 errors.
Verb programmed.
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  #499:lounge                   stormagnet (#246)    rxd    none on top of/on/onto/upon this
  #499:lie                      stormagnet (#246)    r d    none on top of/on/onto/upon this
  #499:seats_in_use             Crag (#243)          rxd    this none this
  #499:sit                      Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#499:lie none on this" name: "MOO verb: #499:lie none on this" type: moo-code content*: "" _data-tag: 6157469269
#$#* 6157469269 content: this.sitting = this.sitting + 2;
#$#* 6157469269 content: this:sit(@args);
#$#: 6157469269
0 errors.
Verb programmed.
The chaise longue(#499) has 2 kids.
chaise longues (#274)   settee (#502)
 seats                   stormagnet (#246)     r c    6
-------------------------------- finished ---------------------------------
[on the porter's chair]
You sit on the porter's chair.
You stand up from the porter's chair.
You lounge on the settee.
=> #502 (settee)
#-1:Input to EVAL, line 4:  Verb not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> 1
You are already lounging on the settee.
#499:lie (this == #502), line 2:  Property not found
(End of traceback)
generic piece of furniture (#81) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic sittable object (#80).
  Location generic room (#3).
.squeeze                 unknown hack (#35)    r c    0
.seats                   unknown hack (#35)    r c    0
.sit_msg                 unknown hack (#35)    r c    {#69, "do", {"name", "p..
.squeeze_msg             unknown hack (#35)    r c    {#69, "do", {"name", "d..
.stand_msg               unknown hack (#35)    r c    {#69, "do", {"name", "d..
.fall_msg                unknown hack (#35)    r c    {#69, "do", {"name", "d..
.shove_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
.also_shove_msg          unknown hack (#35)    r c    {#69, "do", {"dname", "..
.nosqueeze_msg           unknown hack (#35)    r c    {#69, "do", "There's no..
.integrate_empty_msg     unknown hack (#35)    r c    {#69, "do", {"name", "t..
.integrate_sitters_msg   unknown hack (#35)    r c    {#69, "do", "  ", {"nam..
.next_to_msg             unknown hack (#35)    r c    {#69, "do", " ", {"noun..
.obvious_seat            unknown hack (#35)    r c    1
.already_sitting_msg     unknown hack (#35)    r c    {#69, "do", "You are al..
.move_next_to_msg        unknown hack (#35)    r c    {#69, "do", {"name", "p..
.help_text               unknown hack (#35)    r c    {"Users can sit on, sho..
.desc_sitting_msg        unknown hack (#35)    r c    ""
.desc_empty_msg          unknown hack (#35)    r c    ""
-------------------------------- finished ---------------------------------
generic sittable object (#80) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic thing (#5).
  Location generic room (#3).
.sitting                 unknown hack (#35)    r      {}
.empty_msg               unknown hack (#35)    r c    {#69, "do"}
.sitting_msg             unknown hack (#35)    r c    {#69, "do", "sitting"}
.on_msg                  unknown hack (#35)    r c    {#69, "do", "on"}
.desc_along_with_msg     unknown hack (#35)    r c    {#69, "do", "along with"}
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
You are already lounging on the settee.
You are already lounging on the settee.
You stand up from the settee.
The verb :stand is on   North Vestibule(#70)--generic room(#3)   chaise longues(#274)--generic piece of furniture(#81)   porter's chair(#286)--generic piece of furniture(#81)   settee(#502)--generic piece of furniture(#81)
#81:"stand get" any (out of/from inside/from) this
if (verb == "get" && dobjstr != "up")
  player:tell("You can't get that from ", this:dname(), ".");
elseif (player in this.sitting)
  this:delete_sitting(player);
else
  player:tell("You aren't sitting on ", this:dname(), ".");
endif
You're not sitting down.
You lounge on the settee.
=> {#243}
#-1:Input to EVAL, line 4:  Verb not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> 2
You stand up from the settee.
=> 1
Object #499 does not define that verb, but its ancestor #81 does.
#81:"delete_sitting" this none this
// :delete_sitting(<what>[, <msg>[, <location>[, <actor>]]])
// Remove <what> (an object or a list of objects) from this.sitting, announcing <msg> (defaults to this:stand_msg(<what>)) to <location> (defaults to this.location) with <actor> (defaults to player) as the enactor of the removal.
// Does nothing if none of <what> are in this.sitting.
if (typeof(what = args[1]) != LIST)
  what = {what};
endif
loc = length(args) > 2 ? args[3] | this.location;
who = length(args) > 3 ? args[4] | player;
if (what = $set_utils:intersection(what, this.sitting))
  pass(what);
  what = $set_utils:intersection(what, loc.contents);
  if (what)
    dobj = {what};
    $you:say_action(args[2] ? args[2] | this:stand_msg({what}), who, this, loc);
  endif
endif
Verb added [5] (4).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#499:delete_sitting ()" name: "MOO verb: #499:delete_sitting ()" type: moo-code content*: "" _data-tag: 183544199370
#$#: 183544199370
0 errors.
Verb programmed.
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  #499:lounge                   stormagnet (#246)    rxd    none on top of/on/onto/upon this
  #499:lie                      stormagnet (#246)    r d    none on top of/on/onto/upon this
  #499:seats_in_use             Crag (#243)          rxd    this none this
  #499:sit                      Crag (#243)          rxd    this none this
  #499:delete_sitting           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Fri Apr 26 23:12:43 2013 PDT by Crag (#243).
#81:"sit" any (on top of/on/onto/upon) this
if (!valid(caller_perms()) && dobjstr && dobjstr != "down")
  player:tell("You can't do that.");
  return;
endif
if (player in this.sitting)
  player:tell($string_utils:pronoun_sub(this:already_sitting_msg()));
elseif (player == this.location)
  player:tell("Perhaps you should put it down first.");
elseif (player.location != this.location)
  player:tell("From that distance? Don't stuff about with my ", this:name(), ".");
elseif (this.squeeze < 0 && length(this.sitting) >= this.seats)
  player:tell($string_utils:pronoun_sub(this.nosqueeze_msg));
else
  p = random(1 + length(this.sitting));
  this:insert_sitting(player, p);
  if (this:seats_in_use() >= this.seats + random(1 + max(this.squeeze, 0)))
    if (random(2) == 1)
      who = this.sitting[1];
    else
      who = this.sitting[length(this.sitting)];
    endif
    this:delete_sitting(who, this:squeeze_msg(who));
  endif
endif
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#499:sit this none this" name: "MOO verb: #499:sit this none this" type: moo-code content*: "" _data-tag: 106916747371
#$#* 106916747371 content: this.liers = setremove(this.liers, player);
#$#* 106916747371 content: return pass(@args);
#$#: 106916747371
0 errors.
Verb programmed.
You're not sitting down.
You lounge on the settee.
You stand up from the settee.
=> {}
Property added with value 2.
That object does not define that verb.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#499:seats_in_use this none this" name: "MOO verb: #499:seats_in_use this none this" type: moo-code content*: "" _data-tag: 84217800572
#$#* 84217800572 content: return pass(@args) + length(this.liers);
#$#: 84217800572
0 errors.
Verb programmed.
Last modified Fri Apr 26 23:16:14 2013 PDT by Crag (#243).
#499:"lie" none (on top of/on/onto/upon) this
this:sit(@args);
if (player in this.sitting)
  this.liers = setadd(this.liers, player);
endif
Last modified Fri Apr 26 23:12:43 2013 PDT by Crag (#243).
#81:"sit" any (on top of/on/onto/upon) this
if (!valid(caller_perms()) && dobjstr && dobjstr != "down")
  player:tell("You can't do that.");
  return;
endif
if (player in this.sitting)
  player:tell($string_utils:pronoun_sub(this:already_sitting_msg()));
elseif (player == this.location)
  player:tell("Perhaps you should put it down first.");
elseif (player.location != this.location)
  player:tell("From that distance? Don't stuff about with my ", this:name(), ".");
elseif (this.squeeze < 0 && length(this.sitting) >= this.seats)
  player:tell($string_utils:pronoun_sub(this.nosqueeze_msg));
else
  p = random(1 + length(this.sitting));
  this:insert_sitting(player, p);
  if (this:seats_in_use() >= this.seats + random(1 + max(this.squeeze, 0)))
    if (random(2) == 1)
      who = this.sitting[1];
    else
      who = this.sitting[length(this.sitting)];
    endif
    this:delete_sitting(who, this:squeeze_msg(who));
  endif
endif
@integrate_room $furniture isn't set.
@integrate_player $furniture isn't set.
@integrate_container $furniture isn't set.
@drop_failed $furniture is "You can't seem to drop %td here."
@drop_succeeded $furniture is "You drop %td."
@odrop_failed $furniture is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded $furniture is "%n:(drops) %ti."
@otake_succeeded $furniture is "%n:(picks) up %td."
@otake_failed $furniture isn't set.
@take_succeeded $furniture is "You take %td."
@take_failed $furniture is "You can't pick up %td."
@empty $furniture is ""
@sitting $furniture is "sitting"
@on $furniture is "on"
@desc_along_with $furniture is "along with"
@sit $furniture is "%Nd %n:(sits) %tx{on} %td"
@squeeze $furniture is "%Dd %d:(is) squeezed off %td."
@stand $furniture is "%Dd %d:(stands) up from %td."
@fall $furniture is "%Dd %d:(falls) off %td."
@shove $furniture is "%Nd %n:(shoves) %dd off %td!"
@also_shove $furniture is "%Nd %n:(takes) %dd with %no."
@nosqueeze $furniture is "There's no room %tx{on} %td."
@integrate_empty $furniture is "%Ti %t:(is) here."
@integrate_sitters $furniture is "  %Ni %n:(is) %tx{sitting} %tx{on} %to."
@next_to $furniture is " %d'(beside/between) %dd"
@already_sitting $furniture is "You are already %tx{sitting} %tx{on} %td."
@move_next_to $furniture is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting $furniture isn't set.
@desc_empty $furniture isn't set.
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
-------------------------------- finished ---------------------------------
,core_names              stormagnet (#246)     r c    {}
-------------------------------- finished ---------------------------------
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
.legal_name_regexp       unknown hack (#35)    r      "^[a-z_][a-z0-9_]*$"
.free_addition           unknown hack (#35)    r      0
.group                   Crag (#243)           r      #244
.pile                    Crag (#243)           r      #242
.helpful                 Crag (#243)           r      #250
.pilable                 Crag (#243)           r      #255
.toy                     unknown hack (#35)    r c    #260
.chaise                  stormagnet (#246)     r      #499
.chair                   stormagnet (#246)     r      #500
.bed                     stormagnet (#246)     r      #501
-------------------------------- finished ---------------------------------
You see no "$furniture->chaise" here.
You see no "$furniture->chais" here.
You haven't specified which "storm->chaise" you mean.
=> #499 (chaise longue)
That is not a valid command.
@integrate_room _ is "%Ti sit under the windows."
@integrate_player _ isn't set.
@integrate_container _ isn't set.
@drop_failed _ is "You can't seem to drop %td here."
@drop_succeeded _ is "You drop %td."
@odrop_failed _ is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded _ is "%n:(drops) %ti."
@otake_succeeded _ is "%n:(picks) up %td."
@otake_failed _ isn't set.
@take_succeeded _ is "You take %td."
@take_failed _ is "You can't pick up %td."
@empty _ is ""
@sitting _ is "lounging"
@on _ is "on"
@desc_along_with _ is "along with"
@sit _ is "%Nd %n:(lounges) %tx{on} %td"
@squeeze _ is "%Dd %d:(is) squeezed off %td."
@stand _ is "%Dd %d:(stands) up from %td."
@fall _ is "%Dd %d:(falls) off %td."
@shove _ is "%Nd %n:(shoves) %dd off %td!"
@also_shove _ is "%Nd %n:(takes) %dd with %no."
@nosqueeze _ is "There's no room %tx{on} %td."
@integrate_empty _ is "%Ti sit under the windows."
@integrate_sitters _ is "  %Ni %n:(is) %tx{sitting} %tx{on} %to."
@next_to _ is " %d'(beside/between) %dd"
@already_sitting _ is "You are already %tx{sitting} %tx{on} %td."
@move_next_to _ is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting _ is ""
@desc_empty _ isn't set.
Your current object is now #499.
chaise longue (#499) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
-------------------------------- finished ---------------------------------
Your current object stack is empty.
Objects owned by Crag (from #0 to #502):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Crag]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
-- 25 objects.  Total bytes: 46,163.------------------------------------------
Your current object is now a Generic Pilable Thing (#255).
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Last modified Sat Apr 20 14:44:47 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile = $local.pile:create_pile(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 6800773273
#$#* 6800773273 content: // Usage: pile <thing> on <other thing>
#$#* 6800773273 content: //  This forms a pile out of the dobj and iobj.
#$#* 6800773273 content: //  (based on $thing:drop)
#$#* 6800773273 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 6800773273 content: if (this.location != player)
#$#* 6800773273 content:   player:tell("You don't have that.");
#$#* 6800773273 content: elseif (!player.location:accept(this))
#$#* 6800773273 content:   player:tell("You can't pile that here.");
#$#* 6800773273 content: else
#$#* 6800773273 content:   pile = $local.pile:create_pile(this, iobj, player.location);
#$#* 6800773273 content:   if (this.location == pile)
#$#* 6800773273 content:     player:tell_lines(this:pile_succeeded_msg() || "Done.");
#$#* 6800773273 content:     if (msg = this:opile_succeeded_msg())
#$#* 6800773273 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 6800773273 content:     endif
#$#* 6800773273 content:   else
#$#* 6800773273 content:     player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
#$#* 6800773273 content:     if (msg = this:opile_failed_msg())
#$#* 6800773273 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 6800773273 content:     endif
#$#* 6800773273 content:   endif
#$#* 6800773273 content: endif
#$#: 6800773273
0 errors.
Verb programmed.
Last modified Fri Apr 26 23:46:23 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile_class = this:pile_types(iobj);
  pile_class:create_pile(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 111209457474
#$#* 111209457474 content: // Usage: pile <thing> on <other thing>
#$#* 111209457474 content: //  This forms a pile out of the dobj and iobj.
#$#* 111209457474 content: //  (based on $thing:drop)
#$#* 111209457474 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 111209457474 content: if (this.location != player)
#$#* 111209457474 content:   player:tell("You don't have that.");
#$#* 111209457474 content: elseif (!player.location:accept(this))
#$#* 111209457474 content:   player:tell("You can't pile that here.");
#$#* 111209457474 content: else
#$#* 111209457474 content:   pile_class = this:pile_types(iobj);
#$#* 111209457474 content:   pile_class:create_pile(this, iobj, player.location);
#$#* 111209457474 content:   if (this.location == pile)
#$#* 111209457474 content:     player:tell_lines(this:pile_succeeded_msg() || "Done.");
#$#* 111209457474 content:     if (msg = this:opile_succeeded_msg())
#$#* 111209457474 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 111209457474 content:     endif
#$#* 111209457474 content:   else
#$#* 111209457474 content:     player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
#$#* 111209457474 content:     if (msg = this:opile_failed_msg())
#$#* 111209457474 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 111209457474 content:     endif
#$#* 111209457474 content:   endif
#$#* 111209457474 content: endif
#$#: 111209457474
That object does not define that verb.
The verb :drop is on   brown Persian rug(#257)--generic thing(#5)   detailed painting(#262)--generic container(#126)   timbered ceiling(#273)--generic container(#126)   chaise longues(#274)--generic thing(#5)   butler's desk(#275)--generic container(#126)   demi-lune table(#277)--Generic Table(#280)   Wind-Up Duck(#261)--Generic Wind-Up Toy(#260)   microphone(#282)   porter's chair(#286)--generic thing(#5)   How $staff will notice people rummaging(#290)--generic thing(#5)   settee(#502)--generic thing(#5)   Generic Pilable Thing(#255)--generic thing(#5)   Generic Nesting Decoration(#265)--generic container(#126)
#5:"d*rop throw chuck" this none none
// Usage: drop <thing>
//  This drops things in the room the dropper is in.
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't drop that here.");
else
  this:moveto(player.location);
  if (this.location == player.location)
    player:tell_lines(this:drop_succeeded_msg() || "Dropped.");
    if (msg = this:odrop_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:drop_failed_msg() || "You can't seem to drop that here.");
    if (msg = this:odrop_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
    #5:"d*rop throw chuck"      Core-Wizard (#184)   rxd    this none none
-------------------------------- finished ---------------------------------
Error programming Generic Pilable Thing:pile[1](0).
Line 11:  Unknown built-in function: vaild
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
Last modified Fri Apr 26 23:48:11 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile_class = this:pile_type(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile_class:create_pile(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
Objects owned by Crag (from #0 to #502):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Crag]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
-- 25 objects.  Total bytes: 46,163.------------------------------------------
Your current object is now #242.
The verb :create is nowhere to be found.
Verb added [3] (2).
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create ()" name: "MOO verb: #242:create ()" type: moo-code content*: "" _data-tag: 103756892475
#$#: 103756892475
Last modified Fri Apr 26 23:49:39 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile_class = this:pile_type(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
You see no "_<" here.
You see no "_^" here.
-----
`HELP CO' AMBIGUOUS
===================

Sorry, the topic `co' is ambiguous.  I don't know which of the following topics you mean:

`help @co'[1]           `help commands'[2]      `help @comment'[3]
`help common_quota'[4]  `help communication'[5]
`help communications'[6]                        `help Community Group'[7]
`help connected_players()'[8]                   `help connected_seconds()'[9]
`help connection_name()'[10]                    `help connection_option()'[11]
`help connection_options()'[12]                 `help container-messages'[13]
`help containers'[14]   `help @contents'[15]    `help coordinators'[16]
`help @copy'[17]        `help @copy-x'[18]      `help copyright'[19]
`help core-copyright'[20]                       `help core-index'[21]
`help core-license'[22]                         `help cos()'[23]
`help cosh()'[24]       `help @count'[25]       

-----
`HELP CURRENT' AMBIGUOUS
========================

Sorry, the topic `current' is ambiguous.  I don't know which of the following topics you mean:

`help current-object'[1]                        `help @current-object'[2]
`help @currentobject'[3]                        

-----
CURRENT-OBJECT
==============

Your `current object' is an object that you can refer to in most commands without using its name, just by using the symbol "_".  It's intended primarily for programming.

For example, you can type

   @co $jtext.link
   @d _:

and get a list of verbs defined on the link dispatcher tag.

In addition, if your .eval_env property (see `help eval'[1]) sets _ to player.current_object, you can use it in evaluations.  The default .eval_env includes this binding.  So, to continue the example:

   >;_:dname()
   => "the link dispatcher tag"

A stack is kept of the current objects you've been using, so you can change your current object for a while and then switch back to the previous one without needing to identify it again.

To find out how to set or view your current object, read the following help topics:

@currentobject[2]
      Set current object, or find out what it is.
@pushobject[3]
      Push a current object onto the stack.
@popobject[4]
      Return to the previous current object.
@swapobject[5]
      Switch between current and previous object.

-----
@CURRENTOBJECT
==============

Usage:  @current-object
        @current-object <ref>[..]
        @current-object <base>[<ref>[..]]

The @current-object (@co) command is used to set your current object--an object referred to as _ in commands.  For more information on how to use the current object, see `help current-object'[1].

With no arguments, the command just tells you what your current object is.

If an argument is given, it indicates the object to go to, beginning with an optional `base object' and continuing with a series of references.  (If a base is given, no references need follow.)  The base object, if present, is matched as an ordinary object.  For example, "@co $jtext" would set your current object to the Jtext Dispatcher.

The <ref> segments are mostly properties.  For example, "@co $jtext.link" would set your object to the Link Dispatcher Tag.

If no base is identified, the current object you're already using is used as the base.  For example, after typing the previous command, you could type "@co .preceding" to change your current object to $jtext.link.root, the generic preceding link tag.

In addition to property references, there are two special kinds of <ref> segments for navigation through the object hierarchy.  One of them is ".<", and it works by retracing the steps by which your current object was determined.  For example, again following the preceding commands, "@co .<" would take you back to the Link Dispatcher Tag.

Finally, the ".^" <ref> segment gets you the parent of the current object.  Continuing the example, "@co .^" would bring you to the root class, the parent of the link dispatcher tag.

As indicated, any number of references can be combined; for example, "@co $jtext.link.preceding.<.<.<.string_utils.^" would be an exceedingly complicated way to get your current object to be the generic utilities.

  ** property not found, "<" **
-------------------------------- finished ---------------------------------
Property not found.  You may be trying to evaluate code other than a property reference.  Try this instead:
  #_ for %#.^
  ** property not found, "^" **
-------------------------------- finished ---------------------------------
Last modified Fri Apr 26 23:49:39 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile_class = this:pile_type(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
Recycling Center (#55) [ readable ]
  Owned by unknown hacker (#35).
  Child of Helpful Object (#250).
   #55:_recreate                Core-Wizard (#184)   rxd    this none this
   #55:_recycle                 Core-Wizard (#184)   rxd    this none this
   #55:_create                  Core-Wizard (#184)   rx     this none this
   #55:addhist                  Core-Wizard (#184)   rxd    this none this
   #55:show*-history            Core-Wizard (#184)   rx     this none none
   #55:request                  Core-Wizard (#184)   r d    any out of/from inside/from this
   #55:setup_toad               Core-Wizard (#184)   rx     this none this
   #55:add_orphan               unknown hacker (#35) rxd    this none this
   #55:remove_orphan            unknown hacker (#35) rxd    this none this
   #55:valid                    Core-Wizard (#184)   rxd    this none this
   #55:init_for_core            Core-Wizard (#184)   rxd    this none this
   #55:accept                   Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#55:"valid" this none this
// Usage:  valid(object)
// True if object is valid and not $garbage.
return typeof(args[1]) == OBJ && valid(args[1]) && !$object_utils:isa(args[1], $garbage);
Searching for core verbs containing the string "valid(" ...

#0:do_out_of_band_command [+d Core-Wizard (#184)]:  elseif (!valid(player))
#153:_protect_chparent [+d Core-Wizard (#184)]:  if (!valid(what))
#4:@create [+d Core-Wizard (#184)]:  if (parentstr[1] == "$" && !valid(parent))
#4:@recreate [+d Core-Wizard (#184)]:  if (parentstr[1] == "$" && !valid(parent))
#4:@dig [+d Core-Wizard (#184)]:  elseif (!valid(player.location) || !($room in $object_utils:ancestors(player.location)))
#4:@auditDB [+d Core-Wizard (#184)]:  elseif ($command_utils:player_match_failed(dobj, dobjstr) && !(valid(dobj = $string_utils:literal_object(dobjstr)) && $command_utils:yes_or_no("Continue?")))
#4:@countDB [+d Core-Wizard (#184)]:    if (valid(o) && o.owner == dobj)
#4:@add-owned [+d Core-Wizard (#184)]:  if (!valid(dobj))
#4:@verify-owned [+d Core-Wizard (#184)]:    if (!valid(x) || x.owner != player)
#4:@unmess*age [+d Core-Wizard (#184)]:  elseif (valid(iobj))
#4:@location*s [+d Core-Wizard (#184)]:  elseif (!valid(what = player:my_match_object(dobjstr)) && !valid(what = player:my_match_player(dobjstr)))
#4:@move [+d Core-Wizard (#184)]:    player:tell(dobj:dnamec(), " ", dobj:verb_sub("is"), " already ", valid(iobj) ? "in " + iobj:dname() | "nowhere", ".");
#4:@measure [+d Core-Wizard (#184)]:    if (!valid(what))
#4:@grant [+d Core-Wizard (#184)]:  elseif (!$recycler:valid(dobj))
#10:? [+d Core-Wizard (#184)]:  if (!($guest.enabled && this.max_guests && valid(this:_match_player("guest"))))
#10:co*nnect @co*nnect safe-c*onnect safec*onnect [+d Core-Wizard (#184)]:  elseif (!valid(candidate = this:_match_player(name = strsub(args[1], " ", "_"))))
#10:_match_player [+d Core-Wizard (#184)]:  if (valid(candidate = $string_utils:literal_object(name)) && is_player(candidate))
#10:@req*uest req*uest @register register [+d Core-Wizard (#184)]:    if ($guest.enabled && this.max_guests && $guest.registration_ok && valid(this:_match_player("guest")))
#10:newt_player [+d Core-Wizard (#184)]:  if (!valid(who) || !is_player(who) || $object_utils:isa(who, $guest))
#10:t*est [+d Core-Wizard (#184)]:  elseif (!valid(candidate = this:_match_player(name = strsub(args[1], " ", "_"))))
#10:registration_text [+d unknown hacker (#35)]:    elseif ($guest.enabled && this.max_guests && $guest.registration_ok && valid(this:_match_player("guest")))
#11:get take [+d Core-Wizard (#184)]:  if (!valid(dobj) || prepstr)
#11:drop [+d Core-Wizard (#184)]:  if (!valid(dobj) && prepstr)
#21:find_topics [+d unknown hacker (#35)]:  elseif ((r = rindex(w = strsub(what[2..length(what)], "-", "_"), "_utils")) && (r == length(w) - 5 && (valid(`#0.(w) ! ANY => #-1') && #0.(w).description)))
#21:get_topic [+d unknown hacker (#35)]:  if (topic == "$" + topic[2..length(topic) - 5] + "utils" && (valid(#0.(w = strsub(topic[2..length(topic)], "-", "_"))) && (uhelp = #0.(w):description())))
#24:set_programmer [+d Core-Wizard (#184)]:  elseif (!(valid(victim = args[1]) && (is_player(victim) && $object_utils:isa(victim, $player))))
#24:set_player [+d Core-Wizard (#184)]:  elseif (!(valid(victim = args[1]) && $object_utils:isa(victim, $player)) && 0)
#24:set_owner [+d Core-Wizard (#184)]:  if (!valid(object = args[1]))
#24:unset_player [+d Core-Wizard (#184)]:  elseif (!valid(victim = args[1]))
#24:net_connections [-d Core-Wizard (#184)]:            nl = max(length(tostr(b, valid(b) ? b:name() | "")), nl);
#24:do_grant [+d Core-Wizard (#184)]:  if (!valid(object))
#24:do_make_guest [+d Core-Wizard (#184)]:  if (typeof(newguest) == OBJ && valid(newguest))
#24:do_make_player [-d Core-Wizard (#184)]:        player:notify(tostr(valid(x[1]) ? x[1]:name() | "<recycled>", " (", x[1], ") ", length(x) > 1 ? "[" + tostr(@x[2..length(x)]) + "]" | ""));
#25:load [+d Core-Wizard (#184)]:    if (valid(p) && (is_player(p) && $object_utils:isa(p, $player) && !$object_utils:isa(p, $guest)))
#29:display_seq_headers display_seq_full [+d unknown hacker (#35)]:      hdr = tostr(ctime(ldate)[5..16], "   ", $string_utils:left(tostr(x[2][4], " (", x[2][3], ")"), 30), valid(w = x[2][2]) ? w:name() | "??", " (", x[2][2], ")");
#30:verbdoc [+d Core-Wizard (#184)]:  if (!valid(object = player:my_match_object(args[1][1], player.location)))
#30:objectdoc [+d Core-Wizard (#184)]:  if (!valid(object = $string_utils:literal_object(args[1][1])))
#31:defer [+d Core-Wizard (#184)]:    if (valid(candidate))
#31:@last-c*onnection [+d Core-Wizard (#184)]:  if (!valid(caller_perms()))
#31:@name [+d Core-Wizard (#184)]:    if (valid(candidate = $string_utils:literal_object(name)) && is_player(candidate) || valid($player_db:find_exact(name)))
#31:set_gender set_gender_name set_gender_obj [+d Core-Wizard (#184)]:  if (result || valid(result))
#36:eval [+d Core-Wizard (#184)]:  caller = `valid(caller) ! E_TYPE' ? caller | #-1;
#37:load [+d unknown hacker (#35)]:    if (valid(p) && is_player(p))
#37:check [+d unknown hacker (#35)]:        if (valid(o) && is_player(o))
#37:alias_taken [-d unknown hacker (#35)]:  if (valid(who = this:find_exact(alias)))
#37:alias_taken(core) [-d unknown hacker (#35)]:  if (valid(who = this:find_exact(alias)) && is_player(who))
#6:init_for_core [+d Core-Wizard (#184)]:      if (!valid(i))
#6:confunc [+d Core-Wizard (#184)]:  if (valid(caller_perms()) && caller != this && caller != #0)
#6:last_huh [+d Core-Wizard (#184)]:    if (!valid(stage = $feature:match_type_object("stage")))
#6:gag_p [+d Core-Wizard (#184)]:      if (`valid(x[1]) && !is_player(x[1]) ! E_TYPE')
#6:@listgag @gaglist @gagged [+d Core-Wizard (#184)]:  set_task_perms(valid(caller_perms()) ? caller_perms() | player);
#6:@ungag [+d Core-Wizard (#184)]:        player:notify(tostr(valid(match) ? match:name() | match, " removed from gag list."));
#6:whodunnit [+d Core-Wizard (#184)]:    if (!valid(w[3]) && !valid(w[1]))
#6:home [+d Core-Wizard (#184)]:  elseif (!$recycler:valid(home))
#6:where*is @where*is [+d Core-Wizard (#184)]:    if (valid(p.location))
#6:@mail [+d Core-Wizard (#184)]:  set_task_perms(valid(caller_perms()) ? caller_perms() | player);
#6:@read @peek [+d Core-Wizard (#184)]:  set_task_perms(valid(caller_perms()) ? caller_perms() | player);
#6:@answer @repl*y [+d Core-Wizard (#184)]:  set_task_perms(who = valid(caller_perms()) ? caller_perms() | player);
#6:@forward [+d Core-Wizard (#184)]:  set_task_perms(valid(caller_perms()) ? caller_perms() | player);
#6:@add-alias*# @addalias*# @add_alias*# [+d Core-Wizard (#184)]:        elseif (is_player(object) && valid(someone = $player_db:find_exact(alias)))
#6:set_gender set_gender_name set_gender_obj [+d Core-Wizard (#184)]:  if (result || valid(result))
#6:@gender [+d Core-Wizard (#184)]:  set_task_perms(valid(caller_perms()) ? caller_perms() | player);
#6:@ex*amine [+d Core-Wizard (#184)]:  player:notify(tostr(what:name(), " (", what, ") is owned by ", valid(what.owner) ? what.owner:name() | "a recycled player", " (", what.owner, ")."));
#6:add_feature [-d unknown hacker (#35)]:    if (typeof(feature) != OBJ || !valid(feature))
#6:@remove-feature @rmfeature @rm-feature [+d Core-Wizard (#184)]:    if (!valid(dobj))
#6:@features [+d Core-Wizard (#184)]:    if (`valid(feature) ! E_TYPE' && (!dobjstr || (dobjstr in feature.aliases || ((pref = $string_utils:find_prefix(dobjstr, feature.aliases)) || pref == $ambiguous_match))))
#6:!* [+d unknown hacker (#35)]:  elseif (!valid(this.location))
#6:'* [-d unknown hacker (#35)]:    if (valid(p = player:my_match_player(who)) && p.location == this.location && this:misc_option("page_dwim"))
#6:@nn [+d Core-Wizard (#184)]:  cm = (who = `valid(this.mail_identity) ! E_PROPNF' ? this.mail_identity | this).current_message;
#6:mu*rmur [+d Core-Wizard (#184)]:  elseif (!valid(who))
#6:@option*s [+d Core-Wizard (#184)]:      if (valid(result))
#6:options_command [+d Core-Wizard (#184)]:  if (!valid(package))
#6:@co @currentobject @current-object [+d Core-Wizard (#184)]:      if (valid(co[1]))
#6:parse_current_object [+d unknown hacker (#35)]:  if (!valid(base))
#6:@pusho*bject [+d Core-Wizard (#184)]:    if (valid(co[1]))
#6:unfol*low [+d unknown hacker (#35)]:    if (!valid(who))
#6:@admin*istrators @admins [+d Core-Wizard (#184)]:  if (!valid(admin_group))
#6:@read-all-new*-mail [+d Core-Wizard (#184)]:  set_task_perms(valid(caller_perms()) ? caller_perms() | player);
#6:@rm-help-db [+d Core-Wizard (#184)]:      if (valid(dobj))
#6:@resend [+d Core-Wizard (#184)]:  set_task_perms(valid(caller_perms()) ? caller_perms() | player);
#6:help ?* [+d Core-Wizard (#184)]:      if (valid(o))
#6:@aliases [+d Core-Wizard (#184)]:  elseif (!valid(dobj))
#6:@who [+d Core-Wizard (#184)]:      if (!valid(room = who.location))
#6:@netforw*ard [+d Core-Wizard (#184)]:  set_task_perms(valid(caller_perms()) ? caller_perms() | player);
#6:anyconfunc [+d Core-Wizard (#184)]:  if (valid(caller_perms()) && caller != this && caller != #0 && caller != $login)
#6:@ch*eck-full [+d Core-Wizard (#184)]:      text = valid(s[1]) ? s[1].name | "** NONE **";
#6:@remove-handler @rmhandler @rm-handler [+d Core-Wizard (#184)]:    if (!valid(dobj))
#6:@handlers [-d Core-Wizard (#184)]:    if (!valid(handler))
#6:walking_step [+d unknown hacker (#35)]:      if (!valid(e = room:match_exit(exit)))
#6:end_walking [+d unknown hacker (#35)]:    elseif ($code_utils:task_valid(this.walking_task))
#6:@age [+d Core-Wizard (#184)]:    if (!valid(dobj))
#6:lose [+d unknown hacker (#35)]:    if (valid(pest))
#6:walk_failed [+d Core-Wizard (#184)]:  elseif (r = valid(source) && source:walk_failed_source(source, dest))
#6:dwim_objects [+d Core-Wizard (#184)]:      "o.visible will fail with E_INVIND for invalid objects and non-objects, so valid(o) and typeof(o)==OBJ omited.";
#6:@lastlog [+d unknown hacker (#35)]:    if (!valid(dobj))
#38:match_gender match_gender_name match_gender_obj [+d unknown hacker (#35)]:  if (!valid(ret) || verb != "match_gender_name")
#38:gender_match_failed [+d Core-Wizard (#184)]:    if (!valid(match_result))
#41:set_aliases [+d unknown hacker (#35)]:      if (!index(a, " ") && (valid(p = $mail_agent:match(a, #-1)) && (p != this && a in p.aliases)))
#41:add_forward [+d unknown hacker (#35)]:    if (!valid(recip) || (!is_player(recip) && !($mail_recipient in $object_utils:ancestors(recip))))
#41:delete_forward [+d unknown hacker (#35)]:    elseif (!valid(recip) || $perm_utils:controls(perms, recip) || $perm_utils:controls(perms, this))
#41:add_notify [+d unknown hacker (#35)]:    if (!valid(recip) || recip == this)
#41:delete_notify [+d unknown hacker (#35)]:    elseif (!valid(recip) || ($perm_utils:controls(perms, recip) || $perm_utils:controls(perms, this)))
#42:resolve_addr [+d unknown hacker (#35)]:    elseif (!valid(recip) || (!(is_player(recip) || $object_utils:isa(recip, $mail_recipient)) || typeof(fwd = recip:mail_forward(from)) != LIST))
#42:raw_send [+d Core-Wizard (#184)]:        valid(player) && player:notify(tostr("...", recip));
#42:touch [+d unknown hacker (#35)]:    if (!valid(recip) || recip in seen || (!is_player(recip) && !($mail_recipient in $object_utils:ancestors(recip))))
#42:check_names [+d unknown hacker (#35)]:    elseif (valid(p = $mail_agent:match(a, #-1)) && (p != what && a in p.aliases))
#42:match [+d unknown hacker (#35)]:  if (valid(o = $string_utils:literal_object(string)) && $mail_recipient in $object_utils:ancestors(o))
#42:match_recipient [+d unknown hacker (#35)]:  elseif (valid(o = `meobj:my_match_player(@args) ! ANY => $string_utils:match_player(@args)') || o == $ambiguous_match)
#42:match_failed [+d unknown hacker (#35)]:  elseif (!valid(match_result))
#42:make_message [+d unknown hacker (#35)]:  if (sender = valid(from) && (!is_player(from) && this:nn(from.owner)))
#42:english_address_field [+d Core-Wizard (#184)]:    if (valid(o))
#43:parse_recipients [+d unknown hacker (#35)]:      if (valid(s) && (is_player(s) || $mail_recipient in $object_utils:ancestors(s)))
#43:parse_msg_headers [+d unknown hacker (#35)]:    elseif (!valid(o) || !(is_player(o) || $mail_recipient in $object_utils:ancestors(o)))
#43:parse_msg_headers(slow) [+d unknown hacker (#35)]:    elseif (!valid(o) || !(is_player(o) || $mail_recipient in $object_utils:ancestors(o)))
#44:working_on [+d unknown hacker (#35)]:  return valid(object) ? tostr("\"", object:name(), "\"(", object, ")", prop ? "." + prop | "") | tostr(prop ? "." + prop + " on " | "", "invalid object (", object, ")");
#45:parse_invoke [-d unknown hacker (#35)]:    while (valid(definer))
#46:done q*uit pause [+d unknown hacker (#35)]:  elseif (!valid(origin = this.original[who = player in this.active]))
#46:set_origin [+d unknown hacker (#35)]:  return this:ok(who = args[1]) && (valid(origin = args[2]) && origin != this || (origin == $nothing || E_INVARG) && (this.original[who] = origin));
#46:suck_in [+d unknown hacker (#35)]:        if (valid(loc) && (msg = this:depart_msg()))
#46:new_session [+d Core-Wizard (#184)]:    if (valid(from))
#46:kill_all_sessions [+d Core-Wizard (#184)]:      victim:moveto((who = victim in this.active) && valid(origin = this.original[who]) ? origin | (valid(victim.home) ? victim.home | $player_start));
#46:match_object [+d unknown hacker (#35)]:  while ((where = player in origin.active) && ($recycler:valid(origin = origin.original[where]) && origin != this))
#46:who_location_msg [-d unknown hacker (#35)]:  if ($recycler:valid(where))
#46:get_room [+d unknown hacker (#35)]:    while ((where = player in origin.active) && (valid(origin = origin.original[where]) && origin != this))
#47:has_property [+d Core-Wizard (#184)]:    return valid(object);
#47:all_properties [+d Core-Wizard (#184)]:  while (valid(what = parent(what)))
#47:has_callable_verb [+d Core-Wizard (#184)]:  while (valid(object))
#47:all_verbs [+d Core-Wizard (#184)]:  while (valid(what))
#47:isa [+d Core-Wizard (#184)]:  ":isa(x,y) == valid(x) && (y==x || y in :ancestors(x))";
#47:ancestors [+d Core-Wizard (#184)]:    while (valid(what = parent(what)))
#47:contains [+d Core-Wizard (#184)]:  while (valid(what))
#47:property_conflicts [-d Core-Wizard (#184)]:  if (!valid(object = args[1]))
#47:locations [+d Core-Wizard (#184)]:  while (valid(what = what.location))
#47:all_properties_suspended [+d Core-Wizard (#184)]:  while (valid(what = parent(what)))
#47:match_verbs(new) [-d unknown hacker (#35)]:  while (valid(object))
#47:match_verbs_named [+d Core-Wizard (#184)]:  while (valid(object))
#48:match_object [+d Core-Wizard (#184)]:    if (valid(this.player.location))
#48:unparse_key [+d Core-Wizard (#184)]:    if (valid(key))
#50:object_match_failed [+d Core-Wizard (#184)]:    if (!valid(match_result))
#50:player_match_result player_match_failed [+d Core-Wizard (#184)]:  if (valid(player))
#50:suspend_if_needed [+d Core-Wizard (#184)]:  if (this:running_out_of_time() && valid(player))
#50:explain_syntax [+d Core-Wizard (#184)]:  for x in ({player, here, @valid(dobj) ? {dobj} | {}, @valid(iobj) ? {iobj} | {}})
#50:do_huh [-d Core-Wizard (#184)]:  if (valid(player.location))
#50:room_match_failed [+d Core-Wizard (#184)]:    if (!$recycler:valid(match_result))
#51:@shutdown [+d Core-Wizard (#184)]:  elseif ($code_utils:task_valid($shutdown_task))
#51:mcd_2 [+d Wizard (#2)]:    if (valid(o) && !(o in saved))
#51:@quota [-d Core-Wizard (#184)]:  elseif (!valid(dobj))
#51:@players [+d Core-Wizard (#184)]:    if (valid(o))
#51:@net-who @@who [-d Core-Wizard (#184)]:            nl = max(length(tostr(b, valid(b) ? b:name() | "")), nl);
#51:@abort-sh*utdown [+d Core-Wizard (#184)]:  elseif (!$code_utils:task_valid($shutdown_task))
#51:@rn mail_catch_up check_mail_lists current_message set_current_message get_current_message make_current_message kill_current_message @subscribed @read-all-new @mail-all-new [+d Core-Wizard (#184)]:  set_task_perms(valid(caller_perms()) ? caller_perms() | player);
#51:@wiz-boot [+d Core-Wizard (#184)]:  if (!valid(bloke) || !is_player(bloke))
#51:@chmod-raw [+d Core-Wizard (#184)]:    if (valid(object = player:my_match_object(spec[1])))
#51:@make-core-db [+d Wizard (#2)]:      o.owner = valid(o.owner) && o.owner.wizard ? $core_wizard | $hacker;
#51:renumber_for_core [+d Wizard (#2)]:    if (valid(j))
#51:dcd_renumber [-d Wizard (#2)]:    if (valid(j))
#52:@chmod*# [+d Core-Wizard (#184)]:    if (valid(object = player:my_match_object(spec[1])))
#52:@chparent [-d Core-Wizard (#184)]:  elseif (result == E_INVARG && (valid(object) && valid(parent)))
#52:eval eval-d eval+d [-d Core-Wizard (#184)]:      player:notify(tostr("=> ", val, "  ", valid(val) ? "(" + val:name() + ")" | ((a = $list_utils:assoc(val, {{#-1, "<$nothing>"}, {#-2, "<$ambiguous_match>"}, {#-3, "<$failed_match>"}})) ? a[2] | "<invalid>")));
#52:@list*# [+d Core-Wizard (#184)]:      while ((vloc = $code_utils:find_verb_named_1_based(what, spec[2], vloc + 1)) ? argspec && `verb_args(what, vloc) != argspec ! E_PERM => 1' | valid(what = parent(what)))
#52:@kill [-d Core-Wizard (#184)]:      if (!valid(realplayer) && !everyone)
#52:@d*isplay [-d Core-Wizard (#184)]:      while (!prop && valid(what = parent(what)))
#52:@db*size [+d Core-Wizard (#184)]:    if (valid(toobj(i)))
#52:@prospectusDB [-d Core-Wizard (#184)]:  player:notify(tostr("Objects owned by ", valid(dobj) ? dobj:name() | dobj, " (from #" + tostr(start) + " to #" + tostr(end), ")", ":"));
#52:@s*how [+d Core-Wizard (#184)]:    if (valid(object = player:my_match_object(spec[1])))
#52:@disown @disinherit [+d Core-Wizard (#184)]:    elseif (valid(dobj = $string_utils:literal_object(dobjstr)))
#52:#* [-d Core-Wizard (#184)]:  if (!valid(what) && match(whatstr, "^[0-9]+$"))
#52:@mailverb @mailme-verb @rubber-chicken [+d Core-Wizard (#184)]:          ownstr = tostr("Owner:            ", valid(owner) ? tostr(owner:name(), " (", owner, ")") | "*** NONE ***");
#52:@find [+d unknown hacker (#35)]:    if (!valid(target))
#52:find_verb [+d unknown hacker (#35)]:    if (valid(thing) && (mom = $object_utils:has_verb(thing, name)))
#52:find_verbs_on [+d unknown hacker (#35)]:  return {this, this.location, @valid(this.location) ? this.location:contents() | {}, @this:contents(), @this:features()};
#52:find_property [+d unknown hacker (#35)]:    if (valid(thing) && (mom = $object_utils:has_property(thing, name)))
#52:find_properties_on [+d unknown hacker (#35)]:  return {this, this.location, @valid(this.location) ? this.location:contents() | {}, @this:contents()};
#52:print_eval_result [+d Core-Wizard (#184)]:      0 && this:(tell)(tostr("=> ", val, "  ", valid(val) ? "(" + val:name() + ")" | ((a = $list_utils:assoc(val, {{#-1, "<$nothing>"}, {#-2, "<$ambiguous_match>"}, {#-3, "<$failed_match>"}})) ? a[2] | "<invalid>")));
#52:@regexp-d*isplay(new) @rd*isplay(new) [-d Core-Wizard (#184)]:      while (!prop && valid(what = parent(what)))
#52:@forked [+d Core-Wizard (#184)]:      owner_name = valid(owner) ? owner:name() | tostr("Dead ", owner);
#53:show_object [-d Core-Wizard (#184)]:    if (!valid(vals[i]))
#53:show_property [-d Core-Wizard (#184)]:    player:notify(tostr("Owner:        ", valid(owner) ? tostr(owner:name(), " (", owner, ")") | "*** NONE ***"));
#53:show_verbdef [+d Core-Wizard (#184)]:  player:notify(tostr("Owner:            ", valid(owner) ? tostr(owner:name(), " (", owner, ")") | "*** NONE ***"));
#53:find_verbs_containing [+d Core-Wizard (#184)]:      if (valid(o = toobj(i)))
#53:_find_verbs_containing [-d Core-Wizard (#184)]:      player:notify(tostr(o, ":", verbs[vnum], " [", index(verb_info(o, vnum)[2], "d") ? "+d " | "-d ", valid(owner) ? owner:name() | "Recycled Player", " (", owner, ")]:  ", l));
#53:find_verbs_matching [+d Core-Wizard (#184)]:      if (valid(o))
#53:_find_verbs_matching [-d Core-Wizard (#184)]:      player:notify(tostr(o, ":", verbs[vnum], " [", index(verb_info(o, vnum)[2], "d") ? "+d " | "-d ", valid(owner) ? owner:name() | "Recycled Player", " (", owner, ")]:  ", l));
#53:help_db_list [-d Core-Wizard (#184)]:  if (valid(location))
#53:task_valid [-d Core-Wizard (#184)]:  "task_valid(NUM id)";
#54:match_help_db [+d unknown hacker (#35)]:  elseif (valid(object = $string_utils:literal_object(name)) || object == $ambiguous_match)
#54:help_db_match_failed [+d Core-Wizard (#184)]:    if (!valid(match_result))
#54:topic_text [+d unknown hacker (#35)]:  if ((text = pass(@args)) != E_PROPNF || (!valid(object = $string_utils:match_object(what = args[1], player.location)) || !$object_utils:has_property(object, "help_text")))
#54:set_topic_text [-d Core-Wizard (#184)]:  if ((text = pass(@args)) != E_PROPNF || (!valid(object = $string_utils:match_object(what = args[1], player.location)) || !$object_utils:has_property(object, "help_text")))
#54:init_for_core [-d Core-Wizard (#184)]:    if (valid(i))
#19:recreate [+d Core-Wizard (#184)]:  if (!(valid(object) && (parent == #-1 || valid(parent))))
#19:object_audit_string [+d Core-Wizard (#184)]:  if (valid(o.location))
#19:audit_object_category [+d Core-Wizard (#184)]:  while (valid(o))
#19:do_audit do_prospectus [+d Core-Wizard (#184)]:      if (valid(o) && o.owner == who)
#18:match [+d Core-Wizard (#184)]:      if (valid(object))
#18:match_object [+d Core-Wizard (#184)]:  elseif (valid(pobject = who:match(string)) && string in {@pobject.aliases, pobject:name()} || !valid(here))
#18:match_player [+d unknown hacker (#35)]:    me = valid(me) && is_player(me) ? me | $failed_match;
#18:match_player_or_object [+d Core-Wizard (#184)]:    if (valid(o = player.location:match_object(args[i])))
#18:_cap_property [+d Core-Wizard (#184)]:    return valid(what) ? ucase ? what:namec() | what:name() | (ucase ? "N" | "n") + "othing";
#18:_toscalar [+d unknown hacker (#35)]:    if (valid(o) || thing in {"$failed_match", "$ambiguous_match"})
#18:parse_command [+d Core-Wizard (#184)]:    io = valid(loc) ? loc:match_object(is) | $string_utils:match_object(is, loc);
#18:_pronoun_sub [+d Core-Wizard (#184)]:  where = length(args) >= 4 ? args[4] | (valid(who) ? who.location | $nothing);
#18:name_and_number nn iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number [+d unknown hacker (#35)]:  return valid(what = args[1]) ? what:(verb)() | tostr(`{"nothing", "ambiguous match", "failed match"}[-tonum(what)] ! E_RANGE => "nothing"', " (", what, ")");
#18:match_room [+d Core-Wizard (#184)]:  elseif (valid(lit = $string_utils:literal_object(args[1])) && $object_utils:isa(lit, $room) || lit == $nowhere)
#18:print_with_names [+d Core-Wizard (#184)]:    return tostr(value, " ", valid(value) ? "(" + value:name() + ")" | ((a = $list_utils:assoc(value, {{#-1, "<$nothing>"}, {#-2, "<$ambiguous_match>"}, {#-3, "<$failed_match>"}})) ? a[2] | "<invalid>"));
#18:match_all match_exact_or_all [+d Core-Wizard (#184)]:      if (valid(object))
#9:r*ead [+d Core-Wizard (#184)]:  if (caller != this && !this:is_readable_by(valid(caller_perms()) ? caller_perms() | player))
#9:er*ase [+d Core-Wizard (#184)]:  if (this:is_writable_by(valid(caller_perms()) ? caller_perms() | player))
#9:wr*ite [+d Core-Wizard (#184)]:  if (this:is_writable_by(valid(caller_perms()) ? caller_perms() | player))
#9:deliver_to [+d Core-Wizard (#184)]:    "if (is_player(target) && !this:is_readable_by(valid(caller_perms()) ? caller_perms() | target))";
#126:moveto [+d Core-Wizard (#184)]:  if (!valid(where) || this:is_unlocked_for(where))
#126:can_get_from [+d unknown hacker (#35)]:  elseif (what == $failed_match && !valid(what = $string_utils:literal_object(whatstr)))
#5:moveto [+d Core-Wizard (#184)]:  if (!valid(where) || this:is_unlocked_for(where))
#5:gi*ve ha*nd [+d Core-Wizard (#184)]:  elseif (!valid(player.location))
#7:set_name [+d Core-Wizard (#184)]:  if (!($perm_utils:controls(cp = caller_perms(), this) || (valid(this.source) && this.source.owner == cp)))
#7:set_aliases [+d Core-Wizard (#184)]:  if ($perm_utils:controls(cp = caller_perms(), this) || (valid(this.source) && this.source.owner == cp))
#7:dest_who [+d Core-Wizard (#184)]:  if (typeof(dest = this.dest) == OBJ && valid(dest))
#7:dest_contents [+d Core-Wizard (#184)]:  if (typeof(dest = this.dest) == OBJ && valid(dest))
#7:dest_description [+d Core-Wizard (#184)]:  if (typeof(dest = this.dest) == OBJ && valid(dest))
#7:sub_who [+d Core-Wizard (#184)]:  if (typeof(dest = this.dest) == OBJ && valid(dest))
#3:match_exit match_entrance [+d unknown hacker (#35)]:      if (valid(e) && what in {e.name, @e.aliases})
#3:@exits [+d unknown hacker (#35)]:  who = valid(caller_perms()) ? caller_perms() | player;
#3:@entrances [+d Core-Wizard (#184)]:  who = valid(caller_perms()) ? caller_perms() | player;
#3:go [+d Core-Wizard (#184)]:  elseif (valid(exit = this:match_exit(dir)))
#3:@add-exit @addexit [+d Core-Wizard (#184)]:  elseif (typeof(dest) != OBJ || !valid(dest) || !($room in $object_utils:ancestors(dest)))
#3:recycle [+d Core-Wizard (#184)]:        if (typeof(x.home) == OBJ && valid(x.home))
#3:e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down [+d unknown hacker (#35)]:  if (valid(exit))
#3:accept_for_abode [+d unknown hacker (#35)]:  return valid(who) && (this.free_home || $perm_utils:controls(who, this) || who in this.residents) && this:accept(who);
#3:@remove-exit [+d Core-Wizard (#184)]:    name = valid(exit) ? exit:name() | "<recycled>";
#3:@remove-entrance [+d Core-Wizard (#184)]:  if (!valid(entrance))
#3:here_huh [+d Core-Wizard (#184)]:      if (typeof(o) == OBJ && valid(o) && (where = $object_utils:has_callable_verb(o, verb)))
#3:sit [+d unknown hacker (#35)]:  if (valid(caller_perms()) && !$perm_utils:controls(caller_perms(), player))
#3:topic_msg [+d unknown hacker (#35)]:  return $recycler:valid(this.topic_sign) ? this.topic_sign:topic_msg() | "";
#3:topic [+d unknown hacker (#35)]:  if (!$recycler:valid(this.topic_sign))
#3:set_topic_sign [+d topic-owner (#181)]:  if (!$recycler:valid(this.topic_sign) && caller == $topic)
#3:is_public_location [+d Core-Wizard (#184)]:  if (valid(this.topic_sign))
#1:match [+d unknown hacker (#35)]:  if (valid(whose))
#1:huh [+d Core-Wizard (#184)]:  if (!valid(cp))
#1:where_am_i where_are_you [+d unknown hacker (#35)]:  return valid(this.location) ? this.location:where_am_i(@args) | this.location;
#1:you [+d unknown hacker (#35)]:  return $recycler:valid(you = `this.you ! E_PROPNF => $nothing') ? you | this;
#1:modname_d [+d unknown hacker (#35)]:  elseif ($recycler:valid(pos = `$code_utils:verb_or_property(this, "possessor") ! E_PROPNF => #-1') && (art = `pos:name("pi") ! E_VERBNF => ""'))
#1:modname_i [+d unknown hacker (#35)]:  elseif ($recycler:valid(pos = `$code_utils:verb_or_property(this, "possessor") ! E_PROPNF => #-1') && (art = `pos:name("ip") ! E_VERBNF => ""'))
#1:nominate_for_core [+d unknown hacker (#35)]:  if (valid(parent(this)))
#1:core_names [+d Crag (#243)]:    if (typeof(v) == OBJ && valid(v))
#55:_recreate [+d Core-Wizard (#184)]:  elseif (!(what == #-1 || valid(what) && is_player(who)))
#55:show*-history [-d Core-Wizard (#184)]:  if ($perm_utils:controls(valid(caller_perms()) ? caller_perms() | player, this))
#55:request [+d Core-Wizard (#184)]:  dobj = valid(dobj) ? dobj | $string_utils:match_object(dobjstr, player.location);
#55:valid [+d Core-Wizard (#184)]:  "Usage:  valid(object)";
#63:replace [+d housekeeper (#63)]:  if (!($recycler:valid(object) && ($recycler:valid(place) || place == #-1) && !(object.location in this.recycle_bins)))
#63:cleanup_list [-d housekeeper (#63)]:    if (!valid(who = args[1]))
#63:add_cleanup [+d housekeeper (#63)]:  if (!valid(what))
#63:controls [+d housekeeper (#63)]:  elseif (who == cleanable.owner || !valid(dest = this.destination[i]) || who == dest.owner)
#63:is_watching [+d housekeeper (#63)]:  return valid(thing = args[1]) && thing:is_listening();
#65:moveto [+d unknown hacker (#35)]:  if (!valid(where) || this:is_unlocked_for(where))
#69:_listify [+d Core-Wizard (#184)]:  elseif (typeof(l) == OBJ && !valid(l))
#83:@inter*esting [+d unknown hacker (#35)]:    if (!valid(who) || !is_player(who))
#83:@uninter*esting [+d unknown hacker (#35)]:      if (!valid(who) || !is_player(who))
#83:goodbye [+d unknown hacker (#35)]:  if (!valid(user))
#83:announce2 [+d unknown hacker (#35)]:      if (valid(i) && typeof(`idle_time = idle_seconds(i) ! E_INVARG') != ERR && i.location != who.location)
#83:@wwho [+d Core-Wizard (#184)]:  if (valid(caller) && caller != player)
#82:open [+d Core-Wizard (#184)]:    if (valid(connect_to))
#82:open_connect_to [-d Core-Wizard (#184)]:  elseif (!valid(connect_to))
#94:get_guest [+d Core-Wizard (#184)]:    if (valid(foreigner = $string_utils:match_player(name = adjective + "_guest")) && !(foreigner in connected_players()))
#100:find_topics [-d Core-Wizard (#184)]:      if (valid(search) && (where = $object_utils:has_callable_verb(search, topic)) && (vnames = verb_info(where[1], topic)[3]) && topic in $string_utils:explode(strsub(vnames, "*", "")))
#111:init_for_core [-d Core-Wizard (#184)]:      if (typeof(o) == OBJ && o >= #0 && !valid(o))
#111:address_type_match_failed [-d Core-Wizard (#184)]:  if (valid(match))
#81:sit [+d unknown hacker (#35)]:  if (!valid(caller_perms()) && dobjstr && dobjstr != "down")
#81:sh*ove pu*sh [+d unknown hacker (#35)]:  if (!valid(dobj))
#80:insert_sitting [+d unknown hacker (#35)]:  if (!valid(what = args[1]))
#163:group_match_failed [+d Core-Wizard (#184)]:    if (!valid(match_result))
#163:@vacation [+d unknown hacker (#35)]:      if (group:is_member(valid(caller_perms()) ? caller_perms() | caller))
#163:@return [+d unknown hacker (#35)]:      if (group:is_member(valid(caller_perms()) ? caller_perms() | caller))
#163:nominate_for_core [+d unknown hacker (#35)]:  return {@pass(@args), $registrar, $error, $command_utils, $string_utils, $set_utils, $list_utils, $object_utils, $perm_utils, $code_utils, $you, $admin_group, @valid(this.mail_recipient) ? {this.mail_recipient} | {}};
#107:is_writable_by [+d Core-Wizard (#184)]:  return valid(grp = this.owner_group) && grp:is_member(args[1]) || pass(@args);
#108:add_relation [+d Core-Wizard (#184)]:  elseif (typeof(master = args[1]) != OBJ || !valid(master) || !is_player(master))
#108:clean_relations [+d Core-Wizard (#184)]:      while (!valid(master = this.primary[x]) || !valid(slave = this.secondary[x]) || !is_player(master) || !is_player(slave))
#108:add_shared [+d Core-Wizard (#184)]:  elseif (!valid(shared = args[1]) || !is_player(shared))
#108:is_registered_primary_char [+d Core-Wizard (#184)]:  elseif (!valid(who))
#108:delete_shared [+d Core-Wizard (#184)]:      if (!valid(x) || !is_player(x))
#124:is_member [+d Core-Wizard (#184)]:  return valid(args[1]) && is_player(args[1]) && args[1].programmer;
#8:@lock_for_open @lock-for-open [+d unknown hacker (#35)]:  if (!$perm_utils:controls(valid(cp = caller_perms()) ? cp | player, this))
#8:@unlock_for_open @unlock-for-open [+d unknown hacker (#35)]:  if (!$perm_utils:controls(valid(cp = caller_perms()) ? cp | player, this))
#173:find_topics [+d unknown hacker (#35)]:  if (typeof(o) != OBJ || !valid(o))
#99:description [+d Core-Wizard (#184)]:  return {@pass(@args), @valid(this.public_identity) ? {tostr("(This is a testing character for ", this.public_identity:dname(), ".)")} | {}};
#178:event_exit [-d topic-owner (#181)]:  if (!valid(this.location))
#178:moveto [+d Core-Wizard (#184)]:  if (!valid(this.location) && $object_utils:isa(args[1], $room))
#117:parse_object_args [-d unknown hacker (#35)]:    if (valid(match))
#170:group_match_failed [+d unknown hacker (#35)]:    if (!valid(match_result))
#121:find_other_side [+d unknown hacker (#35)]:  if (typeof(dest = this.dest) == OBJ && valid(dest) && typeof(source = this.source) == OBJ && valid(source))
#121:setup_connection [+d unknown hacker (#35)]:  if (valid(other_side = this:find_other_side()))
#121:other_side obj_other_side [+d unknown hacker (#35)]:  if (!valid(this.other_side) || (valid(this.other_side) && this.other_side.other_side != this))
#121:set_user_key set_close_delay [+d unknown hacker (#35)]:    if (valid(other_side = this:other_side()))
#121:pull [+d unknown hacker (#35)]:  elseif (!valid(other = this:other_side()))
#174:parse_create_args [+d Quota (#185)]:  if (length(args) == 1 || !valid(args[2]))
#174:reimburse_quota [+d Quota (#185)]:    elseif (valid(who) && is_player(who) && $object_utils:has_property(what, "object_size") && !is_clear_property(who, "size_quota"))
#174:do_summary [+d Quota (#185)]:  if (valid(eldest))
#174:do_breakdown [+d Core-Wizard (#184)]:  who = valid(caller_perms()) ? caller_perms() | player;
#174:recent_object_bytes [-d Core-Wizard (#184)]:  if (!valid(object))
#174:measurement_task [+d Core-Wizard (#184)]:  elseif (task_id() != this.measurement_task && $code_utils:task_valid(this.measurement_task))
#182:walking_step [+d Core-Wizard (#184)]:    if (!valid(e = room:match_exit(exit)))
#203:is_packing pack_task is_unpacking unpacking_task [+d unknown hacker (#35)]:  if ($code_utils:task_valid(this.operation_in_progress))
#203:unpack_from [+d Core-Wizard (#184)]:        if (typeof(o) == OBJ && $recycler:valid(o))
#203:resolve_owner [+d unknown hacker (#35)]:    elseif (typeof(own = `caller_perms().public_identity ! ANY') == OBJ && valid(own))
#203:pack_object_info [+d Core-Wizard (#184)]:  if (valid(o.location) && (name = this:obj_name(o.location)) && name[1] != "#")
#203:unpack_verb [+d Core-Wizard (#184)]:  elseif (!valid(wot))
#203:match_sink_failed match_source_failed [+d unknown hacker (#35)]:  elseif (!valid(v[1]))
#203:@add [+d unknown hacker (#35)]:        if (!valid(o))
#203:@remove [+d Core-Wizard (#184)]:        if (!valid(o))
#203:obj_name [+d unknown hacker (#35)]:  elseif (!$recycler:valid(o))
#203:display_dependencies [+d Core-Wizard (#184)]:    lines = {@lines, {valid(item) ? item:name() | "", tostr(item), defined_as}};
#203:update_from [+d Core-Wizard (#184)]:        if (typeof(o) == OBJ && $recycler:valid(o))
#203:update_verb [+d Core-Wizard (#184)]:  elseif (!valid(wot))
#203:@remove-local [+d Core-Wizard (#184)]:    if (!valid(what = this:resolve_name(whatstr)))
#206:nominate_for_core [+d Core-Wizard (#184)]:    if (typeof(object) == OBJ && valid(object))
#212:send_queued_mail [+d Core-Wizard (#184)]:    if ($code_utils:task_valid(this.queued_mail_task))
#223:open [+d Core-Wizard (#184)]:  if (!valid(session = $mcp:session_for(connection, type.parent_package)))
#223:mcp_receive [+d Core-Wizard (#184)]:  "valid(cord) && cord:receive(messagestr, assocs);";
#223:mcp_closed [+d Core-Wizard (#184)]:  valid(cord) && cord:closed();
#223:cleanup [-d Core-Wizard (#184)]:  if (valid(c = cord.our_side))
#213:session_for [+d Core-Wizard (#184)]:  elseif (!valid(`supplementary_listener = $mcp.supplementary_listener ! E_PROPNF => #-1'))
#213:user_created user_connected user_reconnected [+d Core-Wizard (#184)]:    if ($recycler:valid(who.out_of_band_session))
#213:user_disconnected user_client_disconnected [+d Core-Wizard (#184)]:    if ($recycler:valid(who.out_of_band_session))
#213:do_out_of_band_command [+d Core-Wizard (#184)]:    if ($recycler:valid(session = player.out_of_band_session))
#213:wait_for_package [+d unknown hacker (#35)]:  if (valid(session = this:session_for(who)))
#213:handles_package [+d unknown hacker (#35)]:  if (valid(session = this:session_for(who, package)))
#193:@reg*ister @@reg*ister [+d unknown hacker (#35)]:  cp = valid(cp = caller_perms()) ? cp | player;
#193:@unreg*ister @@unreg*ister [+d unknown hacker (#35)]:  cp = valid(cp = caller_perms()) ? cp | player;
#190:match_all_rooms [+d unknown hacker (#35)]:  elseif (valid(room = $string_utils:literal_object(args[1])) && $object_utils:isa(room, $room) || room == $nowhere)
#190:match_room [+d unknown hacker (#35)]:      if (!valid(plr:my_match_player(a[1])))
#190:_restrict_by_owner [+d unknown hacker (#35)]:    if (!res && valid(plr = `plr.public_identity ! E_PROPNF => #-1'))
#190:_restrict_ship [+d unknown hacker (#35)]:  if (!valid(type))
#190:_restrict_party _restrict_partying _restrict_occupied [+d unknown hacker (#35)]:  if (!valid(this.party_feature))
#190:_restrict_nonferry [+d unknown hacker (#35)]:    if (!valid(oo) || !$object_utils:isa(oo, ferry))
#238:get_topic [+d unknown hacker (#35)]:  if (!valid(group))
#227:modname [+d unknown hacker (#35)]:  elseif ($recycler:valid(pos = `$code_utils:verb_or_property(what, "possessor") ! E_PROPNF => #-1') && (art = `pos:name("pi") ! E_VERBNF => ""'))
#227:mentioned [+d unknown hacker (#35)]:  elseif ($recycler:valid(pos = `$code_utils:verb_or_property(what, "possessor") ! E_PROPNF => #-1') && (ret = `pos:name_mentioned(mentioned, "pi") ! E_VERBNF => mentioned'))
#227:for_pre [+d unknown hacker (#35)]:  elseif ($recycler:valid(pos = `$code_utils:verb_or_property(what, "possessor") ! E_PROPNF => #-1') && ({new_context, art} = `pos:name_for(context, "pi") ! E_VERBNF => {context, ""}') && art)
#239:modname [+d unknown hacker (#35)]:  elseif ($recycler:valid(pos = `$code_utils:verb_or_property(what, "possessor") ! E_PROPNF => #-1') && (art = `pos:name("pi") ! E_VERBNF => ""'))
#239:mentioned [+d unknown hacker (#35)]:  elseif ($recycler:valid(pos = `$code_utils:verb_or_property(what, "possessor") ! E_PROPNF => #-1') && (ret = `pos:name_mentioned(mentioned, "pi") ! E_VERBNF => mentioned'))
#239:for_pre [+d unknown hacker (#35)]:  elseif ($recycler:valid(pos = `$code_utils:verb_or_property(what, "possessor") ! E_PROPNF => #-1') && ({new_context, art} = `pos:name_for(context, "pi") ! E_VERBNF => {context, ""}') && art)
#499:sit [+d Crag (#243)]:  if (!valid(caller_perms()) && dobjstr && dobjstr != "down")
#67:`* -* [+d Core-Wizard (#184)]:  if (!valid(who))
#151:feature_match_failed [+d Core-Wizard (#184)]:    if (!valid(match_result))
#151:init_for_core [+d unknown hacker (#35)]:      if (valid(feat))
#90:send_to [-d Core-Wizard (#184)]:    if (!valid(it))
#90:make_link [+d J. Text (#176)]:  return this:make_named_link(tostr(valid(object) ? object.name | "<void>", " (", object, ")"), object);
#90:make_named_link [-d J. Text (#176)]:  if (valid(args[2]) || args[2] in {#-1, #-2, #-3})
#169:match_help_dbs [+d unknown hacker (#35)]:  elseif (valid(object = $string_utils:literal_object(name)))
#169:help_dbs_match_failed [-d Core-Wizard (#184)]:    if (valid(o = $string_utils:literal_object(string)))
#169:@showhelp [-d Core-Wizard (#184)]:    if (valid(player.focus_object))
#143:send_to [-d Core-Wizard (#184)]:            if (valid(base))
#149:@net-who @@who @@who-cg [-d Core-Wizard (#184)]:            nl = max(length(tostr(b, valid(b) ? b:name() | "")), nl);
#149:@new-password @newpassword @new-password-cg [+d Core-Wizard (#184)]:  if (!valid(dobj))
#202:_emit_object_info [+d Core-Wizard (#184)]:  if ($recycler:valid(o.location))
#218:set_parent_package [+d Core-Wizard (#184)]:    if ($recycler:valid(this.parent_package))
#204:_send_buffered [+d unknown hacker (#35)]:  if (!$code_utils:task_valid(this.buffer_send_task))
#204:_buffer_reset [+d unknown hacker (#35)]:  if ($code_utils:task_valid(this.buffer_send_task))
#209:init_for_core [+d unknown hacker (#35)]:    if (!valid(this:match_package(name)))
#209:trusts [+d Core-Wizard (#184)]:  if (!valid(this.group))
#209:is_trusted [+d Core-Wizard (#184)]:    if (valid(this.group))
#215:handle_can [+d Core-Wizard (#184)]:    if (valid(pkg = $mcp.registry:match_package(package)))

Total: 361 verbs.
#55:"valid" this none this
// Usage:  valid(object)
// True if object is valid and not $garbage.
return typeof(args[1]) == OBJ && valid(args[1]) && !$object_utils:isa(args[1], $garbage);
Recycling Center (#55) [ readable ]
  Owned by unknown hacker (#35).
  Child of Helpful Object (#250).
   #55:_recreate                Core-Wizard (#184)   rxd    this none this
   #55:_recycle                 Core-Wizard (#184)   rxd    this none this
   #55:_create                  Core-Wizard (#184)   rx     this none this
   #55:addhist                  Core-Wizard (#184)   rxd    this none this
   #55:show*-history            Core-Wizard (#184)   rx     this none none
   #55:request                  Core-Wizard (#184)   r d    any out of/from inside/from this
   #55:setup_toad               Core-Wizard (#184)   rx     this none this
   #55:add_orphan               unknown hacker (#35) rxd    this none this
   #55:remove_orphan            unknown hacker (#35) rxd    this none this
   #55:valid                    Core-Wizard (#184)   rxd    this none this
   #55:init_for_core            Core-Wizard (#184)   rxd    this none this
   #55:accept                   Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#55:"_create" this none this
// :_create(parent[, owner]) => OBJ or ERR
e = set_task_perms(caller_perms());
if (typeof(e) == ERR)
  return e;
else
  val = this:_recreate(@args);
  return val == E_NONE ? $quota_utils:bi_create(@args) | val;
endif
Last modified Fri Apr 26 23:49:39 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile_class = this:pile_type(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 176404771976
#$#* 176404771976 content: // Usage: pile <thing> on <other thing>
#$#* 176404771976 content: //  This forms a pile out of the dobj and iobj.
#$#* 176404771976 content: //  (based on $thing:drop)
#$#* 176404771976 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 176404771976 content: if (this.location != player)
#$#* 176404771976 content:   player:tell("You don't have that.");
#$#* 176404771976 content: elseif (!player.location:accept(this))
#$#* 176404771976 content:   player:tell("You can't pile that here.");
#$#* 176404771976 content: else
#$#* 176404771976 content:   pile_class = this:pile_type(iobj);
#$#* 176404771976 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 176404771976 content:     return this:drop(@args);
#$#* 176404771976 content:   endif
#$#* 176404771976 content:   pile_class:create(this, iobj, player.location);
#$#* 176404771976 content:   if (this.location == pile)
#$#* 176404771976 content:     player:tell_lines(this:pile_succeeded_msg() || "Done.");
#$#* 176404771976 content:     if (msg = this:opile_succeeded_msg())
#$#* 176404771976 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 176404771976 content:     endif
#$#* 176404771976 content:   else
#$#* 176404771976 content:     player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
#$#* 176404771976 content:     if (msg = this:opile_failed_msg())
#$#* 176404771976 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 176404771976 content:     endif
#$#* 176404771976 content:   endif
#$#* 176404771976 content: endif
#$#: 176404771976
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 4195993477
#$#* 4195993477 content: // :create(top, bottom, where)
#$#* 4195993477 content: // Make a pile of top on bottom in location where
#$#* 4195993477 content: // TODO: put some kind of security check in here?
#$#* 4195993477 content: // also figure out who should be the owner of a pile
#$#* 4195993477 content: {top, bottom, where} = args;
#$#* 4195993477 content: new_pile = $recycler:_create(this);
#$#* 4195993477 content: if (!new_pile)
#$#* 4195993477 content:   return 0;
#$#* 4195993477 content: endif
#$#: 4195993477
That object does not define that verb.
The verb :moveto is on   Crag(#243)--generic wizard(#51)   North Vestibule(#70)--generic room(#3)   brown Persian rug(#257)--generic thing(#5)   detailed painting(#262)--generic container(#126)   timbered ceiling(#273)--generic container(#126)   chaise longues(#274)--generic piece of furniture(#81)   butler's desk(#275)--generic container(#126)   demi-lune table(#277)--generic container(#126)   Wind-Up Duck(#261)--generic thing(#5)   microphone(#282)--generic thing(#5)   porter's chair(#286)--generic piece of furniture(#81)   How $staff will notice people rummaging(#290)--generic thing(#5)   stormagnet(#246)--generic wizard(#51)   settee(#502)--generic piece of furniture(#81)   Group Utilities(#248)--root class(#1)   MCP parent(#251)--root class(#1)   Parsing objects(#252)--root class(#1)   Text generation objects(#253)--root class(#1)   Abstract class(#254)--root class(#1)   Generic Pilable Thing(#255)--generic thing(#5)   Generic Pile(#242)--root class(#1)   Generic Nesting Decoration(#265)--generic container(#126)   Generic Delegator(#269)--root class(#1)   Generic Delegate(#270)--root class(#1)   New Generic Room(#271)--root class(#1)   Room Exit Delegate(#279)--root class(#1)   Stage-Talk Feature(#67)--Generic Feature Object(#65)   Thinking Feature(#68)--Generic Feature Object(#65)
#3:"moveto" this none this
if (caller in {this, this.owner} || $perm_utils:controls(caller_perms(), this))
  return pass(@args);
else
  return E_PERM;
endif
#7:"invoke" this none this
if (typeof(this.obvious) == LIST)
  this.obvious = setadd(this.obvious, player);
endif
this:move(player);
Last modified Sat Nov 17 21:46:31 2007 PST by Xplat (#4014) (on Waterpoint).
#7:"move" (what)
start = what.location;
if (start != this.source)
  what:tell("You can't go that way.");
  return;
endif
unlocked = this:is_unlocked_for(what);
if (typeof(dest = this.dest) == LIST)
  dest = dest[1]:create(listdelete(dest, 1));
endif
if (unlocked)
  dest:bless_for_entry(what);
endif
start:broadcast_event_move_by_exit_attempted(what, this);
dest:broadcast_event_move_by_exit_attempted(what, this);
if (unlocked && dest:accept(what))
  if (msg = this:leave_msg(what))
    what:tell_lines(msg);
  endif
  what:moveto(dest);
  start:broadcast_event_move_by_exit_completed(what, this);
  what.location:broadcast_event_move_by_exit_completed(what, this);
  if (what.location != start || dest == start)
    // Don't print oleave messages if WHAT didn't actually go anywhere...
    // Unless the exit is actually a loop...
    msg = this:oleave_msg(what) || this:defaulting_oleave_msg(what);
    start:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg || what:verb_sub("has") + " left.");
  endif
  if (what.location == dest)
    // Don't print arrive messages if WHAT didn't really end up there...
    if (msg = this:arrive_msg(what))
      what:tell_lines(msg);
    endif
    msg = this:oarrive_msg(what) || this:defaulting_oarrive_msg(what);
    what.location:announce_all_but({what}, this.prefix_name ? what:inamec() + " " | "", msg || what:verb_sub("has") + " arrived.");
    this:sweep_for_followers(what);
  endif
else
  start:broadcast_event_move_by_exit_failed(what, this);
  what.location:broadcast_event_move_by_exit_failed(what, this);
  if (msg = this:nogo_msg(what))
    what:tell_lines(msg);
  else
    what:tell("You can't go that way.");
  endif
  if (msg = this:onogo_msg(what))
    what.location:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg);
  endif
endif
// Copied from generic exit (#7):move by Ken (#75) Tue Nov  7 19:12:28 1995 CST
// Copied from generic exit (#7):move(old) by Ken (#75) Tue Nov  7 19:32:34 1995 CST
-----
`HELP MOVE' AMBIGUOUS
=====================

Sorry, the topic `move' is ambiguous.  I don't know which of the following topics you mean:

`help @move'[1]         `help move()'[2]        `help movement'[3]

-----
MOVE()
======

Syntax:  move (obj <what>, obj <where>)   => none

Changes <what>'s location to be <where>.  This is a complex process because a number of permissions checks and notifications must be performed.  The actual movement takes place as described in the following paragraphs.

<what> should be a valid object and <where> should be either a valid object or `#-1' (denoting a location of `nowhere'); otherwise `E_INVARG' is raised.  The programmer must be either the owner of <what> or a wizard; otherwise, `E_PERM' is raised.

If <where> is a valid object, then the verb-call

    <where>:accept(<what>)

is performed before any movement takes place.  If the verb returns a false value and the programmer is not a wizard, then <where> is considered to have refused entrance to <what>; `move()' raises `E_NACC'.  If <where> does not define an `accept' verb, then it is treated as if it defined one that always returned false.

If moving <what> into <where> would create a loop in the containment hierarchy (i.e., <what> would contain itself, even indirectly), then `E_RECMOVE' is raised instead.

The `location' property of <what> is changed to be <where>, and the `contents' properties of the old and new locations are modified appropriately.  Let <old-where> be the location of <what> before it was moved.  If <old-where> is a valid object, then the verb-call

    <old-where>:exitfunc(<what>)

is performed and its result is ignored; it is not an error if <old-where> does not define a verb named `exitfunc'.  Finally, if <where> and <what> are still valid objects, and <where> is still the location of <what>, then the verb-call

    <where>:enterfunc(<what>)

is performed and its result is ignored; again, it is not an error if <where> does not define a verb named `enterfunc'.

Object #70 does not define that verb, but its ancestor #1 does.
#1:"accept" this none this
return this:acceptable(@args);
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Sun Mar 31 09:28:03 2013 PDT by core initialization (#191) (on core).
#3:"acceptable" (what)
return this:is_unlocked_for(what) && (this.free_entry || (what == this.blessed_object && task_id() == this.blessed_task) || what.owner == this.owner || (typeof(this.residents) == LIST && what in this.residents) || $object_utils:contains(this, what));
Recycling Center (#55) [ readable ]
  Owned by unknown hacker (#35).
  Child of Helpful Object (#250).
   #55:_recreate                Core-Wizard (#184)   rxd    this none this
   #55:_recycle                 Core-Wizard (#184)   rxd    this none this
   #55:_create                  Core-Wizard (#184)   rx     this none this
   #55:addhist                  Core-Wizard (#184)   rxd    this none this
   #55:show*-history            Core-Wizard (#184)   rx     this none none
   #55:request                  Core-Wizard (#184)   r d    any out of/from inside/from this
   #55:setup_toad               Core-Wizard (#184)   rx     this none this
   #55:add_orphan               unknown hacker (#35) rxd    this none this
   #55:remove_orphan            unknown hacker (#35) rxd    this none this
   #55:valid                    Core-Wizard (#184)   rxd    this none this
   #55:init_for_core            Core-Wizard (#184)   rxd    this none this
   #55:accept                   Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Fri May 30 15:17:24 1997 PDT by Xythian (#199) (on Waterpoint).
#55:"_recycle" (item)
// Take the object in args[1], and turn it into a child of #1 owned by $hacker.
if (!$perm_utils:controls(caller_perms(), item))
  return E_PERM;
endif
this:addhist(caller_perms(), item);
if (why = $builtins:_protect_recycle(item))
  return raise(E_INVARG, why);
endif
// this is dangerous and stupid, so it's commented out.
// if (is_player(item))
//   $wiz_utils:unset_player(item);
// endif
// ...recreate can fail (:recycle can crash)...
this:add_orphan(item);
$quota_utils:preliminary_reimburse_quota(item.owner, item);
$building_utils:recreate(item, $garbage);
this:remove_orphan(item);
// ...
$wiz_utils:set_owner(item, $hacker);
if (is_player(item))
  $wiz_utils:unset_player(item);
endif
item.name = tostr("Recyclable ", item);
move(item, this);
0 errors.
Verb programmed.
Last modified Sat Apr 27 00:04:23 2013 PDT by Crag (#243).
#242:"create" this none this
// :create(top, bottom, where)
// Make a pile of top on bottom in location where.
// If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
// Otherwise we back out our changes, recycle the pile and return 0.
// 
// TODO: put some kind of security check in here?
// also figure out who should be the owner of a pile
{top, bottom, where} = args;
new_pile = $recycler:_create(this);
if (!new_pile)
  return 0;
endif
move(new_pile, where);
if (new_pile:location() == where)
  new_pile:add_item(bottom);
  if (bottom:location() == new_pile)
    new_pile:add_item(top);
    if (top:location() != new_pile)
      new_pile:remove_item(bottom);
    else
      return new_pile;
    endif
  endif
endif
$recycler:_recycle(new_pile);
return 0;
=> #255 (Generic Pilable Thing)
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 177478849278
#$#* 177478849278 content: // Usage: pile <thing> on <other thing>
#$#* 177478849278 content: //  This forms a pile out of the dobj and iobj.
#$#* 177478849278 content: //  (based on $thing:drop)
#$#* 177478849278 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 177478849278 content: if (this.location != player)
#$#* 177478849278 content:   player:tell("You don't have that.");
#$#* 177478849278 content: elseif (!player.location:accept(this))
#$#* 177478849278 content:   player:tell("You can't pile that here.");
#$#* 177478849278 content: else
#$#* 177478849278 content:   pile_class = this:pile_type(iobj);
#$#* 177478849278 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 177478849278 content:     return this:drop(@args);
#$#* 177478849278 content:   endif
#$#* 177478849278 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 177478849278 content:   if (this.location == pile)
#$#* 177478849278 content:     player:tell_lines(this:pile_succeeded_msg() || "Done.");
#$#* 177478849278 content:     if (msg = this:opile_succeeded_msg())
#$#* 177478849278 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 177478849278 content:     endif
#$#* 177478849278 content:   else
#$#* 177478849278 content:     player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
#$#* 177478849278 content:     if (msg = this:opile_failed_msg())
#$#* 177478849278 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 177478849278 content:     endif
#$#* 177478849278 content:   endif
#$#* 177478849278 content: endif
#$#: 177478849278
0 errors.
Verb programmed.
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  Location Crag (#243).
  #242:pile                     Crag (#243)          r d    any on top of/on/onto/upon this
  #242:create_pile              Crag (#243)          rxd    this none this
  #242:create                   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Fri Apr 26 23:08:39 2013 PDT by Crag (#243).
#242:"create_pile" ()
That verb has not been programmed.
Verb #242:create_pile [2] {this none this} removed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:pile any on this" name: "MOO verb: #242:pile any on this" type: moo-code content*: "" _data-tag: 140360061379
#$#: 140360061379
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:pile any on this" name: "MOO verb: #242:pile any on this" type: moo-code content*: "" _data-tag: 44995646480
#$#: 44995646480
Searching for core verbs containing the string ":location" ...

#4:@location*s [+d Core-Wizard (#184)]:  player:notify($string_utils:names_of({what, @$object_utils:locations(what)}));
#1:location [+d Crag (#243)]:  return this.location:location_for_caller();
#8:open [+d unknown hacker (#35)]:  here = this:location();
#178:pop [+d topic-owner (#181)]:          this:location():room_announce_all("The groundskeeper comes by and picks up the blank topic sign.");

Total: 4 verbs.
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
    #1:core_names               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 20 14:20:34 2013 PDT by Crag (#243).
#1:"location_for_caller" this none this
// We're assuming the caller is actually in this. If not, why are they calling? The point is that group objects which want their contents to not know they're contained can override this.
return this;
-----
`HELP CALLER' AMBIGUOUS
=======================

Sorry, the topic `caller' is ambiguous.  I don't know which of the following topics you mean:

`help caller_perms()'[1]                        `help callers()'[2]

-----
CALLERS()
=========

Syntax:  callers ([<include-line-numbers>])   => list

Returns information on each of the verbs and built-in functions currently waiting to resume execution in the current task.  When one verb or function calls another verb or function, execution of the caller is temporarily suspended, pending the called verb or function returning a value.  At any given time, there could be several such pending verbs and functions: the one that called the currently executing verb, the verb or function that called that one, and so on.  The result of `callers()' is a list, each element of which gives information about one pending verb or function in the following format:

    {<this>, <verb-name>, <programmer>, <verb-loc>, <player>, <line-number>}

For verbs, <this> is the initial value of the variable `this' in that verb, <verb-name> is the name used to invoke that verb, <programmer> is the player with whose permissions that verb is running, <verb-loc> is the object on which that verb is defined, <player> is the initial value of the variable `player' in that verb, and <line-number> indicates which line of the verb's code is executing.  The <line-number> element is included only if the <include-line-numbers> argument was provided and true.

For functions, <this>, <programmer>, and <verb-loc> are all `#-1', <verb-name> is the name of the function, and <line-number> is an index used internally to determine the current state of the built-in function.  The simplest correct test for a built-in function entry is

    (VERB-LOC == #-1  &&  PROGRAMMER == #-1  &&  VERB-NAME != "")

The first element of the list returned by `callers()' gives information on the verb that called the currently-executing verb, the second element describes the verb that called that one, and so on.  The last element of the list describes the first verb called in this task.

Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  Location Crag (#243).
  #242:pile                     Crag (#243)          r d    any on top of/on/onto/upon this
  #242:create                   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb added [3] (2).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:location_for_caller ()" name: "MOO verb: #242:location_for_caller ()" type: moo-code content*: "" _data-tag: 170391490581
#$#: 170391490581
Last modified Sat Apr 20 14:20:55 2013 PDT by Crag (#243).
#1:"location" this none this
return this.location:location_for_caller();
Last modified Sat Apr 20 14:20:34 2013 PDT by Crag (#243).
#1:"location_for_caller" this none this
// We're assuming the caller is actually in this. If not, why are they calling? The point is that group objects which want their contents to not know they're contained can override this.
return this;
Last modified Sat Apr 20 14:20:55 2013 PDT by Crag (#243).
#1:"location" this none this
return this.location:location_for_caller();
0 errors.
Verb programmed.
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  Location Crag (#243).
  #242:pile                     Crag (#243)          r d    any on top of/on/onto/upon this
  #242:create                   Crag (#243)          rxd    this none this
  #242:location_for_caller      Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 20 14:20:55 2013 PDT by Crag (#243).
#1:"location" this none this
return this.location:location_for_caller();
Last modified Sat Apr 20 14:20:34 2013 PDT by Crag (#243).
#1:"location_for_caller" this none this
// We're assuming the caller is actually in this. If not, why are they calling? The point is that group objects which want their contents to not know they're contained can override this.
return this;
0 errors.
Verb programmed.
Verb added [4] (3).
That is not a valid command.
Last modified Sat Apr 27 00:04:23 2013 PDT by Crag (#243).
#242:"create" this none this
// :create(top, bottom, where)
// Make a pile of top on bottom in location where.
// If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
// Otherwise we back out our changes, recycle the pile and return 0.
// 
// TODO: put some kind of security check in here?
// also figure out who should be the owner of a pile
{top, bottom, where} = args;
new_pile = $recycler:_create(this);
if (!new_pile)
  return 0;
endif
move(new_pile, where);
if (new_pile:location() == where)
  new_pile:add_item(bottom);
  if (bottom:location() == new_pile)
    new_pile:add_item(top);
    if (top:location() != new_pile)
      new_pile:remove_item(bottom);
    else
      return new_pile;
    endif
  endif
endif
$recycler:_recycle(new_pile);
return 0;
Verb added [5] (4).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item ()" name: "MOO verb: #242:add_item ()" type: moo-code content*: "" _data-tag: 5277466782
#$#: 5277466782
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 00:05:40 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile_class = this:pile_type(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile = pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
Verb added [2] (1).
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:pile any on this" name: "MOO verb: #242:pile any on this" type: moo-code content*: "" _data-tag: 210398309583
#$#* 210398309583 content: // pile any on this
#$#* 210398309583 content: this:add_item(dobj);
#$#* 210398309583 content: if (dobj.location != this)
#$#* 210398309583 content:   $you:say_action(this:pile_failed_message());
#$#* 210398309583 content: else
#$#* 210398309583 content:   $you:say_action(this:pile_succeeded_message());
#$#* 210398309583 content: endif
#$#: 210398309583
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 158449350784
#$#* 158449350784 content: // Usage: pile <thing> on <other thing>
#$#* 158449350784 content: //  This forms a pile out of the dobj and iobj.
#$#* 158449350784 content: //  (based on $thing:drop)
#$#* 158449350784 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 158449350784 content: if (this.location != player)
#$#* 158449350784 content:   player:tell("You don't have that.");
#$#* 158449350784 content: elseif (!player.location:accept(this))
#$#* 158449350784 content:   player:tell("You can't pile that here.");
#$#* 158449350784 content: else
#$#* 158449350784 content:   pile_class = this:pile_type(iobj);
#$#* 158449350784 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 158449350784 content:     return this:drop(@args);
#$#* 158449350784 content:   endif
#$#* 158449350784 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 158449350784 content:   if (this.location == pile)
#$#* 158449350784 content:     player:tell_lines(this:pile_succeeded_msg() || "Done.");
#$#* 158449350784 content:     if (msg = this:opile_succeeded_msg())
#$#* 158449350784 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 158449350784 content:     endif
#$#* 158449350784 content:   else
#$#* 158449350784 content:     player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
#$#* 158449350784 content:     if (msg = this:opile_failed_msg())
#$#* 158449350784 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 158449350784 content:     endif
#$#* 158449350784 content:   endif
#$#* 158449350784 content: endif
#$#: 158449350784
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile_class ()" name: "MOO verb: #255:pile_class ()" type: moo-code content*: "" _data-tag: 142697405385
#$#: 142697405385
0 errors.
Verb programmed.
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  Location Crag (#243).
  #242:pile                     Crag (#243)          r d    any on top of/on/onto/upon this
  #242:create                   Crag (#243)          rxd    this none this
  #242:location_for_caller      Crag (#243)          rxd    this none this
  #242:add_item                 Crag (#243)          rxd    this none this
  #242:remove_item              Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Your current object is now #255.
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
  #255:pile_class               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
You drop the Generic Pilable Thing.
Carrying:
 some Group Utilities                    a Generic Nesting Decoration
 a MCP parent                            a Generic Delegator
 a Parsing objects                       a Generic Delegate
 a Text generation objects               a New Generic Room
 an Abstract class                       a Room Exit Delegate
 a Generic Pile                          
You now have top of pile with object number #503 and parent Generic Pilable Thing (#255).
The created object is now your current object.
You now have bottom of pile with object number #504 and parent Generic Pile (#242).
The created object is now your current object.
You drop the bottom of pile.
#255:pile (this == #503), line 21:  Verb not found
(End of traceback)
Your current object is now a Generic Pilable Thing (#255).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 67167490886
#$#* 67167490886 content: // Usage: pile <thing> on <other thing>
#$#* 67167490886 content: //  This forms a pile out of the dobj and iobj.
#$#* 67167490886 content: //  (based on $thing:drop)
#$#* 67167490886 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 67167490886 content: if (this.location != player)
#$#* 67167490886 content:   player:tell("You don't have that.");
#$#* 67167490886 content: elseif (!player.location:accept(this))
#$#* 67167490886 content:   player:tell("You can't pile that here.");
#$#* 67167490886 content: else
#$#* 67167490886 content:   pile_class = this:pile_class(iobj);
#$#* 67167490886 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 67167490886 content:     return this:drop(@args);
#$#* 67167490886 content:   endif
#$#* 67167490886 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 67167490886 content:   if (this.location == pile)
#$#* 67167490886 content:     player:tell_lines(this:pile_succeeded_msg() || "Done.");
#$#* 67167490886 content:     if (msg = this:opile_succeeded_msg())
#$#* 67167490886 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 67167490886 content:     endif
#$#* 67167490886 content:   else
#$#* 67167490886 content:     player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
#$#* 67167490886 content:     if (msg = this:opile_failed_msg())
#$#* 67167490886 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 67167490886 content:     endif
#$#* 67167490886 content:   endif
#$#* 67167490886 content: endif
#$#: 67167490886
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of Generic Virtual Reality Object (#291).
  Location generic room (#3).
    #5:"get take"               Core-Wizard (#184)   rxd    this none none
    #5:"d*rop throw chuck"      Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Object #255 does not define that verb, but its ancestor #5 does.
#5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" this none this
set_task_perms(caller_perms());
return $string_utils:pronoun_sub(this.(verb));
@integrate_room me isn't set.
@integrate_player me is "%tn %t:(is) riding %tln piggyback."
@integrate_container me is "%tn is in %tld! That can't be good..."
@in me is "in"
@page_absent me is "%Nd %n:(is) not currently logged in."
@page_origin me isn't set.
@page_echo me isn't set.
@spoof_attribution me is "     --"
@integrate_sep me is "  "
@remote_emote_prefix me is "(from %li)"
@dozing me is "idling"
@idle me is "real life intrusion"
@doing me is ""
@shout me is "%Nd %n:(shouts), \"%$a\""
@newt_victim me isn't set.
@newt me is "%Nd %n:(@newts) %dd (%d#)."
@programmer me is "%Dd %d:(is) now a programmer."
@programmer_victim me is "You are now a programmer."
@toad_victim me is "Have a nice life..."
@toad me is "%Nd %n:(@toads) %dd (%d#)."
@boot_player me is "%Nd %n:(boots) %dd."
Object #243 does not define that verb, but its ancestor #51 does.
#51:"toad_msg toad_victim_msg programmer_msg programmer_victim_msg newt_msg newt_victim_msg" this none this
// This is the canonical doing-something-to-somebody message.
// The corresponding property can either be
//    string             msg for all occasions
//    list of 2 strings  {we-are-there-msg,we-are-elsewhere-msg}
return $string_utils:pronoun_sub(this.(verb));
m = this.(verb);
if (typeof(m) != LIST)
  return $string_utils:pronoun_sub(m);
elseif (this.location == dobj.location || length(m) < 2)
  return $string_utils:pronoun_sub(m[1]);
else
  return $string_utils:pronoun_sub(m[2]);
endif
-----
$STRING_UTILS:PRONOUN_SUB
=========================

Pronoun (and other things) substitution. See 'help pronouns' for details.

syntax:  $string_utils:pronoun_sub(text[,who[,thing[,location[,dobj[,iobj]]]]])

msg is either a string, which is parsed according to lambdacore pronoun_sub style, or a raw pronoun_sub list.

who, thing, location, dobj, and iobj can all be objects or lists of {<list of objects>, @<args to $string_utils:english_list>}.

who defaults to player.

thing defaults to caller.

location defaults to who.location.

dobj and iobj default to dobj and iobj.

-----
$YOU:SAY_ACTION
===============

$you:say_action(message [,who [, thing[, where[, dobj[, iobj]]]]]).

announce 'message' with pronoun substitution as if it were just 

  where:announce_all($string_utils:pronoun_sub(message, who, thing, where, dobj, iobj)); 

except that all involved parties get modified messages, with the appropriate use of 'you' instead of their name.

who   default player

thing default object that called this verb

where default who.location

Any of these may be lists, of the form {<list of objs>, @<args to $string_utils:english_list>}.

Object #70 does not define that verb, but its ancestor #1 does.
#1:"accept" this none this
return this:acceptable(@args);
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Sun Mar 31 09:28:03 2013 PDT by core initialization (#191) (on core).
#3:"acceptable" (what)
return this:is_unlocked_for(what) && (this.free_entry || (what == this.blessed_object && task_id() == this.blessed_task) || what.owner == this.owner || (typeof(this.residents) == LIST && what in this.residents) || $object_utils:contains(this, what));
-----
`HELP BLESSED' NOT FOUND
========================

Sorry, but no help is available on `blessed'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Searching for core verbs containing the string ".blessed_object" ...

#3:bless_for_entry [+d Core-Wizard (#184)]:    this.blessed_object = args[1];
#3:enterfunc [+d Core-Wizard (#184)]:  if (object == this.blessed_object)
#3:acceptable [+d Core-Wizard (#184)]:  return this:is_unlocked_for(what) && (this.free_entry || (what == this.blessed_object && task_id() == this.blessed_task) || what.owner == this.owner || (typeof(this.residents) == LIST && what in this.residents) || $object_utils:contains(this, what));

Total: 3 verbs.
Last modified Sat Aug 23 21:38:40 1997 PDT by Xythian (#199) (on Waterpoint).
#3:"bless_for_entry" this none this
if (caller in {this, @this.entrances} || $object_utils:isa(caller, $generic_editor) || (callers()[1][4] == $room && callers()[1][2] in {"disfunc", "event_really_disconnected"}))
  this.blessed_object = args[1];
  this.blessed_task = task_id();
endif
-----
$OBJECT_UTILS:CONTAINS
======================

$object_utils:contains(obj1, obj2) -- does obj1 contain obj2?

Return true iff obj2 is under obj1 in the containment hierarchy; that is, if obj1 is obj2's location, or its location's location, or ...

Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location North Vestibule (#70).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
  #255:pile_class               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
@GREP
=====

Syntax:  @grep <string> in <object>
         @grep <string> in {<objectlist>}

         @egrep <regexp> in <object>
         @egrep <regexp> in {<objectlist>}

These are named for the corresponding unix utilities.

@grep searches the given object(s) for verbs whose verbcode contains the given string as a substring of one of its lines.

@egrep searches the given object(s) for verbs whose verbcode contains a substring matching the given regular expression (see `help regular-expressions'[1]).


For wizards, the following forms are also available for doing full-db searches

         @grep  <pattern>
         @egrep <pattern>
         @grep  <pattern> from [#]<n>
         @egrep <pattern> from [#]<n>

the first two search all objects in the database while the last two search the range [#<n>..max_object()]

See also:  @grepcore, @who-calls.

Searching for verbs in _ containing the string "msg" ...

#255:pile [+d Crag (#243)]:      player:tell_lines(this:pile_succeeded_msg() || "Done.");

Total: 1 verb.
Verb added [3] (2).
@integrate_room #1 isn't set.
@integrate_player #1 isn't set.
@integrate_container #1 isn't set.
#1:"integrate_room_msg integrate_container_msg" this none this
// If this.(verb) is not set, return this:integrate_msg(@args).
// If this.(verb) is not an alist, pronoun_sub it.
// If this.location has an entry, pronoun sub it.
// If $nowhere (#-1) has an entry, pronoun sub it.
if (typeof(alist = this.(verb)) == LIST && typeof(alist[1]) == LIST)
  if (assoc = $list_utils:assoc(this.location, alist) || $list_utils:assoc($nowhere, alist))
    msg = assoc[2];
  endif
else
  msg = alist;
endif
return $string_utils:pronoun_sub(msg, @args);
Searching for verbs that appear to call :integrate_room_msg ...

#3:ok_to_integrate [+d unknown hacker (#35)]:      return args[1]:integrate_in(this) && !args[1]:empty_message("integrate_room") && "args[1]:integrate_room_msg()";
#3:look_self [+d unknown hacker (#35)]:      player:tell(this.topic_sign:integrate_room_msg());
#178:show_topic [+d topic-owner (#181)]:  player:tell(this:integrate_room_msg());

Total: 3 verbs.
Searching for verbs that appear to call :integrate_player_msg ...

#6:ok_to_integrate [+d unknown hacker (#35)]:  return args[1]:integrate_in(this) && args[1]:integrate_player_msg();

Total: 1 verb.
#1:"description" this none this
// Always return a list.
// (I've been wanting to do this for a long time.)
if (desc = this.description)
  if (typeof(desc) == LIST)
    return desc;
  else
    return {desc};
  endif
else
  return {};
endif
Last modified Thu Jul 19 07:52:28 2001 PDT by Xplat (#4014) (on Waterpoint).
#3:"description" this none this
// If there's more than one paragraph of description, then add integration messages to the end as a separate paragraph(s).
// If there are more than one paragraph of integration messages, add them as separate paragraphs to the end of the description.
// Otherwise, append the integration message to the end of the description paragraph.
desc = pass(@args);
if (!this.integrate_paragraphs)
  integrate = $integration_utils:integrate(args, "integrate_room_msg");
  integrate_sep = $string_utils:pronoun_sub(this.integrate_sep_msg);
  if (integrate)
    if ((sep_is_list = typeof(integrate_sep) == LIST) || !integrate_sep || length(desc) > 1 || length(integrate) > 1)
      if (sep_is_list)
        desc = {@desc, @integrate_sep, @integrate};
      else
        desc = {@desc, @integrate};
      endif
    else
      if (desc)
        desc = {desc[1] + integrate_sep + integrate[1]};
      else
        desc = integrate;
      endif
    endif
  endif
  return desc;
else
  if (!desc)
    desc = {""};
  endif
  explicit = $list_utils:flatten(integrate = this.integrate_paragraphs);
  integrate_objects = {@this:contents(), @this:exits()};
  for i in [1..length(integrate)]
    ni = {};
    for elt in (integrate[i])
      if (elt in integrate_objects || typeof(elt) in {LIST, STR})
        ni = {@ni, elt};
      endif
    endfor
    integrate[i] = ni;
  endfor
  // integrate[i] = $set_utils:intersection(integrate[i], $set_utils:union(this:contents(), this:exits()));
  if (misc = $set_utils:diff($list_utils:flatten(args), explicit))
    integrate[l = length(integrate)] = {@integrate[l], @misc};
  endif
  if (length(desc) == 1)
    integrate[1] = {@desc, @integrate[1]};
  else
    integrate[1] = {desc[$], @integrate[1]};
    for i in [1..length(desc) - 1]
      integrate = {{desc[$ - i]}, @integrate};
    endfor
  endif
  return $integration_utils:integrate(integrate, "integrate_room_msg");
endif
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location North Vestibule (#70).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
  #255:pile_class               Crag (#243)          rxd    this none this
  #255:"pile_succeeded_msg opile_succeeded_msg pile_failed_msg opile_failed_msg" Crag (#243) rxd this none this
-------------------------------- finished ---------------------------------
Property added with value 0.
Property added with value 0.
Property added with value 0.
Property added with value 0.
@integrate_room _ isn't set.
@integrate_player _ isn't set.
@integrate_container _ isn't set.
@drop_failed _ is "You can't seem to drop %td here."
@drop_succeeded _ is "You drop %td."
@odrop_failed _ is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded _ is "%n:(drops) %ti."
@otake_succeeded _ is "%n:(picks) up %td."
@otake_failed _ isn't set.
@take_succeeded _ is "You take %td."
@take_failed _ is "You can't pick up %td."
@pile_succeeded _ isn't set.
@opile_succeeded _ isn't set.
@pile_failed _ isn't set.
@opile_failed _ isn't set.
You set the "pile_succeeded" message of the Generic Pilable Thing (#255).
You set the "pile_failed" message of the Generic Pilable Thing (#255).
You can't seem to pile that here.
The Parsing objects(#252) has 2 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)
The Generic Pilable Thing(#255) has 1 kid.
top of pile (#503)
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
 <1K #505                            [Nowhere]
 <1K #506                            [Nowhere]
-- 29 objects.  Total bytes: 48,151.------------------------------------------
Piles are groups of things. Piles are created when a person does a "pile foo with bar". This creates a pile containing foo and bar. Interaction with foo and bar can then only happen when someone removes them from the pile.
 (#505) [ ]
  Child of Generic Pile (#242).
-------------------------------- finished ---------------------------------
 (#506) [ ]
  Child of Generic Pile (#242).
-------------------------------- finished ---------------------------------
Sure you want to recycle the  (#505)? [Enter `yes' or `no']
The  (#505) recycled.
Sure you want to recycle the  (#506)? [Enter `yes' or `no']
The  (#506) recycled.
Piles are groups of things. Piles are created when a person does a "pile foo with bar". This creates a pile containing foo and bar. Interaction with foo and bar can then only happen when someone removes them from the pile.
bottom of pile (#504) [ readable ]
  Child of Generic Pile (#242).
  Location North Vestibule (#70).
-------------------------------- finished ---------------------------------
Parent changed.
The Generic Pilable Thing(#255) has 2 kids.
top of pile (#503)   bottom of pile (#504)
You can't seem to pile that here.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
 <1K #505                            [Nowhere]
-- 28 objects.  Total bytes: 47,702.------------------------------------------
Sure you want to recycle the  (#505)? [Enter `yes' or `no']
The  (#505) recycled.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 65468730287
#$#* 65468730287 content: // :create(top, bottom, where)
#$#* 65468730287 content: // Make a pile of top on bottom in location where.
#$#* 65468730287 content: // If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
#$#* 65468730287 content: // Otherwise we back out our changes, recycle the pile and return 0.
#$#* 65468730287 content: // 
#$#* 65468730287 content: // TODO: put some kind of security check in here?
#$#* 65468730287 content: // also figure out who should be the owner of a pile
#$#* 65468730287 content: {top, bottom, where} = args;
#$#* 65468730287 content: new_pile = $recycler:_create(this);
#$#* 65468730287 content: if (!new_pile)
#$#* 65468730287 content:   return 0;
#$#* 65468730287 content: endif
#$#* 65468730287 content: move(new_pile, where);
#$#* 65468730287 content: if (new_pile:location() == where)
#$#* 65468730287 content:   new_pile:add_item(bottom);
#$#* 65468730287 content:   if (bottom:location() == new_pile)
#$#* 65468730287 content:     new_pile:add_item(top);
#$#* 65468730287 content:     if (top:location() != new_pile)
#$#* 65468730287 content:       new_pile:remove_item(bottom);
#$#* 65468730287 content:     else
#$#* 65468730287 content:       return new_pile;
#$#* 65468730287 content:     endif
#$#* 65468730287 content:   endif
#$#* 65468730287 content: endif
#$#* 65468730287 content: $recycler:_recycle(new_pile);
#$#* 65468730287 content: return 0;
#$#: 65468730287
0 errors.
Verb programmed.
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 20852896688
#$#* 20852896688 content: // :create(top, bottom, where)
#$#* 20852896688 content: // Make a pile of top on bottom in location where.
#$#* 20852896688 content: // If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
#$#* 20852896688 content: // Otherwise we back out our changes, recycle the pile and return 0.
#$#* 20852896688 content: // 
#$#* 20852896688 content: // TODO: put some kind of security check in here?
#$#* 20852896688 content: // also figure out who should be the owner of a pile
#$#* 20852896688 content: {top, bottom, where} = args;
#$#* 20852896688 content: new_pile = $recycler:_create(this);
#$#* 20852896688 content: if (!new_pile)
#$#* 20852896688 content:   return 0;
#$#* 20852896688 content: endif
#$#* 20852896688 content: move(new_pile, where);
#$#* 20852896688 content: if (new_pile:location() == where)
#$#* 20852896688 content:   new_pile:add_item(bottom);
#$#* 20852896688 content:   if (bottom:location() == new_pile)
#$#* 20852896688 content:     new_pile:add_item(top);
#$#* 20852896688 content:     if (top:location() != new_pile)
#$#* 20852896688 content:       new_pile:remove_item(bottom);
#$#* 20852896688 content:     else
#$#* 20852896688 content:       return new_pile;
#$#* 20852896688 content:     endif
#$#* 20852896688 content:   endif
#$#* 20852896688 content: endif
#$#* 20852896688 content: $recycler:_recycle(new_pile);
#$#* 20852896688 content: return 0;
#$#: 20852896688
-----
`HELP RENAME()' NOT FOUND
=========================

Sorry, but no help is available on `rename()'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP RENAME' AMBIGUOUS
=======================

Sorry, the topic `rename' is ambiguous.  I don't know which of the following topics you mean:

`help @rename'[1]       `help @rename#'[2]      

=> "Generic Pilable Thing"
0 errors.
Verb programmed.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  A settee sit under the windows.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, a Generic Pilable Thing, and a bottom of pile here.
stormagnet is here, off in another world.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
Your current object is now #242.
Parsing objects (#252) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Parsing objects (#252) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 63059591489
#$#* 63059591489 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 63059591489 content: // TODO: permissions, san checks
#$#* 63059591489 content: pile_class = item:pile_class(item, this);
#$#* 63059591489 content: if (pile_class != this)
#$#* 63059591489 content:   return pile_class:adopt(item, this);
#$#* 63059591489 content: endif
#$#* 63059591489 content: move(item, this);
#$#* 63059591489 content: return this;
#$#: 63059591489
Object #243 does not define that verb, but its ancestor #6 does.
#6:"@add-alias*# @addalias*# @add_alias*#" any (at/to) any
// Usage: @addalias <alias>[,...,<alias>] to <object>
//        @addalias <alias>[,...,<alias>] to <object>:<verb>
// 
// The first form is used to add aliases to an object's list of aliases.  You can separate multiple aliases with commas.  The aliases will be checked against the object's current aliases and all aliases not already in the object's list of aliases will be added.
// 
// Example:
// Muchkin wants to add new aliases to Rover the Wonder Dog:
//   @addalias Dog,Wonder Dog to Rover
// Since Rover the Wonder Dog already has the alias "Dog" but does not have the alias "Wonder Dog", Munchkin sees:
//   Rover the Wonder Dog(#4237) already has the alias Dog.
//   Alias Wonder Dog added to Rover the Wonder Dog(#4237).
// 
// If the object is a player, spaces will also be assumed to be separations between aliases and each alias will be checked against the Player Name Database to make sure no one else is using it. Any already used aliases will be identified.
// 
// Example:
// Munchkin wants to add his nicknames to his own list of aliases:
//   @addalias Foobar Davey to me
// @Addalias recognizes that Munchkin is trying to add an alias to a valid player and checks the aliases against the Player Name Database.  Unfortunately, DaveTheMan is already using the alias "Davey" so Munchkin sees:
//   DaveTheMan(#5432) is already using the alias Davey
//   Alias Foobar added to Munchkin(#1523).
// 
// The second form of the @addalias command is for use by programmers, to add aliases to a verb they own.  All commas and spaces are assumed to be separations between aliases.
if (player != this)
  return;
elseif (!dobjstr)
  player:tell_lines($code_utils:verb_usage());
endif
set_task_perms(player);
spec = $code_utils:parse_verbref(iobjstr);
bynumber = verb[$] == "#";
if (spec)
  object = player:my_match_object(spec[1]);
  if (!$command_utils:object_match_failed(object, spec[1]))
    vname = spec[2];
    if (bynumber && (E_TYPE == (vname = $code_utils:tonum(vname)) || vname < 1))
      player:notify("Verb number expected.");
      return;
    endif
    try
      info = verb_info(object, vname);
    except (E_VERBNF)
      player:notify(bynumber ? "Verb number out of range" | "That object does not define that verb.");
      return;
    except e (ANY)
      player:notify(e[2]);
      return;
    endtry
    old_aliases = $string_utils:explode(info[3]);
    used = {};
    for alias in (new_aliases = $list_utils:remove_duplicates($string_utils:explode(strsub(dobjstr, ",", " "))))
      if (alias in old_aliases)
        used = {@used, alias};
        new_aliases = setremove(new_aliases, alias);
      endif
    endfor
    if (used)
      player:notify(tostr(object.name, "(", object, "):", vname, " already has the alias", length(used) > 1 ? "es" | "", " ", $string_utils:english_list(used), "."));
    endif
    if (new_aliases)
      info = listset(info, aliases = $string_utils:from_list({@old_aliases, @new_aliases}, " "), 3);
      try
        result = set_verb_info(object, vname, info);
      except e (ANY)
        player:notify(e[2]);
        return;
      endtry
      player:notify(tostr("Alias", length(new_aliases) > 1 ? "es" | "", " ", $string_utils:english_list(new_aliases), " added to verb ", object.name, "(", object, "):", vname));
      player:notify(tostr("Verbname is now ", object.name, "(", object, "):\"", aliases, "\""));
    endif
  endif
elseif (bynumber)
  player:notify(tostr(verb, " can only be used for verbs."));
else
  object = player:my_match_object(iobjstr);
  if (!$command_utils:object_match_failed(object, iobjstr))
    old_aliases = object.aliases;
    used = {};
    for alias in (new_aliases = $list_utils:remove_duplicates($list_utils:map_arg($string_utils, "trim", $string_utils:explode(dobjstr, ","))))
      if (alias in old_aliases)
        used = {@used, alias};
        new_aliases = setremove(new_aliases, alias);
      elseif (is_player(object) && valid(someone = $player_db:find_exact(alias)))
        player:notify(tostr(someone.name, "(", someone, ") is already using the alias ", alias, "."));
        new_aliases = setremove(new_aliases, alias);
      endif
    endfor
    if (used)
      player:notify(tostr(object.name, "(", object, ") already has the alias", length(used) > 1 ? "es" | "", " ", $string_utils:english_list(used), "."));
    endif
    if (new_aliases)
      if (e = object:set_aliases(aliases = {@old_aliases, @new_aliases}))
        player:notify(tostr("Alias", length(new_aliases) > 1 ? "es" | "", " ", $string_utils:english_list($list_utils:map_arg($string_utils, "print", new_aliases)), " added to ", object.name, "(", object, ")."));
        player:notify(tostr("Aliases for ", object.name, "(", object, ") are now ", $string_utils:from_value(aliases, 1)));
      elseif (e == E_INVARG)
        player:notify("That particular name change not allowed (see help @rename or help @addalias).");
      elseif (e == E_NACC)
        player:notify("Oops.  You can't update that object's aliases right now; try again in a few minutes.");
      else
        player:notify(tostr(e));
      endif
    endif
  endif
endif
#1:"set_aliases" this none this
// set_aliases(alias_list) attempts to change this.aliases to alias_list
//   => E_PERM   if you don't own this or aren't its parent
//   => E_TYPE   if alias_list is not a list
//   => E_INVARG if any element of alias_list is not a string
if (!($perm_utils:controls(caller_perms(), this) || this == caller))
  return E_PERM;
elseif (typeof(aliases = args[1]) != LIST)
  return E_TYPE;
else
  for s in (aliases)
    if (typeof(s) != STR)
      return E_INVARG;
    endif
  endfor
  this.aliases = aliases;
  return 1;
endif
-----
SETADD()
========

Syntax:  setadd (list <list>, <value>)   => list
      setremove (list <list>, <value>)   => list

Returns a copy of <list> with the given <value> added or removed, as appropriate.  `setadd()' only adds <value> if it is not already an element of <list>; <list> is thus treated as a mathematical set.  <value> is added at the end of the resulting list, if at all.  Similarly, `setremove()' returns a list identical to <list> if <value> is not an element.  If <value> appears more than once in <list>, only the first occurrence is removed in the returned copy.

    setadd({1, 2, 3}, 3)         =>   {1, 2, 3}
    setadd({1, 2, 3}, 4)         =>   {1, 2, 3, 4}
    setremove({1, 2, 3}, 3)      =>   {1, 2}
    setremove({1, 2, 3}, 4)      =>   {1, 2, 3}
    setremove({1, 2, 3, 2}, 2)   =>   {1, 3, 2}

set utilities (#27) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #27:union                    unknown hacker (#35) rxd    this none this
   #27:intersection             unknown hacker (#35) rxd    this none this
   #27:diff*erence              unknown hacker (#35) rxd    this none this
   #27:contains                 unknown hacker (#35) rxd    this none this
   #27:"exclusive_or xor"       unknown hacker (#35) rxd    this none this
   #27:"difference_suspended diff_suspended" unknown hacker (#35) rxd this none this
   #27:equals                   unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  Location Crag (#243).
  #242:pile                     Crag (#243)          r d    any on top of/on/onto/upon this
  #242:create                   Crag (#243)          rxd    this none this
  #242:location_for_caller      Crag (#243)          rxd    this none this
  #242:add_item                 Crag (#243)          rxd    this none this
  #242:remove_item              Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:remove_item ()" name: "MOO verb: #242:remove_item ()" type: moo-code content*: "" _data-tag: 4838064890
#$#: 4838064890
Last modified Sat Apr 27 00:54:49 2013 PDT by Crag (#243).
#242:"add_item" this none this
// :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
// TODO: permissions, san checks
pile_class = item:pile_class(item, this);
if (pile_class != this)
  return pile_class:adopt(item, this);
endif
move(item, this);
this.aliases = $set_utils:union(this.aliases, {item.name, @item.aliases});
return this;
-----
$SET_UTILS:UNION
================

Returns the set union of all of the lists provided as arguments.

0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 35653386191
#$#* 35653386191 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 35653386191 content: // TODO: permissions, san checks
#$#* 35653386191 content: pile_class = item:pile_class(item, this);
#$#* 35653386191 content: if (pile_class != this)
#$#* 35653386191 content:   return pile_class:adopt(item, this);
#$#* 35653386191 content: endif
#$#* 35653386191 content: move(item, this);
#$#* 35653386191 content: this.aliases = $set_utils:union(this.aliases, {item.name, @item.aliases});
#$#* 35653386191 content: return this;
#$#: 35653386191
0 errors.
Verb programmed.
Verb added [6] (5).
Verb arguments unchanged.
You see no "+x" here.
-----
`HELP CHMOD' AMBIGUOUS
======================

Sorry, the topic `chmod' is ambiguous.  I don't know which of the following topics you mean:

`help @chmod'[1]        `help @chmod-raw'[2]    

-----
@CHMOD
======

Syntax:  @chmod <object> <object-permissions>
         @chmod <object>.<prop-name> <property-permissions>
         @chmod <object>:<verb-name> <verb-permissions>
         @chmod# <object>:<verb-number> <verb-permissions>

Changes the permissions of an object, property or verb, to those given.  The following table shows what permission bits are allowed for each form of the command:

        <object-permissions>        r, w, f
        <property-permissions>      r, w, c
        <verb-permissions>          r, w, x, d

See the LambdaMOO Programmer's Manual for their meanings.

To clear all of the permissions for an object, verb, or property, use "" as the second argument.

Verb permissions set to "rxd".
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:adjust_aliases ()" name: "MOO verb: #242:adjust_aliases ()" type: moo-code content*: "" _data-tag: 69651495192
#$#: 69651495192
-----
$LIST_UTILS:MAP
===============

That object does not define that verb.

list utilities (#49) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #49:make                     unknown hacker (#35) rxd    this none this
   #49:range                    unknown hacker (#35) rxd    this none this
   #49:map_prop*erty            Core-Wizard (#184)   rxd    this none this
   #49:map_verb                 Core-Wizard (#184)   rx     this none this
   #49:map_arg                  Core-Wizard (#184)   rxd    this none this
   #49:map_builtin              Core-Wizard (#184)   rxd    this none this
   #49:find_insert              unknown hacker (#35) rx     this none this
   #49:remove_duplicates        unknown hacker (#35) rxd    this none this
   #49:arrayset                 unknown hacker (#35) rxd    this none this
   #49:setremove_all            unknown hacker (#35) rxd    this none this
   #49:append                   unknown hacker (#35) rxd    this none this
   #49:reverse                  unknown hacker (#35) rxd    this none this
   #49:_reverse                 unknown hacker (#35) rxd    this none this
   #49:compress                 unknown hacker (#35) rxd    this none this
   #49:sort                     unknown hacker (#35) rxd    this none this
   #49:slice                    unknown hacker (#35) rxd    this none this
   #49:assoc                    unknown hacker (#35) rxd    this none this
   #49:iassoc                   unknown hacker (#35) rxd    this none this
   #49:iassoc_suspended         Core-Wizard (#184)   rxd    this none this
   #49:assoc_prefix             unknown hacker (#35) rxd    this none this
   #49:iassoc_prefix            unknown hacker (#35) rxd    this none this
   #49:iassoc_sorted            unknown hacker (#35) rxd    this none this
   #49:sort_alist               unknown hacker (#35) rxd    this none this
   #49:sort_alist_suspended     Core-Wizard (#184)   rxd    this none this
   #49:randomly_permute         unknown hacker (#35) rxd    this none this
   #49:passoc                   unknown hacker (#35) rxd    this none this
   #49:check_type               unknown hacker (#35) rxd    this none this
   #49:random_permutation       Core-Wizard (#184)   rxd    this none this
   #49:max_length               unknown hacker (#35) rxd    this none this
   #49:any_of                   Core-Wizard (#184)   rxd    this none this
   #49:flatten                  unknown hacker (#35) rxd    this none this
   #49:grep_l                   Core-Wizard (#184)   rxd    this none this
   #49:grep_ll                  Core-Wizard (#184)   rxd    this none this
   #49:slice_suspended          unknown hacker (#35) rxd    this none this
   #49:sort_suspended           Core-Wizard (#184)   rxd    this none this
   #49:make_alist               Core-Wizard (#184)   rxd    this none this
   #49:"longest shortest"       unknown hacker (#35) rxd    this none this
   #49:count                    unknown hacker (#35) rxd    this none this
   #49:map_verb_safe            Core-Wizard (#184)   rxd    this none this
   #49:grep_o                   Wizard (#2)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
$LIST_UTILS:MAP_VERB
====================

map_verb({OBJ, ...}, VERB, [ARGS])

Return a list of OBJ:VERB(@ARGS) for each OBJ in args[1].

-----
$LIST_UTILS:MAP_PROP
====================

map_prop({OBJ...}, PROP)

Return a list of OBJ.(PROP) for each OBJ in args[1].

0 errors.
Verb programmed.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  A settee sit under the windows.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, a Generic Pilable Thing, and a bottom of pile here.
stormagnet is here, off in another world.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 63564338293
#$#* 63564338293 content: // Usage: pile <thing> on <other thing>
#$#* 63564338293 content: //  This forms a pile out of the dobj and iobj.
#$#* 63564338293 content: //  (based on $thing:drop)
#$#* 63564338293 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 63564338293 content: if (this.location != player)
#$#* 63564338293 content:   player:tell("You don't have that.");
#$#* 63564338293 content: elseif (!player.location:accept(this))
#$#* 63564338293 content:   player:tell("You can't pile that here.");
#$#* 63564338293 content: else
#$#* 63564338293 content:   pile_class = this:pile_class(iobj);
#$#* 63564338293 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 63564338293 content:     return this:drop(@args);
#$#* 63564338293 content:   endif
#$#* 63564338293 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 63564338293 content:   if (this.location == pile)
#$#* 63564338293 content:     player:tell_lines(this:pile_succeeded_msg() || "Done.");
#$#* 63564338293 content:     if (msg = this:opile_succeeded_msg())
#$#* 63564338293 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 63564338293 content:     endif
#$#* 63564338293 content:   else
#$#* 63564338293 content:     player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
#$#* 63564338293 content:     if (msg = this:opile_failed_msg())
#$#* 63564338293 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 63564338293 content:     endif
#$#* 63564338293 content:   endif
#$#* 63564338293 content: endif
#$#: 63564338293
Last modified Sat Apr 27 00:49:51 2013 PDT by Crag (#243).
#242:"create" this none this
// :create(top, bottom, where)
// Make a pile of top on bottom in location where.
// If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
// Otherwise we back out our changes, recycle the pile and return 0.
// 
// TODO: put some kind of security check in here?
// also figure out who should be the owner of a pile
{top, bottom, where} = args;
new_pile = $recycler:_create(this);
if (!new_pile)
  return 0;
endif
new_pile.name = "pile of stuff";
move(new_pile, where);
if (new_pile:location() == where)
  new_pile:add_item(bottom);
  if (bottom:location() == new_pile)
    new_pile:add_item(top);
    if (top:location() != new_pile)
      new_pile:remove_item(bottom);
    else
      return new_pile;
    endif
  endif
endif
$recycler:_recycle(new_pile);
return 0;
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 41676555594
#$#* 41676555594 content: // :create(top, bottom, where)
#$#* 41676555594 content: // Make a pile of top on bottom in location where.
#$#* 41676555594 content: // If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
#$#* 41676555594 content: // Otherwise we back out our changes, recycle the pile and return 0.
#$#* 41676555594 content: // 
#$#* 41676555594 content: // TODO: put some kind of security check in here?
#$#* 41676555594 content: // also figure out who should be the owner of a pile
#$#* 41676555594 content: {top, bottom, where} = args;
#$#* 41676555594 content: new_pile = $recycler:_create(this);
#$#* 41676555594 content: if (!new_pile)
#$#* 41676555594 content:   return 0;
#$#* 41676555594 content: endif
#$#* 41676555594 content: new_pile.name = "pile of stuff";
#$#* 41676555594 content: move(new_pile, where);
#$#* 41676555594 content: if (new_pile:location() == where)
#$#* 41676555594 content:   new_pile:add_item(bottom);
#$#* 41676555594 content:   if (bottom:location() == new_pile)
#$#* 41676555594 content:     new_pile:add_item(top);
#$#* 41676555594 content:     if (top:location() != new_pile)
#$#* 41676555594 content:       new_pile:remove_item(bottom);
#$#* 41676555594 content:     else
#$#* 41676555594 content:       return new_pile;
#$#* 41676555594 content:     endif
#$#* 41676555594 content:   endif
#$#* 41676555594 content: endif
#$#* 41676555594 content: $recycler:_recycle(new_pile);
#$#* 41676555594 content: return 0;
#$#: 41676555594
0 errors.
Verb programmed.
You can't seem to pile that here.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
 <1K #506                            [Nowhere]
-- 28 objects.  Total bytes: 47,702.------------------------------------------
 (#506) [ readable ]
  Child of Generic Pile (#242).
-------------------------------- finished ---------------------------------
 (#506) [ readable ]
  Child of Generic Pile (#242).
,key                     Crag (#243)             c    0
 aliases                 Crag (#243)           r c    {"pile"}
 description             Crag (#243)           r c    {"Piles are groups of t..
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Crag (#243)           r c    ""
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
 unique                  Crag (#243)           r c    0
 proper                  Crag (#243)           r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {449, 1367049793}
 core_names              Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Last modified Sun Jan  7 06:31:07 2001 PST by Xplat (#4014) (on Waterpoint (for core)).
#1:"initialize" this none this
if (caller == this || $perm_utils:controls(caller_perms(), this))
  this.key = 0;
  $quota_utils.byte_based && $quota_utils.byte:object_size(this);
  owned = `this.owner.owned_objects ! E_INVIND, E_PROPNF';
  if (typeof(owned) == LIST)
    this.owner.owned_objects = setadd(owned, this);
  elseif (typeof(owned) == NUM)
    this.owner.owned_objects = owned + 1;
  endif
  if (parent(this) == $root_class)
    this.unique = 0;
  endif
  this.offered = #-1;
endif
The verb :initialize is on   Crag(#243)--generic player(#6)   North Vestibule(#70)--generic event dispatching object(#110)   brown Persian rug(#257)--generic thing(#5)   detailed painting(#262)--generic event dispatching object(#110)   timbered ceiling(#273)--generic event dispatching object(#110)   chaise longues(#274)--generic sittable object(#80)   butler's desk(#275)--generic event dispatching object(#110)   demi-lune table(#277)--generic event dispatching object(#110)   Wind-Up Duck(#261)--generic thing(#5)   microphone(#282)--generic thing(#5)   porter's chair(#286)--generic sittable object(#80)   How $staff will notice people rummaging(#290)--generic thing(#5)   stormagnet(#246)--generic player(#6)   settee(#502)--generic sittable object(#80)   Generic Pilable Thing(#255)--generic thing(#5)   bottom of pile(#504)--generic thing(#5)   Group Utilities(#248)--root class(#1)   MCP parent(#251)--root class(#1)   Parsing objects(#252)--root class(#1)   Text generation objects(#253)--root class(#1)   Abstract class(#254)--root class(#1)   Generic Pile(#242)--root class(#1)   Generic Nesting Decoration(#265)--generic event dispatching object(#110)   Generic Delegator(#269)--root class(#1)   Generic Delegate(#270)--root class(#1)   New Generic Room(#271)--root class(#1)   Room Exit Delegate(#279)--root class(#1)   top of pile(#503)--generic thing(#5)   Stage-Talk Feature(#67)--Generic Feature Object(#65)   Thinking Feature(#68)--Generic Feature Object(#65)
=> #242 (Generic Pile)
Verb added [7] (6).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:initialize ()" name: "MOO verb: #242:initialize ()" type: moo-code content*: "" _data-tag: 190813711695
#$#: 190813711695
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:initialize this none this" name: "MOO verb: #242:initialize this none this" type: moo-code content*: "" _data-tag: 84010320496
#$#* 84010320496 content: if (caller == this || $perm_utils:controls(caller_perms(), this))
#$#* 84010320496 content:   this.description = "A pile of stuff. What were you expecting?";
#$#* 84010320496 content: endif
#$#: 84010320496
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#1:initialize this none this" name: "MOO verb: #1:initialize this none this" type: moo-code content*: "" _data-tag: 59508202397
#$#* 59508202397 content: if (caller == this || $perm_utils:controls(caller_perms(), this))
#$#* 59508202397 content:   this.key = 0;
#$#* 59508202397 content:   $quota_utils.byte_based && $quota_utils.byte:object_size(this);
#$#* 59508202397 content:   owned = `this.owner.owned_objects ! E_INVIND, E_PROPNF';
#$#* 59508202397 content:   if (typeof(owned) == LIST)
#$#* 59508202397 content:     this.owner.owned_objects = setadd(owned, this);
#$#* 59508202397 content:   elseif (typeof(owned) == NUM)
#$#* 59508202397 content:     this.owner.owned_objects = owned + 1;
#$#* 59508202397 content:   endif
#$#* 59508202397 content:   if (parent(this) == $root_class)
#$#* 59508202397 content:     this.unique = 0;
#$#* 59508202397 content:   endif
#$#* 59508202397 content:   this.offered = #-1;
#$#* 59508202397 content: endif
#$#: 59508202397
0 errors.
Verb programmed.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
 <1K #506                            [Nowhere]
-- 28 objects.  Total bytes: 47,702.------------------------------------------
Sure you want to recycle the  (#506)? [Enter `yes' or `no']
The  (#506) recycled.
You can't seem to pile that here.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
 <1K #505                            [Nowhere]
-- 28 objects.  Total bytes: 47,744.------------------------------------------
Object #503 does not define that verb, but its ancestor #255 does.
Last modified Sat Apr 27 01:02:37 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile_class = this:pile_class(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile = pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 44211404398
#$#* 44211404398 content: // Usage: pile <thing> on <other thing>
#$#* 44211404398 content: //  This forms a pile out of the dobj and iobj.
#$#* 44211404398 content: //  (based on $thing:drop)
#$#* 44211404398 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 44211404398 content: if (this.location != player)
#$#* 44211404398 content:   player:tell("You don't have that.");
#$#* 44211404398 content: elseif (!player.location:accept(this))
#$#* 44211404398 content:   player:tell("You can't pile that here.");
#$#* 44211404398 content: else
#$#* 44211404398 content:   pile_class = this:pile_class(iobj);
#$#* 44211404398 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 44211404398 content:     return this:drop(@args);
#$#* 44211404398 content:   endif
#$#* 44211404398 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 44211404398 content:   if (this.location == pile)
#$#* 44211404398 content:     player:tell_lines(this:pile_succeeded_msg() || "Done.");
#$#* 44211404398 content:     if (msg = this:opile_succeeded_msg())
#$#* 44211404398 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 44211404398 content:     endif
#$#* 44211404398 content:   else
#$#* 44211404398 content:     player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
#$#* 44211404398 content:     if (msg = this:opile_failed_msg())
#$#* 44211404398 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 44211404398 content:     endif
#$#* 44211404398 content:   endif
#$#* 44211404398 content: endif
#$#: 44211404398
The verb :drop is on   brown Persian rug(#257)--generic thing(#5)   detailed painting(#262)--generic container(#126)   timbered ceiling(#273)--generic container(#126)   chaise longues(#274)--generic thing(#5)   butler's desk(#275)--generic container(#126)   demi-lune table(#277)--Generic Table(#280)   Wind-Up Duck(#261)--Generic Wind-Up Toy(#260)   microphone(#282)   porter's chair(#286)--generic thing(#5)   How $staff will notice people rummaging(#290)--generic thing(#5)   settee(#502)--generic thing(#5)   Generic Pilable Thing(#255)--generic thing(#5)   bottom of pile(#504)--generic thing(#5)   Generic Nesting Decoration(#265)--generic container(#126)   top of pile(#503)--generic thing(#5)
Object #503 does not define that verb, but its ancestor #5 does.
#5:"d*rop throw chuck" this none none
// Usage: drop <thing>
//  This drops things in the room the dropper is in.
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't drop that here.");
else
  this:moveto(player.location);
  if (this.location == player.location)
    player:tell_lines(this:drop_succeeded_msg() || "Dropped.");
    if (msg = this:odrop_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:drop_failed_msg() || "You can't seem to drop that here.");
    if (msg = this:odrop_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
0 errors.
Verb programmed.
That is not a valid command.
You see nothing special.
You see nothing special.
You drop the top of pile.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile               *[North Vestibule]
 <1K #504 bottom of pile            *[North Vestibule]
 <1K #505                            [Nowhere]
 <1K #506                            [Nowhere]
-- 29 objects.  Total bytes: 48,235.------------------------------------------
Sure you want to recycle the  (#505)? [Enter `yes' or `no']
The  (#505) recycled.
Sure you want to recycle the  (#506)? [Enter `yes' or `no']
The  (#506) recycled.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 207467450799
#$#* 207467450799 content: // :create(top, bottom, where)
#$#* 207467450799 content: // Make a pile of top on bottom in location where.
#$#* 207467450799 content: // If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
#$#* 207467450799 content: // Otherwise we back out our changes, recycle the pile and return 0.
#$#* 207467450799 content: // 
#$#* 207467450799 content: // TODO: put some kind of security check in here?
#$#* 207467450799 content: // also figure out who should be the owner of a pile
#$#* 207467450799 content: {top, bottom, where} = args;
#$#* 207467450799 content: new_pile = $recycler:_create(this);
#$#* 207467450799 content: if (!new_pile)
#$#* 207467450799 content:   return 0;
#$#* 207467450799 content: endif
#$#* 207467450799 content: new_pile.name = "pile of stuff";
#$#* 207467450799 content: move(new_pile, where);
#$#* 207467450799 content: if (new_pile.location == where)
#$#* 207467450799 content:   new_pile:add_item(bottom);
#$#* 207467450799 content:   if (bottom.location == new_pile)
#$#* 207467450799 content:     new_pile:add_item(top);
#$#* 207467450799 content:     if (top.location != new_pile)
#$#* 207467450799 content:       new_pile:remove_item(bottom);
#$#* 207467450799 content:     else
#$#* 207467450799 content:       return new_pile;
#$#* 207467450799 content:     endif
#$#* 207467450799 content:   endif
#$#* 207467450799 content: endif
#$#* 207467450799 content: $recycler:_recycle(new_pile);
#$#* 207467450799 content: return 0;
#$#: 207467450799
=> 1
0 errors.
Verb programmed.
You don't have that.
Carrying:
 some Group Utilities                    a Generic Nesting Decoration
 a MCP parent                            a Generic Delegator
 a Parsing objects                       a Generic Delegate
 a Text generation objects               a New Generic Room
 an Abstract class                       a Room Exit Delegate
 a Generic Pile                          
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  A settee sit under the windows.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, a Generic Pilable Thing, a bottom of pile, and a top of pile here.
stormagnet is here, off in another world.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile               *[North Vestibule]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
You take the top of pile.
#242:add_item (this == #505), line 3:  Variable not found
... called from #242:create, line 16
... called from #255:pile (this == #503), line 14
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 1919766116100
#$#* 1919766116100 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 1919766116100 content: // TODO: permissions, san checks
#$#* 1919766116100 content: pile_class = item:pile_class(item, this);
#$#* 1919766116100 content: if (pile_class != this)
#$#* 1919766116100 content:   return pile_class:adopt(item, this);
#$#* 1919766116100 content: endif
#$#* 1919766116100 content: move(item, this);
#$#* 1919766116100 content: this:adjust_aliases();
#$#* 1919766116100 content: return this;
#$#: 1919766116100
0 errors.
Verb programmed.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
 <1K #505 pile of stuff             *[North Vestibule]
-- 28 objects.  Total bytes: 47,744.------------------------------------------
The pile of stuff (#505) contains nothing.
You don't have that.
You take the bottom of pile.
#242:add_item (this == #506), line 4:  Verb not found
... called from #242:create, line 16
... called from #255:pile (this == #504), line 14
(End of traceback)
0 errors.
Verb programmed.
Object #505 does not define that verb, but its ancestor #242 does.
Last modified Sat Apr 27 00:19:49 2013 PDT by Crag (#243).
#242:"pile" any (on top of/on/onto/upon) this
// pile any on this
this:add_item(dobj);
if (dobj.location != this)
  $you:say_action(this:pile_failed_message());
else
  $you:say_action(this:pile_succeeded_message());
endif
Last modified Sat Apr 27 03:22:56 2013 PDT by Crag (#243).
#242:"create" this none this
// :create(top, bottom, where)
// Make a pile of top on bottom in location where.
// If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
// Otherwise we back out our changes, recycle the pile and return 0.
// 
// TODO: put some kind of security check in here?
// also figure out who should be the owner of a pile
{top, bottom, where} = args;
new_pile = $recycler:_create(this);
if (typeof(new_pile) != OBJ || !valid(new_pile))
  return 0;
endif
new_pile.name = "pile of stuff";
move(new_pile, where);
if (new_pile.location == where)
  new_pile:add_item(bottom);
  if (bottom.location == new_pile)
    new_pile:add_item(top);
    if (top.location != new_pile)
      new_pile:remove_item(bottom);
    else
      return new_pile;
    endif
  endif
endif
$recycler:_recycle(new_pile);
return 0;
Last modified Sat Apr 27 03:24:23 2013 PDT by Crag (#243).
#242:"add_item" this none this
// :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
// TODO: permissions, san checks
{item} = args;
pile_class = item:pile_class(item, this);
if (pile_class != this)
  return pile_class:adopt(item, this);
endif
move(item, this);
this:adjust_aliases();
return this;
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing     *[North Vestibule]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile             [Crag]
 <1K #505 pile of stuff             *[North Vestibule]
 <1K #506 pile of stuff             *[North Vestibule]
-- 29 objects.  Total bytes: 48,235.------------------------------------------
Sure you want to recycle the pile of stuff (#505)? [Enter `yes' or `no']
The pile of stuff (#505) recycled.
Sure you want to recycle the pile of stuff (#506)? [Enter `yes' or `no']
The pile of stuff (#506) recycled.
Last modified Sat Apr 27 03:22:56 2013 PDT by Crag (#243).
#242:"create" this none this
// :create(top, bottom, where)
// Make a pile of top on bottom in location where.
// If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
// Otherwise we back out our changes, recycle the pile and return 0.
// 
// TODO: put some kind of security check in here?
// also figure out who should be the owner of a pile
{top, bottom, where} = args;
new_pile = $recycler:_create(this);
if (typeof(new_pile) != OBJ || !valid(new_pile))
  return 0;
endif
new_pile.name = "pile of stuff";
move(new_pile, where);
if (new_pile.location == where)
  new_pile:add_item(bottom);
  if (bottom.location == new_pile)
    new_pile:add_item(top);
    if (top.location != new_pile)
      new_pile:remove_item(bottom);
    else
      return new_pile;
    endif
  endif
endif
$recycler:_recycle(new_pile);
return 0;
Last modified Sat Apr 27 03:24:23 2013 PDT by Crag (#243).
#242:"add_item" this none this
// :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
// TODO: permissions, san checks
{item} = args;
pile_class = item:pile_class(item, this);
if (pile_class != this)
  return pile_class:adopt(item, this);
endif
move(item, this);
this:adjust_aliases();
return this;
Object #503 does not define that verb, but its ancestor #255 does.
Last modified Sat Apr 27 00:20:50 2013 PDT by Crag (#243).
#255:"pile_class" this none this
// :pile_class(bottom) => best class for containing a grouping of this on top of bottom
return $local.pile;
=> #242 (Generic Pile)
=> 0
=> #242 (Generic Pile)
Moved.
=> #242 (Generic Pile)
=> #255 (Generic Pilable Thing)
Moved.
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> #243 (Crag)
You see no "#_1" here.
Moved.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile             [Crag]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
#242:add_item (this == #505), line 6:  Verb not found
... called from #242:create, line 16
... called from #255:pile (this == #503), line 14
(End of traceback)
Last modified Sat Apr 27 03:24:23 2013 PDT by Crag (#243).
#242:"add_item" this none this
// :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
// TODO: permissions, san checks
{item} = args;
pile_class = item:pile_class(item, this);
if (pile_class != this)
  return pile_class:adopt(item, this);
endif
move(item, this);
this:adjust_aliases();
return this;
=> #242 (Generic Pile)
Verb added [8] (7).
That object does not define that verb.
Verb added [9] (8).
Verb #242:pile_class [9] {this none this} removed.
Object #503 does not define that verb, but its ancestor #255 does.
Last modified Sat Apr 27 00:20:50 2013 PDT by Crag (#243).
#255:"pile_class" this none this
// :pile_class(bottom) => best class for containing a grouping of this on top of bottom
return $local.pile;
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 748346732101
#$#* 748346732101 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 748346732101 content: // TODO: permissions, san checks
#$#* 748346732101 content: {item} = args;
#$#* 748346732101 content: pile_class = item:pile_class(item, this);
#$#* 748346732101 content: if (pile_class != this)
#$#* 748346732101 content:   return pile_class:adopt(item, this);
#$#* 748346732101 content: endif
#$#* 748346732101 content: move(item, this);
#$#* 748346732101 content: this:adjust_aliases();
#$#* 748346732101 content: return this;
#$#: 748346732101
0 errors.
Verb programmed.
Sure you want to recycle the pile of stuff (#505)? [Enter `yes' or `no']
The pile of stuff (#505) recycled.
You drop the top of pile.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile               *[North Vestibule]
 <1K #504 bottom of pile             [Nowhere]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
The Generic Pile(#242) has no kids.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 1407024340102
#$#* 1407024340102 content: // Usage: pile <thing> on <other thing>
#$#* 1407024340102 content: //  This forms a pile out of the dobj and iobj.
#$#* 1407024340102 content: //  (based on $thing:drop)
#$#* 1407024340102 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 1407024340102 content: if (this.location != player)
#$#* 1407024340102 content:   player:tell("You don't have that.");
#$#* 1407024340102 content: elseif (!player.location:accept(this))
#$#* 1407024340102 content:   player:tell("You can't pile that here.");
#$#* 1407024340102 content: else
#$#* 1407024340102 content:   pile_class = this:pile_class(iobj);
#$#* 1407024340102 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 1407024340102 content:     return this:drop(@args);
#$#* 1407024340102 content:   endif
#$#* 1407024340102 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 1407024340102 content:   if (this.location == pile)
#$#* 1407024340102 content:     player:tell_lines(this:pile_succeeded_msg() || "Done.");
#$#* 1407024340102 content:     if (msg = this:opile_succeeded_msg())
#$#* 1407024340102 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1407024340102 content:     endif
#$#* 1407024340102 content:   else
#$#* 1407024340102 content:     return this:drop(@args);
#$#* 1407024340102 content:     player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
#$#* 1407024340102 content:     if (msg = this:opile_failed_msg())
#$#* 1407024340102 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1407024340102 content:     endif
#$#* 1407024340102 content:   endif
#$#* 1407024340102 content: endif
#$#: 1407024340102
0 errors.
Verb programmed.
The Generic Pilable Thing (#255) has no "pile_failed_msg" message to set.
Carrying:
 some Group Utilities                    a Generic Nesting Decoration
 a MCP parent                            a Generic Delegator
 a Parsing objects                       a Generic Delegate
 a Text generation objects               a New Generic Room
 an Abstract class                       a Room Exit Delegate
That is not a valid command.
You take the top of pile.
Last modified Sat Apr 27 03:22:56 2013 PDT by Crag (#243).
#242:"create" this none this
// :create(top, bottom, where)
// Make a pile of top on bottom in location where.
// If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
// Otherwise we back out our changes, recycle the pile and return 0.
// 
// TODO: put some kind of security check in here?
// also figure out who should be the owner of a pile
{top, bottom, where} = args;
new_pile = $recycler:_create(this);
if (typeof(new_pile) != OBJ || !valid(new_pile))
  return 0;
endif
new_pile.name = "pile of stuff";
move(new_pile, where);
if (new_pile.location == where)
  new_pile:add_item(bottom);
  if (bottom.location == new_pile)
    new_pile:add_item(top);
    if (top.location != new_pile)
      new_pile:remove_item(bottom);
    else
      return new_pile;
    endif
  endif
endif
$recycler:_recycle(new_pile);
return 0;
#242:add_item (this == #505), line 13:  Invalid argument
... called from #242:create, line 16
... called from #255:pile (this == #503), line 14
(End of traceback)
Last modified Sat Apr 27 03:30:29 2013 PDT by Crag (#243).
#242:"add_item" this none this
// :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
// TODO: permissions, san checks
{item} = args;
// TODO: fix this ugly hack
if (this.contents)
  pile_class = item:pile_class(this);
else
  pile_class = this;
endif
if (pile_class != this)
  return pile_class:adopt(item, this);
endif
move(item, this);
this:adjust_aliases();
return this;
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 830247849103
#$#* 830247849103 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 830247849103 content: // TODO: permissions, san checks
#$#* 830247849103 content: {item} = args;
#$#* 830247849103 content: // TODO: fix this ugly hack
#$#* 830247849103 content: if (this.contents)
#$#* 830247849103 content:   pile_class = item:pile_class(this);
#$#* 830247849103 content: else
#$#* 830247849103 content:   pile_class = this;
#$#* 830247849103 content: endif
#$#* 830247849103 content: if (pile_class != this)
#$#* 830247849103 content:   return pile_class:adopt(item, this);
#$#* 830247849103 content: endif
#$#* 830247849103 content: move(item, this);
#$#* 830247849103 content: this:adjust_aliases();
#$#* 830247849103 content: return this;
#$#: 830247849103
=> #505 (pile of stuff)
=> {}
-----
MOVE()
======

Syntax:  move (obj <what>, obj <where>)   => none

Changes <what>'s location to be <where>.  This is a complex process because a number of permissions checks and notifications must be performed.  The actual movement takes place as described in the following paragraphs.

<what> should be a valid object and <where> should be either a valid object or `#-1' (denoting a location of `nowhere'); otherwise `E_INVARG' is raised.  The programmer must be either the owner of <what> or a wizard; otherwise, `E_PERM' is raised.

If <where> is a valid object, then the verb-call

    <where>:accept(<what>)

is performed before any movement takes place.  If the verb returns a false value and the programmer is not a wizard, then <where> is considered to have refused entrance to <what>; `move()' raises `E_NACC'.  If <where> does not define an `accept' verb, then it is treated as if it defined one that always returned false.

If moving <what> into <where> would create a loop in the containment hierarchy (i.e., <what> would contain itself, even indirectly), then `E_RECMOVE' is raised instead.

The `location' property of <what> is changed to be <where>, and the `contents' properties of the old and new locations are modified appropriately.  Let <old-where> be the location of <what> before it was moved.  If <old-where> is a valid object, then the verb-call

    <old-where>:exitfunc(<what>)

is performed and its result is ignored; it is not an error if <old-where> does not define a verb named `exitfunc'.  Finally, if <where> and <what> are still valid objects, and <where> is still the location of <what>, then the verb-call

    <where>:enterfunc(<what>)

is performed and its result is ignored; again, it is not an error if <where> does not define a verb named `enterfunc'.

=> 0
Object #505 does not define that verb, but its ancestor #1 does.
#1:"accept" this none this
return this:acceptable(@args);
Object #505 does not define that verb, but its ancestor #1 does.
#1:"acceptable" this none this
return 0;
// Copied from root class (#1):accept by Erik (#74) Sun Nov 20 21:16:08 1994 EST
Verb added [9] (8).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:acceptable ()" name: "MOO verb: #242:acceptable ()" type: moo-code content*: "" _data-tag: 531601034104
#$#: 531601034104
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
-------------------------------- finished ---------------------------------
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
  #255:pile_class               Crag (#243)          rxd    this none this
  #255:"pile_succeeded_msg opile_succeeded_msg pile_failed_msg opile_failed_msg" Crag (#243) rxd this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
=> {#255}
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile             [Nowhere]
 <1K #505 pile of stuff             *[North Vestibule]
-- 28 objects.  Total bytes: 47,744.------------------------------------------
Sure you want to recycle the pile of stuff (#505)? [Enter `yes' or `no']
The pile of stuff (#505) recycled.
#242:add_item (this == #506), line 13:  Invalid argument
... called from #242:create, line 16
... called from #255:pile (this == #503), line 14
(End of traceback)
Object #242 does not define that verb, but its ancestor #1 does.
#1:"accept" this none this
return this:acceptable(@args);
Last modified Sat Apr 27 03:39:48 2013 PDT by Crag (#243).
#242:"acceptable" this none this
return $object_utils:has_verb(args[1], "pile_class");
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:acceptable this none this" name: "MOO verb: #242:acceptable this none this" type: moo-code content*: "" _data-tag: 718367996105
#$#* 718367996105 content: return $object_utils:has_verb(args[1], "pile_class");
#$#: 718367996105
0 errors.
Verb programmed.
#242:add_item (this == #505), line 13:  Invalid argument
... called from #242:create, line 16
... called from #255:pile (this == #503), line 14
(End of traceback)
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile             [Nowhere]
 <1K #506 pile of stuff             *[North Vestibule]
 <1K #505 pile of stuff             *[North Vestibule]
-- 29 objects.  Total bytes: 48,235.------------------------------------------
Sure you want to recycle the pile of stuff (#505)? [Enter `yes' or `no']
The pile of stuff (#505) recycled.
Sure you want to recycle the pile of stuff (#506)? [Enter `yes' or `no']
The pile of stuff (#506) recycled.
0 errors.
Verb programmed.
Last modified Sat Apr 27 03:41:55 2013 PDT by Crag (#243).
#242:"add_item" this none this
 1:  // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
 2:  // TODO: permissions, san checks
 3:  {item} = args;
 4:  // TODO: fix this ugly hack
 5:  if (this.contents)
 6:    pile_class = item:pile_class(this);
 7:  else
 8:    pile_class = this;
 9:  endif
10:  if (pile_class != this)
11:    return pile_class:adopt(item, this);
12:  endif
13:  move(item, this);
14:  this:adjust_aliases();
15:  return this;
Object #503 does not define that verb, but its ancestor #5 does.
#5:"moveto" (where)
if (!valid(where) || this:is_unlocked_for(where))
  pass(where);
endif
Object #242 does not define that verb, but its ancestor #1 does.
#1:"is_unlocked_for" this none this
return this.key == 0 || $lock_utils:eval_key(this.key, args[1]);
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 1246013381106
#$#* 1246013381106 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 1246013381106 content: // TODO: permissions, san checks
#$#* 1246013381106 content: {item} = args;
#$#* 1246013381106 content: // TODO: fix this ugly hack
#$#* 1246013381106 content: if (this.contents)
#$#* 1246013381106 content:   pile_class = item:pile_class(this);
#$#* 1246013381106 content: else
#$#* 1246013381106 content:   pile_class = this;
#$#* 1246013381106 content: endif
#$#* 1246013381106 content: if (pile_class != this)
#$#* 1246013381106 content:   return pile_class:adopt(item, this);
#$#* 1246013381106 content: endif
#$#* 1246013381106 content: move(item, this);
#$#* 1246013381106 content: this:adjust_aliases();
#$#* 1246013381106 content: return this;
#$#: 1246013381106
0 errors.
Verb programmed.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile             [Nowhere]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
That is not a valid command.
#242:add_item (this == #505), line 13:  Invalid indirection
... called from #242:create, line 16
... called from #255:pile (this == #503), line 14
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 2131127309107
#$#* 2131127309107 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 2131127309107 content: // TODO: permissions, san checks
#$#* 2131127309107 content: {item} = args;
#$#* 2131127309107 content: // TODO: fix this ugly hack
#$#* 2131127309107 content: if (this.contents)
#$#* 2131127309107 content:   pile_class = item:pile_class(this);
#$#* 2131127309107 content: else
#$#* 2131127309107 content:   pile_class = this;
#$#* 2131127309107 content: endif
#$#* 2131127309107 content: if (pile_class != this)
#$#* 2131127309107 content:   return pile_class:adopt(item, this);
#$#* 2131127309107 content: endif
#$#* 2131127309107 content: item:moveto(this);
#$#* 2131127309107 content: this:adjust_aliases();
#$#* 2131127309107 content: return this;
#$#: 2131127309107
#242:add_item (this == #506), line 13:  Invalid indirection
... called from #242:create, line 16
... called from #255:pile (this == #503), line 14
(End of traceback)
0 errors.
Verb programmed.
Sure you want to recycle the pile of stuff (#505)? [Enter `yes' or `no']
The pile of stuff (#505) recycled.
Sure you want to recycle the pile of stuff (#506)? [Enter `yes' or `no']
The pile of stuff (#506) recycled.
#-3
#242:add_item (this == #505), line 12:  Invalid indirection
... called from #242:create, line 16
... called from #255:pile (this == #503), line 14
(End of traceback)
=> #-3 <$failed_match>
Sure you want to recycle the pile of stuff (#505)? [Enter `yes' or `no']
The pile of stuff (#505) recycled.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 56163112108
#$#* 56163112108 content: // Usage: pile <thing> on <other thing>
#$#* 56163112108 content: //  This forms a pile out of the dobj and iobj.
#$#* 56163112108 content: //  (based on $thing:drop)
#$#* 56163112108 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 56163112108 content: if (this.location != player)
#$#* 56163112108 content:   player:tell("You don't have that.");
#$#* 56163112108 content: elseif (!player.location:accept(this))
#$#* 56163112108 content:   player:tell("You can't pile that here.");
#$#* 56163112108 content: else
#$#* 56163112108 content:   pile_class = this:pile_class(iobj);
#$#* 56163112108 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 56163112108 content:     return this:drop(@args);
#$#* 56163112108 content:   endif
#$#* 56163112108 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 56163112108 content:   if (this.location == pile)
#$#* 56163112108 content:     player:tell_lines(this:pile_succeeded_msg());
#$#* 56163112108 content:     if (msg = this:opile_succeeded_msg())
#$#* 56163112108 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 56163112108 content:     endif
#$#* 56163112108 content:   else
#$#* 56163112108 content:     player:tell_lines(this:pile_failed_msg());
#$#* 56163112108 content:     return this:drop(@args);
#$#* 56163112108 content:     if (msg = this:opile_failed_msg())
#$#* 56163112108 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 56163112108 content:     endif
#$#* 56163112108 content:   endif
#$#* 56163112108 content: endif
#$#: 56163112108
-----
`HELP MATCH_UTILS' NOT FOUND
============================

Sorry, but no help is available on `match_utils'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP $MATCH_UTILS' NOT FOUND
=============================

Sorry, but no help is available on `$match_utils'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
GENERAL INFORMATION ON $OBJECT_UTILS[1]
=======================================

These routines are useful for finding out information about individual objects.

Examining everything an object has defined on it:
  all_verbs          (object) => like it says
  all_properties     (object) => likewise
  findable_properties(object) => tests to see if caller can "find" them
  owned_properties   (object[, owner]) => tests for ownership

Investigating inheritance:
  ancestors(object[,object...]) => all ancestors
  descendants      (object)     => all descendants
  ordered_descendants(object)   => descendants, in a different order
  leaves           (object)     => descendants with no children
  branches         (object)     => descendants with children 
  isa        (object,class) => true iff object is a descendant of class (or ==)

Considering containment:
  contains      (obj1, obj2) => Does obj1 contain obj2 (nested)?
  all_contents      (object) => return all the (nested) contents of object

Verifying verbs and properties:
  has_property(object,pname) => false/true   according as object.(pname) exists
  has_verb    (object,vname) => false/{#obj} according as object:(vname) exists
  has_callable_verb          => same, but verb must be callable from a program
  match_verb  (object,vname) => false/{location, newvname}
                               (identify location and usable name of verb)
Suspending:
  Many of the above verbs have ..._suspended versions to assist with very large object hierarchies.  The following exist:
   descendants_suspended              
   branches_suspended                 
   leaves_suspended                   
   all_properties_suspended           
   descendants_with_property_suspended

Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile             [Nowhere]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
A bottom of pile materializes out of thin air, moved by Crag.
Moved.
#504
0
You drop the top of pile.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile               *[North Vestibule]
 <1K #504 bottom of pile             [Nowhere]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
You take the top of pile.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 1139881669109
#$#* 1139881669109 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 1139881669109 content: // TODO: permissions, san checks
#$#* 1139881669109 content: {item} = args;
#$#* 1139881669109 content: // TODO: fix this ugly hack
#$#* 1139881669109 content: if (this.contents)
#$#* 1139881669109 content:   pile_class = item:pile_class(this);
#$#* 1139881669109 content:   if (pile_class != this)
#$#* 1139881669109 content:     return pile_class:adopt(item, this);
#$#* 1139881669109 content:   endif
#$#* 1139881669109 content: endif
#$#* 1139881669109 content: player:tell($string_utils:from_value(item));
#$#* 1139881669109 content: item:moveto(this);
#$#* 1139881669109 content: this:adjust_aliases();
#$#* 1139881669109 content: return this;
#$#: 1139881669109
0 errors.
Verb programmed.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile             [Nowhere]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
A bottom of pile materializes out of thin air, moved by Crag.
Moved.
Object #503 does not define that verb, but its ancestor #255 does.
Last modified Sat Apr 27 03:33:05 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile_class = this:pile_class(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile = pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg());
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg());
    return this:drop(@args);
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
Last modified Sat Apr 27 03:22:56 2013 PDT by Crag (#243).
#242:"create" this none this
// :create(top, bottom, where)
// Make a pile of top on bottom in location where.
// If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
// Otherwise we back out our changes, recycle the pile and return 0.
// 
// TODO: put some kind of security check in here?
// also figure out who should be the owner of a pile
{top, bottom, where} = args;
new_pile = $recycler:_create(this);
if (typeof(new_pile) != OBJ || !valid(new_pile))
  return 0;
endif
new_pile.name = "pile of stuff";
move(new_pile, where);
if (new_pile.location == where)
  new_pile:add_item(bottom);
  if (bottom.location == new_pile)
    new_pile:add_item(top);
    if (top.location != new_pile)
      new_pile:remove_item(bottom);
    else
      return new_pile;
    endif
  endif
endif
$recycler:_recycle(new_pile);
return 0;
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 1936517273110
#$#* 1936517273110 content: // :create(top, bottom, where)
#$#* 1936517273110 content: // Make a pile of top on bottom in location where.
#$#* 1936517273110 content: // If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
#$#* 1936517273110 content: // Otherwise we back out our changes, recycle the pile and return 0.
#$#* 1936517273110 content: // 
#$#* 1936517273110 content: // TODO: put some kind of security check in here?
#$#* 1936517273110 content: // also figure out who should be the owner of a pile
#$#* 1936517273110 content: {top, bottom, where} = args;
#$#* 1936517273110 content: new_pile = $recycler:_create(this);
#$#* 1936517273110 content: if (typeof(new_pile) != OBJ || !valid(new_pile))
#$#* 1936517273110 content:   return 0;
#$#* 1936517273110 content: endif
#$#* 1936517273110 content: new_pile.name = "pile of stuff";
#$#* 1936517273110 content: move(new_pile, where);
#$#* 1936517273110 content: if (new_pile.location == where)
#$#* 1936517273110 content:   new_pile:add_item(bottom);
#$#* 1936517273110 content:   if (bottom.location == new_pile)
#$#* 1936517273110 content:     new_pile:add_item(top);
#$#* 1936517273110 content:     if (top.location != new_pile)
#$#* 1936517273110 content:       new_pile:remove_item(bottom);
#$#* 1936517273110 content:     else
#$#* 1936517273110 content:       return new_pile;
#$#* 1936517273110 content:     endif
#$#* 1936517273110 content:   endif
#$#* 1936517273110 content: endif
#$#* 1936517273110 content: $recycler:_recycle(new_pile);
#$#* 1936517273110 content: return 0;
#$#: 1936517273110
0 errors.
Verb programmed.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
0
You don't have that.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Nowhere]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
Moved.
Object #503 does not define that verb, but its ancestor #255 does.
Last modified Sat Apr 27 03:33:05 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile_class = this:pile_class(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile = pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg());
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg());
    return this:drop(@args);
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
Object #503 does not define that verb, but its ancestor #5 does.
#5:"moveto" (where)
if (!valid(where) || this:is_unlocked_for(where))
  pass(where);
endif
Last modified Mon Jan  1 08:04:56 2001 PST by splat (#4014) (on Waterpoint).
#1:"moveto" this none this
// you'd think this would have a security check
set_task_perms(this.owner);
// RAISEME
return `move(this, args[1]) ! ANY';
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  A settee sit under the windows.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, and a bottom of pile here.
stormagnet is here, off in another world.
The verb :pile is on   bottom of pile(#504)--Generic Pilable Thing(#255)   top of pile(#503)--Generic Pilable Thing(#255)
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 388732203111
#$#* 388732203111 content: // :create(top, bottom, where)
#$#* 388732203111 content: // Make a pile of top on bottom in location where.
#$#* 388732203111 content: // If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
#$#* 388732203111 content: // Otherwise we back out our changes, recycle the pile and return 0.
#$#* 388732203111 content: // 
#$#* 388732203111 content: // TODO: put some kind of security check in here?
#$#* 388732203111 content: // also figure out who should be the owner of a pile
#$#* 388732203111 content: {top, bottom, where} = args;
#$#* 388732203111 content: new_pile = $recycler:_create(this);
#$#* 388732203111 content: if (typeof(new_pile) != OBJ || !valid(new_pile))
#$#* 388732203111 content:   return 0;
#$#* 388732203111 content: endif
#$#* 388732203111 content: new_pile.name = "pile of stuff";
#$#* 388732203111 content: move(new_pile, where);
#$#* 388732203111 content: if (new_pile.location == where)
#$#* 388732203111 content:   old_bottom_loc = bottom.location;
#$#* 388732203111 content:   new_pile:add_item(bottom);
#$#* 388732203111 content:   if (bottom.location == new_pile)
#$#* 388732203111 content:     old_top_loc = bottom.location;
#$#* 388732203111 content:     new_pile:add_item(top);
#$#* 388732203111 content:     if (top.location == new_pile)
#$#* 388732203111 content:       return new_pile;
#$#* 388732203111 content:     endif
#$#* 388732203111 content:     move(top, old_top_loc);
#$#* 388732203111 content:   endif
#$#* 388732203111 content:   move(bottom, old_bottom_loc);
#$#* 388732203111 content: endif
#$#* 388732203111 content: $recycler:_recycle(new_pile);
#$#* 388732203111 content: return 0;
#$#: 388732203111
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 1203608490112
#$#* 1203608490112 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 1203608490112 content: // TODO: permissions, san checks
#$#* 1203608490112 content: {item} = args;
#$#* 1203608490112 content: // TODO: fix this ugly hack
#$#* 1203608490112 content: if (this.contents)
#$#* 1203608490112 content:   pile_class = item:pile_class(this);
#$#* 1203608490112 content:   if (pile_class != this)
#$#* 1203608490112 content:     return pile_class:adopt(item, this);
#$#* 1203608490112 content:   endif
#$#* 1203608490112 content: endif
#$#* 1203608490112 content: item:moveto(this);
#$#* 1203608490112 content: this:adjust_aliases();
#$#* 1203608490112 content: return this;
#$#: 1203608490112
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 1281312966113
#$#* 1281312966113 content: // Usage: pile <thing> on <other thing>
#$#* 1281312966113 content: //  This forms a pile out of the dobj and iobj.
#$#* 1281312966113 content: //  (based on $thing:drop)
#$#* 1281312966113 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 1281312966113 content: if (this.location != player)
#$#* 1281312966113 content:   player:tell("You don't have that.");
#$#* 1281312966113 content: elseif (!player.location:accept(this))
#$#* 1281312966113 content:   player:tell("You can't pile that here.");
#$#* 1281312966113 content: else
#$#* 1281312966113 content:   // if (!valid(
#$#* 1281312966113 content:   pile_class = this:pile_class(iobj);
#$#* 1281312966113 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 1281312966113 content:     return this:drop(@args);
#$#* 1281312966113 content:   endif
#$#* 1281312966113 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 1281312966113 content:   if (this.location == pile)
#$#* 1281312966113 content:     player:tell_lines(this:pile_succeeded_msg());
#$#* 1281312966113 content:     if (msg = this:opile_succeeded_msg())
#$#* 1281312966113 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1281312966113 content:     endif
#$#* 1281312966113 content:   else
#$#* 1281312966113 content:     player:tell_lines(this:pile_failed_msg());
#$#* 1281312966113 content:     return this:drop(@args);
#$#* 1281312966113 content:     if (msg = this:opile_failed_msg())
#$#* 1281312966113 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1281312966113 content:     endif
#$#* 1281312966113 content:   endif
#$#* 1281312966113 content: endif
#$#: 1281312966113
That object does not define that verb.
The verb :failed_match is nowhere to be found.
Searching for verbs   containing the string ":failed_match" ...


Total: 0 verbs.
Searching for core verbs containing the string ":failed_match" ...


Total: 0 verbs.
That object does not define that verb.
object utilities (#47) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #47:has_property             Core-Wizard (#184)   rxd    this none this
   #47:all_properties           Core-Wizard (#184)   rxd    this none this
   #47:has_verb                 Core-Wizard (#184)   rxd    this none this
   #47:has_callable_verb        Core-Wizard (#184)   rxd    this none this
   #47:all_verbs                Core-Wizard (#184)   rxd    this none this
   #47:match_verb               Core-Wizard (#184)   rxd    this none this
   #47:isa                      Core-Wizard (#184)   rxd    this none this
   #47:ancestors                Core-Wizard (#184)   rxd    this none this
   #47:"descendants descendents" Core-Wizard (#184)  rxd    this none this
   #47:"descendants_suspended descendents_suspended" Core-Wizard (#184) rxd this none this
   #47:ordered_descendants      Core-Wizard (#184)   rxd    this none this
   #47:branches                 unknown hacker (#35) rxd    this none this
   #47:branches_suspended       Core-Wizard (#184)   rxd    this none this
   #47:leaves                   unknown hacker (#35) rxd    this none this
   #47:leaves_suspended         Core-Wizard (#184)   rxd    this none this
   #47:contains                 Core-Wizard (#184)   rxd    this none this
   #47:all_contents             Core-Wizard (#184)   rxd    this none this
   #47:findable_properties      Core-Wizard (#184)   rxd    this none this
   #47:owned_properties         Core-Wizard (#184)   rxd    this none this
   #47:property_conflicts       Core-Wizard (#184)   rx     this none this
   #47:descendants_with_property_suspended Core-Wizard (#184) rx this none this
   #47:locations                Core-Wizard (#184)   rxd    this none this
   #47:"fertile_descendants fertile_descendents" Core-Wizard (#184) rxd this none this
   #47:all_properties_suspended Core-Wizard (#184)   rxd    this none this
   #47:match_verbs(new)         unknown hacker (#35) rx     this none this
   #47:connected                unknown hacker (#35) rxd    this none this
   #47:all_contents_bfs         unknown hacker (#35) rxd    this none this
   #47:match_verbs_named        Core-Wizard (#184)   rxd    this none this
   #47:check_for_legacy         unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
The verb :drop is on   brown Persian rug(#257)--generic thing(#5)   detailed painting(#262)--generic container(#126)   timbered ceiling(#273)--generic container(#126)   chaise longues(#274)--generic thing(#5)   butler's desk(#275)--generic container(#126)   demi-lune table(#277)--Generic Table(#280)   Wind-Up Duck(#261)--Generic Wind-Up Toy(#260)   microphone(#282)   porter's chair(#286)--generic thing(#5)   How $staff will notice people rummaging(#290)--generic thing(#5)   settee(#502)--generic thing(#5)   bottom of pile(#504)--generic thing(#5)   Generic Nesting Decoration(#265)--generic container(#126)   top of pile(#503)--generic thing(#5)
#11:"drop" this none this
// {last_huh}  drop/throw any
// a drop "verb" that works for non-$things.
set_task_perms(caller_perms());
if (!valid(dobj) && prepstr)
  dobj = player.location:match_object(dobjstr = argstr);
endif
if (dobj == $nothing)
  player:tell($string_utils:capitalize(verb), " what?");
elseif ($command_utils:object_match_failed(dobj, dobjstr))
  // ...lose...
elseif (dobj.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(dobj))
  player:tell("You can't drop that here.");
else
  dobj:moveto(player.location);
  if (dobj.location == player.location)
    player:tell("You ", verb[1] == "d" ? "drop " | "throw away ", dobj:dname(), ".");
    player.location:announce(player:dnamec(), " ", verb[1] == "d" ? player:verb_sub("drops") | player:verb_sub("throws") + " away", " ", dobj:iname(), ".");
  else
    player:tell_lines("You can't seem to drop that here.");
  endif
endif
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
0
You don't have that.
Searching for verbs in _ containing the string ":tell" ...


Total: 0 verbs.
Searching for verbs in #255 containing the string ":tell" ...

#255:pile [+d Crag (#243)]:    player:tell("You don't have that.");

Total: 1 verb.
Carrying:
 some Group Utilities                    a Generic Nesting Decoration
 a MCP parent                            a Generic Delegator
 a Parsing objects                       a Generic Delegate
 a Text generation objects               a New Generic Room
 an Abstract class                       a Room Exit Delegate
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Nowhere]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
Moved.
Object #503 does not define that verb, but its ancestor #255 does.
Last modified Sat Apr 27 03:54:57 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  // if (!valid(
  pile_class = this:pile_class(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile = pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg());
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg());
    return this:drop(@args);
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
-----
$COMMAND_UTILS:OBJECT_MATCH_FAILED(DOBJ, DOBJSTR)
=================================================

That object does not define that verb.

-----
$COMMAND_UTILS:OBJECT_MATCH_FAILED
==================================

Usage: object_match_failed(object, string)

Prints a message if string does not match object.  Generally used after object is derived from a :match_object(string).

The verb :match_object is on   Crag(#243)--root class(#1)   North Vestibule(#70)--root class(#1)   brown Persian rug(#257)--root class(#1)   detailed painting(#262)--root class(#1)   timbered ceiling(#273)--root class(#1)   chaise longues(#274)--root class(#1)   butler's desk(#275)--root class(#1)   demi-lune table(#277)--root class(#1)   Wind-Up Duck(#261)--root class(#1)   microphone(#282)--root class(#1)   porter's chair(#286)--root class(#1)   How $staff will notice people rummaging(#290)--root class(#1)   stormagnet(#246)--root class(#1)   settee(#502)--root class(#1)   bottom of pile(#504)--root class(#1)   Group Utilities(#248)--root class(#1)   MCP parent(#251)--root class(#1)   Parsing objects(#252)--root class(#1)   Text generation objects(#253)--root class(#1)   Abstract class(#254)--root class(#1)   Generic Nesting Decoration(#265)--root class(#1)   Generic Delegator(#269)--root class(#1)   Generic Delegate(#270)--root class(#1)   New Generic Room(#271)--root class(#1)   Room Exit Delegate(#279)--root class(#1)   top of pile(#503)--root class(#1)   Stage-Talk Feature(#67)--root class(#1)   Thinking Feature(#68)--root class(#1)
Object #70 does not define that verb, but its ancestor #1 does.
#1:"match_object" this none this
// :match_object(string [,who])
args[2..1] = {this};
return $string_utils:match_object(@args);
=> #504 (bottom of pile)
You see no "bottom" here.
=> 1
=> 0
0 errors.
Verb programmed.
0
You don't have that.
The verb :pile is on   bottom of pile(#504)--Generic Pilable Thing(#255)
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
Moved.
0
You don't have that.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Nowhere]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
Moved.
Object #503 does not define that verb, but its ancestor #255 does.
Last modified Sat Apr 27 04:09:16 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  if (iobj == $failed_match)
    iobj = this.location:match_object(iobjstr);
  endif
  if ($command_utils:object_match_failed(iobj, iobjstr))
    return;
  endif
  pile_class = this:pile_class(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile = pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg());
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg());
    return this:drop(@args);
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
The verb :pile is on   bottom of pile(#504)--Generic Pilable Thing(#255)   top of pile(#503)--Generic Pilable Thing(#255)
stormagnet has reconnected.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Crag]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
stormagnet picks up the settee.
0
You don't have that.
You see no "my top" here.
Moved.
Object #503 does not define that verb, but its ancestor #255 does.
Last modified Sat Apr 27 04:09:16 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  if (iobj == $failed_match)
    iobj = this.location:match_object(iobjstr);
  endif
  if ($command_utils:object_match_failed(iobj, iobjstr))
    return;
  endif
  pile_class = this:pile_class(iobj);
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile = pile_class:create(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg());
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg());
    return this:drop(@args);
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
@integrate_room top isn't set.
@integrate_player top isn't set.
@integrate_container top isn't set.
@drop_failed top is "You can't seem to drop %td here."
@drop_succeeded top is "You drop %td."
@odrop_failed top is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded top is "%n:(drops) %ti."
@otake_succeeded top is "%n:(picks) up %td."
@otake_failed top isn't set.
@take_succeeded top is "You take %td."
@take_failed top is "You can't pick up %td."
@pile_succeeded top is "Done."
@opile_succeeded top isn't set.
@pile_failed top is "You can't seem to pile that here."
@opile_failed top isn't set.
Your current object is a Generic Pile (#242).
Your current object is now #255.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 2025348832114
#$#* 2025348832114 content: // Usage: pile <thing> on <other thing>
#$#* 2025348832114 content: //  This forms a pile out of the dobj and iobj.
#$#* 2025348832114 content: //  (based on $thing:drop)
#$#* 2025348832114 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 2025348832114 content: if (this.location != player)
#$#* 2025348832114 content:   player:tell("You don't have that.");
#$#* 2025348832114 content: elseif (!player.location:accept(this))
#$#* 2025348832114 content:   player:tell("You can't pile that here.");
#$#* 2025348832114 content: else
#$#* 2025348832114 content:   if (iobj == $failed_match)
#$#* 2025348832114 content:     iobj = this.location:match_object(iobjstr);
#$#* 2025348832114 content:   endif
#$#* 2025348832114 content:   if ($command_utils:object_match_failed(iobj, iobjstr))
#$#* 2025348832114 content:     return;
#$#* 2025348832114 content:   endif
#$#* 2025348832114 content:   pile_class = this:pile_class(iobj);
#$#* 2025348832114 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 2025348832114 content:     return this:drop(@args);
#$#* 2025348832114 content:   endif
#$#* 2025348832114 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 2025348832114 content:   if (this.location == pile)
#$#* 2025348832114 content:     player:tell_lines(this:pile_succeeded_msg());
#$#* 2025348832114 content:     if (msg = this:opile_succeeded_msg())
#$#* 2025348832114 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 2025348832114 content:     endif
#$#* 2025348832114 content:   else
#$#* 2025348832114 content:     player:tell_lines(this:pile_failed_msg());
#$#* 2025348832114 content:     return this:drop(@args);
#$#* 2025348832114 content:     if (msg = this:opile_failed_msg())
#$#* 2025348832114 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 2025348832114 content:     endif
#$#* 2025348832114 content:   endif
#$#* 2025348832114 content: endif
#$#: 2025348832114
0 errors.
Verb programmed.
DEBUG: called :pile on top of pile (#503)
0
You don't have that.
Moved.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 234199215115
#$#* 234199215115 content: // Usage: pile <thing> on <other thing>
#$#* 234199215115 content: //  This forms a pile out of the dobj and iobj.
#$#* 234199215115 content: //  (based on $thing:drop)
#$#* 234199215115 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 234199215115 content: player:tell("DEBUG: called :pile on ", this:name_and_number());
#$#* 234199215115 content: if (this.location != player)
#$#* 234199215115 content:   player:tell("You don't have that.");
#$#* 234199215115 content: elseif (!player.location:accept(this))
#$#* 234199215115 content:   player:tell("You can't pile that here.");
#$#* 234199215115 content: else
#$#* 234199215115 content:   if (iobj == $failed_match)
#$#* 234199215115 content:     iobj = this.location:match_object(iobjstr);
#$#* 234199215115 content:   endif
#$#* 234199215115 content:   if ($command_utils:object_match_failed(iobj, iobjstr))
#$#* 234199215115 content:     return;
#$#* 234199215115 content:   endif
#$#* 234199215115 content:   pile_class = this:pile_class(iobj);
#$#* 234199215115 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 234199215115 content:     return this:drop(@args);
#$#* 234199215115 content:   endif
#$#* 234199215115 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 234199215115 content:   if (this.location == pile)
#$#* 234199215115 content:     player:tell_lines(this:pile_succeeded_msg());
#$#* 234199215115 content:     if (msg = this:opile_succeeded_msg())
#$#* 234199215115 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 234199215115 content:     endif
#$#* 234199215115 content:   else
#$#* 234199215115 content:     player:tell_lines(this:pile_failed_msg());
#$#* 234199215115 content:     return this:drop(@args);
#$#* 234199215115 content:     if (msg = this:opile_failed_msg())
#$#* 234199215115 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 234199215115 content:     endif
#$#* 234199215115 content:   endif
#$#* 234199215115 content: endif
#$#: 234199215115
0 errors.
Verb programmed.
DEBUG: called :pile on top of pile (#503)
0
You don't have that.
Moved.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 661938010116
#$#* 661938010116 content: // Usage: pile <thing> on <other thing>
#$#* 661938010116 content: //  This forms a pile out of the dobj and iobj.
#$#* 661938010116 content: //  (based on $thing:drop)
#$#* 661938010116 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 661938010116 content: player:tell("DEBUG: called :pile on ", this:name_and_number());
#$#* 661938010116 content: if (this.location != player)
#$#* 661938010116 content:   player:tell("You don't have that.");
#$#* 661938010116 content: elseif (!player.location:accept(this))
#$#* 661938010116 content:   player:tell("You can't pile that here.");
#$#* 661938010116 content: else
#$#* 661938010116 content:   if (iobj == $failed_match)
#$#* 661938010116 content:     iobj = player.location:match_object(iobjstr);
#$#* 661938010116 content:     player:tell("DEBUG: player.location:match_object(\"", iobjstr, "\") => ", iobj:name_and_number());
#$#* 661938010116 content:   endif
#$#* 661938010116 content:   if ($command_utils:object_match_failed(iobj, iobjstr))
#$#* 661938010116 content:     return;
#$#* 661938010116 content:   endif
#$#* 661938010116 content:   pile_class = this:pile_class(iobj);
#$#* 661938010116 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 661938010116 content:     return this:drop(@args);
#$#* 661938010116 content:   endif
#$#* 661938010116 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 661938010116 content:   if (this.location == pile)
#$#* 661938010116 content:     player:tell_lines(this:pile_succeeded_msg());
#$#* 661938010116 content:     if (msg = this:opile_succeeded_msg())
#$#* 661938010116 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 661938010116 content:     endif
#$#* 661938010116 content:   else
#$#* 661938010116 content:     player:tell_lines(this:pile_failed_msg());
#$#* 661938010116 content:     return this:drop(@args);
#$#* 661938010116 content:     if (msg = this:opile_failed_msg())
#$#* 661938010116 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 661938010116 content:     endif
#$#* 661938010116 content:   endif
#$#* 661938010116 content: endif
#$#: 661938010116
0 errors.
Verb programmed.
The top of pile is already in Crag.
DEBUG: called :pile on top of pile (#503)
DEBUG: iobjstr == "bottom", iobj == bottom of pile (#504)
0
You don't have that.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 1576941710117
#$#* 1576941710117 content: // Usage: pile <thing> on <other thing>
#$#* 1576941710117 content: //  This forms a pile out of the dobj and iobj.
#$#* 1576941710117 content: //  (based on $thing:drop)
#$#* 1576941710117 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 1576941710117 content: player:tell("DEBUG: called :pile on ", this:name_and_number());
#$#* 1576941710117 content: if (this.location != player)
#$#* 1576941710117 content:   player:tell("You don't have that.");
#$#* 1576941710117 content: elseif (!player.location:accept(this))
#$#* 1576941710117 content:   player:tell("You can't pile that here.");
#$#* 1576941710117 content: else
#$#* 1576941710117 content:   player:tell("DEBUG: iobjstr == \"", iobjstr, "\", iobj == ", iobj:name_and_number());
#$#* 1576941710117 content:   if (iobj == $failed_match)
#$#* 1576941710117 content:     iobj = player.location:match_object(iobjstr);
#$#* 1576941710117 content:     player:tell("DEBUG: player.location:match_object(\"", iobjstr, "\") => ", iobj:name_and_number());
#$#* 1576941710117 content:   endif
#$#* 1576941710117 content:   if ($command_utils:object_match_failed(iobj, iobjstr))
#$#* 1576941710117 content:     return;
#$#* 1576941710117 content:   endif
#$#* 1576941710117 content:   pile_class = this:pile_class(iobj);
#$#* 1576941710117 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 1576941710117 content:     return this:drop(@args);
#$#* 1576941710117 content:   endif
#$#* 1576941710117 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 1576941710117 content:   if (this.location == pile)
#$#* 1576941710117 content:     player:tell_lines(this:pile_succeeded_msg());
#$#* 1576941710117 content:     if (msg = this:opile_succeeded_msg())
#$#* 1576941710117 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1576941710117 content:     endif
#$#* 1576941710117 content:   else
#$#* 1576941710117 content:     player:tell_lines(this:pile_failed_msg());
#$#* 1576941710117 content:     return this:drop(@args);
#$#* 1576941710117 content:     if (msg = this:opile_failed_msg())
#$#* 1576941710117 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1576941710117 content:     endif
#$#* 1576941710117 content:   endif
#$#* 1576941710117 content: endif
#$#: 1576941710117
Moved.
Object #503 does not define that verb, but its ancestor #5 does.
#5:"d*rop throw chuck" this none none
// Usage: drop <thing>
//  This drops things in the room the dropper is in.
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't drop that here.");
else
  this:moveto(player.location);
  if (this.location == player.location)
    player:tell_lines(this:drop_succeeded_msg() || "Dropped.");
    if (msg = this:odrop_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:drop_failed_msg() || "You can't seem to drop that here.");
    if (msg = this:odrop_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
0 errors.
Verb programmed.
DEBUG: this:pile_class("bottom") => Generic Pile (#242)
0
You don't have that.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 1019813830118
#$#* 1019813830118 content: // Usage: pile <thing> on <other thing>
#$#* 1019813830118 content: //  This forms a pile out of the dobj and iobj.
#$#* 1019813830118 content: //  (based on $thing:drop)
#$#* 1019813830118 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 1019813830118 content: // player:tell("DEBUG: called :pile on ", this:name_and_number());
#$#* 1019813830118 content: if (this.location != player)
#$#* 1019813830118 content:   player:tell("You don't have that.");
#$#* 1019813830118 content: elseif (!player.location:accept(this))
#$#* 1019813830118 content:   player:tell("You can't pile that here.");
#$#* 1019813830118 content: else
#$#* 1019813830118 content:   // player:tell("DEBUG: iobjstr == \"", iobjstr, "\", iobj == ", iobj:name_and_number());
#$#* 1019813830118 content:   if (iobj == $failed_match)
#$#* 1019813830118 content:     iobj = player.location:match_object(iobjstr);
#$#* 1019813830118 content:     // player:tell("DEBUG: player.location:match_object(\"", iobjstr, "\") => ", iobj:name_and_number());
#$#* 1019813830118 content:   endif
#$#* 1019813830118 content:   if ($command_utils:object_match_failed(iobj, iobjstr))
#$#* 1019813830118 content:     return;
#$#* 1019813830118 content:   endif
#$#* 1019813830118 content:   pile_class = this:pile_class(iobj);
#$#* 1019813830118 content:   player:tell("DEBUG: this:pile_class(\"", iobjstr, "\") => ", pile_class:name_and_number());
#$#* 1019813830118 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 1019813830118 content:     return this:drop(@args);
#$#* 1019813830118 content:   endif
#$#* 1019813830118 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 1019813830118 content:   if (this.location == pile)
#$#* 1019813830118 content:     player:tell_lines(this:pile_succeeded_msg());
#$#* 1019813830118 content:     if (msg = this:opile_succeeded_msg())
#$#* 1019813830118 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1019813830118 content:     endif
#$#* 1019813830118 content:   else
#$#* 1019813830118 content:     player:tell_lines(this:pile_failed_msg());
#$#* 1019813830118 content:     return this:drop(@args);
#$#* 1019813830118 content:     if (msg = this:opile_failed_msg())
#$#* 1019813830118 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1019813830118 content:     endif
#$#* 1019813830118 content:   endif
#$#* 1019813830118 content: endif
#$#: 1019813830118
Moved.
stormagnet stands up from the chaise longues.
stormagnet goes south.
0 errors.
Verb programmed.
#255:pile (this == #503), line 25:  Type mismatch
(End of traceback)
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table             *[stormagnet]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [Nowhere]
 <1K #504 bottom of pile            *[North Vestibule]
-- 27 objects.  Total bytes: 47,253.------------------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 1768391758119
#$#* 1768391758119 content: // Usage: pile <thing> on <other thing>
#$#* 1768391758119 content: //  This forms a pile out of the dobj and iobj.
#$#* 1768391758119 content: //  (based on $thing:drop)
#$#* 1768391758119 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 1768391758119 content: // player:tell("DEBUG: called :pile on ", this:name_and_number());
#$#* 1768391758119 content: if (this.location != player)
#$#* 1768391758119 content:   player:tell("You don't have that.");
#$#* 1768391758119 content: elseif (!player.location:accept(this))
#$#* 1768391758119 content:   player:tell("You can't pile that here.");
#$#* 1768391758119 content: else
#$#* 1768391758119 content:   // player:tell("DEBUG: iobjstr == \"", iobjstr, "\", iobj == ", iobj:name_and_number());
#$#* 1768391758119 content:   if (iobj == $failed_match)
#$#* 1768391758119 content:     iobj = player.location:match_object(iobjstr);
#$#* 1768391758119 content:     // player:tell("DEBUG: player.location:match_object(\"", iobjstr, "\") => ", iobj:name_and_number());
#$#* 1768391758119 content:   endif
#$#* 1768391758119 content:   if ($command_utils:object_match_failed(iobj, iobjstr))
#$#* 1768391758119 content:     return;
#$#* 1768391758119 content:   endif
#$#* 1768391758119 content:   pile_class = this:pile_class(iobj);
#$#* 1768391758119 content:   // player:tell("DEBUG: this:pile_class(\"", iobjstr, "\") => ", pile_class:name_and_number());
#$#* 1768391758119 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 1768391758119 content:     return this:drop(@args);
#$#* 1768391758119 content:   endif
#$#* 1768391758119 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 1768391758119 content:   player:tell("DEBUG: pile_class:create(...) => ", pile:name_and_number());
#$#* 1768391758119 content:   if (this.location == pile)
#$#* 1768391758119 content:     player:tell_lines(this:pile_succeeded_msg());
#$#* 1768391758119 content:     if (msg = this:opile_succeeded_msg())
#$#* 1768391758119 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1768391758119 content:     endif
#$#* 1768391758119 content:   else
#$#* 1768391758119 content:     player:tell_lines(this:pile_failed_msg());
#$#* 1768391758119 content:     return this:drop(@args);
#$#* 1768391758119 content:     if (msg = this:opile_failed_msg())
#$#* 1768391758119 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1768391758119 content:     endif
#$#* 1768391758119 content:   endif
#$#* 1768391758119 content: endif
#$#: 1768391758119
Moved.
0 errors.
Verb programmed.
DEBUG: pile_class:create(...) => 0
0
You don't have that.
Moved.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 1960825654120
#$#* 1960825654120 content: // Usage: pile <thing> on <other thing>
#$#* 1960825654120 content: //  This forms a pile out of the dobj and iobj.
#$#* 1960825654120 content: //  (based on $thing:drop)
#$#* 1960825654120 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 1960825654120 content: // player:tell("DEBUG: called :pile on ", this:name_and_number());
#$#* 1960825654120 content: if (this.location != player)
#$#* 1960825654120 content:   player:tell("You don't have that.");
#$#* 1960825654120 content: elseif (!player.location:accept(this))
#$#* 1960825654120 content:   player:tell("You can't pile that here.");
#$#* 1960825654120 content: else
#$#* 1960825654120 content:   // player:tell("DEBUG: iobjstr == \"", iobjstr, "\", iobj == ", iobj:name_and_number());
#$#* 1960825654120 content:   if (iobj == $failed_match)
#$#* 1960825654120 content:     iobj = player.location:match_object(iobjstr);
#$#* 1960825654120 content:     // player:tell("DEBUG: player.location:match_object(\"", iobjstr, "\") => ", iobj:name_and_number());
#$#* 1960825654120 content:   endif
#$#* 1960825654120 content:   if ($command_utils:object_match_failed(iobj, iobjstr))
#$#* 1960825654120 content:     return;
#$#* 1960825654120 content:   endif
#$#* 1960825654120 content:   pile_class = this:pile_class(iobj);
#$#* 1960825654120 content:   // player:tell("DEBUG: this:pile_class(\"", iobjstr, "\") => ", pile_class:name_and_number());
#$#* 1960825654120 content:   if (typeof(pile_class) != OBJ || !valid(pile_class))
#$#* 1960825654120 content:     return this:drop(@args);
#$#* 1960825654120 content:   endif
#$#* 1960825654120 content:   pile = pile_class:create(this, iobj, player.location);
#$#* 1960825654120 content:   player:tell("DEBUG: pile_class:create(...) => ", $string_utils:from_value(pile));
#$#* 1960825654120 content:   if (this.location == pile)
#$#* 1960825654120 content:     player:tell_lines(this:pile_succeeded_msg());
#$#* 1960825654120 content:     if (msg = this:opile_succeeded_msg())
#$#* 1960825654120 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1960825654120 content:     endif
#$#* 1960825654120 content:   else
#$#* 1960825654120 content:     player:tell_lines(this:pile_failed_msg());
#$#* 1960825654120 content:     return this:drop(@args);
#$#* 1960825654120 content:     if (msg = this:opile_failed_msg())
#$#* 1960825654120 content:       player.location:announce(player:dnamec(), " ", msg);
#$#* 1960825654120 content:     endif
#$#* 1960825654120 content:   endif
#$#* 1960825654120 content: endif
#$#: 1960825654120
0 errors.
Verb programmed.
=> #242 (Generic Pile)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 2060779660121
#$#* 2060779660121 content: // :create(top, bottom, where)
#$#* 2060779660121 content: // Make a pile of top on bottom in location where.
#$#* 2060779660121 content: // If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
#$#* 2060779660121 content: // Otherwise we back out our changes, recycle the pile and return 0.
#$#* 2060779660121 content: // 
#$#* 2060779660121 content: // TODO: put some kind of security check in here?
#$#* 2060779660121 content: // also figure out who should be the owner of a pile
#$#* 2060779660121 content: {top, bottom, where} = args;
#$#* 2060779660121 content: new_pile = $recycler:_create(this);
#$#* 2060779660121 content: if (typeof(new_pile) != OBJ || !valid(new_pile))
#$#* 2060779660121 content:   return 0;
#$#* 2060779660121 content: endif
#$#* 2060779660121 content: new_pile.name = "pile of stuff";
#$#* 2060779660121 content: move(new_pile, where);
#$#* 2060779660121 content: if (new_pile.location == where)
#$#* 2060779660121 content:   old_bottom_loc = bottom.location;
#$#* 2060779660121 content:   new_pile:add_item(bottom);
#$#* 2060779660121 content:   if (bottom.location == new_pile)
#$#* 2060779660121 content:     old_top_loc = bottom.location;
#$#* 2060779660121 content:     new_pile:add_item(top);
#$#* 2060779660121 content:     if (top.location == new_pile)
#$#* 2060779660121 content:       return new_pile;
#$#* 2060779660121 content:     endif
#$#* 2060779660121 content:     move(top, old_top_loc);
#$#* 2060779660121 content:   endif
#$#* 2060779660121 content:   move(bottom, old_bottom_loc);
#$#* 2060779660121 content: endif
#$#* 2060779660121 content: $recycler:_recycle(new_pile);
#$#* 2060779660121 content: return 0;
#$#: 2060779660121
0 errors.
Verb programmed.
DEBUG: move top failed
DEBUG: move bottom failed
DEBUG: move pile failed
0
You don't have that.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 650157214122
#$#* 650157214122 content: // :create(top, bottom, where)
#$#* 650157214122 content: // Make a pile of top on bottom in location where.
#$#* 650157214122 content: // If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
#$#* 650157214122 content: // Otherwise we back out our changes, recycle the pile and return 0.
#$#* 650157214122 content: // 
#$#* 650157214122 content: // TODO: put some kind of security check in here?
#$#* 650157214122 content: // also figure out who should be the owner of a pile
#$#* 650157214122 content: {top, bottom, where} = args;
#$#* 650157214122 content: new_pile = $recycler:_create(this);
#$#* 650157214122 content: if (typeof(new_pile) != OBJ || !valid(new_pile))
#$#* 650157214122 content:   player:tell("DEBUG: :_create failed");
#$#* 650157214122 content:   return 0;
#$#* 650157214122 content: endif
#$#* 650157214122 content: new_pile.name = "pile of stuff";
#$#* 650157214122 content: move(new_pile, where);
#$#* 650157214122 content: if (new_pile.location == where)
#$#* 650157214122 content:   old_bottom_loc = bottom.location;
#$#* 650157214122 content:   new_pile:add_item(bottom);
#$#* 650157214122 content:   if (bottom.location == new_pile)
#$#* 650157214122 content:     old_top_loc = bottom.location;
#$#* 650157214122 content:     new_pile:add_item(top);
#$#* 650157214122 content:     if (top.location == new_pile)
#$#* 650157214122 content:       return new_pile;
#$#* 650157214122 content:     endif
#$#* 650157214122 content:     player:tell("DEBUG: move top failed");
#$#* 650157214122 content:     move(top, old_top_loc);
#$#* 650157214122 content:   endif
#$#* 650157214122 content:   player:tell("DEBUG: move bottom failed");
#$#* 650157214122 content:   move(bottom, old_bottom_loc);
#$#* 650157214122 content: endif
#$#* 650157214122 content: player:tell("DEBUG: move pile failed");
#$#* 650157214122 content: $recycler:_recycle(new_pile);
#$#* 650157214122 content: return 0;
#$#: 650157214122
0 errors.
Verb programmed.
Usage: pile <thing> on <other thing>
Moved.
DEBUG: move top failed
0
You don't have that.
Moved.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:create this none this" name: "MOO verb: #242:create this none this" type: moo-code content*: "" _data-tag: 1516498280123
#$#* 1516498280123 content: // :create(top, bottom, where)
#$#* 1516498280123 content: // Make a pile of top on bottom in location where.
#$#* 1516498280123 content: // If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
#$#* 1516498280123 content: // Otherwise we back out our changes, recycle the pile and return 0.
#$#* 1516498280123 content: // 
#$#* 1516498280123 content: // TODO: put some kind of security check in here?
#$#* 1516498280123 content: // also figure out who should be the owner of a pile
#$#* 1516498280123 content: {top, bottom, where} = args;
#$#* 1516498280123 content: new_pile = $recycler:_create(this);
#$#* 1516498280123 content: if (typeof(new_pile) != OBJ || !valid(new_pile))
#$#* 1516498280123 content:   player:tell("DEBUG: :_create failed");
#$#* 1516498280123 content:   return 0;
#$#* 1516498280123 content: endif
#$#* 1516498280123 content: new_pile.name = "pile of stuff";
#$#* 1516498280123 content: move(new_pile, where);
#$#* 1516498280123 content: reason = "move pile failed";
#$#* 1516498280123 content: if (new_pile.location == where)
#$#* 1516498280123 content:   reason = "move bottom failed";
#$#* 1516498280123 content:   old_bottom_loc = bottom.location;
#$#* 1516498280123 content:   new_pile:add_item(bottom);
#$#* 1516498280123 content:   if (bottom.location == new_pile)
#$#* 1516498280123 content:     reason = "move top failed";
#$#* 1516498280123 content:     old_top_loc = bottom.location;
#$#* 1516498280123 content:     new_pile:add_item(top);
#$#* 1516498280123 content:     if (top.location == new_pile)
#$#* 1516498280123 content:       return new_pile;
#$#* 1516498280123 content:     endif
#$#* 1516498280123 content:     move(top, old_top_loc);
#$#* 1516498280123 content:   endif
#$#* 1516498280123 content:   move(bottom, old_bottom_loc);
#$#* 1516498280123 content: endif
#$#* 1516498280123 content: player:tell("DEBUG: ", reason);
#$#* 1516498280123 content: $recycler:_recycle(new_pile);
#$#* 1516498280123 content: return 0;
#$#: 1516498280123
Last modified Sat Apr 27 04:01:41 2013 PDT by Crag (#243).
#242:"add_item" this none this
// :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
// TODO: permissions, san checks
{item} = args;
// TODO: fix this ugly hack
if (this.contents)
  pile_class = item:pile_class(this);
  if (pile_class != this)
    return pile_class:adopt(item, this);
  endif
endif
item:moveto(this);
this:adjust_aliases();
return this;
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#242:add_item this none this" name: "MOO verb: #242:add_item this none this" type: moo-code content*: "" _data-tag: 758309695124
#$#* 758309695124 content: // :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
#$#* 758309695124 content: // TODO: permissions, san checks
#$#* 758309695124 content: {item} = args;
#$#* 758309695124 content: // TODO: fix this ugly hack
#$#* 758309695124 content: if (this.contents)
#$#* 758309695124 content:   pile_class = item:pile_class(this);
#$#* 758309695124 content:   if (pile_class != this)
#$#* 758309695124 content:     return pile_class:adopt(item, this);
#$#* 758309695124 content:   endif
#$#* 758309695124 content: endif
#$#* 758309695124 content: item:moveto(this);
#$#* 758309695124 content: this:adjust_aliases();
#$#* 758309695124 content: return this;
#$#: 758309695124
0 errors.
Verb programmed.
The top of pile is already in Crag.
0
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table              [Nowhere]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
-- 28 objects.  Total bytes: 47,744.------------------------------------------
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, and a pile of stuff here.
Your current object is now #242.
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  #242:pile                     Crag (#243)          r d    any on top of/on/onto/upon this
  #242:create                   Crag (#243)          rxd    this none this
  #242:location_for_caller      Crag (#243)          rxd    this none this
  #242:add_item                 Crag (#243)          rxd    this none this
  #242:remove_item              Crag (#243)          rxd    this none this
  #242:adjust_aliases           Crag (#243)          rxd    this none this
  #242:initialize               Crag (#243)          rxd    this none this
  #242:adopt                    Crag (#243)          rxd    this none this
  #242:acceptable               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 10:41:12 2013 PDT by Crag (#243).
#242:"add_item" this none this
// :add_item(item) - tries to put item on top of this, changing class or adding another group if need be
// TODO: permissions, san checks
{item} = args;
item:moveto(this);
this:adjust_aliases();
return this;
Object #258 does not define that verb, but its ancestor #1 does.
Last modified Mon Jan  1 08:04:56 2001 PST by splat (#4014) (on Waterpoint).
#1:"moveto" this none this
// you'd think this would have a security check
set_task_perms(this.owner);
// RAISEME
return `move(this, args[1]) ! ANY';
Last modified Sat Apr 27 10:40:48 2013 PDT by Crag (#243).
#242:"create" this none this
// :create(top, bottom, where)
// Make a pile of top on bottom in location where.
// If we can make the pile in where and put both bottom and top in it, then we return the new pile object.
// Otherwise we back out our changes, recycle the pile and return 0.
// 
// TODO: put some kind of security check in here?
// also figure out who should be the owner of a pile
{top, bottom, where} = args;
new_pile = $recycler:_create(this);
if (typeof(new_pile) != OBJ || !valid(new_pile))
  // player:tell("DEBUG: :_create failed");
  return 0;
endif
new_pile.name = "pile of stuff";
move(new_pile, where);
reason = "move pile failed";
if (new_pile.location == where)
  reason = "move bottom failed";
  old_bottom_loc = bottom.location;
  new_pile:add_item(bottom);
  if (bottom.location == new_pile)
    reason = "move top failed";
    old_top_loc = bottom.location;
    new_pile:add_item(top);
    if (top.location == new_pile)
      return new_pile;
    endif
    move(top, old_top_loc);
  endif
  move(bottom, old_bottom_loc);
endif
// player:tell("DEBUG: ", reason);
$recycler:_recycle(new_pile);
return 0;
You see nothing special.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table              [Nowhere]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
-- 28 objects.  Total bytes: 47,744.------------------------------------------
Last modified Sat Apr 27 10:36:00 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
// player:tell("DEBUG: called :pile on ", this:name_and_number());
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  // player:tell("DEBUG: iobjstr == \"", iobjstr, "\", iobj == ", iobj:name_and_number());
  if (iobj == $failed_match)
    iobj = player.location:match_object(iobjstr);
    // player:tell("DEBUG: player.location:match_object(\"", iobjstr, "\") => ", iobj:name_and_number());
  endif
  if ($command_utils:object_match_failed(iobj, iobjstr))
    return;
  endif
  pile_class = this:pile_class(iobj);
  // player:tell("DEBUG: this:pile_class(\"", iobjstr, "\") => ", pile_class:name_and_number());
  if (typeof(pile_class) != OBJ || !valid(pile_class))
    return this:drop(@args);
  endif
  pile = pile_class:create(this, iobj, player.location);
  // player:tell("DEBUG: pile_class:create(...) => ", $string_utils:from_value(pile));
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg());
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg());
    return this:drop(@args);
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
#255:"pile_succeeded_msg opile_succeeded_msg pile_failed_msg opile_failed_msg" ()
That verb has not been programmed.
Object #0 does not define that verb, but its ancestor #1 does.
#1:"integrate_room_msg integrate_container_msg" this none this
// If this.(verb) is not set, return this:integrate_msg(@args).
// If this.(verb) is not an alist, pronoun_sub it.
// If this.location has an entry, pronoun sub it.
// If $nowhere (#-1) has an entry, pronoun sub it.
if (typeof(alist = this.(verb)) == LIST && typeof(alist[1]) == LIST)
  if (assoc = $list_utils:assoc(this.location, alist) || $list_utils:assoc($nowhere, alist))
    msg = assoc[2];
  endif
else
  msg = alist;
endif
return $string_utils:pronoun_sub(msg, @args);
The verb :integrate_room_msg is on   Crag(#243)--root class(#1)   North Vestibule(#70)--root class(#1)   brown Persian rug(#257)--root class(#1)   detailed painting(#262)--root class(#1)   timbered ceiling(#273)--root class(#1)   chaise longues(#274)--generic piece of furniture(#81)   butler's desk(#275)--root class(#1)   demi-lune table(#277)--root class(#1)   Wind-Up Duck(#261)--root class(#1)   microphone(#282)--root class(#1)   porter's chair(#286)--generic piece of furniture(#81)   How $staff will notice people rummaging(#290)--root class(#1)   pile of stuff(#258)--root class(#1)   Group Utilities(#248)--root class(#1)   MCP parent(#251)--root class(#1)   Parsing objects(#252)--root class(#1)   Text generation objects(#253)--root class(#1)   Abstract class(#254)--root class(#1)   Generic Nesting Decoration(#265)--root class(#1)   Generic Delegator(#269)--root class(#1)   Generic Delegate(#270)--root class(#1)   New Generic Room(#271)--root class(#1)   Room Exit Delegate(#279)--root class(#1)   Stage-Talk Feature(#67)--root class(#1)   Thinking Feature(#68)--root class(#1)
@integrate_room here isn't set.
@integrate_player here isn't set.
@integrate_container here isn't set.
@in here is "on"
@who_location here is "%Tn"
@victim_ejection here is "You have been expelled from %id by %nd."
@ejection here is "You expel %dd from %id."
@oejection here is "%Dd %d:(is) unceremoniously expelled from %id by %nd."
@housekeeper here is "%Nd's friends arrive to cart %no off to bed."
@integrate_sep here is "  "
@housekeeper_deposit here is "%Ni's friends arrive to drop %no off, sound asleep."
@say here is "%Nd %n:(says), \"%$a\""
Object #70 does not define that verb, but its ancestor #145 does.
#145:"empty_msg in_msg" this none this
return (msg = this.(verb)) ? $string_utils:pronoun_sub(msg) | "";
@integrate_room me isn't set.
@integrate_player me is "%tn %t:(is) riding %tln piggyback."
@integrate_container me is "%tn is in %tld! That can't be good..."
@in me is "in"
@page_absent me is "%Nd %n:(is) not currently logged in."
@page_origin me isn't set.
@page_echo me isn't set.
@spoof_attribution me is "     --"
@integrate_sep me is "  "
@remote_emote_prefix me is "(from %li)"
@dozing me is "idling"
@idle me is "real life intrusion"
@doing me is ""
@shout me is "%Nd %n:(shouts), \"%$a\""
@newt_victim me isn't set.
@newt me is "%Nd %n:(@newts) %dd (%d#)."
@programmer me is "%Dd %d:(is) now a programmer."
@programmer_victim me is "You are now a programmer."
@toad_victim me is "Have a nice life..."
@toad me is "%Nd %n:(@toads) %dd (%d#)."
@boot_player me is "%Nd %n:(boots) %dd."
That object does not define that verb.
That object does not define that verb.
Object #243 does not define that verb, but its ancestor #1 does.
#1:"integrate_player_msg" this none this
return $string_utils:pronoun_sub(this.(verb), this.location, @args);
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
  #255:pile_class               Crag (#243)          rxd    this none this
  #255:"pile_succeeded_msg opile_succeeded_msg pile_failed_msg opile_failed_msg" Crag (#243) rxd this none this
-------------------------------- finished ---------------------------------
Now programming Generic Pilable Thing:pile_succeeded_msg opile_succeeded_msg pile_failed_msg opile_failed_msg[3](2).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
You can't take anything from the pile of stuff.
You haven't specified which "me->top" you mean.
Objects owned by Crag (from #0 to #506):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table              [Nowhere]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
-- 28 objects.  Total bytes: 47,744.------------------------------------------
Moved.
A bottom of pile materializes out of thin air, moved by Crag.
Moved.
Sure you want to recycle the pile of stuff (#258)? [Enter `yes' or `no']
The pile of stuff (#258) recycled.
=> #505 (session for #246)
=> #506 (tea table)
Done.
=> #242 (Generic Pile)
Your current object is now #255.
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
  #255:pile_class               Crag (#243)          rxd    this none this
  #255:"pile_succeeded_msg opile_succeeded_msg pile_failed_msg opile_failed_msg" Crag (#243) rxd this none this
-------------------------------- finished ---------------------------------
You now have more stuff with object number #507 and parent Generic Pilable Thing (#255).
The created object is now your current object.
Done.
The pile of stuff (#508) contains a pile of stuff (#258) and a more stuff (#507).
Sure you want to recycle the pile of stuff (#508)? [Enter `yes' or `no']
The pile of stuff (#508) recycled.
You see no "more" here.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, and a How $staff will notice people rummaging here.
You see no "pile" here.
Objects owned by Crag (from #0 to #508):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table              [Nowhere]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff              [Nowhere]
 <1K #507 more stuff                 [Nowhere]
-- 29 objects.  Total bytes: 48,481.------------------------------------------
A pile of stuff materializes out of thin air, moved by Crag.
Moved.
Moved.
-----
`HELP DO_COMMAND' NOT FOUND
===========================

Sorry, but no help is available on `do_command'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

  ** property not found, "do_command" **
-------------------------------- finished ---------------------------------
Usage:  @verb <object>:<verb-name(s)> [<dobj> [<prep> [<iobj> [<permissions> [<owner>]]]]]
Verb added [11] (10).
Now programming System Object:do_command_new[11](10).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb name changed.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, and a pile of stuff here.
The verb :do_command is nowhere to be found.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#0:do_command this none this" name: "MOO verb: #0:do_command this none this" type: moo-code content*: "" _data-tag: 1209045197125
#$#* 1209045197125 content: return 0;
#$#: 1209045197125
=> #243 (Crag)
0 errors.
Verb programmed.
do_command for Crag (#243): l
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, and a pile of stuff here.
do_command for Crag (#243): #~beak
=> #256 (Beaker)
do_command for Crag (#243): @verb #256:do_command tnt
Verb added [1] (0).
do_command for Crag (#243): @prop me.debug
Property added with value 0.
do_command for Crag (#243): @edit #0:do_command
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#0:do_command this none this" name: "MOO verb: #0:do_command this none this" type: moo-code content*: "" _data-tag: 1131754818126
#$#* 1131754818126 content: #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
#$#* 1131754818126 content: return 0;
#$#: 1131754818126
0 errors.
Verb programmed.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, and a pile of stuff here.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#256:do_command ()" name: "MOO verb: #256:do_command ()" type: moo-code content*: "" _data-tag: 862905785127
#$#: 862905785127
#-1:Input to EVAL, line 4:  Variable not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> #243 (Crag)
=> {{#-1, "eval", #-1, #-1, #243}, {#243, "eval_cmd_string", #243, #52, #243}, {#243, "eval", #243, #52, #243}}
0 errors.
Verb programmed.
Beaker has connected.
Moved.
Object ownership changed.
Syntax error in initial value:  `i' unexpected
Property added with value #509.
System Object (#0)   builtin function definitions (#153)   generic property farm (#206)   Abstract class (#254)   root class (#1)
builtin function definitions (#153) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic property farm (#206).
  #153:bf_add_verb              Core-Wizard (#184)   rxd    this none this
  #153:bf_set_verb_info         Core-Wizard (#184)   rxd    this none this
  #153:bf_set_verb_code         Core-Wizard (#184)   rxd    this none this
  #153:bf_verb_code             Core-Wizard (#184)   rxd    this none this
  #153:verb_metadata            Core-Wizard (#184)   rxd    this none this
  #153:set_verb_metadata        Core-Wizard (#184)   rxd    this none this
  #153:metadata_to_code         unknown hacker (#35) rxd    this none this
  #153:metadata_from_code       unknown hacker (#35) rxd    this none this
  #153:metadata_begin_index     unknown hacker (#35) rxd    this none this
  #153:metadata_item            unknown hacker (#35) rxd    this none this
  #153:set_metadata_item        unknown hacker (#35) rxd    this none this
  #153:"bf_recycle bf_chparent" Core-Wizard (#184)   rxd    this none this
  #153:_protect_recycle         Core-Wizard (#184)   rxd    this none this
  #153:_protect_chparent        Core-Wizard (#184)   rxd    this none this
  #153:set_verb_metadata_item   Core-Wizard (#184)   rxd    this none this
  #153:verb_metadata_item       Core-Wizard (#184)   rxd    this none this
  #153:delete_metadata_item     Core-Wizard (#184)   rxd    this none this
  #153:delete_verb_metadata_item Core-Wizard (#184)  rxd    this none this
-------------------------------- finished ---------------------------------
=> #507 (more stuff)
Your current object is now input, a Generic Input Handler (#509).
You now have Generic Command Handler with object number #510 and parent Generic Input Handler (#509).
The created object is now your current object.
Alias "command_handler" added to Generic Command Handler(#510).
Aliases for Generic Command Handler(#510) are now {"Generic Command Handler", "command_handler"}
Usage:  @register [<someone>]
        @register <someone> as <email-address>[ <commentary>]
System Object (#0)   builtin function definitions (#153)   generic property farm (#206)   Abstract class (#254)   root class (#1)
generic property farm (#206) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of Abstract class (#254).
  #206:nominate_for_core        Core-Wizard (#184)   rxd    this none this
  #206:core_objects             Core-Wizard (#184)   rx     this none this
  #206:module_finish_unpack     Core-Wizard (#184)   rxd    this none this
  #206:init_for_core            Core-Wizard (#184)   rxd    this none this
  #206:named_objects            Core-Wizard (#184)   rxd    this none this
  #206:all_named_objects        Core-Wizard (#184)   rxd    this none this
  #206:non_core_properties      Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Line 1:  syntax error
1 error.
=> {{"builder", #4}, {"login", #10}, {"last_huh", #11}, {"guest_log", #12}, {"biglist", #13}, {"big_mail_recipient", #14}, {"limbo", #15}, {"registration_db", #16}, {"new_player_log", #17}, {"verb_help", #20}, {"core_help", #21}, {"prog_help", #22}, {"wiz_help", #23}, {"wiz_utils", #24}, {"site_db", #25}, {"math_utils", #26}, {"set_utils", #27}, {"builtin_function_help", #28}, {"new_prog_log", #29}, {"generic_help", #30}, {"guest", #31}, {"seq_utils", #32}, {"quota_log", #33}, {"you", #34}, {"hacker", #35}, {"generic_db", #79}, {"no_one", #36}, {"player_db", #37}, {"player_class", #6}, {"gender_utils", #38}, {"trig_utils", #26}, {"time_utils", #39}, {"editor_help", #40}, {"mail_recipient", #41}, {"mail_agent", #42}, {"mail_editor", #43}, {"note_editor", #44}, {"verb_editor", #45}, {"generic_editor", #46}, {"object_utils", #47}, {"lock_utils", #48}, {"list_utils", #49}, {"command_utils", #50}, {"player", #6}, {"wiz", #51}, {"prog", #52}, {"code_utils", #53}, {"help", #54}, {"nothing", #-1}, {"failed_match", #-3}, {"ambiguous_match", #-2}, {"perm_utils", #130}, {"building_utils", #19}, {"string_utils", #18}, {"news", #141}, {"note", #9}, {"container", #126}, {"thing", #5}, {"exit", #7}, {"room", #3}, {"player_start", #70}, {"root_class", #1}, {"recycler", #55}, {"garbage", #56}, {"mail_options", #57}, {"edit_options", #58}, {"display_options", #59}, {"generic_options", #60}, {"list_options", #61}, {"error", #66}, {"newt_log", #106}, {"toad_log", #62}, {"site_log", #62}, {"housekeeper", #63}, {"feature", #65}, {"pronoun_sub", #69}, {"they", #71}, {"login_watcher", #83}, {"english", #72}, {"language", #72}, {"integration_utils", #74}, {"network", #82}, {"country_db", #94}, {"jtext", #92}, {"feature_help", #100}, {"jaddress", #111}, {"misc_options", #112}, {"client_options", #116}, {"building_options", #122}, {"it", #154}, {"nobody", #36}, {"furniture", #81}, {"sittable", #80}, {"I", #160}, {"everything", #139}, {"all", #103}, {"nowhere", #-1}, {"admin_group", #163}, {"steering_committee", #137}, {"db_group", #148}, {"unix_group", #147}, {"community_group", #165}, {"tech_group", #164}, {"admin_mail_recipient", #107}, {"registrar", #108}, {"event_dispatcher", #110}, {"prog_group", #124}, {"openable_container", #8}, {"containing_object", #145}, {"utils", #146}, {"biglist_utils", #13}, {"english_utils", #72}, {"boot_log", #85}, {"help_editor", #171}, {"object_help", #173}, {"tester", #99}, {"failed_help", #127}, {"who_options", #89}, {"who_utils", #89}, {"event_handler", #133}, {"eval_options", #136}, {"he", #156}, {"she", #157}, {"e", #158}, {"we", #159}, {"plural_you", #161}, {"either", #162}, {"splat", #166}, {"gender", #64}, {"neuter", #154}, {"egotistical", #160}, {"plural", #71}, {"royal", #159}, {"male", #156}, {"female", #157}, {"Spivak", #158}, {"second", #34}, {"second_plural", #161}, {"singular", #154}, {"none", #167}, {"topic", #178}, {"builder_help", #155}, {"name_utils", #177}, {"guest_help", #168}, {"parse_utils", #117}, {"admin", #170}, {"core_wizard", #184}, {"first_wizard", #2}, {"door", #121}, {"ftp", #234}, {"quota_utils", #174}, {"window", #179}, {"server_options", #188}, {"walking_utils", #182}, {"checkpointer", #175}, {"startup", #189}, {"syslog", #183}, {"generic_biglist_home", #75}, {"http", #87}, {"module", #203}, {"property_farm", #206}, {"modules", #205}, {"smtp", #212}, {"cord", #223}, {"mcp", #213}, {"parse_options", #191}, {"ftp_client", #230}, {"local", #193}, {"building_group", #192}, {"documentation_group", #232}, {"room_matching_utils", #190}, {"policy_help", #235}, {"admin_help", #238}, {"jhcore_help", #237}, {"namebuilder_i", #227}, {"namebuilder_d", #239}, {"root", #1}, {"delegator", #269}, {"delegate", #270}, {"ceiling", #272}, {"nesting_decoration", #265}, {"table", #280}, {"bot", #289}, {"vr_root", #291}, {"achievement", #445}, {"chaise", #499}, {"chair", #500}, {"bed", #501}, {"input_handler", #509}}
Last modified Sun Aug  5 15:53:31 2001 PDT by Xythian (#199) (on Waterpoint).
#206:"all_named_objects" this none this
work = {{"", this}};
done = {};
all_objects = {};
while (work)
  {prefix, current} = work[1];
  work[1..1] = {};
  if (!(current in done))
    done = {@done, current};
    $command_utils:suspend_if_needed(0);
    result = current:named_objects(prefix);
    all_objects = {@all_objects, @result};
    for entry in (result)
      {name, what} = entry;
      if ($object_utils:has_callable_verb(what, "named_objects"))
        work = {@work, {name + "/", what}};
      endif
    endfor
  endif
endwhile
return all_objects;
=> #510 (Generic Command Handler)
Property added with value #510.
You now have Beaker's Commands with object number #511 and parent Generic Command Handler (#510).
The created object is now your current object.
You see no "Baker" here.
Beaker's Commands (#511) [ readable ]
  Child of Generic Command Handler (#510).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Property added with value {#511}.
=> #511 (Beaker's Commands)
Beaker's Commands (#511)   Generic Command Handler (#510)   Generic Input Handler (#509)   root class (#1)
Generic Command Handler (#510) [ readable ]
  Child of Generic Input Handler (#509).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Property added with value {}.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "str:#510.description" name: "Generic Command Handler.description" type: string content*: "" _data-tag: 535439446128
#$#* 535439446128 content: 
#$#: 535439446128
-----
`HELP MATCH' AMBIGUOUS
======================

Sorry, the topic `match' is ambiguous.  I don't know which of the following topics you mean:

`help #1:match'[1]      `help match()'[2]       

-----
MATCH()
=======

Syntax:  match (str <subject>, str <pattern> [, <case-matters>])   => list
        rmatch (str <subject>, str <pattern> [, <case-matters>])   => list

The function `match()' (`rmatch()') searches for the first (last) occurrence of the regular expression <pattern> in the string <subject>.  If <pattern> is syntactically malformed, then `E_INVARG' is raised.  The process of matching can in some cases consume a great deal of memory in the server; should this memory consumption become excessive, then the matching process is aborted and `E_QUOTA' is raised.

If no match is found, the empty list is returned; otherwise, these functions return a list containing information about the match (see below).  By default, the search ignores upper-/lower-case distinctions.  If <case-matters> is provided and true, then case is treated as significant in all comparisons.

The list that `match()' (`rmatch()') returns contains the details about the match made.  The list is in the form:

    {<start>, <end>, <replacements>, <subject>}

where <start> is the index in <subject> of the beginning of the match, <end> is the index of the end of the match, <replacements> is a list described below, and <subject> is the same string that was given as the first argument to the `match()' or `rmatch()'.

The <replacements> list is always nine items long, each item itself being a list of two integers, the start and end indices in <string> matched by some parenthesized sub-pattern of <pattern>.  The first item in <replacements> carries the indices for the first parenthesized sub-pattern, the second item carries those for the second sub-pattern, and so on.  If there are fewer than nine parenthesized sub-patterns in <pattern>, or if some sub-pattern was not used in the match, then the corresponding item in <replacements> is the list {0, -1}.  See the discussion of `%)' in `help regular-expressions'[1], for more information on parenthesized sub-patterns.

    match("foo", "^f*o$")        =>  {}
    match("foo", "^fo*$")        =>  {1, 3, {{0, -1}, ...}, "foo"}
    match("foobar", "o*b")       =>  {2, 4, {{0, -1}, ...}, "foobar"}
    rmatch("foobar", "o*b")      =>  {4, 4, {{0, -1}, ...}, "foobar"}
    match("foobar", "f%(o*%)b")
            =>  {1, 4, {{2, 3}, {0, -1}, ...}, "foobar"}

See `help regular-expressions'[2] for information on the syntax and semantics of patterns.

Usage:  @list <object>:<verb> [<dobj> <prep> <iobj>] [with|without parentheses|numbers] [all] [ranges]
Last modified Sat Apr 27 12:50:24 2013 PDT by Crag (#243).
#0:"do_command" this none this
#243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
return 0;
Beaker's Commands (#511)   Generic Command Handler (#510)   Generic Input Handler (#509)   root class (#1)
Set description property of the Generic Command Handler (#510).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "str:#509.description" name: "Generic Input Handler.description" type: string content*: "" _data-tag: 2111243405129
#$#* 2111243405129 content: 
#$#: 2111243405129
That object does not define that verb.
Beaker's Commands (#511) [ readable ]
  Child of Generic Command Handler (#510).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Beaker's Commands (#511) [ readable ]
  Child of Generic Command Handler (#510).
  Location Crag (#243).
.dictionaries            Crag (#243)           r c    {#511}
-------------------------------- finished ---------------------------------
You see no "#1.key" here.
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {87209, 1366989279}
.core_names              Core-Wizard (#184)    r c    {"$root", "$root_class"}
-------------------------------- finished ---------------------------------
Carrying:
 some Group Utilities                    a Generic Delegate
 a MCP parent                            a New Generic Room
 a Parsing objects                       a Room Exit Delegate
 a Text generation objects               a more stuff
 an Abstract class                       a Generic Input Handler
 a Generic Nesting Decoration            a Generic Command Handler
 a Generic Delegator                     a Beaker's Commands
,key                     Crag (#243)             c    0
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 01:06:32 2013 PDT by Crag (#243).
#1:"initialize" this none this
if (caller == this || $perm_utils:controls(caller_perms(), this))
  this.key = 0;
  $quota_utils.byte_based && $quota_utils.byte:object_size(this);
  owned = `this.owner.owned_objects ! E_INVIND, E_PROPNF';
  if (typeof(owned) == LIST)
    this.owner.owned_objects = setadd(owned, this);
  elseif (typeof(owned) == NUM)
    this.owner.owned_objects = owned + 1;
  endif
  if (parent(this) == $root_class)
    this.unique = 0;
  endif
  this.offered = #-1;
  this.core_names = {};
endif
Current building options:

-room          No default room set, uses $room
-exit          No default exit set, uses $exit
-furnishing    @created objects are carried by you, unlocked
+create-set-co @create sets your current object to the one created.
-bi-create     @create/@recycle re-use object numbers.
-----
@BUILDING-OPTIONS
=================

Usage:  @building-options
        @building-option <option>

These options (see `help options'[1]) allow you to customize your building environment.

The first form displays all of your building options.  The second shows or sets a given option.  Current building options are:

  room=<object> Type of object the @dig command should create.
 !room          Default ($room).

  exit=<object> Type of exit the @dig command should create.
 !exit          Default ($exit).

The @dig command (see `help @dig'[2]) creates rooms and/or exits when you're building.  These two options let you determine what parent classes are used for the objects created.

 +furnishing    @created objects are locked in the room you're in
 -furnishing    @created objects are carried by you, unlocked

By default, when @create makes an object, the object is placed in your inventory.  While this is handy for programming, it's often not what you want when you're furnishing rooms.  If you have this option set, the objects created will be placed in the room you're in, and locked down.

 +create-set-co @create sets your current object to the one created.
 -create-set-co @create doesn't change your current object.

When this option is set, a @create command will set your current object (see `help current-object'[3]) to the newly created object.  This is useful primarily for porting (an object creation script can start with a @create, then refer to _ in the rest of the script), but can also be handy for general creation.

 +bi-create     @create/@recycle call create()/recycle() directly.
 -bi-create     @create/@recycle re-use object numbers.

This option determines whether @create and other commands will use the server's create() and recycle() primitives or the database's $recycle.

Set description property of the Generic Input Handler (#509).
Generic Input Handler (#509) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#509:do_command ()" name: "MOO verb: #509:do_command ()" type: moo-code content*: "" _data-tag: 1176128098130
#$#: 1176128098130
0 errors.
Verb programmed.
The Generic Input Handler(#509) has 1 kid.
Generic Command Handler (#510)
Generic Command Handler (#510) [ readable ]
  Child of Generic Input Handler (#509).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Generic Command Handler (#510) [ readable ]
  Child of Generic Input Handler (#509).
  Location Crag (#243).
.commands                Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#510:do_command ()" name: "MOO verb: #510:do_command ()" type: moo-code content*: "" _data-tag: 2039592882131
#$#: 2039592882131
-----
`HELP PREFIX' NOT FOUND
=======================

Sorry, but no help is available on `prefix'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Input handler for connection objects. 

  * $do_command calls player:input_handler():do_command()
  * player:input_handler returns a child of the generic input handler

The input handler interface:

  :do_command() => true if command done

-----
STATEMENTS
==========

The following kinds of statements exist in the MOO programming language:

Null
====

        ;

The null statement does nothing.

Expressions
===========

        expression ;

The expression statement evaluates the expression and then discards the value.

Conditional
===========

        IF ( expression ) statements ENDIF
        IF ( expression ) statements ELSE statements ENDIF
        IF ( expression )
          statements
        ELSEIF ( expression )
          statements
        ...
        ELSE
          statements
        ENDIF

The conditional statement evaluates each expression in turn and executes the statements associated with the first one to return a true value; the ELSE statements are executed if none of the expressions returns a true value.  There can be any number of ELSEIF clauses and the ELSE part is optional.  See `help truth'[1] for the definition of 'true value'.

List iteration
==============

        FOR name IN ( expression ) statements ENDFOR

The list iteration statement first evaluates the expression, which must return a list.  It then executes the statements once for each element of that list, each time with the named variable having the value of the corresponding list element.

Numeric iteration
=================

        FOR name IN [ expression .. expression ] statements ENDFOR

The numeric iteration statement first evaluates the two expressions, both of which must return numbers; call those numbers N1 and N2, respectively.  The statements are then executed once for each integer I such that N1 <= I <= N2, in increasing order; each time, the named variable has the corresponding value of I.

Indefinite iteration
====================

        WHILE ( expression ) statements ENDWHILE

The indefinite iteration statement repeatedly evaluates the expression and, each time it returns a true value, executes the statements.  The loop stops the first time that the expression returns a false value.  The definitions of 'true' and 'false' values is in `help truth'[2].

Return
======

        RETURN ;
        RETURN expression ;

The return statement evalautes the expression, if any, and returns the resulting value (or 0 if there is no expression) to the verb that called the current one.  Execution of the current verb is immediately terminated.

Fork
====

        FORK ( expression ) statements ENDFORK
        FORK name ( expression ) statements ENDFORK

The fork statement first executes the expression, which must return a number; call that number N.  It then creates a new MOO task that will, after at least N seconds, execute the statements.  When the new task begins, all variables will have the values they had at the time the FORK statement was executed.  The task executing the FORK statement immediately continues execution.  If a variable name is given after the FORK keyword, then it is assigned the 'queue ID' of the newly-created task.  The value of this variable is visible both to the task executing the fork statement and to the statements in the newly-created task.  See `help tasks'[3] for more information about forked tasks.

Error programming Generic Command Handler:do_command[1](0).
Line 10:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
=> #509 (Generic Input Handler)
-----
@MOVE
=====

Syntax:  @move <thing> to <place>

Move the specified object to the specified location.  This is not guaranteed to work; in particular, the object must agree to be moved and the destination must agree to allow the object in.  This is usually the case, however.

If @move doesn't work and you own the room where the object is located, try using @eject instead (see `help @eject'[1]).

#256:do_command code set.
Verb #509:do_command [1] {this none this} removed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#511:do_command this none this" name: "MOO verb: #511:do_command this none this" type: moo-code content*: "" _data-tag: 1916682281132
#$#* 1916682281132 content: The Beaker's Commands (#511) does not define a :do_command verb.  The following code is from its ancestor, a Generic Command Handler (#510).
#$#* 1916682281132 content: {command_str} = args;
#$#* 1916682281132 content: matches = this:match_command(command_str);
#$#* 1916682281132 content: if (length(matches) > 1)
#$#* 1916682281132 content:   this:report_ambiguous_command(command_str, matches);
#$#* 1916682281132 content: elseif (length(matches) < 1)
#$#* 1916682281132 content:   this:unknown_command(command_str);
#$#* 1916682281132 content: else
#$#* 1916682281132 content:   this:invoke_command(matches[1]);
#$#* 1916682281132 content: endif
#$#* 1916682281132 content: return 1;
#$#: 1916682281132
That object has no verb matching that name + args.
Beaker's Commands (#511) [ readable ]
  Child of Generic Command Handler (#510).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Beaker's Commands (#511)   Generic Command Handler (#510)   Generic Input Handler (#509)   root class (#1)
=> #256 (Beaker)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#256:do_command this none this" name: "MOO verb: #256:do_command this none this" type: moo-code content*: "" _data-tag: 1274803365133
#$#* 1274803365133 content: return 0;
#$#: 1274803365133
0 errors.
Verb programmed.
0 errors.
Verb programmed.
Beaker's Commands (#511)   Generic Command Handler (#510)   Generic Input Handler (#509)   root class (#1)
  #510:do_command               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
=> #511 (Beaker's Commands)
Last modified Sat Apr 27 16:07:53 2013 PDT by Crag (#243).
#510:"do_command" this none this
{command_str} = args;
matches = this:match_command(command_str);
if (length(matches) > 1)
  this:report_ambiguous_command(command_str, matches);
elseif (length(matches) < 1)
  this:unknown_command(command_str);
else
  this:invoke_command(matches[1]);
endif
return 1;
generic player(#6) has 6 kids.
generic builder (#4)   nobody (#36)   J. Text (#176)   topic-owner (#181)   Quota (#185)   generic guest (#31)
generic builder(#4) has 1 kid.
generic programmer (#52)
You see no "$programmer" here.
generic programmer(#52) has 5 kids.
unknown hacker (#35)   generic wizard (#51)   housekeeper (#63)   generic testing player (#99)   Beaker (#256)
Parent changed.
#99:do_command code set.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#99:do_command this none this" name: "MOO verb: #99:do_command this none this" type: moo-code content*: "" _data-tag: 697018693134
#$#* 697018693134 content: {command_str} = args;
#$#* 697018693134 content: matches = this:match_command(command_str);
#$#* 697018693134 content: if (length(matches) > 1)
#$#* 697018693134 content:   this:report_ambiguous_command(command_str, matches);
#$#* 697018693134 content: elseif (length(matches) < 1)
#$#* 697018693134 content:   this:unknown_command(command_str);
#$#* 697018693134 content: else
#$#* 697018693134 content:   this:invoke_command(matches[1]);
#$#* 697018693134 content: endif
#$#* 697018693134 content: return 1;
#$#: 697018693134
0 errors.
Verb programmed.
generic testing player (#99) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic programmer (#52).
  Location generic room (#3).
   #99:disfunc                  Core-Wizard (#184)   rxd    this none this
   #99:@programmer!             Core-Wizard (#184)   r d    any none none
   #99:description              Core-Wizard (#184)   rxd    this none this
   #99:@quit                    Core-Wizard (#184)   r d    none none none
   #99:do_command               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Feb  3 09:20:59 2001 PST by Xplat (#4014) (on Waterpoint).
#99:"disfunc" this none this
// Self-destruct on logout.
if (!(caller in {#0, this}))
  return E_PERM;
endif
fork (300)
  if (this in connected_players())
    // You live .. this time.
    return;
  endif
  if (this.disconnect_task)
    kill_task(this.disconnect_task);
  endif
  fork (0)
    $wiz_utils:unset_player(this);
    $recycler:_recycle(this);
  endfork
  for o in (setremove(this.owned_objects, this))
    $recycler:_recycle(o);
  endfor
endfork
pass(@args);
Parent changed.
#256:do_command code set.
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
  #256:do_command               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 16:13:34 2013 PDT by Crag (#243).
#256:"do_command" this none this
{command_str} = args;
matches = this:match_command(command_str);
if (length(matches) > 1)
  this:report_ambiguous_command(command_str, matches);
elseif (length(matches) < 1)
  this:unknown_command(command_str);
else
  this:invoke_command(matches[1]);
endif
return 1;
Your current object is now ~beaker, Beaker (#256).
Verb added [2] (1).
Verb added [3] (2).
Verb added [4] (3).
Verb added [5] (4).
Verb name changed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#256:do_command this none this" name: "MOO verb: #256:do_command this none this" type: moo-code content*: "" _data-tag: 1279130137135
#$#* 1279130137135 content: {command_str} = args;
#$#* 1279130137135 content: matches = this:match_command(command_str);
#$#* 1279130137135 content: if (length(matches) > 1)
#$#* 1279130137135 content:   this:report_ambiguous_command(command_str, matches);
#$#* 1279130137135 content: elseif (length(matches) < 1)
#$#* 1279130137135 content:   this:unknown_command(command_str);
#$#* 1279130137135 content: else
#$#* 1279130137135 content:   this:invoke_command(matches[1]);
#$#* 1279130137135 content: endif
#$#* 1279130137135 content: return 1;
#$#: 1279130137135
-----
$LIST_UTILS:SORT
================

sort(list[,keys]) => sorts keys (assumed to be all numbers or strings) and returns list with the corresponding permutation applied to it.  keys defaults to the list itself.

sort({x1,x3,x2},{1,3,2}) => {x1,x2,x3}

-----
$LIST_UTILS:SORT_ALIST
======================

:sort_alist(alist[,n]) sorts a list of tuples by n-th (1st) element.

Object #243 does not define that verb, but its ancestor #6 does.
#6:"@desc*ribe" any as any
// Usage:  @describe <object> as <description>
set_task_perms(player);
dobj = player:my_match_object(dobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr))
  // ...lose...
elseif (e = dobj:set_description(iobjstr))
  player:notify("Description set.");
else
  player:notify(tostr(e));
endif
#1:"set_description" this none this
// set_description(newdesc) attempts to change this.description to newdesc
//   => E_PERM   if you don't own this or aren't its parent
if (!($perm_utils:controls(caller_perms(), this) || this == caller))
  return E_PERM;
elseif (typeof(desc = args[1]) in {LIST, STR})
  this.description = desc;
  return 1;
else
  return E_TYPE;
endif
#1:"description" this none this
// Always return a list.
// (I've been wanting to do this for a long time.)
if (desc = this.description)
  if (typeof(desc) == LIST)
    return desc;
  else
    return {desc};
  endif
else
  return {};
endif
list utilities (#49) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #49:make                     unknown hacker (#35) rxd    this none this
   #49:range                    unknown hacker (#35) rxd    this none this
   #49:map_prop*erty            Core-Wizard (#184)   rxd    this none this
   #49:map_verb                 Core-Wizard (#184)   rx     this none this
   #49:map_arg                  Core-Wizard (#184)   rxd    this none this
   #49:map_builtin              Core-Wizard (#184)   rxd    this none this
   #49:find_insert              unknown hacker (#35) rx     this none this
   #49:remove_duplicates        unknown hacker (#35) rxd    this none this
   #49:arrayset                 unknown hacker (#35) rxd    this none this
   #49:setremove_all            unknown hacker (#35) rxd    this none this
   #49:append                   unknown hacker (#35) rxd    this none this
   #49:reverse                  unknown hacker (#35) rxd    this none this
   #49:_reverse                 unknown hacker (#35) rxd    this none this
   #49:compress                 unknown hacker (#35) rxd    this none this
   #49:sort                     unknown hacker (#35) rxd    this none this
   #49:slice                    unknown hacker (#35) rxd    this none this
   #49:assoc                    unknown hacker (#35) rxd    this none this
   #49:iassoc                   unknown hacker (#35) rxd    this none this
   #49:iassoc_suspended         Core-Wizard (#184)   rxd    this none this
   #49:assoc_prefix             unknown hacker (#35) rxd    this none this
   #49:iassoc_prefix            unknown hacker (#35) rxd    this none this
   #49:iassoc_sorted            unknown hacker (#35) rxd    this none this
   #49:sort_alist               unknown hacker (#35) rxd    this none this
   #49:sort_alist_suspended     Core-Wizard (#184)   rxd    this none this
   #49:randomly_permute         unknown hacker (#35) rxd    this none this
   #49:passoc                   unknown hacker (#35) rxd    this none this
   #49:check_type               unknown hacker (#35) rxd    this none this
   #49:random_permutation       Core-Wizard (#184)   rxd    this none this
   #49:max_length               unknown hacker (#35) rxd    this none this
   #49:any_of                   Core-Wizard (#184)   rxd    this none this
   #49:flatten                  unknown hacker (#35) rxd    this none this
   #49:grep_l                   Core-Wizard (#184)   rxd    this none this
   #49:grep_ll                  Core-Wizard (#184)   rxd    this none this
   #49:slice_suspended          unknown hacker (#35) rxd    this none this
   #49:sort_suspended           Core-Wizard (#184)   rxd    this none this
   #49:make_alist               Core-Wizard (#184)   rxd    this none this
   #49:"longest shortest"       unknown hacker (#35) rxd    this none this
   #49:count                    unknown hacker (#35) rxd    this none this
   #49:map_verb_safe            Core-Wizard (#184)   rxd    this none this
   #49:grep_o                   Wizard (#2)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
$LIST_UTILS:GREP_LL
===================

grep -- returns a list of indices into a list of list of strings representing the locations of the search string

-----
$LIST_UTILS:GREP_L
==================

grep_l -- returns a list of indices into a list of strings representing the locations of the search string in the target list

Usage: $list_utils:grep_l(<strings>,<pattern>[,<delimited>])

       $list_utils:grep_l({"foo", "bar", "baa"},"a")

          => {{2, {2}}, {3, {2, 3}}}

list utilities (#49) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #49:make                     unknown hacker (#35) rxd    this none this
   #49:range                    unknown hacker (#35) rxd    this none this
   #49:map_prop*erty            Core-Wizard (#184)   rxd    this none this
   #49:map_verb                 Core-Wizard (#184)   rx     this none this
   #49:map_arg                  Core-Wizard (#184)   rxd    this none this
   #49:map_builtin              Core-Wizard (#184)   rxd    this none this
   #49:find_insert              unknown hacker (#35) rx     this none this
   #49:remove_duplicates        unknown hacker (#35) rxd    this none this
   #49:arrayset                 unknown hacker (#35) rxd    this none this
   #49:setremove_all            unknown hacker (#35) rxd    this none this
   #49:append                   unknown hacker (#35) rxd    this none this
   #49:reverse                  unknown hacker (#35) rxd    this none this
   #49:_reverse                 unknown hacker (#35) rxd    this none this
   #49:compress                 unknown hacker (#35) rxd    this none this
   #49:sort                     unknown hacker (#35) rxd    this none this
   #49:slice                    unknown hacker (#35) rxd    this none this
   #49:assoc                    unknown hacker (#35) rxd    this none this
   #49:iassoc                   unknown hacker (#35) rxd    this none this
   #49:iassoc_suspended         Core-Wizard (#184)   rxd    this none this
   #49:assoc_prefix             unknown hacker (#35) rxd    this none this
   #49:iassoc_prefix            unknown hacker (#35) rxd    this none this
   #49:iassoc_sorted            unknown hacker (#35) rxd    this none this
   #49:sort_alist               unknown hacker (#35) rxd    this none this
   #49:sort_alist_suspended     Core-Wizard (#184)   rxd    this none this
   #49:randomly_permute         unknown hacker (#35) rxd    this none this
   #49:passoc                   unknown hacker (#35) rxd    this none this
   #49:check_type               unknown hacker (#35) rxd    this none this
   #49:random_permutation       Core-Wizard (#184)   rxd    this none this
   #49:max_length               unknown hacker (#35) rxd    this none this
   #49:any_of                   Core-Wizard (#184)   rxd    this none this
   #49:flatten                  unknown hacker (#35) rxd    this none this
   #49:grep_l                   Core-Wizard (#184)   rxd    this none this
   #49:grep_ll                  Core-Wizard (#184)   rxd    this none this
   #49:slice_suspended          unknown hacker (#35) rxd    this none this
   #49:sort_suspended           Core-Wizard (#184)   rxd    this none this
   #49:make_alist               Core-Wizard (#184)   rxd    this none this
   #49:"longest shortest"       unknown hacker (#35) rxd    this none this
   #49:count                    unknown hacker (#35) rxd    this none this
   #49:map_verb_safe            Core-Wizard (#184)   rxd    this none this
   #49:grep_o                   Wizard (#2)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
$LIST_UTILS:SORT_ALIST
======================

:sort_alist(alist[,n]) sorts a list of tuples by n-th (1st) element.

Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
  #256:do_command               Crag (#243)          rxd    this none this
  #256:match_command            Crag (#243)          rxd    this none this
  #256:explain_ambiguous_command Crag (#243)         rxd    this none this
  #256:explain_unknown_command  Crag (#243)          rxd    this none this
  #256:invoke_command           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#256:match_command ()" name: "MOO verb: #256:match_command ()" type: moo-code content*: "" _data-tag: 1693233227136
#$#: 1693233227136
set utilities (#27) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #27:union                    unknown hacker (#35) rxd    this none this
   #27:intersection             unknown hacker (#35) rxd    this none this
   #27:diff*erence              unknown hacker (#35) rxd    this none this
   #27:contains                 unknown hacker (#35) rxd    this none this
   #27:"exclusive_or xor"       unknown hacker (#35) rxd    this none this
   #27:"difference_suspended diff_suspended" unknown hacker (#35) rxd this none this
   #27:equals                   unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
.dictionaries            Beaker (#256)         r c    {}
-------------------------------- finished ---------------------------------
Objects owned by Crag (from #0 to #524):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table              [Nowhere]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
-- 32 objects.  Total bytes: 49,828.------------------------------------------
generic player(#6) has 6 kids.
generic builder (#4)   nobody (#36)   J. Text (#176)   topic-owner (#181)   Quota (#185)   generic guest (#31)
generic builder(#4) has 1 kid.
generic programmer (#52)
generic programmer(#52) has 5 kids.
unknown hacker (#35)   generic wizard (#51)   housekeeper (#63)   generic testing player (#99)   Beaker (#256)
Objects owned by hacker (from #0 to #524):
 10K   #8 generic openable containe *[generic player]
 24K  #13 Generic BigList Utilities  [Nowhere]
 26K  #14 Generic Large-Capacity Ma  [Nowhere]
125K  #16 Registration Database      [Nowhere]
200K  #17 Player-Creation-Log        [Mail Distribution Center]
  6K  #20 Verb Help                  [Nowhere]
 88K  #21 Core Utility Help          [Nowhere]
 96K  #22 Programmer Help            [Nowhere]
 23K  #23 Wizard Help                [Nowhere]
  2M  #25 Site DB                    [Nowhere]
 22K  #26 math utilities             [Nowhere]
  4K  #27 set utilities              [Nowhere]
 94K  #28 Builtin Function Help (1.  [Nowhere]
 18K  #29 New-Prog-Log               [Mail Distribution Center]
 22K  #30 Generic Help Database      [Nowhere]
 11K  #32 sequence utilities         [Nowhere]
 57K  #33 Quota-Log                  [Mail Distribution Center]
  6K  #34 you                        [Nowhere]
  2K  #35 hacker                    *[Limbo]
  5K  #36 nobody                    *[Limbo]
 82K  #37 Player Database            [Nowhere]
  7K  #38 gender utilities           [Nowhere]
 26K  #39 time utilities             [Nowhere]
 22K  #40 Editor Help                [Nowhere]
 22K  #41 Generic Mail Recipient     [Nowhere]
 52K  #42 Mail Distribution Center   [Nowhere]
 22K  #43 Mail Room                 
 21K  #44 Note Editor               
 11K  #45 Verb Editor               
 52K  #46 Generic Editor            
 28K  #49 list utilities             [Nowhere]
 65K  #53 code utilities             [Nowhere]
192K  #54 main help database         [Nowhere]
775K  #55 Recycling Center           [Nowhere]
#19:object_audit_string, line 73:  Property not found
... called from #19:do_audit_item, line 15
... called from #19:do_audit do_prospectus, line 21
... called from #4:@audit (this == #243), line 16
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#19:object_audit_string this none this" name: "MOO verb: #19:object_audit_string this none this" type: moo-code content*: "" _data-tag: 1868307076137
#$#* 1868307076137 content: // provide string for audit of object (args[1]), in @prospectus format if there is a second argument and it's true.
#$#* 1868307076137 content: {o, ?pros = 0} = args;
#$#* 1868307076137 content: if (pros)
#$#* 1868307076137 content:   kids = 0;
#$#* 1868307076137 content:   for k in (children(o))
#$#* 1868307076137 content:     $command_utils:suspend_if_needed(0);
#$#* 1868307076137 content:     if (k.owner != o.owner)
#$#* 1868307076137 content:       kids = 2;
#$#* 1868307076137 content:     elseif (kids == 0)
#$#* 1868307076137 content:       kids = 1;
#$#* 1868307076137 content:     endif
#$#* 1868307076137 content:   endfor
#$#* 1868307076137 content:   // don't bother checking permissions--if they really wanted to know the number of verbs on the object, they could find out.
#$#* 1868307076137 content:   v = verbs(o);
#$#* 1868307076137 content:   if (v)
#$#* 1868307076137 content:     vstr = tostr("[", $string_utils:right(length(v), 3), "] ");
#$#* 1868307076137 content:   else
#$#* 1868307076137 content:     vstr = "      ";
#$#* 1868307076137 content:   endif
#$#* 1868307076137 content:   if (o.r && o.f)
#$#* 1868307076137 content:     r = "f";
#$#* 1868307076137 content:   elseif (o.r)
#$#* 1868307076137 content:     r = "r";
#$#* 1868307076137 content:   elseif (o.f)
#$#* 1868307076137 content:     r = "F";
#$#* 1868307076137 content:   else
#$#* 1868307076137 content:     r = " ";
#$#* 1868307076137 content:   endif
#$#* 1868307076137 content:   vstr = tostr(" kK"[kids + 1], r, $building_utils:audit_object_category(o), vstr);
#$#* 1868307076137 content: else
#$#* 1868307076137 content:   vstr = "";
#$#* 1868307076137 content: endif
#$#* 1868307076137 content: if (valid(o.location))
#$#* 1868307076137 content:   loc = (o.location.owner == o.owner ? " " | "*") + "[" + o.location.name + "]";
#$#* 1868307076137 content: elseif ($object_utils:has_property(o, "dest") && $object_utils:has_property(o, "source"))
#$#* 1868307076137 content:   if (typeof(o.source) != OBJ)
#$#* 1868307076137 content:     source = " <non-object> ";
#$#* 1868307076137 content:   elseif (!valid(o.source))
#$#* 1868307076137 content:     source = "<invalid>";
#$#* 1868307076137 content:   else
#$#* 1868307076137 content:     source = o.source.name;
#$#* 1868307076137 content:     if (o.source.owner != o.owner)
#$#* 1868307076137 content:       source = "*" + source;
#$#* 1868307076137 content:     endif
#$#* 1868307076137 content:   endif
#$#* 1868307076137 content:   if (typeof(o.dest) != OBJ)
#$#* 1868307076137 content:     destin = " <non-object> ";
#$#* 1868307076137 content:   elseif (!valid(o.dest))
#$#* 1868307076137 content:     destin = "<invalid>";
#$#* 1868307076137 content:   else
#$#* 1868307076137 content:     destin = o.dest.name;
#$#* 1868307076137 content:     if (o.dest.owner != o.owner)
#$#* 1868307076137 content:       destin = "*" + destin;
#$#* 1868307076137 content:     endif
#$#* 1868307076137 content:   endif
#$#* 1868307076137 content:   srclen = length(source) < 20 ? length(source) | 19;
#$#* 1868307076137 content:   destlen = length(destin) < 20 ? length(destin) | 19;
#$#* 1868307076137 content:   loc = " " + source[1..srclen] + "->" + destin[1..destlen];
#$#* 1868307076137 content: elseif ($object_utils:isa(o, $room))
#$#* 1868307076137 content:   loc = "";
#$#* 1868307076137 content:   for x in (o.entrances)
#$#* 1868307076137 content:     if (typeof(x) == OBJ && valid(x) && x.owner != o.owner && $object_utils:has_property(x, "dest") && x.dest == o)
#$#* 1868307076137 content:       loc = loc + (loc ? ", " | "") + "<-*" + x.name;
#$#* 1868307076137 content:     endif
#$#* 1868307076137 content:   endfor
#$#* 1868307076137 content: else
#$#* 1868307076137 content:   loc = " [Nowhere]";
#$#* 1868307076137 content: endif
#$#* 1868307076137 content: if (length(loc) > 41)
#$#* 1868307076137 content:   loc = loc[1..37] + "..]";
#$#* 1868307076137 content: endif
#$#* 1868307076137 content: if ($quota_utils == $quota_utils.byte)
#$#* 1868307076137 content:   vstr = tostr($building_utils:size_string(o.object_size[1]), " ", vstr);
#$#* 1868307076137 content:   name_field_len = 26;
#$#* 1868307076137 content: else
#$#* 1868307076137 content:   name_field_len = 30;
#$#* 1868307076137 content: endif
#$#* 1868307076137 content: namelen = length(o.name) < name_field_len ? length(o.name) | name_field_len - 1;
#$#* 1868307076137 content: return tostr(vstr, $string_utils:right(o, length(tostr(max_object()))), " ", $string_utils:left(o.name[1..namelen], name_field_len), loc);
#$#: 1868307076137
Line 1:  syntax error
1 error.
Line 1:  syntax error
1 error.
Line 1:  syntax error
1 error.
-----
STATEMENTS
==========

The following kinds of statements exist in the MOO programming language:

Null
====

        ;

The null statement does nothing.

Expressions
===========

        expression ;

The expression statement evaluates the expression and then discards the value.

Conditional
===========

        IF ( expression ) statements ENDIF
        IF ( expression ) statements ELSE statements ENDIF
        IF ( expression )
          statements
        ELSEIF ( expression )
          statements
        ...
        ELSE
          statements
        ENDIF

The conditional statement evaluates each expression in turn and executes the statements associated with the first one to return a true value; the ELSE statements are executed if none of the expressions returns a true value.  There can be any number of ELSEIF clauses and the ELSE part is optional.  See `help truth'[1] for the definition of 'true value'.

List iteration
==============

        FOR name IN ( expression ) statements ENDFOR

The list iteration statement first evaluates the expression, which must return a list.  It then executes the statements once for each element of that list, each time with the named variable having the value of the corresponding list element.

Numeric iteration
=================

        FOR name IN [ expression .. expression ] statements ENDFOR

The numeric iteration statement first evaluates the two expressions, both of which must return numbers; call those numbers N1 and N2, respectively.  The statements are then executed once for each integer I such that N1 <= I <= N2, in increasing order; each time, the named variable has the corresponding value of I.

Indefinite iteration
====================

        WHILE ( expression ) statements ENDWHILE

The indefinite iteration statement repeatedly evaluates the expression and, each time it returns a true value, executes the statements.  The loop stops the first time that the expression returns a false value.  The definitions of 'true' and 'false' values is in `help truth'[2].

Return
======

        RETURN ;
        RETURN expression ;

The return statement evalautes the expression, if any, and returns the resulting value (or 0 if there is no expression) to the verb that called the current one.  Execution of the current verb is immediately terminated.

Fork
====

        FORK ( expression ) statements ENDFORK
        FORK name ( expression ) statements ENDFORK

The fork statement first executes the expression, which must return a number; call that number N.  It then creates a new MOO task that will, after at least N seconds, execute the statements.  When the new task begins, all variables will have the values they had at the time the FORK statement was executed.  The task executing the FORK statement immediately continues execution.  If a variable name is given after the FORK keyword, then it is assigned the 'queue ID' of the newly-created task.  The value of this variable is visible both to the task executing the fork statement and to the statements in the newly-created task.  See `help tasks'[3] for more information about forked tasks.

=> 0
#0
#1
#2
#3
#4
#5
#6
#7
#8
#9
#10
#11
#12
#13
#14
#15
#16
#17
#18
#19
#20
#21
#22
#23
#24
#25
#26
#27
#28
#29
#30
#31
#32
#33
#34
#35
#36
#37
#38
#39
#40
#41
#42
#43
#44
#45
#46
#47
#48
#49
#50
#51
#52
#53
#54
#55
#56
#-1:Input to EVAL, line 6:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> #56 (Generic Garbage Object)
-----
GENERAL INFORMATION ON $OBJECT_UTILS[1]
=======================================

These routines are useful for finding out information about individual objects.

Examining everything an object has defined on it:
  all_verbs          (object) => like it says
  all_properties     (object) => likewise
  findable_properties(object) => tests to see if caller can "find" them
  owned_properties   (object[, owner]) => tests for ownership

Investigating inheritance:
  ancestors(object[,object...]) => all ancestors
  descendants      (object)     => all descendants
  ordered_descendants(object)   => descendants, in a different order
  leaves           (object)     => descendants with no children
  branches         (object)     => descendants with children 
  isa        (object,class) => true iff object is a descendant of class (or ==)

Considering containment:
  contains      (obj1, obj2) => Does obj1 contain obj2 (nested)?
  all_contents      (object) => return all the (nested) contents of object

Verifying verbs and properties:
  has_property(object,pname) => false/true   according as object.(pname) exists
  has_verb    (object,vname) => false/{#obj} according as object:(vname) exists
  has_callable_verb          => same, but verb must be callable from a program
  match_verb  (object,vname) => false/{location, newvname}
                               (identify location and usable name of verb)
Suspending:
  Many of the above verbs have ..._suspended versions to assist with very large object hierarchies.  The following exist:
   descendants_suspended              
   branches_suspended                 
   leaves_suspended                   
   all_properties_suspended           
   descendants_with_property_suspended

0 errors.
Verb programmed.
generic player(#6) has 6 kids.
generic builder (#4)   nobody (#36)   J. Text (#176)   topic-owner (#181)   Quota (#185)   generic guest (#31)
generic builder(#4) has 1 kid.
generic programmer (#52)
generic programmer(#52) has 5 kids.
unknown hacker (#35)   generic wizard (#51)   housekeeper (#63)   generic testing player (#99)   Beaker (#256)
Objects owned by hacker (from #0 to #524):
 10K   #8 generic openable containe *[generic player]
 24K  #13 Generic BigList Utilities  [Nowhere]
 26K  #14 Generic Large-Capacity Ma  [Nowhere]
125K  #16 Registration Database      [Nowhere]
200K  #17 Player-Creation-Log        [Mail Distribution Center]
  6K  #20 Verb Help                  [Nowhere]
 88K  #21 Core Utility Help          [Nowhere]
 96K  #22 Programmer Help            [Nowhere]
 23K  #23 Wizard Help                [Nowhere]
  2M  #25 Site DB                    [Nowhere]
 22K  #26 math utilities             [Nowhere]
  4K  #27 set utilities              [Nowhere]
 94K  #28 Builtin Function Help (1.  [Nowhere]
 18K  #29 New-Prog-Log               [Mail Distribution Center]
 22K  #30 Generic Help Database      [Nowhere]
 11K  #32 sequence utilities         [Nowhere]
 57K  #33 Quota-Log                  [Mail Distribution Center]
  6K  #34 you                        [Nowhere]
  2K  #35 hacker                    *[Limbo]
  5K  #36 nobody                    *[Limbo]
 82K  #37 Player Database            [Nowhere]
  7K  #38 gender utilities           [Nowhere]
 26K  #39 time utilities             [Nowhere]
 22K  #40 Editor Help                [Nowhere]
 22K  #41 Generic Mail Recipient     [Nowhere]
 52K  #42 Mail Distribution Center   [Nowhere]
 22K  #43 Mail Room                 
 21K  #44 Note Editor               
 11K  #45 Verb Editor               
 52K  #46 Generic Editor            
 28K  #49 list utilities             [Nowhere]
 65K  #53 code utilities             [Nowhere]
192K  #54 main help database         [Nowhere]
775K  #55 Recycling Center           [Nowhere]
 ???  #56 Generic Garbage Object     [Nowhere]
  9K  #57 Mail Options               [Nowhere]
  1K  #58 Edit Options               [Nowhere]
  2K  #59 Display Options            [Nowhere]
 13K  #60 Generic Option Package     [Nowhere]
  2K  #61 List Options               [Nowhere]
  7K  #62 Site-Locks                 [Mail Distribution Center]
 10K  #65 Generic Feature Object     [Nowhere]
  6K  #67 Stage-Talk Feature         [Nowhere]
  3K  #68 Thinking Feature           [Nowhere]
 50K  #69 pronoun substitution       [Nowhere]
  3K  #70 North Vestibule           <-*south, <-*tracery windows, <-*north
 <1K  #71 they                       [Nowhere]
 35K  #72 English Utilities          [Nowhere]
 14K  #73 Generic Pronoun_sub Trans  [Nowhere]
  4K  #75 Generic BigList Resident   [Nowhere]
  4K  #76 login watcher options      [Nowhere]
  8K  #77 LambdaCore Pronoun_sub Tr  [Nowhere]
 30K  #78 Two-Letter Pronoun_Sub Tr  [Nowhere]
 21K  #79 New Generic Database       [Nowhere]
  8K  #80 generic sittable object   *[generic room]
 24K  #81 generic piece of furnitur *[generic room]
 34K  #83 login watcher mark 2       [Nowhere]
889K  #87 http                       [Nowhere]
 21K  #89 Who Options                [Nowhere]
 <1K #103 all                        [Nowhere]
  3K #115 generic personal help dat  [Nowhere]
  4K #117 Parsing Utilities          [Nowhere]
  1K #119 ISINDEX Tag                [Nowhere]
 25K #121 generic door               <invalid>-><invalid>
  3K #124 Programming Group          [Nowhere]
 10K #126 generic container          [generic openable container]
  2K #129 List Tag                   [Nowhere]
  4K #130 permissions utilities      [Nowhere]
 <1K #132 name-subbing dummy object  [Nowhere]
  4K #133 generic event handler      [Nowhere]
  5K #136 Eval Options               [Nowhere]
 <1K #139 everything                 [Nowhere]
393K #140 Bug-reports                [Mail Distribution Center]
  7K #145 generic containing object  [generic container]
 <1K #146 generic utilities          [generic containing object]
 <1K #147 Unix Group                 [Nowhere]
  1K #148 DB Group                   [Nowhere]
 18K #151 feature object registry    [Nowhere]
 17K #152 jtext help database        [Nowhere]
 <1K #154 it                         [Nowhere]
 51K #155 Builder Help               [Nowhere]
 <1K #156 he                         [Nowhere]
 <1K #157 she                        [Nowhere]
 <1K #158 e                          [Nowhere]
 <1K #159 we                         [Nowhere]
  1K #160 I                          [Nowhere]
 <1K #161 you                        [Nowhere]
 <1K #162 s/he                       [Nowhere]
 19K #163 generic admin group        [Nowhere]
 <1K #164 Tech Group                 [Nowhere]
  2K #165 Community Group            [Nowhere]
 <1K #166 *e                         [Nowhere]
  2K #167 none                       [Nowhere]
  3K #168 guest help database        [Nowhere]
 22K #169 documentation feature      [Nowhere]
  7K #170 administration             [Nowhere]
  3K #171 help text editor           [hacker]
  5K #177 Name Utilities             [Nowhere]
  2K #179 generic window             <invalid>-><invalid>
 <1K #180 here                       [Nowhere]
 11K #182 walking utils              [Nowhere]
 21K #186 MCP help                   [Nowhere]
 34K #190 room matching utilities    [Nowhere]
  1K #191 Parsing Options            [Nowhere]
 13K #193 Local Namespace            [Nowhere]
 89K #203 generic module             [Nowhere]
 20K #204 generic MCP 2.1 session    [Nowhere]
 12K #209 MCP package registry       [Nowhere]
  7K #210 generic daemon service ha  [Nowhere]
 11K #213 MCP 2.1                    [Nowhere]
  6K #216 generic MCP package        [Nowhere]
  6K #217 mcp-cord                   [Nowhere]
  6K #221 MCP 2.1 parser             [Nowhere]
 10K #227 namebuilder_i for #1       [Nowhere]
  1K #228 listeners module           [Nowhere]
 31K #230 FTP                        [Nowhere]
  2K #234 old FTP                    [Nowhere]
 <1K #236 dummy name builder         [Nowhere]
  2K #238 administration group help  [Nowhere]
  8K #239 namebuilder_d for #1       [Nowhere]
  3K #240 generic name builder       [Nowhere]
  5K #241 Unicode Builtins Help      [Nowhere]
 <1K #247 session for #243           [Nowhere]
 <1K #505 session for #246           [Nowhere]
 <1K #508 session for #256           [Nowhere]
-- 125 objects.  Total bytes: 7,067,716.--------------------------------------
Objects owned by Crag (from #0 to #524):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table              [Nowhere]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
-- 32 objects.  Total bytes: 49,828.------------------------------------------
generic programmer(#52) has 5 kids.
unknown hacker (#35)   generic wizard (#51)   housekeeper (#63)   generic testing player (#99)   Beaker (#256)
Objects owned by housekeeper (from #0 to #524):
 24K  #63 housekeeper               *[Limbo]
-- 1 object.  Total bytes: 24,672.--------------------------------------------
=> {}
=> {#511}
Generic Input Handler (#509) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 16:27:48 2013 PDT by Crag (#243).
#256:"do_command" this none this
{command_str} = args;
matches = this:match_command(command_str);
if (length(matches) < 1)
  this:explain_unknown_command(command_str);
elseif (length(matches) == 1)
  this:invoke_command(matches[1]);
else
  matches = $list_utils:sort_alist(matches);
  top_confidence = matches[-1][1];
  if (matches[-2][1] == top_confidence)
    best = {};
    for match in (matches)
      if (match[1] == top_confidence)
        best = {@best, match};
      endif
    endfor
    this:explain_ambiguous_command(command_str, matches, best);
  else
    this:invoke_command(matches[1]);
  endif
endif
return 1;
Last modified Sat Apr 27 16:29:08 2013 PDT by Crag (#243).
#256:"match_command" this none this
{command_str} = args;
matches = {};
for d in (this:dictionaries())
  matches = $set_utils:union(matches, d:match_command(comman_str));
endfor
return matches;
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#256:match_command this none this" name: "MOO verb: #256:match_command this none this" type: moo-code content*: "" _data-tag: 357827043138
#$#* 357827043138 content: {command_str} = args;
#$#* 357827043138 content: matches = {};
#$#* 357827043138 content: for d in (this:dictionaries())
#$#* 357827043138 content:   matches = $set_utils:union(matches, d:match_command(comman_str));
#$#* 357827043138 content: endfor
#$#* 357827043138 content: return matches;
#$#: 357827043138
0 errors.
Verb programmed.
Last modified Sat Apr 27 12:50:24 2013 PDT by Crag (#243).
#0:"do_command" this none this
#243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
return 0;
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#0:do_command this none this" name: "MOO verb: #0:do_command this none this" type: moo-code content*: "" _data-tag: 262367853139
#$#* 262367853139 content: #243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
#$#* 262367853139 content: return 0;
#$#: 262367853139
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#0:do_command this none this" name: "MOO verb: #0:do_command this none this" type: moo-code content*: "" _data-tag: 2057326922140
#$#* 2057326922140 content: #243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
#$#* 2057326922140 content: return 0;
#$#* 2057326922140 content: // vim: syntax=moo
#$#: 2057326922140
=> #256 (Beaker)
-----
`HELP VARS' NOT FOUND
=====================

Sorry, but no help is available on `vars'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

0 errors.
Verb programmed.
#0:do_command, line 3:  Verb not found
(End of traceback)
#0:do_command, line 3:  Verb not found
(End of traceback)
Now programming System Object:do_command.  Use "." to end.
0 error(s).
Verb programmed.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, and a pile of stuff here.
Beaker is here, off in another world.
object utilities (#47) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #47:has_property             Core-Wizard (#184)   rxd    this none this
   #47:all_properties           Core-Wizard (#184)   rxd    this none this
   #47:has_verb                 Core-Wizard (#184)   rxd    this none this
   #47:has_callable_verb        Core-Wizard (#184)   rxd    this none this
   #47:all_verbs                Core-Wizard (#184)   rxd    this none this
   #47:match_verb               Core-Wizard (#184)   rxd    this none this
   #47:isa                      Core-Wizard (#184)   rxd    this none this
   #47:ancestors                Core-Wizard (#184)   rxd    this none this
   #47:"descendants descendents" Core-Wizard (#184)  rxd    this none this
   #47:"descendants_suspended descendents_suspended" Core-Wizard (#184) rxd this none this
   #47:ordered_descendants      Core-Wizard (#184)   rxd    this none this
   #47:branches                 unknown hacker (#35) rxd    this none this
   #47:branches_suspended       Core-Wizard (#184)   rxd    this none this
   #47:leaves                   unknown hacker (#35) rxd    this none this
   #47:leaves_suspended         Core-Wizard (#184)   rxd    this none this
   #47:contains                 Core-Wizard (#184)   rxd    this none this
   #47:all_contents             Core-Wizard (#184)   rxd    this none this
   #47:findable_properties      Core-Wizard (#184)   rxd    this none this
   #47:owned_properties         Core-Wizard (#184)   rxd    this none this
   #47:property_conflicts       Core-Wizard (#184)   rx     this none this
   #47:descendants_with_property_suspended Core-Wizard (#184) rx this none this
   #47:locations                Core-Wizard (#184)   rxd    this none this
   #47:"fertile_descendants fertile_descendents" Core-Wizard (#184) rxd this none this
   #47:all_properties_suspended Core-Wizard (#184)   rxd    this none this
   #47:match_verbs(new)         unknown hacker (#35) rx     this none this
   #47:connected                unknown hacker (#35) rxd    this none this
   #47:all_contents_bfs         unknown hacker (#35) rxd    this none this
   #47:match_verbs_named        Core-Wizard (#184)   rxd    this none this
   #47:check_for_legacy         unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, and a pile of stuff here.
Beaker is here, off in another world.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#0:do_command this none this" name: "MOO verb: #0:do_command this none this" type: moo-code content*: "" _data-tag: 1491365454141
#$#* 1491365454141 content: // TODO: improve this snooping functionality
#$#* 1491365454141 content: #243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
#$#* 1491365454141 content: return $object_utils:has_callable_verb(player, "receive_input") && player:receive_input(argstr, args);
#$#: 1491365454141
Last modified Fri Aug 13 13:16:06 1999 PDT by Xeric (#999) (on Waterpoint).
#6:"tell" this none this
if (!$network:is_connected(this))
  return;
endif
if (this.gaglist || this.paranoid)
  // Check the above first, default case, to save ticks.  Paranoid gaggers are cost an extra three or so ticks by this, probably a net savings.
  if (g = this:gag_p())
    return;
  endif
  if (this.paranoid == 2)
    z = this:whodunnit({@callers(), {player, "", player}}, {this, $no_one}, {})[3];
    args = {"(", z:name(), " ", z, ") ", @args};
  elseif (this.paranoid == 1)
    this.responsible = {@this.responsible, {{@callers(), {player, "<cmd-line>", player}}, args}};
    if ((len = length(this.responsible)) * 2 > this.lines * 3)
      this.responsible = this.responsible[len - this.lines + 1..len];
    endif
  else
    this.responsible = {};
  endif
endif
if ((v = this:misc_option("tstamp")) < 0)
  if (time() - this.last_timestamp > abs(v * 60) && !($login_watcher in $list_utils:slice(callers(), 4)))
    this:notify(this:timestamp_string());
  endif
endif
pass(@args);
if (v > 0)
  if (time() - this.last_timestamp > v * 60 && !($login_watcher in $list_utils:slice(callers(), 4)))
    this:notify(this:timestamp_string());
  endif
endif
Last modified Tue Nov 18 18:44:14 1997 PST by Rog (#145) (on JHM).
#6:"notify" this none this
// now properly understands extra args, even if it ignores them, and returns 1 on success like notify() does in 1.8.0
// 6/13/96: extra args are now passed through in the case where linewrap and pagination are turned off. --Rog
// 11/18/97: fixed OOB quoting --Rog
{line, @xargs} = args;
if (match(line, "^#%$[#\"]"))
  line = "#$\"" + line;
endif
// ... WAS:
// if ((length(line) >= 3) && (line[1..3] == "#$#"))
//   line = " " + line;
// endif
// 
if (this.pagelen)
  if (!(this in connected_players()))
    // ...drop it on the floor...
    return 1;
  elseif (caller != this && !$perm_utils:controls(caller_perms(), this))
    return E_PERM;
  endif
  // ...need wizard perms if this and this.owner are different, since...
  // ...only this can notify() and only this.owner can read .linebuffer...
  if (player == this && this.linetask && this.linetask[2] != task_id())
    // ...player has started a new task...
    // ....linetask[2] is the taskid of the most recent player task...
    if (this.linetask[2] != this.linetask[1])
      this.linesleft = this.pagelen - 2;
    endif
    this.linetask[2] = task_id();
  endif
  // ... digest the current line...
  if (this.linelen > 0)
    lbuf = {@this.linebuffer, @this:linesplit(line, this.linelen)};
  else
    lbuf = {@this.linebuffer, line};
  endif
  // ... print out what we can...
  if (this.linesleft)
    howmany = min(this.linesleft, length(lbuf));
    for l in (lbuf[1..howmany])
      notify(this, l);
    endfor
    this.linesleft = this.linesleft - howmany;
    lbuf[1..howmany] = {};
  endif
  if (lbuf)
    // ...need we say ***More***?         ---suggested by Ford
    if (this.linetask[1] != this.linetask[2])
      // ....linetask[1] is the taskid of the most recent player task
      // ...   for which ***More*** was printed...
      this.linetask[1] = this.linetask[2];
      fork (0)
        notify(this, this:more_string(length(this.linebuffer)));
      endfork
    endif
    llen = length(lbuf);
    if (llen > 500)
      // ...way too much saved text, flush some of it...
      lbuf[1..llen - 100] = {"*** buffer overflow, lines flushed ***"};
    endif
  endif
  this.linebuffer = lbuf;
else
  if (caller != this)
    set_task_perms(caller_perms());
  endif
  if (this.linelen > 0)
    for l in (this:linesplit(line, this.linelen))
      notify(this, l);
    endfor
  else
    notify(this, line, @xargs);
  endif
endif
return 1;
stormagnet arrives from the Great Hall.
stormagnet goes south.
string utilities (#18) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #18:space                    Core-Wizard (#184)   rxd    this none this
   #18:left                     Core-Wizard (#184)   rxd    this none this
   #18:right                    Core-Wizard (#184)   rxd    this none this
   #18:"centre center"          Core-Wizard (#184)   rxd    this none this
   #18:"columnize columnise"    unknown hacker (#35) rxd    this none this
   #18:from_list                Core-Wizard (#184)   rxd    this none this
   #18:english_list             Core-Wizard (#184)   rxd    this none this
   #18:names_of                 unknown hacker (#35) rxd    this none this
   #18:from_seconds             Core-Wizard (#184)   rxd    this none this
   #18:trim                     unknown hacker (#35) rxd    this none this
   #18:triml                    unknown hacker (#35) rxd    this none this
   #18:trimr                    unknown hacker (#35) rxd    this none this
   #18:strip_chars              unknown hacker (#35) rxd    this none this
   #18:strip_all_but            unknown hacker (#35) rxd    this none this
   #18:"uppercase lowercase"    Core-Wizard (#184)   rxd    this none this
   #18:"capitalize capitalise"  Core-Wizard (#184)   rxd    this none this
   #18:literal_object           unknown hacker (#35) rxd    this none this
   #18:match                    Core-Wizard (#184)   rxd    this none this
   #18:match_str*ing            Core-Wizard (#184)   rxd    this none this
   #18:match_object             Core-Wizard (#184)   rxd    this none this
   #18:match_player             unknown hacker (#35) rxd    this none this
   #18:match_player_or_object   Core-Wizard (#184)   rxd    this none this
   #18:find_prefix              Core-Wizard (#184)   rxd    this none this
   #18:index_d*elimited         unknown hacker (#35) rxd    this none this
   #18:is_numeric               unknown hacker (#35) rxd    this none this
   #18:ordinal                  unknown hacker (#35) rxd    this none this
   #18:group_number             Core-Wizard (#184)   rxd    this none this
   #18:english_number           Core-Wizard (#184)   rxd    this none this
   #18:english_ordinal          unknown hacker (#35) rxd    this none this
   #18:english_ones             Core-Wizard (#184)   rxd    this none this
   #18:english_tens             Core-Wizard (#184)   rxd    this none this
   #18:subst*itute              unknown hacker (#35) rxd    this none this
   #18:substitute_d*elimited    Core-Wizard (#184)   rxd    none none none
   #18:_cap_property            Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub              Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_secure       unknown hacker (#35) rxd    this none this
   #18:pronoun_quote            unknown hacker (#35) rxd    this none this
   #18:explode                  unknown hacker (#35) rxd    this none this
   #18:words                    unknown hacker (#35) rxd    this none this
   #18:word_start               unknown hacker (#35) rxd    this none this
   #18:to_value                 unknown hacker (#35) rxd    this none this
   #18:prefix_to_value          unknown hacker (#35) rxd    this none this
   #18:_tolist                  unknown hacker (#35) rxd    this none this
   #18:_unquote                 unknown hacker (#35) rxd    this none this
   #18:_toscalar                unknown hacker (#35) rxd    this none this
   #18:parse_command            Core-Wizard (#184)   rxd    this none this
   #18:from_value               Core-Wizard (#184)   rxd    this none this
   #18:print                    Core-Wizard (#184)   rxd    this none this
   #18:print_suspended          unknown hacker (#35) rxd    this none this
   #18:reverse                  Core-Wizard (#184)   rxd    this none this
   #18:char_list                unknown hacker (#35) rxd    this none this
   #18:regexp_quote             unknown hacker (#35) rxd    this none this
   #18:connection_hostname_bsd  unknown hacker (#35) rxd    this none this
   #18:connection_hostname      unknown hacker (#35) rxd    this none this
   #18:from_value_suspended     Core-Wizard (#184)   rxd    this none this
   #18:first_word               unknown hacker (#35) rxd    this none this
   #18:common                   Core-Wizard (#184)   rxd    this none this
   #18:"name_list namec_list dnamec_list inamec_list dname_list iname_list" unknown hacker (#35) rxd this none this
   #18:_pronoun_sub             Core-Wizard (#184)   rxd    this none this
   #18:"name_and_number_list iname_and_number_list dname_and_number_list" Core-Wizard (#184) rxd this none this
   #18:to_list                  Core-Wizard (#184)   rxd    this none this
   #18:character_to_ascii       Core-Wizard (#184)   rxd    this none this
   #18:character_to_hex_ascii   Core-Wizard (#184)   rxd    this none this
   #18:ascii_to_character       Core-Wizard (#184)   rxd    this none this
   #18:hex_ascii_to_character   Core-Wizard (#184)   rxd    this none this
   #18:print_truncated          unknown hacker (#35) rxd    this none this
   #18:print_truncated_recursive unknown hacker (#35) rxd   this none this
   #18:"name_and_number nn iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
   #18:next_index               unknown hacker (#35) rxd    this none this
   #18:match_room               Core-Wizard (#184)   rxd    this none this
   #18:is_uppercase             unknown hacker (#35) rxd    this none this
   #18:index_all                Core-Wizard (#184)   rxd    this none this
   #18:"columnize_with_headers columnise_with_headers" unknown hacker (#35) rxd this none this
   #18:columnize_suspended      unknown hacker (#35) rxd    this none this
   #18:nonblank                 unknown hacker (#35) rxd    this none this
   #18:is_lowercase             unknown hacker (#35) rxd    this none this
   #18:columnize_no_truncate    unknown hacker (#35) rxd    this none this
   #18:print_with_names         Core-Wizard (#184)   rxd    this none this
   #18:match_stringlist         Core-Wizard (#184)   rxd    this none this
   #18:"title_list name_for_tell_contents_list name_for_look_self_list titlec_list namec_for_look_self_list namec_for_tell_contents_list name_and_number_list iname_and_number_list dname_and_number_list namec_and_number_list inamec_and_number_list dnamec_and_number_list" unknown hacker (#35) rxd this none this
   #18:glob_to_regexp           unknown hacker (#35) rxd    this none this
   #18:xglob_to_regexp          unknown hacker (#35) rxd    this none this
   #18:"match_all match_exact_or_all" Core-Wizard (#184) rxd this none this
   #18:explode_match            Core-Wizard (#184)   rxd    this none this
   #18:incr_alpha               Core-Wizard (#184)   rxd    this none this
   #18:from_words               Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_for          Core-Wizard (#184)   rxd    this none this
   #18:connection_direction     unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
-----
$STRING_UTILS:PRINT
===================

Usage:  :print(value)

Print the given value into a string. == from_value(value,1,-1) == toliteral(value).

=> "{{1}, 2}"
list utilities (#49) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #49:make                     unknown hacker (#35) rxd    this none this
   #49:range                    unknown hacker (#35) rxd    this none this
   #49:map_prop*erty            Core-Wizard (#184)   rxd    this none this
   #49:map_verb                 Core-Wizard (#184)   rx     this none this
   #49:map_arg                  Core-Wizard (#184)   rxd    this none this
   #49:map_builtin              Core-Wizard (#184)   rxd    this none this
   #49:find_insert              unknown hacker (#35) rx     this none this
   #49:remove_duplicates        unknown hacker (#35) rxd    this none this
   #49:arrayset                 unknown hacker (#35) rxd    this none this
   #49:setremove_all            unknown hacker (#35) rxd    this none this
   #49:append                   unknown hacker (#35) rxd    this none this
   #49:reverse                  unknown hacker (#35) rxd    this none this
   #49:_reverse                 unknown hacker (#35) rxd    this none this
   #49:compress                 unknown hacker (#35) rxd    this none this
   #49:sort                     unknown hacker (#35) rxd    this none this
   #49:slice                    unknown hacker (#35) rxd    this none this
   #49:assoc                    unknown hacker (#35) rxd    this none this
   #49:iassoc                   unknown hacker (#35) rxd    this none this
   #49:iassoc_suspended         Core-Wizard (#184)   rxd    this none this
   #49:assoc_prefix             unknown hacker (#35) rxd    this none this
   #49:iassoc_prefix            unknown hacker (#35) rxd    this none this
   #49:iassoc_sorted            unknown hacker (#35) rxd    this none this
   #49:sort_alist               unknown hacker (#35) rxd    this none this
   #49:sort_alist_suspended     Core-Wizard (#184)   rxd    this none this
   #49:randomly_permute         unknown hacker (#35) rxd    this none this
   #49:passoc                   unknown hacker (#35) rxd    this none this
   #49:check_type               unknown hacker (#35) rxd    this none this
   #49:random_permutation       Core-Wizard (#184)   rxd    this none this
   #49:max_length               unknown hacker (#35) rxd    this none this
   #49:any_of                   Core-Wizard (#184)   rxd    this none this
   #49:flatten                  unknown hacker (#35) rxd    this none this
   #49:grep_l                   Core-Wizard (#184)   rxd    this none this
   #49:grep_ll                  Core-Wizard (#184)   rxd    this none this
   #49:slice_suspended          unknown hacker (#35) rxd    this none this
   #49:sort_suspended           Core-Wizard (#184)   rxd    this none this
   #49:make_alist               Core-Wizard (#184)   rxd    this none this
   #49:"longest shortest"       unknown hacker (#35) rxd    this none this
   #49:count                    unknown hacker (#35) rxd    this none this
   #49:map_verb_safe            Core-Wizard (#184)   rxd    this none this
   #49:grep_o                   Wizard (#2)          rxd    this none this
-------------------------------- finished ---------------------------------
The generic utilities(#146) has 23 kids.
Generic BigList Utilities (#13)   wizard utilities (#24)   math utilities (#26)   set utilities (#27)   sequence utilities (#32)   gender utilities (#38)   time utilities (#39)   object utilities (#47)   lock utilities (#48)   list utilities (#49)   command utilities (#50)   code utilities (#53)   permissions utilities (#130)   building utilities (#19)   string utilities (#18)   English Utilities (#72)   integration utils (#74)   Name Utilities (#177)   Parsing Utilities (#117)   walking utils (#182)   room matching utilities (#190)   Generic Quota Utils Parent (#88)   Group Utilities (#248)
The root class(#1) has 24 kids.
Guest Log (#12)   Limbo (#15)   Mail Distribution Center (#42)   Error Generator (#66)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   http (#87)   SMTP (#212)   FTP (#230)   link dispatcher tag (#123)   Tag Root (#91)   Address Root (#109)   Helpful Object (#250)   MCP parent (#251)   Parsing objects (#252)   Text generation objects (#253)   Abstract class (#254)   Generic Delegator (#269)   Generic Delegate (#270)   Generic Achievement (#445)   Generic Input Handler (#509)
Error Generator (#66) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
   #66:raise                    unknown hacker (#35) rxd    this none this
   #66:E_NONE                   unknown hacker (#35) rxd    this none this
   #66:E_TYPE                   unknown hacker (#35) rxd    this none this
   #66:E_DIV                    unknown hacker (#35) rxd    this none this
   #66:E_PERM                   unknown hacker (#35) rxd    this none this
   #66:E_PROPNF                 unknown hacker (#35) rxd    this none this
   #66:E_VERBNF                 unknown hacker (#35) rxd    this none this
   #66:E_VARNF                  unknown hacker (#35) rxd    this none this
   #66:E_INVIND                 unknown hacker (#35) rxd    this none this
   #66:E_RECMOVE                unknown hacker (#35) rxd    this none this
   #66:E_MAXREC                 unknown hacker (#35) rxd    this none this
   #66:E_RANGE                  unknown hacker (#35) rxd    this none this
   #66:E_ARGS                   unknown hacker (#35) rxd    this none this
   #66:E_NACC                   unknown hacker (#35) rxd    this none this
   #66:E_INVARG                 unknown hacker (#35) rxd    this none this
   #66:E_QUOTA                  Core-Wizard (#184)   rxd    this none this
   #66:nominate_for_core        Core-Wizard (#184)   rxd    this none this
   #66:acceptable               unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, a How $staff will notice people rummaging, and a pile of stuff here.
Beaker is here, off in another world.
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
.debug                   Crag (#243)           r c    0
-------------------------------- finished ---------------------------------
=> 1
do_command for Beaker (#256): ;blarg
do_command for stormagnet (#246): @describe floor as The floor underfoot is formed of enormous blocks of black basalt, carefully mitered into a seamless whole. Age, polishing, and the passage of countless feet have worn it smooth in the middle, but toward the edges of the room the blocks are still rough to the touch.
do_command for stormagnet (#246): drop floor
do_command for Crag (#243): ;me.debug = 0
=> 0
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
  #256:do_command               Crag (#243)          rxd    this none this
  #256:match_command            Crag (#243)          rxd    this none this
  #256:explain_ambiguous_command Crag (#243)         rxd    this none this
  #256:explain_unknown_command  Crag (#243)          rxd    this none this
  #256:invoke_command           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
That is not a valid command.
Beaker (#256)   generic programmer (#52)   generic builder (#4)   generic player (#6)   generic containing object (#145)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
That object does not define that verb.
Verb name changed.
Last modified Sat Apr 27 16:27:48 2013 PDT by Crag (#243).
#256:"receive_input" this none this
{command_str} = args;
matches = this:match_command(command_str);
if (length(matches) < 1)
  this:explain_unknown_command(command_str);
elseif (length(matches) == 1)
  this:invoke_command(matches[1]);
else
  matches = $list_utils:sort_alist(matches);
  top_confidence = matches[-1][1];
  if (matches[-2][1] == top_confidence)
    best = {};
    for match in (matches)
      if (match[1] == top_confidence)
        best = {@best, match};
      endif
    endfor
    this:explain_ambiguous_command(command_str, matches, best);
  else
    this:invoke_command(matches[1]);
  endif
endif
return 1;
-----
GENERAL INFORMATION ON $STRING_UTILS[1]
=======================================

For a complete description of a given verb, do `help $string_utils:verbname'[2]

    Conversion routines:

:char_list    (string)                               => {"a", "b", "c"}
:to_list      (string)                               => {"a", "foo", "bear"}
 (see also :explode, below)

:from_list    (list [,sep])                          => "foo1foo2foo3"
:english_list (str-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
:title_list*c (obj-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
                                                  or => "Foo1, foo2, and foo3"

:[i|d]name[c]_and_number                             => "foo (#123)"
:[i|d]name[c]_list (obj-list, name-args)             => english list of names
                                                        in appropriate style
:[i|d]name[c]_and_number_list(obj-list, name-args)   => same, plus " (#123)"
:names_of     (obj-list)  => "foo1 (#123)   foo2 (#456)   foo3 (#789)"

:to_value       (string)                             => {1, value}
                                                  or => {0, error message}
:prefix_to_value(string)                             => {rest-of-string, value}
                                                  or => {0, error message}
:end_expression (string)                             => index of expression

:from_value[_suspended] (value [,quoteflag [,maxlistdepth]])
                                                     => "{foo1, foo2, foo3}"
:print[_suspended] (value)                           => "{foo1, foo2, foo3}"
:print_truncated   (value, length, suffix)           => "{foo1, fo.."
:print_with_names  (value)                           => "{foo1, foo2 (#123)}"

:english_number(42 [,zero])  => "forty-two"
:english_ordinal(42)         => "forty-second"
:ordinal(42)                 => "42nd"
:group_number(42135 [,sep])  => "42,135"
:from_seconds (num)          => "an hour" or "3 days" or "15 seconds"

:glob_to_regexp("foo*b?r")   => "^foo.*b.r$"
:xglob_to_regexp("f*ba[rz]") => "^f.*ba[rz]$"

    Type checking:

:is_numeric   (string) => return true if string is composed entirely of digits

    String Matching:

:match_string(string, pattern, options) => * wildcard matching
:find_prefix(prefix, string-list)       => list index of element starting
                                           with prefix
:match_stringlist(string, string-list)  => index/$ambiguous_match/$failed_match
:index_delimited(string,target[, case]) => index of delimited string occurrence
:index_all(string, target[, delimited]) => all occurrences of target in string
:next_index(str1, str2, prev[, case])   => index, after index `prev'

    Object Matching (see also $command_utils):

:literal_object(string)                        => object match independent
                                                  of location
:match        (string, [obj-list, prop-name]+) => matching object
:match_player (string-list[,me-object])        => list of matching players
:match_object (string, location)               => default object match
:match_player_or_object(@string-list)          => matching object or player
:match_room   (string)                         => matching room object

    Parsing:

:explode (string,char) -- string => list of words delimited by char
 (see also :to_list, above)
:words   (string)      -- string => list of words (as with command line parser)
:word_start (string)   -- string => list of start-end pairs.
:first_word (string)   -- string => {first word, rest of string} or {}

:parse_command(cmd_line[, player]) -- string => parsed command info

    Pretty printing:

:space         (n/string[,filler])     => n spaces
:left          (string,width[,filler]) => left justified string in field 
:right         (string,width[,filler]) => right justified string in field
:center/re     (string,width[,filler]) => centered string in field
:columnize/se[_suspended](list,n[,width])
                                       => list of strings in n columns
:columnize/se_no_truncate(list,n[,linelen])
                                       => same, but will not truncate items
:columnize/se_with_headers(headers, fields) => columnize, plus headers

    Substitutions

:substitute (string, subst_list [,case])  -- general substitutions.
:substitute_delimited(...)                -- same, but with word boundaries.
:pronoun_sub (string/list[,who[,thing[,location]]])
                                          -- pronoun substitutions.
:pronoun_sub_secure (string[,who[,thing[,location]]],default)
                                          -- substitute and check for names.
:pronoun_quote (string/list/subst_list)   -- quoting for pronoun substitutions.
:regexp_quote(string)                     -- quoting for regexps.

    Miscellaneous string munging:

:trim         (string)       => string with outside whitespace removed.
:triml        (string)       => string with leading whitespace removed.
:trimr        (string)       => string with trailing whitespace removed.
:strip_chars  (string,chars) => string with all chars in `chars' removed.
:strip_all_but(string,chars) => string with all chars not in `chars' removed.
:capitalize/se(string)       => string with first letter capitalized.
:uppercase/lowercase(string) => string with all letters upper or lowercase.
:reverse      (string)       => string, backwards.

:common(string1, string2)    => length of longest common prefix.
:is_uppercase (string)       => true iff no lowercase letters in string
:is_lowercase (string)       => true iff no uppercase letters in string
:nonblank     (string)       => true iff any non-whitespace characters

:connection_hostname(string) => hostname part of connection identifier.

    Conversions to and from common string formats:

:character_to_ascii(char)    => integer ASCII rep of char
:character_to_hex_ascii(char) => two-digit hexadecimal string ASCII rep of char
:ascii_to_character(num)     => character represented in ASCII by num
:hex_ascii_to_character(hex) => ASCII character represented by two-character hexadecimal string hex

    A few useful properties:

alphabet                    => "abcdefghijklmnopqrstuvwxyz"
tab                         => a single tab character

#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#0:do_command this none this" name: "MOO verb: #0:do_command this none this" type: moo-code content*: "" _data-tag: 896802026142
#$#* 896802026142 content: // TODO: improve this snooping functionality
#$#* 896802026142 content: #243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
#$#* 896802026142 content: try
#$#* 896802026142 content:   return $object_utils:has_callable_verb(player, "receive_input") && player:receive_input(argstr, args);
#$#* 896802026142 content: except e (ANY)
#$#* 896802026142 content:   player:notify("There was an error in the new input parsing system:");
#$#* 896802026142 content:   player:notify($string_utils:from_value(e));
#$#* 896802026142 content:   player:notify("Falling back to the old one.");
#$#* 896802026142 content:   return 0;
#$#* 896802026142 content: endtry
#$#: 896802026142
0 errors.
Verb programmed.
Verb added [89] (88).
That object does not define that verb.
You see no "string_utils" here.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#18:pretty_traceback ()" name: "MOO verb: #18:pretty_traceback ()" type: moo-code content*: "" _data-tag: 96798878143
#$#: 96798878143
#6:notify (this == #243), line 5:  Type mismatch
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
{list}
=> 0
ab
=> 0
    #1:tell_lines               unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
-----
ME:TELL_LINES
=============

(No documentation.)

Object #243 does not define that verb, but its ancestor #1 does.
#1:"tell_lines" (lines)
if (typeof(lines) != LIST)
  lines = {lines};
endif
for line in (lines)
  this:tell(line);
endfor
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#0:do_command this none this" name: "MOO verb: #0:do_command this none this" type: moo-code content*: "" _data-tag: 1296848898144
#$#* 1296848898144 content: // TODO: improve this snooping functionality
#$#* 1296848898144 content: #243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
#$#* 1296848898144 content: try
#$#* 1296848898144 content:   return $object_utils:has_callable_verb(player, "receive_input") && player:receive_input(argstr, args);
#$#* 1296848898144 content: except e (ANY)
#$#* 1296848898144 content:   player:notify("There was an error in the new input parsing system:");
#$#* 1296848898144 content:   player:notify($string_utils:print_with_names(e));
#$#* 1296848898144 content:   player:notify("Falling back to the old one.");
#$#* 1296848898144 content:   return 0;
#$#* 1296848898144 content: endtry
#$#: 1296848898144
0 errors.
Verb programmed.
string utilities (#18) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #18:space                    Core-Wizard (#184)   rxd    this none this
   #18:left                     Core-Wizard (#184)   rxd    this none this
   #18:right                    Core-Wizard (#184)   rxd    this none this
   #18:"centre center"          Core-Wizard (#184)   rxd    this none this
   #18:"columnize columnise"    unknown hacker (#35) rxd    this none this
   #18:from_list                Core-Wizard (#184)   rxd    this none this
   #18:english_list             Core-Wizard (#184)   rxd    this none this
   #18:names_of                 unknown hacker (#35) rxd    this none this
   #18:from_seconds             Core-Wizard (#184)   rxd    this none this
   #18:trim                     unknown hacker (#35) rxd    this none this
   #18:triml                    unknown hacker (#35) rxd    this none this
   #18:trimr                    unknown hacker (#35) rxd    this none this
   #18:strip_chars              unknown hacker (#35) rxd    this none this
   #18:strip_all_but            unknown hacker (#35) rxd    this none this
   #18:"uppercase lowercase"    Core-Wizard (#184)   rxd    this none this
   #18:"capitalize capitalise"  Core-Wizard (#184)   rxd    this none this
   #18:literal_object           unknown hacker (#35) rxd    this none this
   #18:match                    Core-Wizard (#184)   rxd    this none this
   #18:match_str*ing            Core-Wizard (#184)   rxd    this none this
   #18:match_object             Core-Wizard (#184)   rxd    this none this
   #18:match_player             unknown hacker (#35) rxd    this none this
   #18:match_player_or_object   Core-Wizard (#184)   rxd    this none this
   #18:find_prefix              Core-Wizard (#184)   rxd    this none this
   #18:index_d*elimited         unknown hacker (#35) rxd    this none this
   #18:is_numeric               unknown hacker (#35) rxd    this none this
   #18:ordinal                  unknown hacker (#35) rxd    this none this
   #18:group_number             Core-Wizard (#184)   rxd    this none this
   #18:english_number           Core-Wizard (#184)   rxd    this none this
   #18:english_ordinal          unknown hacker (#35) rxd    this none this
   #18:english_ones             Core-Wizard (#184)   rxd    this none this
   #18:english_tens             Core-Wizard (#184)   rxd    this none this
   #18:subst*itute              unknown hacker (#35) rxd    this none this
   #18:substitute_d*elimited    Core-Wizard (#184)   rxd    none none none
   #18:_cap_property            Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub              Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_secure       unknown hacker (#35) rxd    this none this
   #18:pronoun_quote            unknown hacker (#35) rxd    this none this
   #18:explode                  unknown hacker (#35) rxd    this none this
   #18:words                    unknown hacker (#35) rxd    this none this
   #18:word_start               unknown hacker (#35) rxd    this none this
   #18:to_value                 unknown hacker (#35) rxd    this none this
   #18:prefix_to_value          unknown hacker (#35) rxd    this none this
   #18:_tolist                  unknown hacker (#35) rxd    this none this
   #18:_unquote                 unknown hacker (#35) rxd    this none this
   #18:_toscalar                unknown hacker (#35) rxd    this none this
   #18:parse_command            Core-Wizard (#184)   rxd    this none this
   #18:from_value               Core-Wizard (#184)   rxd    this none this
   #18:print                    Core-Wizard (#184)   rxd    this none this
   #18:print_suspended          unknown hacker (#35) rxd    this none this
   #18:reverse                  Core-Wizard (#184)   rxd    this none this
   #18:char_list                unknown hacker (#35) rxd    this none this
   #18:regexp_quote             unknown hacker (#35) rxd    this none this
   #18:connection_hostname_bsd  unknown hacker (#35) rxd    this none this
   #18:connection_hostname      unknown hacker (#35) rxd    this none this
   #18:from_value_suspended     Core-Wizard (#184)   rxd    this none this
   #18:first_word               unknown hacker (#35) rxd    this none this
   #18:common                   Core-Wizard (#184)   rxd    this none this
   #18:"name_list namec_list dnamec_list inamec_list dname_list iname_list" unknown hacker (#35) rxd this none this
   #18:_pronoun_sub             Core-Wizard (#184)   rxd    this none this
   #18:"name_and_number_list iname_and_number_list dname_and_number_list" Core-Wizard (#184) rxd this none this
   #18:to_list                  Core-Wizard (#184)   rxd    this none this
   #18:character_to_ascii       Core-Wizard (#184)   rxd    this none this
   #18:character_to_hex_ascii   Core-Wizard (#184)   rxd    this none this
   #18:ascii_to_character       Core-Wizard (#184)   rxd    this none this
   #18:hex_ascii_to_character   Core-Wizard (#184)   rxd    this none this
   #18:print_truncated          unknown hacker (#35) rxd    this none this
   #18:print_truncated_recursive unknown hacker (#35) rxd   this none this
   #18:"name_and_number nn iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
   #18:next_index               unknown hacker (#35) rxd    this none this
   #18:match_room               Core-Wizard (#184)   rxd    this none this
   #18:is_uppercase             unknown hacker (#35) rxd    this none this
   #18:index_all                Core-Wizard (#184)   rxd    this none this
   #18:"columnize_with_headers columnise_with_headers" unknown hacker (#35) rxd this none this
   #18:columnize_suspended      unknown hacker (#35) rxd    this none this
   #18:nonblank                 unknown hacker (#35) rxd    this none this
   #18:is_lowercase             unknown hacker (#35) rxd    this none this
   #18:columnize_no_truncate    unknown hacker (#35) rxd    this none this
   #18:print_with_names         Core-Wizard (#184)   rxd    this none this
   #18:match_stringlist         Core-Wizard (#184)   rxd    this none this
   #18:"title_list name_for_tell_contents_list name_for_look_self_list titlec_list namec_for_look_self_list namec_for_tell_contents_list name_and_number_list iname_and_number_list dname_and_number_list namec_and_number_list inamec_and_number_list dnamec_and_number_list" unknown hacker (#35) rxd this none this
   #18:glob_to_regexp           unknown hacker (#35) rxd    this none this
   #18:xglob_to_regexp          unknown hacker (#35) rxd    this none this
   #18:"match_all match_exact_or_all" Core-Wizard (#184) rxd this none this
   #18:explode_match            Core-Wizard (#184)   rxd    this none this
   #18:incr_alpha               Core-Wizard (#184)   rxd    this none this
   #18:from_words               Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_for          Core-Wizard (#184)   rxd    this none this
   #18:connection_direction     unknown hacker (#35) rxd    this none this
   #18:pretty_traceback         Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb name changed.
-----
CALLERS()
=========

Syntax:  callers ([<include-line-numbers>])   => list

Returns information on each of the verbs and built-in functions currently waiting to resume execution in the current task.  When one verb or function calls another verb or function, execution of the caller is temporarily suspended, pending the called verb or function returning a value.  At any given time, there could be several such pending verbs and functions: the one that called the currently executing verb, the verb or function that called that one, and so on.  The result of `callers()' is a list, each element of which gives information about one pending verb or function in the following format:

    {<this>, <verb-name>, <programmer>, <verb-loc>, <player>, <line-number>}

For verbs, <this> is the initial value of the variable `this' in that verb, <verb-name> is the name used to invoke that verb, <programmer> is the player with whose permissions that verb is running, <verb-loc> is the object on which that verb is defined, <player> is the initial value of the variable `player' in that verb, and <line-number> indicates which line of the verb's code is executing.  The <line-number> element is included only if the <include-line-numbers> argument was provided and true.

For functions, <this>, <programmer>, and <verb-loc> are all `#-1', <verb-name> is the name of the function, and <line-number> is an index used internally to determine the current state of the built-in function.  The simplest correct test for a built-in function entry is

    (VERB-LOC == #-1  &&  PROGRAMMER == #-1  &&  VERB-NAME != "")

The first element of the list returned by `callers()' gives information on the verb that called the currently-executing verb, the second element describes the verb that called that one, and so on.  The last element of the list describes the first verb called in this task.

#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#18:pretty_error this none this" name: "MOO verb: #18:pretty_error this none this" type: moo-code content*: "" _data-tag: 174638060145
#$#* 174638060145 content: {error} = args;
#$#* 174638060145 content: {error, msg, value, tb} = error;
#$#* 174638060145 content: pretty = {$string_utils:from_value(error) + ": " + msg + " (" + $string_utils:from_value(value)};
#$#* 174638060145 content: for frame in (tb)
#$#* 174638060145 content:   pretty = {@pretty, "  " + $string_utils:from_value(frame)};
#$#* 174638060145 content: endfor
#$#* 174638060145 content: return pretty;
#$#: 174638060145
string utilities (#18) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #18:space                    Core-Wizard (#184)   rxd    this none this
   #18:left                     Core-Wizard (#184)   rxd    this none this
   #18:right                    Core-Wizard (#184)   rxd    this none this
   #18:"centre center"          Core-Wizard (#184)   rxd    this none this
   #18:"columnize columnise"    unknown hacker (#35) rxd    this none this
   #18:from_list                Core-Wizard (#184)   rxd    this none this
   #18:english_list             Core-Wizard (#184)   rxd    this none this
   #18:names_of                 unknown hacker (#35) rxd    this none this
   #18:from_seconds             Core-Wizard (#184)   rxd    this none this
   #18:trim                     unknown hacker (#35) rxd    this none this
   #18:triml                    unknown hacker (#35) rxd    this none this
   #18:trimr                    unknown hacker (#35) rxd    this none this
   #18:strip_chars              unknown hacker (#35) rxd    this none this
   #18:strip_all_but            unknown hacker (#35) rxd    this none this
   #18:"uppercase lowercase"    Core-Wizard (#184)   rxd    this none this
   #18:"capitalize capitalise"  Core-Wizard (#184)   rxd    this none this
   #18:literal_object           unknown hacker (#35) rxd    this none this
   #18:match                    Core-Wizard (#184)   rxd    this none this
   #18:match_str*ing            Core-Wizard (#184)   rxd    this none this
   #18:match_object             Core-Wizard (#184)   rxd    this none this
   #18:match_player             unknown hacker (#35) rxd    this none this
   #18:match_player_or_object   Core-Wizard (#184)   rxd    this none this
   #18:find_prefix              Core-Wizard (#184)   rxd    this none this
   #18:index_d*elimited         unknown hacker (#35) rxd    this none this
   #18:is_numeric               unknown hacker (#35) rxd    this none this
   #18:ordinal                  unknown hacker (#35) rxd    this none this
   #18:group_number             Core-Wizard (#184)   rxd    this none this
   #18:english_number           Core-Wizard (#184)   rxd    this none this
   #18:english_ordinal          unknown hacker (#35) rxd    this none this
   #18:english_ones             Core-Wizard (#184)   rxd    this none this
   #18:english_tens             Core-Wizard (#184)   rxd    this none this
   #18:subst*itute              unknown hacker (#35) rxd    this none this
   #18:substitute_d*elimited    Core-Wizard (#184)   rxd    none none none
   #18:_cap_property            Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub              Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_secure       unknown hacker (#35) rxd    this none this
   #18:pronoun_quote            unknown hacker (#35) rxd    this none this
   #18:explode                  unknown hacker (#35) rxd    this none this
   #18:words                    unknown hacker (#35) rxd    this none this
   #18:word_start               unknown hacker (#35) rxd    this none this
   #18:to_value                 unknown hacker (#35) rxd    this none this
   #18:prefix_to_value          unknown hacker (#35) rxd    this none this
   #18:_tolist                  unknown hacker (#35) rxd    this none this
   #18:_unquote                 unknown hacker (#35) rxd    this none this
   #18:_toscalar                unknown hacker (#35) rxd    this none this
   #18:parse_command            Core-Wizard (#184)   rxd    this none this
   #18:from_value               Core-Wizard (#184)   rxd    this none this
   #18:print                    Core-Wizard (#184)   rxd    this none this
   #18:print_suspended          unknown hacker (#35) rxd    this none this
   #18:reverse                  Core-Wizard (#184)   rxd    this none this
   #18:char_list                unknown hacker (#35) rxd    this none this
   #18:regexp_quote             unknown hacker (#35) rxd    this none this
   #18:connection_hostname_bsd  unknown hacker (#35) rxd    this none this
   #18:connection_hostname      unknown hacker (#35) rxd    this none this
   #18:from_value_suspended     Core-Wizard (#184)   rxd    this none this
   #18:first_word               unknown hacker (#35) rxd    this none this
   #18:common                   Core-Wizard (#184)   rxd    this none this
   #18:"name_list namec_list dnamec_list inamec_list dname_list iname_list" unknown hacker (#35) rxd this none this
   #18:_pronoun_sub             Core-Wizard (#184)   rxd    this none this
   #18:"name_and_number_list iname_and_number_list dname_and_number_list" Core-Wizard (#184) rxd this none this
   #18:to_list                  Core-Wizard (#184)   rxd    this none this
   #18:character_to_ascii       Core-Wizard (#184)   rxd    this none this
   #18:character_to_hex_ascii   Core-Wizard (#184)   rxd    this none this
   #18:ascii_to_character       Core-Wizard (#184)   rxd    this none this
   #18:hex_ascii_to_character   Core-Wizard (#184)   rxd    this none this
   #18:print_truncated          unknown hacker (#35) rxd    this none this
   #18:print_truncated_recursive unknown hacker (#35) rxd   this none this
   #18:"name_and_number nn iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
   #18:next_index               unknown hacker (#35) rxd    this none this
   #18:match_room               Core-Wizard (#184)   rxd    this none this
   #18:is_uppercase             unknown hacker (#35) rxd    this none this
   #18:index_all                Core-Wizard (#184)   rxd    this none this
   #18:"columnize_with_headers columnise_with_headers" unknown hacker (#35) rxd this none this
   #18:columnize_suspended      unknown hacker (#35) rxd    this none this
   #18:nonblank                 unknown hacker (#35) rxd    this none this
   #18:is_lowercase             unknown hacker (#35) rxd    this none this
   #18:columnize_no_truncate    unknown hacker (#35) rxd    this none this
   #18:print_with_names         Core-Wizard (#184)   rxd    this none this
   #18:match_stringlist         Core-Wizard (#184)   rxd    this none this
   #18:"title_list name_for_tell_contents_list name_for_look_self_list titlec_list namec_for_look_self_list namec_for_tell_contents_list name_and_number_list iname_and_number_list dname_and_number_list namec_and_number_list inamec_and_number_list dnamec_and_number_list" unknown hacker (#35) rxd this none this
   #18:glob_to_regexp           unknown hacker (#35) rxd    this none this
   #18:xglob_to_regexp          unknown hacker (#35) rxd    this none this
   #18:"match_all match_exact_or_all" Core-Wizard (#184) rxd this none this
   #18:explode_match            Core-Wizard (#184)   rxd    this none this
   #18:incr_alpha               Core-Wizard (#184)   rxd    this none this
   #18:from_words               Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_for          Core-Wizard (#184)   rxd    this none this
   #18:connection_direction     unknown hacker (#35) rxd    this none this
   #18:pretty_error             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
$STRING_UTILS:COLUMNIZE
=======================

columnize (items, n [, width]) - Turn a one-column list of items into an n-column list. 'width' is the last character position that may be occupied; it defaults to a standard screen width. Example: To tell the player a list of numbers in three columns, do 'player:tell_lines ($string_utils:columnize ({1, 2, 3, 4, 5, 6, 7}, 3));'.

-----
$STRING_UTILS:COLUMNIZE_WITH_HEADERS
====================================

Usage: columnize_with_headers(headers, fields) => lines

Format the m * n array of strings under n headers.

Doesn't truncate strings.

-----
CALLERS()
=========

Syntax:  callers ([<include-line-numbers>])   => list

Returns information on each of the verbs and built-in functions currently waiting to resume execution in the current task.  When one verb or function calls another verb or function, execution of the caller is temporarily suspended, pending the called verb or function returning a value.  At any given time, there could be several such pending verbs and functions: the one that called the currently executing verb, the verb or function that called that one, and so on.  The result of `callers()' is a list, each element of which gives information about one pending verb or function in the following format:

    {<this>, <verb-name>, <programmer>, <verb-loc>, <player>, <line-number>}

For verbs, <this> is the initial value of the variable `this' in that verb, <verb-name> is the name used to invoke that verb, <programmer> is the player with whose permissions that verb is running, <verb-loc> is the object on which that verb is defined, <player> is the initial value of the variable `player' in that verb, and <line-number> indicates which line of the verb's code is executing.  The <line-number> element is included only if the <include-line-numbers> argument was provided and true.

For functions, <this>, <programmer>, and <verb-loc> are all `#-1', <verb-name> is the name of the function, and <line-number> is an index used internally to determine the current state of the built-in function.  The simplest correct test for a built-in function entry is

    (VERB-LOC == #-1  &&  PROGRAMMER == #-1  &&  VERB-NAME != "")

The first element of the list returned by `callers()' gives information on the verb that called the currently-executing verb, the second element describes the verb that called that one, and so on.  The last element of the list describes the first verb called in this task.

0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#18:pretty_error this none this" name: "MOO verb: #18:pretty_error this none this" type: moo-code content*: "" _data-tag: 1376753168146
#$#* 1376753168146 content: {error} = args;
#$#* 1376753168146 content: {error, msg, value, tb} = error;
#$#* 1376753168146 content: pretty = {};
#$#* 1376753168146 content: for frame in (tb)
#$#* 1376753168146 content:   values = {};
#$#* 1376753168146 content:   for v in (frame)
#$#* 1376753168146 content:     values = {@values, $string_utils:print_with_names(v)};
#$#* 1376753168146 content:   endfor
#$#* 1376753168146 content:   pretty = {@pretty, values};
#$#* 1376753168146 content: endfor
#$#* 1376753168146 content: pretty = $string_utils:columnize_with_headers(pretty, {"this", "method", "owner", "definer", "player", "line"});
#$#* 1376753168146 content: return {$string_utils:from_value(error) + ": " + msg + " (" + $string_utils:from_value(value) + ")", @pretty};
#$#: 1376753168146
=> "Invalid argument"
=> "E_INVARG"
-----
$STRING_UTILS:COLUMNIZE_WITH_HEADERS
====================================

Usage: columnize_with_headers(headers, fields) => lines

Format the m * n array of strings under n headers.

Doesn't truncate strings.

0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#18:pretty_error this none this" name: "MOO verb: #18:pretty_error this none this" type: moo-code content*: "" _data-tag: 1948766228147
#$#* 1948766228147 content: {error} = args;
#$#* 1948766228147 content: {error, msg, value, tb} = error;
#$#* 1948766228147 content: pretty = {};
#$#* 1948766228147 content: for frame in (tb)
#$#* 1948766228147 content:   values = {};
#$#* 1948766228147 content:   for v in (frame)
#$#* 1948766228147 content:     values = {@values, $string_utils:print_with_names(v)};
#$#* 1948766228147 content:   endfor
#$#* 1948766228147 content:   pretty = {@pretty, values};
#$#* 1948766228147 content: endfor
#$#* 1948766228147 content: pretty = $string_utils:columnize_with_headers({"this", "method", "owner", "definer", "player", "line"}, pretty);
#$#* 1948766228147 content: return {toliteral(error) + ": " + msg + " (" + $string_utils:from_value(value) + ")", @pretty};
#$#: 1948766228147
string utilities (#18) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #18:space                    Core-Wizard (#184)   rxd    this none this
   #18:left                     Core-Wizard (#184)   rxd    this none this
   #18:right                    Core-Wizard (#184)   rxd    this none this
   #18:"centre center"          Core-Wizard (#184)   rxd    this none this
   #18:"columnize columnise"    unknown hacker (#35) rxd    this none this
   #18:from_list                Core-Wizard (#184)   rxd    this none this
   #18:english_list             Core-Wizard (#184)   rxd    this none this
   #18:names_of                 unknown hacker (#35) rxd    this none this
   #18:from_seconds             Core-Wizard (#184)   rxd    this none this
   #18:trim                     unknown hacker (#35) rxd    this none this
   #18:triml                    unknown hacker (#35) rxd    this none this
   #18:trimr                    unknown hacker (#35) rxd    this none this
   #18:strip_chars              unknown hacker (#35) rxd    this none this
   #18:strip_all_but            unknown hacker (#35) rxd    this none this
   #18:"uppercase lowercase"    Core-Wizard (#184)   rxd    this none this
   #18:"capitalize capitalise"  Core-Wizard (#184)   rxd    this none this
   #18:literal_object           unknown hacker (#35) rxd    this none this
   #18:match                    Core-Wizard (#184)   rxd    this none this
   #18:match_str*ing            Core-Wizard (#184)   rxd    this none this
   #18:match_object             Core-Wizard (#184)   rxd    this none this
   #18:match_player             unknown hacker (#35) rxd    this none this
   #18:match_player_or_object   Core-Wizard (#184)   rxd    this none this
   #18:find_prefix              Core-Wizard (#184)   rxd    this none this
   #18:index_d*elimited         unknown hacker (#35) rxd    this none this
   #18:is_numeric               unknown hacker (#35) rxd    this none this
   #18:ordinal                  unknown hacker (#35) rxd    this none this
   #18:group_number             Core-Wizard (#184)   rxd    this none this
   #18:english_number           Core-Wizard (#184)   rxd    this none this
   #18:english_ordinal          unknown hacker (#35) rxd    this none this
   #18:english_ones             Core-Wizard (#184)   rxd    this none this
   #18:english_tens             Core-Wizard (#184)   rxd    this none this
   #18:subst*itute              unknown hacker (#35) rxd    this none this
   #18:substitute_d*elimited    Core-Wizard (#184)   rxd    none none none
   #18:_cap_property            Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub              Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_secure       unknown hacker (#35) rxd    this none this
   #18:pronoun_quote            unknown hacker (#35) rxd    this none this
   #18:explode                  unknown hacker (#35) rxd    this none this
   #18:words                    unknown hacker (#35) rxd    this none this
   #18:word_start               unknown hacker (#35) rxd    this none this
   #18:to_value                 unknown hacker (#35) rxd    this none this
   #18:prefix_to_value          unknown hacker (#35) rxd    this none this
   #18:_tolist                  unknown hacker (#35) rxd    this none this
   #18:_unquote                 unknown hacker (#35) rxd    this none this
   #18:_toscalar                unknown hacker (#35) rxd    this none this
   #18:parse_command            Core-Wizard (#184)   rxd    this none this
   #18:from_value               Core-Wizard (#184)   rxd    this none this
   #18:print                    Core-Wizard (#184)   rxd    this none this
   #18:print_suspended          unknown hacker (#35) rxd    this none this
   #18:reverse                  Core-Wizard (#184)   rxd    this none this
   #18:char_list                unknown hacker (#35) rxd    this none this
   #18:regexp_quote             unknown hacker (#35) rxd    this none this
   #18:connection_hostname_bsd  unknown hacker (#35) rxd    this none this
   #18:connection_hostname      unknown hacker (#35) rxd    this none this
   #18:from_value_suspended     Core-Wizard (#184)   rxd    this none this
   #18:first_word               unknown hacker (#35) rxd    this none this
   #18:common                   Core-Wizard (#184)   rxd    this none this
   #18:"name_list namec_list dnamec_list inamec_list dname_list iname_list" unknown hacker (#35) rxd this none this
   #18:_pronoun_sub             Core-Wizard (#184)   rxd    this none this
   #18:"name_and_number_list iname_and_number_list dname_and_number_list" Core-Wizard (#184) rxd this none this
   #18:to_list                  Core-Wizard (#184)   rxd    this none this
   #18:character_to_ascii       Core-Wizard (#184)   rxd    this none this
   #18:character_to_hex_ascii   Core-Wizard (#184)   rxd    this none this
   #18:ascii_to_character       Core-Wizard (#184)   rxd    this none this
   #18:hex_ascii_to_character   Core-Wizard (#184)   rxd    this none this
   #18:print_truncated          unknown hacker (#35) rxd    this none this
   #18:print_truncated_recursive unknown hacker (#35) rxd   this none this
   #18:"name_and_number nn iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
   #18:next_index               unknown hacker (#35) rxd    this none this
   #18:match_room               Core-Wizard (#184)   rxd    this none this
   #18:is_uppercase             unknown hacker (#35) rxd    this none this
   #18:index_all                Core-Wizard (#184)   rxd    this none this
   #18:"columnize_with_headers columnise_with_headers" unknown hacker (#35) rxd this none this
   #18:columnize_suspended      unknown hacker (#35) rxd    this none this
   #18:nonblank                 unknown hacker (#35) rxd    this none this
   #18:is_lowercase             unknown hacker (#35) rxd    this none this
   #18:columnize_no_truncate    unknown hacker (#35) rxd    this none this
   #18:print_with_names         Core-Wizard (#184)   rxd    this none this
   #18:match_stringlist         Core-Wizard (#184)   rxd    this none this
   #18:"title_list name_for_tell_contents_list name_for_look_self_list titlec_list namec_for_look_self_list namec_for_tell_contents_list name_and_number_list iname_and_number_list dname_and_number_list namec_and_number_list inamec_and_number_list dnamec_and_number_list" unknown hacker (#35) rxd this none this
   #18:glob_to_regexp           unknown hacker (#35) rxd    this none this
   #18:xglob_to_regexp          unknown hacker (#35) rxd    this none this
   #18:"match_all match_exact_or_all" Core-Wizard (#184) rxd this none this
   #18:explode_match            Core-Wizard (#184)   rxd    this none this
   #18:incr_alpha               Core-Wizard (#184)   rxd    this none this
   #18:from_words               Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_for          Core-Wizard (#184)   rxd    this none this
   #18:connection_direction     unknown hacker (#35) rxd    this none this
   #18:pretty_error             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
Last modified Sat Apr 27 16:27:48 2013 PDT by Crag (#243).
#256:"receive_input" this none this
{command_str} = args;
matches = this:match_command(command_str);
if (length(matches) < 1)
  this:explain_unknown_command(command_str);
elseif (length(matches) == 1)
  this:invoke_command(matches[1]);
else
  matches = $list_utils:sort_alist(matches);
  top_confidence = matches[-1][1];
  if (matches[-2][1] == top_confidence)
    best = {};
    for match in (matches)
      if (match[1] == top_confidence)
        best = {@best, match};
      endif
    endfor
    this:explain_ambiguous_command(command_str, matches, best);
  else
    this:invoke_command(matches[1]);
  endif
endif
return 1;
Last modified Sat Apr 27 17:01:52 2013 PDT by Crag (#243).
#0:"do_command" this none this
// TODO: improve this snooping functionality
#243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
try
  return $object_utils:has_callable_verb(player, "receive_input") && player:receive_input(argstr, args);
except e (ANY)
  player:notify("There was an error in the new input parsing system:");
  player:tell_lines($string_utils:pretty_error(e));
  player:notify("Falling back to the old one.");
  return 0;
endtry
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#256:receive_input this none this" name: "MOO verb: #256:receive_input this none this" type: moo-code content*: "" _data-tag: 85225177148
#$#* 85225177148 content: {command_str} = args;
#$#* 85225177148 content: matches = this:match_command(command_str);
#$#* 85225177148 content: if (length(matches) < 1)
#$#* 85225177148 content:   this:explain_unknown_command(command_str);
#$#* 85225177148 content: elseif (length(matches) == 1)
#$#* 85225177148 content:   this:invoke_command(matches[1]);
#$#* 85225177148 content: else
#$#* 85225177148 content:   matches = $list_utils:sort_alist(matches);
#$#* 85225177148 content:   top_confidence = matches[-1][1];
#$#* 85225177148 content:   if (matches[-2][1] == top_confidence)
#$#* 85225177148 content:     best = {};
#$#* 85225177148 content:     for match in (matches)
#$#* 85225177148 content:       if (match[1] == top_confidence)
#$#* 85225177148 content:         best = {@best, match};
#$#* 85225177148 content:       endif
#$#* 85225177148 content:     endfor
#$#* 85225177148 content:     this:explain_ambiguous_command(command_str, matches, best);
#$#* 85225177148 content:   else
#$#* 85225177148 content:     this:invoke_command(matches[1]);
#$#* 85225177148 content:   endif
#$#* 85225177148 content: endif
#$#* 85225177148 content: return 1;
#$#: 85225177148
0 errors.
Verb programmed.
Last modified Sat Apr 27 16:35:55 2013 PDT by Crag (#243).
#256:"match_command" this none this
{input_str} = args;
matches = {};
for d in (this:dictionaries())
  matches = $set_utils:union(matches, d:match_input(input_str));
endfor
return matches;
=> #256 (Beaker)
Line 1:  Unknown built-in function: foo
1 error.
#-1:Input to EVAL, line 4:  Invalid indirection
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Last modified Sat Apr 27 17:12:39 2013 PDT by Crag (#243).
#256:"receive_input" this none this
{command_str, split_command_str} = args;
matches = this:match_command(command_str);
if (length(matches) < 1)
  this:explain_unknown_command(command_str);
elseif (length(matches) == 1)
  this:invoke_command(matches[1]);
else
  matches = $list_utils:sort_alist(matches);
  top_confidence = matches[-1][1];
  if (matches[-2][1] == top_confidence)
    best = {};
    for match in (matches)
      if (match[1] == top_confidence)
        best = {@best, match};
      endif
    endfor
    this:explain_ambiguous_command(command_str, matches, best);
  else
    this:invoke_command(matches[1]);
  endif
endif
return 1;
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#256:receive_input this none this" name: "MOO verb: #256:receive_input this none this" type: moo-code content*: "" _data-tag: 1049696809149
#$#* 1049696809149 content: {command_str, split_command_str} = args;
#$#* 1049696809149 content: matches = this:match_command(command_str);
#$#* 1049696809149 content: if (length(matches) < 1)
#$#* 1049696809149 content:   this:explain_unknown_command(command_str);
#$#* 1049696809149 content: elseif (length(matches) == 1)
#$#* 1049696809149 content:   this:invoke_command(matches[1]);
#$#* 1049696809149 content: else
#$#* 1049696809149 content:   matches = $list_utils:sort_alist(matches);
#$#* 1049696809149 content:   top_confidence = matches[-1][1];
#$#* 1049696809149 content:   if (matches[-2][1] == top_confidence)
#$#* 1049696809149 content:     best = {};
#$#* 1049696809149 content:     for match in (matches)
#$#* 1049696809149 content:       if (match[1] == top_confidence)
#$#* 1049696809149 content:         best = {@best, match};
#$#* 1049696809149 content:       endif
#$#* 1049696809149 content:     endfor
#$#* 1049696809149 content:     this:explain_ambiguous_command(command_str, matches, best);
#$#* 1049696809149 content:   else
#$#* 1049696809149 content:     this:invoke_command(matches[1]);
#$#* 1049696809149 content:   endif
#$#* 1049696809149 content: endif
#$#* 1049696809149 content: return 1;
#$#: 1049696809149
0 errors.
Verb programmed.
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
  #256:receive_input            Crag (#243)          rxd    this none this
  #256:match_command            Crag (#243)          rxd    this none this
  #256:explain_ambiguous_command Crag (#243)         rxd    this none this
  #256:explain_unknown_command  Crag (#243)          rxd    this none this
  #256:invoke_command           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#256:match_command this none this" name: "MOO verb: #256:match_command this none this" type: moo-code content*: "" _data-tag: 195030263150
#$#* 195030263150 content: {input_str} = args;
#$#* 195030263150 content: matches = {};
#$#* 195030263150 content: for d in (this:dictionaries())
#$#* 195030263150 content:   matches = $set_utils:union(matches, d:match_input(input_str));
#$#* 195030263150 content: endfor
#$#* 195030263150 content: return matches;
#$#: 195030263150
.dictionaries            Beaker (#256)         r c    {#511}
-------------------------------- finished ---------------------------------
Beaker's Commands (#511) [ readable ]
  Child of Generic Command Handler (#510).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Generic Command Handler (#510) [ readable ]
  Child of Generic Input Handler (#509).
  Location Crag (#243).
  #510:do_command               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 16:07:53 2013 PDT by Crag (#243).
#510:"do_command" this none this
{command_str} = args;
matches = this:match_command(command_str);
if (length(matches) > 1)
  this:report_ambiguous_command(command_str, matches);
elseif (length(matches) < 1)
  this:unknown_command(command_str);
else
  this:invoke_command(matches[1]);
endif
return 1;
Verb #510:do_command [1] {this none this} removed.
Verb added [1] (0).
Verb name changed.
Verb name changed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#510:match_command ()" name: "MOO verb: #510:match_command ()" type: moo-code content*: "" _data-tag: 1398204682151
#$#: 1398204682151
Last modified Sat Apr 27 16:35:55 2013 PDT by Crag (#243).
#256:"match_command" this none this
{input_str} = args;
matches = {};
for d in (this:dictionaries())
  matches = $set_utils:union(matches, d:match_input(input_str));
endfor
return matches;
Generic Command Handler (#510) [ readable ]
  Child of Generic Input Handler (#509).
  Location Crag (#243).
.commands                Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
-----
MATCH()
=======

Syntax:  match (str <subject>, str <pattern> [, <case-matters>])   => list
        rmatch (str <subject>, str <pattern> [, <case-matters>])   => list

The function `match()' (`rmatch()') searches for the first (last) occurrence of the regular expression <pattern> in the string <subject>.  If <pattern> is syntactically malformed, then `E_INVARG' is raised.  The process of matching can in some cases consume a great deal of memory in the server; should this memory consumption become excessive, then the matching process is aborted and `E_QUOTA' is raised.

If no match is found, the empty list is returned; otherwise, these functions return a list containing information about the match (see below).  By default, the search ignores upper-/lower-case distinctions.  If <case-matters> is provided and true, then case is treated as significant in all comparisons.

The list that `match()' (`rmatch()') returns contains the details about the match made.  The list is in the form:

    {<start>, <end>, <replacements>, <subject>}

where <start> is the index in <subject> of the beginning of the match, <end> is the index of the end of the match, <replacements> is a list described below, and <subject> is the same string that was given as the first argument to the `match()' or `rmatch()'.

The <replacements> list is always nine items long, each item itself being a list of two integers, the start and end indices in <string> matched by some parenthesized sub-pattern of <pattern>.  The first item in <replacements> carries the indices for the first parenthesized sub-pattern, the second item carries those for the second sub-pattern, and so on.  If there are fewer than nine parenthesized sub-patterns in <pattern>, or if some sub-pattern was not used in the match, then the corresponding item in <replacements> is the list {0, -1}.  See the discussion of `%)' in `help regular-expressions'[1], for more information on parenthesized sub-patterns.

    match("foo", "^f*o$")        =>  {}
    match("foo", "^fo*$")        =>  {1, 3, {{0, -1}, ...}, "foo"}
    match("foobar", "o*b")       =>  {2, 4, {{0, -1}, ...}, "foobar"}
    rmatch("foobar", "o*b")      =>  {4, 4, {{0, -1}, ...}, "foobar"}
    match("foobar", "f%(o*%)b")
            =>  {1, 4, {{2, 3}, {0, -1}, ...}, "foobar"}

See `help regular-expressions'[2] for information on the syntax and semantics of patterns.

0 errors.
Verb programmed.
You now have Generic Command with object number #531 and parent root class (#1).
The created object is now your current object.
Alias "command" added to Generic Command(#531).
Aliases for Generic Command(#531) are now {"Generic Command", "command"}
Property added with value #531.
You now have Generic English Command with object number #532 and parent Generic Command (#531).
The created object is now your current object.
Property added with value #532.
You now have Grouping Command with object number #533 and parent Generic English Command (#532).
The created object is now your current object.
0 errors.
Verb programmed.
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#531:match_command ()" name: "MOO verb: #531:match_command ()" type: moo-code content*: "" _data-tag: 1351832706152
#$#: 1351832706152
0 errors.
Verb programmed.
Your current object stack is empty.
Objects owned by Crag (from #0 to #533):
 12K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table              [Nowhere]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
-- 35 objects.  Total bytes: 51,175.------------------------------------------
Your current object is now a Generic Command Handler (#510).
Generic Command Handler (#510) [ readable ]
  Child of Generic Input Handler (#509).
  Location Crag (#243).
  #510:match_command            Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#510:match_command this none this" name: "MOO verb: #510:match_command this none this" type: moo-code content*: "" _data-tag: 2061746907153
#$#* 2061746907153 content: {command_str} = args;
#$#* 2061746907153 content: matches = {};
#$#* 2061746907153 content: for candidate in (this.commands)
#$#* 2061746907153 content:   {cmd_obj, ?info = {}} = candidate;
#$#* 2061746907153 content:   matched = cmd_obj:match_command(command_str, info);
#$#* 2061746907153 content:   if (matched)
#$#* 2061746907153 content:     matches = {@matches, matched};
#$#* 2061746907153 content:   endif
#$#* 2061746907153 content: endfor
#$#* 2061746907153 content: return matches;
#$#: 2061746907153
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#531:match_command this none this" name: "MOO verb: #531:match_command this none this" type: moo-code content*: "" _data-tag: 738462847154
#$#* 738462847154 content: return {};
#$#: 738462847154
0 errors.
Verb programmed.
=> #510 (Generic Command Handler)
Verb added [3] (2).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:find_all_commands ()" name: "MOO verb: #243:find_all_commands ()" type: moo-code content*: "" _data-tag: 1004855738155
#$#: 1004855738155
Line 1:  syntax error
1 error.
-----
VERB_INFO()
===========

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

=> {#243, "rxd", "core_objects"}
=> {"this", "none", "this"}
stormagnet arrives from the Great Hall.
stormagnet goes south.
string utilities (#18) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #18:space                    Core-Wizard (#184)   rxd    this none this
   #18:left                     Core-Wizard (#184)   rxd    this none this
   #18:right                    Core-Wizard (#184)   rxd    this none this
   #18:"centre center"          Core-Wizard (#184)   rxd    this none this
   #18:"columnize columnise"    unknown hacker (#35) rxd    this none this
   #18:from_list                Core-Wizard (#184)   rxd    this none this
   #18:english_list             Core-Wizard (#184)   rxd    this none this
   #18:names_of                 unknown hacker (#35) rxd    this none this
   #18:from_seconds             Core-Wizard (#184)   rxd    this none this
   #18:trim                     unknown hacker (#35) rxd    this none this
   #18:triml                    unknown hacker (#35) rxd    this none this
   #18:trimr                    unknown hacker (#35) rxd    this none this
   #18:strip_chars              unknown hacker (#35) rxd    this none this
   #18:strip_all_but            unknown hacker (#35) rxd    this none this
   #18:"uppercase lowercase"    Core-Wizard (#184)   rxd    this none this
   #18:"capitalize capitalise"  Core-Wizard (#184)   rxd    this none this
   #18:literal_object           unknown hacker (#35) rxd    this none this
   #18:match                    Core-Wizard (#184)   rxd    this none this
   #18:match_str*ing            Core-Wizard (#184)   rxd    this none this
   #18:match_object             Core-Wizard (#184)   rxd    this none this
   #18:match_player             unknown hacker (#35) rxd    this none this
   #18:match_player_or_object   Core-Wizard (#184)   rxd    this none this
   #18:find_prefix              Core-Wizard (#184)   rxd    this none this
   #18:index_d*elimited         unknown hacker (#35) rxd    this none this
   #18:is_numeric               unknown hacker (#35) rxd    this none this
   #18:ordinal                  unknown hacker (#35) rxd    this none this
   #18:group_number             Core-Wizard (#184)   rxd    this none this
   #18:english_number           Core-Wizard (#184)   rxd    this none this
   #18:english_ordinal          unknown hacker (#35) rxd    this none this
   #18:english_ones             Core-Wizard (#184)   rxd    this none this
   #18:english_tens             Core-Wizard (#184)   rxd    this none this
   #18:subst*itute              unknown hacker (#35) rxd    this none this
   #18:substitute_d*elimited    Core-Wizard (#184)   rxd    none none none
   #18:_cap_property            Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub              Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_secure       unknown hacker (#35) rxd    this none this
   #18:pronoun_quote            unknown hacker (#35) rxd    this none this
   #18:explode                  unknown hacker (#35) rxd    this none this
   #18:words                    unknown hacker (#35) rxd    this none this
   #18:word_start               unknown hacker (#35) rxd    this none this
   #18:to_value                 unknown hacker (#35) rxd    this none this
   #18:prefix_to_value          unknown hacker (#35) rxd    this none this
   #18:_tolist                  unknown hacker (#35) rxd    this none this
   #18:_unquote                 unknown hacker (#35) rxd    this none this
   #18:_toscalar                unknown hacker (#35) rxd    this none this
   #18:parse_command            Core-Wizard (#184)   rxd    this none this
   #18:from_value               Core-Wizard (#184)   rxd    this none this
   #18:print                    Core-Wizard (#184)   rxd    this none this
   #18:print_suspended          unknown hacker (#35) rxd    this none this
   #18:reverse                  Core-Wizard (#184)   rxd    this none this
   #18:char_list                unknown hacker (#35) rxd    this none this
   #18:regexp_quote             unknown hacker (#35) rxd    this none this
   #18:connection_hostname_bsd  unknown hacker (#35) rxd    this none this
   #18:connection_hostname      unknown hacker (#35) rxd    this none this
   #18:from_value_suspended     Core-Wizard (#184)   rxd    this none this
   #18:first_word               unknown hacker (#35) rxd    this none this
   #18:common                   Core-Wizard (#184)   rxd    this none this
   #18:"name_list namec_list dnamec_list inamec_list dname_list iname_list" unknown hacker (#35) rxd this none this
   #18:_pronoun_sub             Core-Wizard (#184)   rxd    this none this
   #18:"name_and_number_list iname_and_number_list dname_and_number_list" Core-Wizard (#184) rxd this none this
   #18:to_list                  Core-Wizard (#184)   rxd    this none this
   #18:character_to_ascii       Core-Wizard (#184)   rxd    this none this
   #18:character_to_hex_ascii   Core-Wizard (#184)   rxd    this none this
   #18:ascii_to_character       Core-Wizard (#184)   rxd    this none this
   #18:hex_ascii_to_character   Core-Wizard (#184)   rxd    this none this
   #18:print_truncated          unknown hacker (#35) rxd    this none this
   #18:print_truncated_recursive unknown hacker (#35) rxd   this none this
   #18:"name_and_number nn iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
   #18:next_index               unknown hacker (#35) rxd    this none this
   #18:match_room               Core-Wizard (#184)   rxd    this none this
   #18:is_uppercase             unknown hacker (#35) rxd    this none this
   #18:index_all                Core-Wizard (#184)   rxd    this none this
   #18:"columnize_with_headers columnise_with_headers" unknown hacker (#35) rxd this none this
   #18:columnize_suspended      unknown hacker (#35) rxd    this none this
   #18:nonblank                 unknown hacker (#35) rxd    this none this
   #18:is_lowercase             unknown hacker (#35) rxd    this none this
   #18:columnize_no_truncate    unknown hacker (#35) rxd    this none this
   #18:print_with_names         Core-Wizard (#184)   rxd    this none this
   #18:match_stringlist         Core-Wizard (#184)   rxd    this none this
   #18:"title_list name_for_tell_contents_list name_for_look_self_list titlec_list namec_for_look_self_list namec_for_tell_contents_list name_and_number_list iname_and_number_list dname_and_number_list namec_and_number_list inamec_and_number_list dnamec_and_number_list" unknown hacker (#35) rxd this none this
   #18:glob_to_regexp           unknown hacker (#35) rxd    this none this
   #18:xglob_to_regexp          unknown hacker (#35) rxd    this none this
   #18:"match_all match_exact_or_all" Core-Wizard (#184) rxd this none this
   #18:explode_match            Core-Wizard (#184)   rxd    this none this
   #18:incr_alpha               Core-Wizard (#184)   rxd    this none this
   #18:from_words               Core-Wizard (#184)   rxd    this none this
   #18:pronoun_sub_for          Core-Wizard (#184)   rxd    this none this
   #18:connection_direction     unknown hacker (#35) rxd    this none this
   #18:pretty_error             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
=> "#56 (Generic Garbage Object)"
Edit Options (#58) [ readable ]
  Owned by unknown hacker (#35).
  Child of Generic Option Package (#60).
-------------------------------- finished ---------------------------------
Edit Options (#58) [ readable ]
  Owned by unknown hacker (#35).
  Child of Generic Option Package (#60).
.show_quiet_insert       unknown hack (#35)    r c    {"Report line numbers on insert or append.", "No echo on insert or append."}
.show_eval_subs          unknown hack (#35)    r c    {"Ignore .eval_subs when compiling verbs.", "Use .eval_subs when compiling verbs."}
.show_local              unknown hack (#35)    r c    {"Use in-MOO text editors.", "Ship text to client for local editing."}
-------------------------------- finished ---------------------------------
Generic Garbage Object (#56) [ readable ]
  Owned by unknown hacker (#35).
  Child of ** none ** (#-1).
   #56:description              unknown hacker (#35) rxd    this none this
   #56:look_self                unknown hacker (#35) rxd    this none this
   #56:"title titlec name namec dname*c iname*c" unknown hacker (#35) rxd this none this
   #56:set_verb_info(old)       Core-Wizard (#184)   r      this none this
   #56:add_verb(old)            Core-Wizard (#184)   r      this none this
   #56:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" Core-Wizard (#184) rxd this none this
-------------------------------- finished ---------------------------------
Last modified Thu Jul 19 07:52:28 2001 PDT by Xplat (#4014) (on Waterpoint).
#3:"description" this none this
// If there's more than one paragraph of description, then add integration messages to the end as a separate paragraph(s).
// If there are more than one paragraph of integration messages, add them as separate paragraphs to the end of the description.
// Otherwise, append the integration message to the end of the description paragraph.
desc = pass(@args);
if (!this.integrate_paragraphs)
  integrate = $integration_utils:integrate(args, "integrate_room_msg");
  integrate_sep = $string_utils:pronoun_sub(this.integrate_sep_msg);
  if (integrate)
    if ((sep_is_list = typeof(integrate_sep) == LIST) || !integrate_sep || length(desc) > 1 || length(integrate) > 1)
      if (sep_is_list)
        desc = {@desc, @integrate_sep, @integrate};
      else
        desc = {@desc, @integrate};
      endif
    else
      if (desc)
        desc = {desc[1] + integrate_sep + integrate[1]};
      else
        desc = integrate;
      endif
    endif
  endif
  return desc;
else
  if (!desc)
    desc = {""};
  endif
  explicit = $list_utils:flatten(integrate = this.integrate_paragraphs);
  integrate_objects = {@this:contents(), @this:exits()};
  for i in [1..length(integrate)]
    ni = {};
    for elt in (integrate[i])
      if (elt in integrate_objects || typeof(elt) in {LIST, STR})
        ni = {@ni, elt};
      endif
    endfor
    integrate[i] = ni;
  endfor
  // integrate[i] = $set_utils:intersection(integrate[i], $set_utils:union(this:contents(), this:exits()));
  if (misc = $set_utils:diff($list_utils:flatten(args), explicit))
    integrate[l = length(integrate)] = {@integrate[l], @misc};
  endif
  if (length(desc) == 1)
    integrate[1] = {@desc, @integrate[1]};
  else
    integrate[1] = {desc[$], @integrate[1]};
    for i in [1..length(desc) - 1]
      integrate = {{desc[$ - i]}, @integrate};
    endfor
  endif
  return $integration_utils:integrate(integrate, "integrate_room_msg");
endif
-----
$STRING_UTILS:COLUMNIZE_WITH_HEADERS
====================================

Usage: columnize_with_headers(headers, fields) => lines

Format the m * n array of strings under n headers.

Doesn't truncate strings.

Error programming Crag:find_all_commands[3](2).
Line 13:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
  #243:find_all_commands        Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Line 1:  syntax error
1 error.
#243:find_all_commands, line 12:  Variable not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
names                                                                                                                                                                              dobj  prep                     iobj  definer
-----                                                                                                                                                                              ----  ----                     ----  -------
say                                                                                                                                                                                any   any                      any   generic room (#3)
emote                                                                                                                                                                              any   any                      any   generic room (#3)
l*ook                                                                                                                                                                              any   any                      any   generic room (#3)
topic                                                                                                                                                                              any   any                      any   generic room (#3)
@create                                                                                                                                                                            any   any                      any   generic builder (#4)
@recreate                                                                                                                                                                          any   as                       any   generic builder (#4)
@dig                                                                                                                                                                               any   any                      any   generic builder (#4)
@auditDB                                                                                                                                                                           any   any                      any   generic builder (#4)
@lock                                                                                                                                                                              any   with/using               any   generic builder (#4)
@newmess*age                                                                                                                                                                       any   any                      any   generic builder (#4)
@unmess*age                                                                                                                                                                        any   any                      any   generic builder (#4)
@audit                                                                                                                                                                             any   any                      any   generic builder (#4)
@building-o*ptions @buildingo*ptions                                                                                                                                               any   any                      any   generic builder (#4)
@move                                                                                                                                                                              any   at/to                    any   generic builder (#4)
@measure                                                                                                                                                                           any   any                      any   generic builder (#4)
@grant                                                                                                                                                                             any   at/to                    any   generic builder (#4)
@set*property                                                                                                                                                                      any   at/to                    any   generic builder (#4)
@wrap                                                                                                                                                                              none  any                      none  generic player (#6)
@gag                                                                                                                                                                               any   any                      any   generic player (#6)
@paranoid                                                                                                                                                                          any   any                      any   generic player (#6)
@eject                                                                                                                                                                             any   out of/from inside/from  any   generic player (#6)
where*is @where*is                                                                                                                                                                 any   any                      any   generic player (#6)
@mail                                                                                                                                                                              any   any                      any   generic player (#6)
@read @peek                                                                                                                                                                        any   any                      any   generic player (#6)
@next @prev                                                                                                                                                                        any   any                      any   generic player (#6)
@rmm*ail                                                                                                                                                                           any   any                      any   generic player (#6)
@unrmm*ail                                                                                                                                                                         any   any                      any   generic player (#6)
@send                                                                                                                                                                              any   any                      any   generic player (#6)
@answer @repl*y                                                                                                                                                                    any   any                      any   generic player (#6)
@forward                                                                                                                                                                           any   any                      any   generic player (#6)
@gripe                                                                                                                                                                             any   any                      any   generic player (#6)
@typo @bug @suggest*ion @idea @comment                                                                                                                                             any   any                      any   generic player (#6)
@skip @unsub*scribe                                                                                                                                                                any   any                      any   generic player (#6)
@subscribe                                                                                                                                                                         any   any                      any   generic player (#6)
@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @misco*ptions @misc-o*ptions @cliento*ptions @client-o*ptions @whoo*ptions @who-o*ptions @parseo*ptions @parse-o*ptions  any   any                      any   generic player (#6)
@rename*#                                                                                                                                                                          any   at/to                    any   generic player (#6)
@add-alias*# @addalias*# @add_alias*#                                                                                                                                              any   at/to                    any   generic player (#6)
@rmalias*# @rm-alias*#                                                                                                                                                             any   out of/from inside/from  any   generic player (#6)
@desc*ribe                                                                                                                                                                         any   as                       any   generic player (#6)
@password                                                                                                                                                                          any   any                      any   generic player (#6)
@features                                                                                                                                                                          any   for/about                any   generic player (#6)
@quicksend @qsend                                                                                                                                                                  any   any                      any   generic player (#6)
!*                                                                                                                                                                                 any   any                      any   generic player (#6)
'*                                                                                                                                                                                 any   any                      any   generic player (#6)
@pronoun_sub @pronoun-sub                                                                                                                                                          none  with/using               any   generic player (#6)
mu*rmur                                                                                                                                                                            any   any                      any   generic player (#6)
@option*s                                                                                                                                                                          any   any                      any   generic player (#6)
@edit*#                                                                                                                                                                            any   any                      any   generic player (#6)
@forward-me @forwardme                                                                                                                                                             any   any                      any   generic player (#6)
walk go                                                                                                                                                                            none  at/to                    any   generic player (#6)
@@sendmail                                                                                                                                                                         any   any                      any   generic player (#6)
unfol*low                                                                                                                                                                          any   any                      any   generic player (#6)
followers                                                                                                                                                                          any   any                      any   generic player (#6)
@helpme @911                                                                                                                                                                       any   any                      any   generic player (#6)
@url                                                                                                                                                                               any   any                      any   generic player (#6)
@resend                                                                                                                                                                            any   any                      any   generic player (#6)
help ?*                                                                                                                                                                            any   any                      any   generic player (#6)
page                                                                                                                                                                               any   any                      any   generic player (#6)
idle reidle                                                                                                                                                                        any   any                      any   generic player (#6)
doing undoing                                                                                                                                                                      any   any                      any   generic player (#6)
@who                                                                                                                                                                               any   any                      any   generic player (#6)
@netforw*ard                                                                                                                                                                       any   any                      any   generic player (#6)
@register                                                                                                                                                                          any   as                       any   generic player (#6)
@shout                                                                                                                                                                             any   any                      any   generic player (#6)
@ch*eck-full                                                                                                                                                                       any   any                      any   generic player (#6)
@handlers                                                                                                                                                                          any   for/about                any   generic player (#6)
+*                                                                                                                                                                                 any   any                      any   generic player (#6)
lose                                                                                                                                                                               any   any                      any   generic player (#6)
@room*# @rooms*#                                                                                                                                                                   any   any                      any   generic player (#6)
@password                                                                                                                                                                          any   any                      any   generic guest (#31)
create                                                                                                                                                                             any   any                      any   generic guest (#31)
@register @request*-character                                                                                                                                                      any   for/about                any   generic guest (#31)
@name                                                                                                                                                                              any   any                      any   generic guest (#31)
@desc*ribe                                                                                                                                                                         any   as                       any   generic guest (#31)
subj*ect:                                                                                                                                                                          any   any                      any   Mail Room (#43)
to*:                                                                                                                                                                               any   any                      any   Mail Room (#43)
also*-to: cc*:                                                                                                                                                                     any   any                      any   Mail Room (#43)
reply-to*: replyto*:                                                                                                                                                               any   any                      any   Mail Room (#43)
subsc*ribe                                                                                                                                                                         any   at/to                    any   Mail Room (#43)
unsubsc*ribe                                                                                                                                                                       any   out of/from inside/from  any   Mail Room (#43)
expl*ode                                                                                                                                                                           any   any                      any   Note Editor (#44)
j*oinliteral                                                                                                                                                                       any   any                      any   Note Editor (#44)
e*dit                                                                                                                                                                              any   any                      any   Verb Editor (#45)
com*pile                                                                                                                                                                           none  any                      any   Verb Editor (#45)
say                                                                                                                                                                                any   any                      any   Generic Editor (#46)
emote                                                                                                                                                                              any   any                      any   Generic Editor (#46)
lis*t view                                                                                                                                                                         any   any                      any   Generic Editor (#46)
del*ete                                                                                                                                                                            any   any                      any   Generic Editor (#46)
f*ind                                                                                                                                                                              any   any                      any   Generic Editor (#46)
s*ubst                                                                                                                                                                             any   any                      any   Generic Editor (#46)
m*ove c*opy                                                                                                                                                                        any   any                      any   Generic Editor (#46)
j*oinliteral                                                                                                                                                                       any   any                      any   Generic Editor (#46)
fill                                                                                                                                                                               any   any                      any   Generic Editor (#46)
topic                                                                                                                                                                              any   any                      any   Generic Editor (#46)
@chown*#                                                                                                                                                                           any   any                      any   generic wizard (#51)
@grant @grants*                                                                                                                                                                    any   at/to                    any   generic wizard (#51)
@shutdown                                                                                                                                                                          any   any                      any   generic wizard (#51)
@who-calls                                                                                                                                                                         any   any                      any   generic wizard (#51)
@toad*                                                                                                                                                                             any   any                      any   generic wizard (#51)
@untoad @detoad                                                                                                                                                                    any   any                      any   generic wizard (#51)
@quota                                                                                                                                                                             any   is                       any   generic wizard (#51)
@players                                                                                                                                                                           any   any                      any   generic wizard (#51)
@grepcore @egrepcore                                                                                                                                                               any   any                      any   generic wizard (#51)
@net-who @@who                                                                                                                                                                     any   any                      any   generic wizard (#51)
@make-player                                                                                                                                                                       any   any                      any   generic wizard (#51)
@abort-sh*utdown                                                                                                                                                                   any   any                      any   generic wizard (#51)
@unnewt @denewt @get-better                                                                                                                                                        any   any                      any   generic wizard (#51)
@log                                                                                                                                                                               any   any                      any   generic wizard (#51)
@blacklist @graylist @redlist @unblacklist @ungraylist @unredlist @spooflist @unspooflist                                                                                          any   any                      any   generic wizard (#51)
@copyo*bject                                                                                                                                                                       any   any                      any   generic wizard (#51)
@corify                                                                                                                                                                            any   as                       any   generic wizard (#51)
@make-guest                                                                                                                                                                        any   any                      any   generic wizard (#51)
@wiz-boot                                                                                                                                                                          any   any                      any   generic wizard (#51)
@zap                                                                                                                                                                               any   any                      any   generic wizard (#51)
@chmod-raw                                                                                                                                                                         any   any                      any   generic wizard (#51)
@grepjhcore @egrepjhcore                                                                                                                                                           any   any                      any   generic wizard (#51)
@prop*erty                                                                                                                                                                         any   any                      any   generic programmer (#52)
@chmod*#                                                                                                                                                                           any   any                      any   generic programmer (#52)
@args @args#                                                                                                                                                                       any   any                      any   generic programmer (#52)
@chparent                                                                                                                                                                          any   at/to                    any   generic programmer (#52)
eval eval-d eval+d                                                                                                                                                                 any   any                      any   generic programmer (#52)
@rmprop*erty                                                                                                                                                                       any   any                      any   generic programmer (#52)
@verb                                                                                                                                                                              any   any                      any   generic programmer (#52)
@rmverb @rmverb#                                                                                                                                                                   any   any                      any   generic programmer (#52)
@list*#                                                                                                                                                                            any   any                      any   generic programmer (#52)
@copy @copy-x                                                                                                                                                                      any   at/to                    any   generic programmer (#52)
@prog*ram @program#                                                                                                                                                                any   any                      any   generic programmer (#52)
@setenv                                                                                                                                                                            any   any                      any   generic programmer (#52)
@pros*pectus pros*pectus                                                                                                                                                           any   any                      any   generic programmer (#52)
@prospectusDB                                                                                                                                                                      any   any                      any   generic programmer (#52)
@grep @egrep                                                                                                                                                                       any   any                      any   generic programmer (#52)
@s*how                                                                                                                                                                             any   any                      any   generic programmer (#52)
@check-chp*arent                                                                                                                                                                   any   at/to                    any   generic programmer (#52)
@disown @disinherit                                                                                                                                                                any   any                      any   generic programmer (#52)
@dump(new)                                                                                                                                                                         any   any                      any   generic programmer (#52)
@displayo*ptions @display-o*ptions @listo*ptions @list-o*ptions @evalo*ptions @eval-o*ptions                                                                                       any   any                      any   generic programmer (#52)
#*                                                                                                                                                                                 any   any                      any   generic programmer (#52)
@jdump                                                                                                                                                                             any   any                      any   generic programmer (#52)
@forked                                                                                                                                                                            any   any                      any   generic programmer (#52)
@dump                                                                                                                                                                              any   any                      any   generic programmer (#52)
eval_d                                                                                                                                                                             any   any                      any   code utilities (#53)
add_cleanup                                                                                                                                                                        any   any                      any   housekeeper (#63)
`* -*                                                                                                                                                                              any   any                      any   Stage-Talk Feature (#67)
[*                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
]*                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
~*                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
to                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
think-big                                                                                                                                                                          any   any                      any   Thinking Feature (#68)
think %* thikn                                                                                                                                                                     any   any                      any   Thinking Feature (#68)
think-med                                                                                                                                                                          any   any                      any   Thinking Feature (#68)
@login-o*ptions @Logino*ptions                                                                                                                                                     any   any                      any   login watcher mark 2 (#83)
@inter*esting                                                                                                                                                                      any   any                      any   login watcher mark 2 (#83)
@uninter*esting                                                                                                                                                                    any   any                      any   login watcher mark 2 (#83)
@login                                                                                                                                                                             any   any                      any   login watcher mark 2 (#83)
@wwho                                                                                                                                                                              any   any                      any   login watcher mark 2 (#83)
@boot*!                                                                                                                                                                            any   for/about                any   Community Group Commands (#149)
@newt                                                                                                                                                                              any   any                      any   Community Group Commands (#149)
@unnewt @denewt @get-better                                                                                                                                                        any   any                      any   Community Group Commands (#149)
@net-who @@who @@who-cg                                                                                                                                                            any   any                      any   Community Group Commands (#149)
@new-password @newpassword @new-password-cg                                                                                                                                        any   is                       any   Community Group Commands (#149)
@ungag                                                                                                                                                                             any   out of/from inside/from  any   Community Group Commands (#149)
@make-player @make-player-cg                                                                                                                                                       any   any                      any   Community Group Commands (#149)
@copyhelp                                                                                                                                                                          any   at/to                    any   documentation feature (#169)
@linkhelp                                                                                                                                                                          any   at/to                    any   documentation feature (#169)
@addcommand                                                                                                                                                                        any   any                      any   Generic Delegate (#270)
@addproperty                                                                                                                                                                       any   any                      any   Generic Delegate (#270)
@addmethod                                                                                                                                                                         any   any                      any   Generic Delegate (#270)
-----                                                                                                                                                                              ----  ----                     ----  -------
=> 0
0 errors.
Verb programmed.
names                                                                                                                                                                              dobj  prep                     iobj  definer
-----                                                                                                                                                                              ----  ----                     ----  -------
say                                                                                                                                                                                any   any                      any   generic room (#3)
emote                                                                                                                                                                              any   any                      any   generic room (#3)
l*ook                                                                                                                                                                              any   any                      any   generic room (#3)
topic                                                                                                                                                                              any   any                      any   generic room (#3)
@create                                                                                                                                                                            any   any                      any   generic builder (#4)
@recreate                                                                                                                                                                          any   as                       any   generic builder (#4)
@dig                                                                                                                                                                               any   any                      any   generic builder (#4)
@auditDB                                                                                                                                                                           any   any                      any   generic builder (#4)
@lock                                                                                                                                                                              any   with/using               any   generic builder (#4)
@newmess*age                                                                                                                                                                       any   any                      any   generic builder (#4)
@unmess*age                                                                                                                                                                        any   any                      any   generic builder (#4)
@audit                                                                                                                                                                             any   any                      any   generic builder (#4)
@building-o*ptions @buildingo*ptions                                                                                                                                               any   any                      any   generic builder (#4)
@move                                                                                                                                                                              any   at/to                    any   generic builder (#4)
@measure                                                                                                                                                                           any   any                      any   generic builder (#4)
@grant                                                                                                                                                                             any   at/to                    any   generic builder (#4)
@set*property                                                                                                                                                                      any   at/to                    any   generic builder (#4)
@wrap                                                                                                                                                                              none  any                      none  generic player (#6)
@gag                                                                                                                                                                               any   any                      any   generic player (#6)
@paranoid                                                                                                                                                                          any   any                      any   generic player (#6)
@eject                                                                                                                                                                             any   out of/from inside/from  any   generic player (#6)
where*is @where*is                                                                                                                                                                 any   any                      any   generic player (#6)
@mail                                                                                                                                                                              any   any                      any   generic player (#6)
@read @peek                                                                                                                                                                        any   any                      any   generic player (#6)
@next @prev                                                                                                                                                                        any   any                      any   generic player (#6)
@rmm*ail                                                                                                                                                                           any   any                      any   generic player (#6)
@unrmm*ail                                                                                                                                                                         any   any                      any   generic player (#6)
@send                                                                                                                                                                              any   any                      any   generic player (#6)
@answer @repl*y                                                                                                                                                                    any   any                      any   generic player (#6)
@forward                                                                                                                                                                           any   any                      any   generic player (#6)
@gripe                                                                                                                                                                             any   any                      any   generic player (#6)
@typo @bug @suggest*ion @idea @comment                                                                                                                                             any   any                      any   generic player (#6)
@skip @unsub*scribe                                                                                                                                                                any   any                      any   generic player (#6)
@subscribe                                                                                                                                                                         any   any                      any   generic player (#6)
@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @misco*ptions @misc-o*ptions @cliento*ptions @client-o*ptions @whoo*ptions @who-o*ptions @parseo*ptions @parse-o*ptions  any   any                      any   generic player (#6)
@rename*#                                                                                                                                                                          any   at/to                    any   generic player (#6)
@add-alias*# @addalias*# @add_alias*#                                                                                                                                              any   at/to                    any   generic player (#6)
@rmalias*# @rm-alias*#                                                                                                                                                             any   out of/from inside/from  any   generic player (#6)
@desc*ribe                                                                                                                                                                         any   as                       any   generic player (#6)
@password                                                                                                                                                                          any   any                      any   generic player (#6)
@features                                                                                                                                                                          any   for/about                any   generic player (#6)
@quicksend @qsend                                                                                                                                                                  any   any                      any   generic player (#6)
!*                                                                                                                                                                                 any   any                      any   generic player (#6)
'*                                                                                                                                                                                 any   any                      any   generic player (#6)
@pronoun_sub @pronoun-sub                                                                                                                                                          none  with/using               any   generic player (#6)
mu*rmur                                                                                                                                                                            any   any                      any   generic player (#6)
@option*s                                                                                                                                                                          any   any                      any   generic player (#6)
@edit*#                                                                                                                                                                            any   any                      any   generic player (#6)
@forward-me @forwardme                                                                                                                                                             any   any                      any   generic player (#6)
walk go                                                                                                                                                                            none  at/to                    any   generic player (#6)
@@sendmail                                                                                                                                                                         any   any                      any   generic player (#6)
unfol*low                                                                                                                                                                          any   any                      any   generic player (#6)
followers                                                                                                                                                                          any   any                      any   generic player (#6)
@helpme @911                                                                                                                                                                       any   any                      any   generic player (#6)
@url                                                                                                                                                                               any   any                      any   generic player (#6)
@resend                                                                                                                                                                            any   any                      any   generic player (#6)
help ?*                                                                                                                                                                            any   any                      any   generic player (#6)
page                                                                                                                                                                               any   any                      any   generic player (#6)
idle reidle                                                                                                                                                                        any   any                      any   generic player (#6)
doing undoing                                                                                                                                                                      any   any                      any   generic player (#6)
@who                                                                                                                                                                               any   any                      any   generic player (#6)
@netforw*ard                                                                                                                                                                       any   any                      any   generic player (#6)
@register                                                                                                                                                                          any   as                       any   generic player (#6)
@shout                                                                                                                                                                             any   any                      any   generic player (#6)
@ch*eck-full                                                                                                                                                                       any   any                      any   generic player (#6)
@handlers                                                                                                                                                                          any   for/about                any   generic player (#6)
+*                                                                                                                                                                                 any   any                      any   generic player (#6)
lose                                                                                                                                                                               any   any                      any   generic player (#6)
@room*# @rooms*#                                                                                                                                                                   any   any                      any   generic player (#6)
@password                                                                                                                                                                          any   any                      any   generic guest (#31)
create                                                                                                                                                                             any   any                      any   generic guest (#31)
@register @request*-character                                                                                                                                                      any   for/about                any   generic guest (#31)
@name                                                                                                                                                                              any   any                      any   generic guest (#31)
@desc*ribe                                                                                                                                                                         any   as                       any   generic guest (#31)
subj*ect:                                                                                                                                                                          any   any                      any   Mail Room (#43)
to*:                                                                                                                                                                               any   any                      any   Mail Room (#43)
also*-to: cc*:                                                                                                                                                                     any   any                      any   Mail Room (#43)
reply-to*: replyto*:                                                                                                                                                               any   any                      any   Mail Room (#43)
subsc*ribe                                                                                                                                                                         any   at/to                    any   Mail Room (#43)
unsubsc*ribe                                                                                                                                                                       any   out of/from inside/from  any   Mail Room (#43)
expl*ode                                                                                                                                                                           any   any                      any   Note Editor (#44)
j*oinliteral                                                                                                                                                                       any   any                      any   Note Editor (#44)
e*dit                                                                                                                                                                              any   any                      any   Verb Editor (#45)
com*pile                                                                                                                                                                           none  any                      any   Verb Editor (#45)
say                                                                                                                                                                                any   any                      any   Generic Editor (#46)
emote                                                                                                                                                                              any   any                      any   Generic Editor (#46)
lis*t view                                                                                                                                                                         any   any                      any   Generic Editor (#46)
del*ete                                                                                                                                                                            any   any                      any   Generic Editor (#46)
f*ind                                                                                                                                                                              any   any                      any   Generic Editor (#46)
s*ubst                                                                                                                                                                             any   any                      any   Generic Editor (#46)
m*ove c*opy                                                                                                                                                                        any   any                      any   Generic Editor (#46)
j*oinliteral                                                                                                                                                                       any   any                      any   Generic Editor (#46)
fill                                                                                                                                                                               any   any                      any   Generic Editor (#46)
topic                                                                                                                                                                              any   any                      any   Generic Editor (#46)
@chown*#                                                                                                                                                                           any   any                      any   generic wizard (#51)
@grant @grants*                                                                                                                                                                    any   at/to                    any   generic wizard (#51)
@shutdown                                                                                                                                                                          any   any                      any   generic wizard (#51)
@who-calls                                                                                                                                                                         any   any                      any   generic wizard (#51)
@toad*                                                                                                                                                                             any   any                      any   generic wizard (#51)
@untoad @detoad                                                                                                                                                                    any   any                      any   generic wizard (#51)
@quota                                                                                                                                                                             any   is                       any   generic wizard (#51)
@players                                                                                                                                                                           any   any                      any   generic wizard (#51)
@grepcore @egrepcore                                                                                                                                                               any   any                      any   generic wizard (#51)
@net-who @@who                                                                                                                                                                     any   any                      any   generic wizard (#51)
@make-player                                                                                                                                                                       any   any                      any   generic wizard (#51)
@abort-sh*utdown                                                                                                                                                                   any   any                      any   generic wizard (#51)
@unnewt @denewt @get-better                                                                                                                                                        any   any                      any   generic wizard (#51)
@log                                                                                                                                                                               any   any                      any   generic wizard (#51)
@blacklist @graylist @redlist @unblacklist @ungraylist @unredlist @spooflist @unspooflist                                                                                          any   any                      any   generic wizard (#51)
@copyo*bject                                                                                                                                                                       any   any                      any   generic wizard (#51)
@corify                                                                                                                                                                            any   as                       any   generic wizard (#51)
@make-guest                                                                                                                                                                        any   any                      any   generic wizard (#51)
@wiz-boot                                                                                                                                                                          any   any                      any   generic wizard (#51)
@zap                                                                                                                                                                               any   any                      any   generic wizard (#51)
@chmod-raw                                                                                                                                                                         any   any                      any   generic wizard (#51)
@grepjhcore @egrepjhcore                                                                                                                                                           any   any                      any   generic wizard (#51)
@prop*erty                                                                                                                                                                         any   any                      any   generic programmer (#52)
@chmod*#                                                                                                                                                                           any   any                      any   generic programmer (#52)
@args @args#                                                                                                                                                                       any   any                      any   generic programmer (#52)
@chparent                                                                                                                                                                          any   at/to                    any   generic programmer (#52)
eval eval-d eval+d                                                                                                                                                                 any   any                      any   generic programmer (#52)
@rmprop*erty                                                                                                                                                                       any   any                      any   generic programmer (#52)
@verb                                                                                                                                                                              any   any                      any   generic programmer (#52)
@rmverb @rmverb#                                                                                                                                                                   any   any                      any   generic programmer (#52)
@list*#                                                                                                                                                                            any   any                      any   generic programmer (#52)
@copy @copy-x                                                                                                                                                                      any   at/to                    any   generic programmer (#52)
@prog*ram @program#                                                                                                                                                                any   any                      any   generic programmer (#52)
@setenv                                                                                                                                                                            any   any                      any   generic programmer (#52)
@pros*pectus pros*pectus                                                                                                                                                           any   any                      any   generic programmer (#52)
@prospectusDB                                                                                                                                                                      any   any                      any   generic programmer (#52)
@grep @egrep                                                                                                                                                                       any   any                      any   generic programmer (#52)
@s*how                                                                                                                                                                             any   any                      any   generic programmer (#52)
@check-chp*arent                                                                                                                                                                   any   at/to                    any   generic programmer (#52)
@disown @disinherit                                                                                                                                                                any   any                      any   generic programmer (#52)
@dump(new)                                                                                                                                                                         any   any                      any   generic programmer (#52)
@displayo*ptions @display-o*ptions @listo*ptions @list-o*ptions @evalo*ptions @eval-o*ptions                                                                                       any   any                      any   generic programmer (#52)
#*                                                                                                                                                                                 any   any                      any   generic programmer (#52)
@jdump                                                                                                                                                                             any   any                      any   generic programmer (#52)
@forked                                                                                                                                                                            any   any                      any   generic programmer (#52)
@dump                                                                                                                                                                              any   any                      any   generic programmer (#52)
eval_d                                                                                                                                                                             any   any                      any   code utilities (#53)
add_cleanup                                                                                                                                                                        any   any                      any   housekeeper (#63)
`* -*                                                                                                                                                                              any   any                      any   Stage-Talk Feature (#67)
[*                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
]*                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
~*                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
to                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
think-big                                                                                                                                                                          any   any                      any   Thinking Feature (#68)
think %* thikn                                                                                                                                                                     any   any                      any   Thinking Feature (#68)
think-med                                                                                                                                                                          any   any                      any   Thinking Feature (#68)
@login-o*ptions @Logino*ptions                                                                                                                                                     any   any                      any   login watcher mark 2 (#83)
@inter*esting                                                                                                                                                                      any   any                      any   login watcher mark 2 (#83)
@uninter*esting                                                                                                                                                                    any   any                      any   login watcher mark 2 (#83)
@login                                                                                                                                                                             any   any                      any   login watcher mark 2 (#83)
@wwho                                                                                                                                                                              any   any                      any   login watcher mark 2 (#83)
@boot*!                                                                                                                                                                            any   for/about                any   Community Group Commands (#149)
@newt                                                                                                                                                                              any   any                      any   Community Group Commands (#149)
@unnewt @denewt @get-better                                                                                                                                                        any   any                      any   Community Group Commands (#149)
@net-who @@who @@who-cg                                                                                                                                                            any   any                      any   Community Group Commands (#149)
@new-password @newpassword @new-password-cg                                                                                                                                        any   is                       any   Community Group Commands (#149)
@ungag                                                                                                                                                                             any   out of/from inside/from  any   Community Group Commands (#149)
@make-player @make-player-cg                                                                                                                                                       any   any                      any   Community Group Commands (#149)
@copyhelp                                                                                                                                                                          any   at/to                    any   documentation feature (#169)
@linkhelp                                                                                                                                                                          any   at/to                    any   documentation feature (#169)
@addcommand                                                                                                                                                                        any   any                      any   Generic Delegate (#270)
@addproperty                                                                                                                                                                       any   any                      any   Generic Delegate (#270)
@addmethod                                                                                                                                                                         any   any                      any   Generic Delegate (#270)
-----                                                                                                                                                                              ----  ----                     ----  -------
Found 167 verbs.
=> 0
-----
`HELP @JDUMP' NOT FOUND
=======================

Sorry, but no help is available on `@Jdump'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Object #243 does not define that verb, but its ancestor #52 does.
#52:"@jdump" any any any
// @dump something [with [id=...] [noprops] [noverbs] [create]]
// This spills out all properties and verbs on an object, calling suspend at appropriate intervals.
//    id=#nnn -- specifies an idnumber to use in place of the object's actual id (for porting to another MOO)
//    noprops -- don't show properties.
//    noverbs -- don't show verbs.
//    create  -- indicates that a @create command should be generated and all of the verbs be introduced with @verb rather than @args; the default assumption is that the object already exists and you're just doing this to have a look at it.
set_task_perms(player);
dobj = player:my_match_object(dobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr))
  return;
endif
if (prepstr && prepstr != "with")
  player:notify(tostr("Usage:  ", verb, " something [with [id=...] [noprops] [noverbs] [create]]"));
  return;
endif
0 && player:receive_document({$jaddress.browser_object, {{"objnum", tostr(dobj)}}});
targname = tostr(dobj);
options = {"props", "verbs"};
create = 0;
if (iobjstr)
  for o in ($string_utils:explode(iobjstr))
    if (index(o, "id=") == 1)
      targname = o[4..length(o)];
    elseif (o in {"noprops", "noverbs"})
      options = setremove(options, o[3..length(o)]);
    elseif (o in {"create"})
      create = 1;
    endif
  endfor
endif
if (create)
  parent = parent(dobj);
  pstring = tostr(parent);
  for p in (properties(#0))
    if (#0.(p) == parent)
      pstring = "$" + p;
    endif
  endfor
  player:notify(tostr("@create ", pstring, " named ", dobj:name(), ":", $string_utils:from_list(dobj.aliases, ",")));
endif
for p in ("props" in options ? properties(dobj) | {})
  pquoted = $string_utils:print(p);
  info = property_info(dobj, p);
  value = dobj.(p);
  if (create)
    uvalue = typeof(value) == LIST ? "{}" | 0;
    player:notify(tostr("@prop ", targname, ".", pquoted, " ", uvalue || $string_utils:print_suspended(value), " ", info[2] || "\"\"", info[1] == dobj.owner ? "" | tostr(" ", info[1])));
    if (uvalue && value)
      player:notify(tostr(";", targname, ".(", pquoted, ") = ", $string_utils:print_suspended(value)));
    endif
  else
    if (info[2] != "rc")
      player:notify(tostr("@chmod ", targname, ".", pquoted, " ", info[2]));
    endif
    if (info[1] != dobj.owner)
      player:notify(tostr("@chown ", targname, ".", pquoted, " ", info[1]));
    endif
    player:notify(tostr(";", targname, ".(", pquoted, ") = ", $string_utils:print_suspended(value)));
  endif
  $command_utils:suspend_if_needed(0);
endfor
for a in ("props" in options ? $object_utils:ancestors(dobj) | {})
  for p in (properties(a))
    $command_utils:suspend_if_needed(1);
    pquoted = $string_utils:print(p);
    value = dobj.(p);
    avalue = a.(p);
    if (typeof(value) == ERR)
      player:notify(tostr("\"", targname, ".(", pquoted, ") => ", $code_utils:error_name(value), " (", value, ")"));
    elseif (typeof(avalue) == ERR || value != avalue)
      player:notify(tostr(";", targname, ".(", pquoted, ") = ", $string_utils:print_suspended(value)));
    endif
  endfor
  $command_utils:suspend_if_needed(1);
endfor
if (!("verbs" in options))
  return;
endif
$command_utils:suspend_if_needed(0);
v = tostr(0);
while ((info = verb_info(dobj, v)) || info == E_PERM)
  argspec = verb_args(dobj, v);
  player:receive_document({$jaddress.browser_verb, {{"objnum", tostr(dobj)}, {"verbnum", v}, {"verbname", info[3]}, {"dobjspec", argspec[1]}, {"prepspec", argspec[2]}, {"iobjspec", argspec[3]}}});
  if (index(tostr(" ", info[3], " "), " * "))
    // ... oh shit, we have a * verb.  may as well forget trying to list...
    // ... the rest; they're invisible.  set v to something nonstring.
    v = E_TYPE;
  else
    v = tostr(tonum(v) + 1);
  endif
  $command_utils:suspend_if_needed(0);
endwhile
The verb :@jdump is on   Crag(#243)--generic programmer(#52)   Beaker(#256)--generic programmer(#52)
The verb :@dump is on   Crag(#243)--generic programmer(#52)   Beaker(#256)--generic programmer(#52)
-----
`HELP DIFF' NOT FOUND
=====================

Sorry, but no help is available on `diff'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Last modified Sat Dec 30 14:55:10 2000 PST by Xeric (#999) (on Waterpoint).
#52:"@dump" any any any
// @dump something [with [id=...] [noprops] [noverbs] [create]]
// This spills out all properties and verbs on an object, calling suspend at appropriate intervals.
//    id=#nnn -- specifies an idnumber to use in place of the object's actual id (for porting to another MOO)
//    noprops -- don't show properties.
//    noverbs -- don't show verbs.
//    create  -- indicates that a @create command should be generated and all of the verbs be introduced with @verb rather than @args; the default assumption is that the object already exists and you're just doing this to have a look at it.
set_task_perms(player);
dobj = player:my_match_object(dobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr))
  return;
endif
if (prepstr && prepstr != "with")
  player:notify(tostr("Usage:  ", verb, " something [with [id=...] [noprops] [noverbs] [create]]"));
  return;
endif
targname = tostr(dobj);
options = {"props", "verbs"};
create = 0;
if (iobjstr)
  for o in ($string_utils:explode(iobjstr))
    if (index(o, "id=") == 1)
      targname = o[4..length(o)];
    elseif (o in {"noprops", "noverbs"})
      options = setremove(options, o[3..length(o)]);
    elseif (o in {"create"})
      create = 1;
    endif
  endfor
endif
if (create)
  parent = parent(dobj);
  pstring = tostr(parent);
  for p in (properties(#0))
    if (#0.(p) == parent)
      pstring = "$" + p;
    endif
  endfor
  if (targname == "_")
    player:notify("@building-option +create-set-co");
  endif
  player:notify(tostr("@create ", pstring, " named ", dobj:name(), ":", $string_utils:from_list(dobj.aliases, ",")));
endif
for p in ("props" in options ? properties(dobj) | {})
  pquoted = $string_utils:print(p);
  info = property_info(dobj, p);
  value = dobj.(p);
  if (create)
    uvalue = typeof(value) == LIST ? "{}" | 0;
    player:notify(tostr("@prop ", targname, ".", pquoted, " ", uvalue || $string_utils:print_suspended(value), " ", info[2] || "\"\"", info[1] == dobj.owner ? "" | tostr(" ", info[1])));
    if (uvalue && value)
      if (subs = match(p, "%(.+%)_msg$"))
        player:notify(tostr("@", substitute("%1", subs), " ", targname, " is ", $string_utils:print(player:unparse_message(value))));
      else
        player:notify(tostr(";", targname, ".(", pquoted, ") = ", $string_utils:print_suspended(value)));
      endif
    endif
  else
    if (info[2] != "rc")
      player:notify(tostr("@chmod ", targname, ".", pquoted, " ", info[2]));
    endif
    if (info[1] != dobj.owner)
      player:notify(tostr("@chown ", targname, ".", pquoted, " ", info[1]));
    endif
    if (subs = match(p, "%(.+%)_msg$"))
      player:notify(tostr("@", substitute("%1", subs), " ", targname, " is ", $string_utils:print(player:unparse_message(value))));
    else
      player:notify(tostr(";", targname, ".(", pquoted, ") = ", $string_utils:print_suspended(value)));
    endif
  endif
  $command_utils:suspend_if_needed(0);
endfor
for a in ("props" in options ? $object_utils:ancestors(dobj) | {})
  for p in (properties(a))
    $command_utils:suspend_if_needed(1);
    pquoted = $string_utils:print(p);
    value = dobj.(p);
    // avalue = a.(p);
    if (typeof(value) == ERR)
      player:notify(tostr("\"", targname, ".(", pquoted, ") => ", $code_utils:error_name(value), " (", value, ")"));
      // elseif ((typeof(avalue) == ERR) || (value != avalue))
    elseif (!is_clear_property(dobj, p))
      if (subs = match(p, "%(.+%)_msg$"))
        player:notify(tostr("@", substitute("%1", subs), " ", targname, " is ", $string_utils:print(player:unparse_message(value))));
      else
        player:notify(tostr(";", targname, ".(", pquoted, ") = ", $string_utils:print_suspended(value)));
      endif
    endif
  endfor
  $command_utils:suspend_if_needed(1);
endfor
if (!("verbs" in options))
  return;
endif
player:notify("");
vnum = 1;
while ((info = verb_info(dobj, vnum)) || info == E_PERM)
  if (index(info[3], "(old)") && create)
    player:tell("\"Skipping ", dobj, ":\"", info[3], "\"...");
  else
    suspend(1);
    if (typeof(info) == ERR)
      player:notify(tostr("\"", dobj, ": [", vnum, "] (", vnum - 1, ") --- ", info, "\";"));
    else
      if (i = index(vname = info[3], " "))
        vname = vname[1..i - 1];
      endif
      if (vname[1] != "*")
        vname = strsub(vname, "*", "");
      endif
      args = verb_args(dobj, vnum);
      prep = args[2] in {"any", "none"} ? args[2] | $code_utils:short_prep(args[2]);
      perms = info[2] != (args == {"this", "none", "this"} ? "rxd" | "rd") ? info[2] || "\"\"" | "";
      if (create)
        if (info[1] == dobj.owner)
          tail = perms ? tostr(" ", perms) | "";
        else
          tail = tostr(" ", perms || info[2], " ", info[1]);
        endif
        player:notify(tostr("@verb ", targname, ":\"", info[3], "\" ", args[1], " ", prep, " ", args[3], tail));
      else
        player:notify(tostr("@args ", targname, ":\"", info[3], "\" ", args[1], " ", prep, " ", args[3]));
        if (info[1] != dobj.owner)
          player:notify(tostr("@chown ", targname, ":", vname, " ", info[1]));
        endif
        if (perms)
          player:notify(tostr("@chmod ", targname, ":", vname, " ", perms));
        endif
      endif
      if (code = verb_code(dobj, vnum, 1, 1))
        player:notify(tostr("@program ", targname, ":", vname));
        for c in (code)
          player:notify(c);
          $command_utils:suspend_if_needed(0);
        endfor
        player:notify_lines({".", ""});
      endif
    endif
  endif
  // HEY WOW, we don't have to do this any more!
  // if (index(tostr(" ", info[3], " "), " * "))
  // ... oh shit, we have a * verb.  may as well forget trying to list...
  // ... the rest; they're invisible.
  // break;
  // endif
  vnum = vnum + 1;
  $command_utils:suspend_if_needed(0);
endwhile
player:notify("\"***finished***");
// Copied from generic programmer (#52):@dump by Xeric (#999) Sat Dec 30 17:55:10 2000 EST
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
  #243:find_all_commands        Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 17:52:45 2013 PDT by Crag (#243).
#243:"find_all_commands" this none this
// list all verbs that are not this none this
headers = {"names", "dobj", "prep", "iobj", "definer"};
v_list = {};
for o in [#0..max_object()]
  if (!valid(o))
    continue;
  endif
  for v_idx in [1..length(verbs(o))]
    {owner, perms, names} = verb_info(o, v_idx);
    {d_obj, prep, i_obj} = verb_args(o, v_idx);
    if (d_obj != "this" && prep != "none" && i_obj != "this")
      v_list = {@v_list, {names, d_obj, prep, i_obj, o:name_and_number()}};
    endif
  endfor
endfor
player:tell_lines($string_utils:columnize_with_headers(headers, v_list));
player:tell("Found " + tostr(length(v_list)) + " verbs.");
-----
@NEWMESSAGE
===========

Usage:  @newmessage <message-name> [<message>] [on <object>]

Add a message property to an object (default is player), and optionally set its value.  For use by non-programmers, who aren't allowed to add properties generally.

To undo the effects of this, use @unmessage.

You see no "$pile" here.
.pile                    Crag (#243)           r      #242
-------------------------------- finished ---------------------------------
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
-------------------------------- finished ---------------------------------
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
.pile_succeeded_msg      Crag (#243)           r c    {#69, "do", "Done."}
.opile_succeeded_msg     Crag (#243)           r c    0
.pile_failed_msg         Crag (#243)           r c    {#69, "do", "You can't ..
.opile_failed_msg        Crag (#243)           r c    0
-------------------------------- finished ---------------------------------
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
  #255:pile_class               Crag (#243)          rxd    this none this
  #255:"pile_succeeded_msg opile_succeeded_msg pile_failed_msg opile_failed_msg" Crag (#243) rxd this none this
-------------------------------- finished ---------------------------------
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
  #255:pile_class               Crag (#243)          rxd    this none this
  #255:"pile_succeeded_msg opile_succeeded_msg pile_failed_msg opile_failed_msg" Crag (#243) rxd this none this
-------------------------------- finished ---------------------------------
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
.pile_succeeded_msg      Crag (#243)           r c    {#69, "do", "Done."}
.opile_succeeded_msg     Crag (#243)           r c    0
.pile_failed_msg         Crag (#243)           r c    {#69, "do", "You can't ..
.opile_failed_msg        Crag (#243)           r c    0
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 10:46:20 2013 PDT by Crag (#243).
#255:"pile_succeeded_msg opile_succeeded_msg pile_failed_msg opile_failed_msg" this none this
return $string_utils:pronoun_sub(this.(verb), this.location, @args);
-----
@GAG
====

Syntax:  @gag <player or object> [<player or object>...]

Add the given players to your 'gag list'.  You will no longer see any messages that result from actions initiated by these players.  In particular, you will not hear them if they try to speak, emote, or whisper to you.  See `help gagging'[1] for an explanation of gagging in general.

Example:

Munchkin types:
  @gag Grover
and no longer hears anything that Grover says.  What a relief!

If you specify an object, then any text originating from that object will not be printed to you.  

Example:  Noisy Robot prints "Hi there" every 15 seconds.   In order to avoid seeing that, Munchkin types:

  @gag Noisy

and no longer hears that robot!  (Munchkin must be in the same room as Noisy Robot for this to work, or know its object number.)

-----
WHEREIS
=======

Syntax:  whereis [<player> [<player>...]]
        @whereis [<player> [<player>...]]

Returns the current location of each of the specified players, or of all players if not arguments given.

-----
@READ
=====

Syntax:  @read
         @read <message-sequence>...
         @read <message-sequence>... on *<recipient>
         @peek [<message-sequence>...[ on *<recipient>]]

Prints the contents of the indiciated messages from your MOO email collection.  You get the message numbers for use here by typing the '@mail' command, which prints a table of contents for your entire MOO email collection.  If no arguments are given to @read, then the 'current message' in your collection is printed.  In any case, the 'current message' after @read finishes is the last one printed.

The most general form of the @read command is

         @read <message-sequence> [on *<collection>]  

where <message-sequence> is as described in `help message-sequences'[1].  As with the @mail command you may @read messages on any publically readable collection (child of $mail_recipient).

The @peek command is identical to @read, but doesn't set your current message.  Use this if you want to take a look at a message other than the current one but not lose your place.

-----
@GRIPE
======

Syntax:  @gripe <anything> ...

Puts you into the MOO mail system to register a complaint (or, conceivably, a compliment) with the wizards.  The rest of the command line (the <anything> ... part) is used as the subject line for the message.  More information on using the MOO mail system is given once you're in it.

You may hear back from the wizards eventually; see `help @mail'[1] for how to read their reply.

Example:
Munchkin types:
  @gripe The little bird
  "How come I can't ever see the little bird in the cuckoo clock?
  "        -- A frustrated player
  send
and, somewhat later, the wizards reply with a note about being sure to look while the clock is chiming.

-----
!
=

This is the polite spoof verb.  `!<string>'  announces an arbitrary string to the current location, except that if the string doesn't contain the player name somewhere as a distinct word, or commences with the name of another player present at that location, the player's .spoof_attribution property (with the usual pronoun substitutions) is appended and if the resulting strings *still* doesn't contain player:name(), we append it.

-----
PRONOUN-SUBSTITUTION
====================

This text describes the basic pronoun substitution model.  An introduction to the pronoun substitution concept can be found in `help pronouns'[1], and a detailed example can be find in `help pronoun-example'[2].  Detailed information on the format of a two-letter substitution is in `help two-letter'[3].

Messages
--------

Pronoun substitution is performed on messages.  A message is a special list (or sometimes, string) containing detailed instructions on the substitutions to be done.  To ease the construction of messages, three parsers are provided to convert messages to and from ordinary strings.  Each parser has its own way of expressing the actual substitutions as strings.

The "generic" parser uses a simple and general way of converting the message lists into strings, but for the user it is longwinded and finicky.  Because of its great generality, it is also used as a fallback method by other parsers for representing certain very complicated substitutions or illegal messages that could not have been constructed by any of the other parsers.

The "lambdacore" parser offers a certain simplicity and the greatest degree of compatibility with very different MOOs, because it is based on the format used for pronoun substitution on one of the very earliest MOOs, LambdaMOO.  It is very useful for porting objects from other MOOs for this reason.  However, it has difficulty in expressing more complex substitutions than existed early in the history of MOO, and it is not always obvious how much text will be replaced when a substitution is made.

The "two-letter" parser is more compact than the general parser and makes it harder to mistakenly construct illegal messages.  It is also more general and systematic than the lambdacore parser.  With the two-letter parser anything that will be substituted for starts with a "%" character, and the substituted text only continues past a space if it is enclosed in "()", "[]", "<>" or "{}".  Many of the most common substitutions are expressed as a "%" followed by two letters, hence the name of the parser.  The two-letter parser is sometimes considered cryptic, but it is recommended for most uses.  More detailed information can be found at `help two-letter'[4].

The two-letter parser will be used for all examples in this article.

Using Parsers
-------------

In code, the three parsers are referred to as "$pronoun_sub.generic", "$pronoun_sub.lambdacore" and "$pronoun_sub.two_letter".  Creating a message from a string is done with the parser's ":parse" verb:

  $pronoun_sub.two_letter:parse("%Td %t:(sets) in the west.")


Converting a message back to a string requires the ":unparse" verb:

  $pronoun_sub.two_letter:unparse($thing.drop_msg)


You can unparse a message with any parser, regardless of which one created it.

To set which parser you use when building verbs parse and unparse messages automatically, use your own "@pronoun-sub" verb:

  @pronoun-sub with two-letter


The Evaluation Context
----------------------

Pronoun substition is done on a string by calling:

  $string_utils:pronoun_sub(message);
 

This will return a new string that is based on the format of string and the context in which pronoun_sub:() was called.

For example, if an object named `sun' calls this code:

  $string_utils:pronoun_sub($pronoun_sub.two_letter:parse("%Td sets in the west."));
 

the returned string will be:

  "The sun sets in the west."
 

The information that :pronoun_sub() can use to try to decipher the string includes, (along with they way they can be referred to in the format string):

  o  The player who caused the code to execute. (%n)
  o  The object where the code is stored, usually referred to as `this'. (%t)
  o  The location of the player. (%l)
  o  The direct object of the command line that was typed by the player. (%d)
  o  The indirect object of the command line that was typed by the player. (%i)

These values, which :pronoun_sub() figures out by itself, can be set explicitly by passing them in as arguments:

   $string_utils:pronoun_sub(string, player, this, location, dobj, iobj)
 

All of these (except the string) are optional, but order is important, so if you want to change the location, you also need to specifically mention the string, player, and this.

Each of these arguments can be:

  o  an object (as you'd expect)
  o  a list of objects
  o  a list like you'd pass to $string_utils:english_list, i.e: :pronoun_sub("The %n", {{#0, #1, #2}, "nothing", " or "})

Multiple Similar Contexts
-------------------------

It often turns out that you want to say nearly the same thing to several different targets.  For example, if Munchkin picks up a duck, three messages will probably be printed:

  To Munchkin: You pick the duck up.
  To the duck: Munchkin picks you up.
  To everyone else in the room: Munchkin picks the duck up.

If you want to use :pronoun_sub() to create these messages, you'll either have to call it three times with three different format messages, or you'll have to call it three times with one format while tweaking the arguments to :pronoun_sub().

This happens so often that a special command has been created to do this for you.  The verb $you:say_action(string) takes the string and then substitutes in appropriately for everything involved or nearby.  In the above situation, you would simply call:

  $you:say_action($pronoun_sub.two_letter:parse("%nD %n:(picks) up %td."))


This will print the message according to how each person should see it, exactly like the three messages above.

A detailed example using $you:say_action() can be found in `help pronoun-example'[5].

-----
#6:@PRONOUN-SUB
===============

Usage:  @pronoun_sub with <style>

-----
`HELP MU' NOT FOUND
===================

Sorry, but no help is available on `mu'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP MURMER' NOT FOUND
=======================

Sorry, but no help is available on `murmer'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP MURMUR' NOT FOUND
=======================

Sorry, but no help is available on `murmur'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
ME:MURMUR
=========

(No documentation.)

That object does not define that verb.
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Mon Sep 11 06:55:27 2000 PDT by splat (#3024) (on JHM).
#6:"mu*rmur" any any any
if (length(args) < 2)
  player:tell("EZ-Whisper Usage: mu <player> <message>");
  return;
endif
who = this.location:match_object(args[1]);
if ($command_utils:object_match_failed(who, args[1]))
  return;
elseif (!valid(who))
  // can't happen
  player:tell("You whisper to nothing.");
  return;
elseif (!$object_utils:has_callable_verb(who, "whisper"))
  player:tell(who:dnamec(), " ", who:verb_sub("doesn't"), " seem to be listening.");
  return;
endif
// dobjstr = $string_utils:from_list(listdelete(args, 1), " ");
dobjstr = argstr[index(argstr, " ") + 1..length(argstr)];
iobj = who;
who:whisper(argstr);
-----
@FORWARD-ME
===========

Syntax:  @forward-me <msg> [on *<collection>]

Takes the indicated message in your (or some other) message collection, creates a new message whose body is the original message (both headers and body) and sends it to your registered email address.

-----
`HELP @@SENDMAIL' NOT FOUND
===========================

Sorry, but no help is available on `@@sendmail'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
ME:@@SENDMAIL
=============

Syntax: @@sendmail

This is intended for use with client editors.  You probably don't want to try using this command manually.

Reads a formatted mail message, extracts recipients, subject line and/or reply-to header and sends message without going to the mailroom.  Example:



@@send

To: Rog (#145)

Subject: random



first line

second line

.



Currently, header lines must have the same format as in an actual message.

-----
@911
====

Page all the currently connected members of the appropriate group(s).  Use the @admins command (`@admins <group> [all]') to list the connected [and disconnected] members.

-----
`HELP @URL' NOT FOUND
=====================

Sorry, but no help is available on `@url'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
ME:@URL
=======

(No documentation.)

Object #243 does not define that verb, but its ancestor #6 does.
#6:"@url" any any any
if (!argstr)
  this:tell("Usage: @url pathname");
  this:tell("");
  this:tell("Try: @url /help/subject!summary");
  return;
endif
jaddress = $jaddress:from_url(argstr);
if (!jaddress)
  this:tell("`", argstr, "' doesn't seem to map onto a jaddress; can't fetch the document.");
  return;
endif
this:tell("Raw jaddress: ", $string_utils:print(jaddress));
this:receive_document(jaddress);
-----
@RESEND
=======

Syntax:  @forward <msg> [on *<collection>] to <recipient> [<recipient>...]
Syntax:  @resend  <msg> [on *<collection>] to <recipient> [<recipient>...]

Both of these commands take the indicated message in your (or some other) message collection, and sends it on to the indicated recipients in some form.

@forward sends an entirely new message whose body is the original message (both headers and body).
@resend sends the original message, but with a header containing the lines

  From:  original-sender
  To:    original-recipients...
  Resent-By: you
  Resent-To: new-recipients...

If you prefer to have yourself in the From: line of messages you @resend, set the mail option `resend_forw (see `help @mail-options'[1]).  In this case, the message will instead have a header containing the lines

  From:  you
  To:    new-recipients...
  Original-From:  original-sender

-----
@NETFORWARD
===========

Syntax:  @netforward <message-number>
         @netforward 
         @netforward <message-sequence> on *collection

Forwards the contents of the indiciated messages from your MOO email collection to your registered email address.  You get the message numbers for use here by typing the '@mail' command, which prints a table of contents for your entire MOO email collection.  If no arguments are given to @netforward, then the 'current message' in your collection is sent.  In any case, the 'current message' after @netforward finishes is not affected.

The most general form of the @netforward command is

         @netforward <message-sequence> [on *<collection>]

where <message-sequence> is as described in `help message-sequences'.
As with the @mail command you may @netforward messages on any publically readable collection (child of $mail_recipient).

If you do not have a valid registered email address, you will not be able to use this command and must register first.  See `help @register'[1] for details.

-----
@REGISTER
=========

Usage:  @register [<someone>]
        @register <someone> as <email-address>[ <commentary>]

Check or update an email address.

The first form just tells you the person's email address.  It works only if you are that person or are on the community group (see `help cg'[1]), or if the person has made eir address public (with `@miscoption +public_email').  It may also tell you about others registered to the same address.

The second form will change the database entry, assign a new password, and mail the new password to the given email address.

Most people can only register themselves, and can't provide commentary (additional text that's stored with the email address).  Community group members can register others and add comments.

This is different from the @request/@register command for guests.

-----
@SHOUT
======

Syntax:  @shout <text>

Broadcasts the given text to all connected players.

The verb :@shout is on   Crag(#243)--generic player(#6)   Beaker(#256)--generic player(#6)
-----
`HELP @CHECK-FULL' NOT FOUND
============================

Sorry, but no help is available on `@check-full'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
ME:@CHECK-FULL
==============

(No documentation.)

Object #243 does not define that verb, but its ancestor #6 does.
Last modified Mon Jan 28 07:19:27 2002 PST by splat (#3024) (on JHM).
#6:"@ch*eck-full" any any any
if (typeof(this.responsible) != LIST)
  this:notify("Hey, someone was mucking about with your .responsible property, and it was probably you.  Don't do it again.");
  this.responsible = {};
  return;
endif
if (length(verb) <= 6)
  // @check, not @check-full
  n = 5;
  trust = {this, $no_one, $hacker};
  // ... trust no one, my friend.... no one....  --Herod
  mistrust = {};
  for k in (args)
    if (z = $code_utils:tonum(k))
      n = z;
    elseif (k[1] == "!")
      mistrust = listappend(mistrust, player:my_match_player(k[2..$]));
    else
      trust = listappend(trust, player:my_match_player(k));
    endif
  endfor
  msg_width = player:linelen() - 60;
  for q in (n > (y = length(z = this.responsible)) ? z | z[y - n + 1..y])
    msg = tostr(@q[2]);
    if (length(msg) > msg_width)
      msg = msg[1..msg_width];
    endif
    s = this:whodunnit(q[1], trust, mistrust);
    text = valid(s[1]) ? s[1].name | "** NONE **";
    this:notify(tostr($string_utils:left(tostr(length(text) > 13 ? text[1..13] | text, " (", s[1], ")"), 20), $string_utils:left(s[2], 15), $string_utils:left(tostr(length(s[3].name) > 13 ? s[3].name[1..13] | s[3].name, " (", s[3], ")"), 20), msg));
  endfor
  this:notify("*** finished ***");
  this.responsible = z;
else
  // @check-full, from @traceback by APHiD
  matches = {};
  if (length(match = argstr) == 0)
    player:notify(tostr("Usage: ", verb, " <string> --or-- ", verb, " <number>"));
    return;
  endif
  if (!(responsible = player.responsible))
    player:notify("No text has been saved by the monitor.  (See `help @paranoid').");
  else
    if (typeof(x = $code_utils:tonum(argstr)) == ERR)
      for line in (responsible)
        if (index(tostr(@line[$]), argstr))
          matches = {@matches, line};
        endif
      endfor
    else
      matches = this.responsible[max(1, (l = $) - x + 1)..l];
    endif
    if (matches)
      linelen = player:linelen();
      string_utils = $string_utils;
      list_utils = $list_utils;
      for match in (matches)
        $command_utils:suspend_if_needed(3);
        text = tostr(@match[length(match)]);
        player:notify("Traceback for:");
        player:notify(text);
        verbwidth = 0;
        for verbitem in (list_utils:slice(mm = listdelete(mm = match[1], length(mm)), 2))
          verbwidth = max(verbwidth, length(verbitem));
        endfor
        numwidth = (linelen - verbwidth) / 4 - 1;
        widths = {numwidth, verbwidth, numwidth, numwidth, numwidth};
        top = l = between = "";
        for x in [1..5]
          top = top + between + string_utils:left({"This", "Verb", "Programmer", "VerbLocation", "Player"}[x], -widths[x]);
          l = l + between + string_utils:space(widths[x], "-");
          between = " ";
        endfor
        player:notify(top);
        player:notify(l);
        for line in (listdelete(mm = match[1], length(mm)))
          output = {};
          for bit in [1..5]
            output = {@output, string_utils:left(typeof(word = line[bit]) == STR ? word | tostr(word, "(", valid(word) ? list_utils:shortest({word.name, @word.aliases}) | (word == $nothing ? "invalid" | (word == $ambiguous_match ? "ambiguous match" | "Error")), ")"), -widths[bit]), " "};
          endfor
          player:notify(string_utils:trimr(tostr(@output)));
        endfor
        player:notify(l);
      endfor
      player:notify("**** finished ****");
    else
      player:notify(tostr("No matches for \"", argstr, "\" found."));
    endif
  endif
endif
// Copied from yduJ (#68):@check-full Sun Feb 26 18:40:24 1995 EST
*** finished ***
Usage: @check-full <string> --or-- @check-full <number>
That is not a valid command.
No text has been saved by the monitor.  (See `help @paranoid').
-----
`HELP @HANDLERS' NOT FOUND
==========================

Sorry, but no help is available on `@handlers'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Object #243 does not define that verb, but its ancestor #6 does.
Last modified Thu Sep 18 13:05:06 1997 PDT by Erik (#74) (on JHM).
#6:"@handlers" any (for/about) any
// Usage:  @handlers [<name>] [for <player>]
// List the event handler objects matching <name> used by <player>.
if (!iobjstr)
  player:tell("Usage: @handlers [<name>] for <player>");
  return;
elseif ($command_utils:player_match_failed(whose = player:my_match_player(iobjstr), iobjstr))
  return;
endif
handlers = {};
for handler in (whose:handlers())
  if (!valid(handler))
    // do nothing
  elseif (!dobjstr || (dobjstr in handler.aliases || ((pref = $string_utils:find_prefix(dobjstr, handler.aliases)) || pref == $ambiguous_match)))
    handlers = listappend(handlers, handler);
  endif
endfor
if (handlers)
  len = max(length("Handler"), length(tostr(max_object()))) + 1;
  player:tell($string_utils:left("Handler", len), "Name");
  player:tell($string_utils:left("-------", len), "----");
  for handler in (handlers)
    player:tell($string_utils:left(tostr(handler), len), handler:name());
  endfor
  player:tell($string_utils:left("-------", len), "----");
elseif (dobjstr)
  player:tell("No handlers found on ", whose:name(), " (", whose, ") matching \"", dobjstr, "\".");
else
  player:tell("No handlers found on ", whose:name(), " (", whose, ").");
endif
// Copied from generic player (#6):@features by Doug (#107) Thu Mar 16 04:55:23 1995 EST
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Wed Feb 19 12:37:41 1997 PST by Xythian (#199) (on Waterpoint).
#6:"+*" any any any
// Usage: +<who> <emote>
//    or: ++<who> <emote>
// 
// Like the emote command, but works from afar (and privately).
// ++ works the same as +, but leaves no space between the name and the text.
// 
// Example:
//  Munchkin, in Munchkin's Home, types:
//    +Fred can't think of a good example of + usage.
//  Fred sees:
//    (from Munchkin's Home) Munchkin can't think of a good example of + usage.
if (verb in {"+", "++"})
  sf = player.last_player_paged;
else
  s = verb[2] == "+" ? 3 | 2;
  sf = verb[s..$];
endif
// if (sf[$ - 1..$] == "'s")
//  sf = sf[1..length(sf) - 2];
//  ms_str = "'s " + argstr;
// else
//   ms_str = argstr;
// endif
ms_str = argstr;
who = player:my_match_player(sf);
if ($command_utils:player_match_result(who, sf)[1])
  return;
elseif (!(who in connected_players()))
  player:tell(who:dnamec(), " ", who:verb_sub("isn't"), " connected.");
else
  player:set_last_player_paged(sf);
  if (player.location:is_public_location())
    pr = $string_utils:pronoun_sub(player.remote_emote_prefix_msg || "(from %l)");
  else
    pr = "(from a private location)";
  endif
  msg = tostr(player:dnamec(), index(verb, "++") || `ms_str[1..2] == "'s" ! E_RANGE' ? "" | " ", ms_str);
  if (who == player)
    player:tell("(to ", player.gender.pr, ") ", msg);
  elseif (who:receive_page(tostr(pr, " ", msg)))
    player:tell("(to ", who:dname(), ") ", msg);
  else
    player:tell(who:dnamec(), " ", who:verb_sub("has"), " refused your emote.");
  endif
endif
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           North Vestibule               0 seconds                         
stormagnet     Great Hall                    7 minutes                         
Beaker         North Vestibule               2 hours                           

Total: 3 people, 1 of whom has been active recently.
You lose.
-----
`HELP @ROOM' AMBIGUOUS
======================

Sorry, the topic `@room' is ambiguous.  I don't know which of the following topics you mean:

`help room-messages'[1]                         `help rooms'[2]

-----
ME:@ROOM
========

Usage:  @room <expr>

Parse a room expression and show you the matches, as documented elsewhere (see `help $room_matching_utils'[1]).

-----
GENERAL INFORMATION ON $ROOM_MATCHING_UTILS[1]
==============================================

A set of related utilities.

room matching utilities (#190) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
  #190:match_all_rooms          unknown hacker (#35) rxd    this none this
  #190:match_room               unknown hacker (#35) rxd    this none this
  #190:"_restrict_closest _restrict_nearest" unknown hacker (#35) rxd this none this
  #190:_find_distance_bfs       Core-Wizard (#184)   rxd    this none this
  #190:"_restrict_farthest _restrict_furthest" unknown hacker (#35) rxd this none this
  #190:_restrict_by_owner       unknown hacker (#35) rxd    this none this
  #190:"_restrict_walkable _restrict_reachable _restrict_accessible" unknown hacker (#35) rxd this none this
  #190:"_restrict_any _restrict_either _restrict_a _restrict_an" unknown hacker (#35) rxd this none this
  #190:_restrict_ship           unknown hacker (#35) rxd    this none this
  #190:"_restrict_furnished _restrict_sittable" unknown hacker (#35) rxd this none this
  #190:"_restrict_vacant _restrict_unoccupied _restrict_empty" unknown hacker (#35) rxd this none this
  #190:"_restrict_different _restrict_other" unknown hacker (#35) rxd this none this
  #190:_find_direction_bfs      unknown hacker (#35) rxd    this none this
  #190:"_restrict_northernmost _restrict_easternmost _restrict_highest _restrict_tallest" unknown hacker (#35) rxd this none this
  #190:"_restrict_southernmost _restrict_westernmost _restrict_lowest" unknown hacker (#35) rxd this none this
  #190:"_restrict_party _restrict_partying _restrict_occupied" unknown hacker (#35) rxd this none this
  #190:"_restrict_unidle _restrict_active _restrict_busy" unknown hacker (#35) rxd this none this
  #190:"pick_all_min pick_all_max" unknown hacker (#35) rxd this none this
  #190:_restrict_prefer_walkable unknown hacker (#35) rxd   this none this
  #190:match_type_object        unknown hacker (#35) rxd    this none this
  #190:init_for_core            Core-Wizard (#184)   rxd    this none this
  #190:"_restrict_vehicle _restrict_boat" unknown hacker (#35) rxd this none this
  #190:_restrict_idle           unknown hacker (#35) rxd    this none this
  #190:_restrict_level          unknown hacker (#35) rxd    this none this
  #190:_restrict_nonferry       unknown hacker (#35) rxd    this none this
  #190:"_restrict_unspecialized _restrict_specialized _restrict_purposeful" unknown hacker (#35) rxd this none this
  #190:floyd_warshall           unknown hacker (#35) rxd    this none this
  #190:_restrict_central(slow)  unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           North Vestibule               0 seconds                         
stormagnet     Great Hall                    7 minutes                         
Beaker         North Vestibule               2 hours                           

Total: 3 people, 1 of whom has been active recently.
No matches for `hall'.
The room expression `great hall' matches:
  Great Hall                              
The room expression `great hall' matches:
  Great Hall (#287)                       
#31:"@password" any any any
player:tell("Sorry, but guest characters are not allowed to change their passwords.");
-----
`HELP SUBJECT:' NOT FOUND
=========================

Sorry, but no help is available on `subject:'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP SUBJECT' NOT FOUND
========================

Sorry, but no help is available on `subject'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP NOTE' AMBIGUOUS
=====================

Sorry, the topic `note' is ambiguous.  I don't know which of the following topics you mean:

`help @notedit'[1]      `help notes'[2]         

-----
@NOTEDIT
========

Syntax:  @notedit <note-object>
         @notedit <object>.<property>

Enters the MOO Note Editor to edit the text on the named object.

For the first form, <note-object> must be a descendant of $note.  For the second form, <object>.<property> can be any string-valued or text-valued (i.e., list of strings) property on any object.

See `help editors'[1] for more detail.

-----
EDITORS
=======

One can always enter an editor by teleporting to it, or you can use one of the commands provided

    @edit     <object>:<verb>    invokes the Verb Editor (edits verb code)
    @notedit  <note_object>      invokes the Note Editor (edits note text)
    @notedit  <object>.<prop>    invokes the Note Editor (edits text property)
    @send     <list of recipients>        invokes the Mailer (edits a mail msg)
    @answer   [<msg_number>] [<flags>...] invokes the Mailer (edits a reply)

This will transport you to one of several special rooms that have editing commands available.  These editors are admittedly not as good as EMACS, but for those with no other editing capability on their host systems, they are better than nothing.

There is a generic editor that provides basic editing commands that are applicable to all editors.  Documentation for these commands can be obtained by typing `help <topic>' within the editor:

    abort              emote/:            pause              send      (M) 
    also-to (M)        fill               prev               showlists (M) 
    compile (V)        insert             print     (M)      subject   (M) 
    copy               join               quit               subst         
    delete             list               ranges             to    (M)     
    done               move               save      (N)      what          
    edit    (V,N)      next               say/"              who   (M)     

In addition, individual editors provide their own additional commands for loading text from places, saving text to places, and various other specialized functions which are denoted in the above list with (M),(N),(V) according as they apply to the mail editor, the note editor, or the verb editor, respectively.

Note that a given editor only allows you one session at a time (ie. one verb, one note, or one mail message).  If you leave an editor without either aborting or compiling/saving/sending the item you're working on, that editor remembers what you are doing next time you enter it, whether you enter it by teleporting or by using the appropriate command.  Note that editors are periodically flushed so anything left there for sufficiently long will eventually go away.

A player may have his own .edit_options property which is a list containing one or more (string) flags from the following list

  quiet_insert
      suppresses those annoying "Line n added." or "Appended..." messages
      that one gets in response to 'say' or 'emote'.  This is useful if you're
      entering a long list of lines, perhaps via some macro on your client,
      and you don't want to see an equally long list of "Line n added..."
      messages.  What you do want, however is some indication that this all
      got through, which is why the "." command is an abbreviation for insert.

  eval_subs
      Enables the verb editor to process your eval_subs property when
      compiling your verb.  See `help eval' for more information about
      the eval_subs property.

There will be more options, some day.

You see no "$editor" here.
The generic room(#3) has 60 kids.
Generic Editor (#46)   North Vestibule (#70)   Northern Entrance (#267)   Great Hall (#287)   Northeast Tower (#292)   Northwest Tower (#294)   East Hall (#296)   Atrium (#298)   Atrium (#302)   West Hall (#304)   East Foyer (#310)   Southeast Tower (#312)   South Hall (#315)   South Vestibule (#318)   Southwest Tower (#321)   Muscician's Gallery (#323)   Ballroom (#330)   Smoking Room Doorway (#332)   Dining Room Doorway (#334)   Drawing Room Doorway (#336)   Side Foyer (#338)   Refreshment Room (#346)   Card Room (#348)   Smoking Room (#350)   East Servant's Passage (#353)   Fainting Room (#357)   Smoking Room (#361)   Dining Room (#364)   Red Drawing Room (#368)   Blue Drawing Room (#374)   Solarium (#379)   Morning Room (#381)   Breakfast Room (#385)   West Foyer (#393)   South Foyer (#396)   Front Parlour (#398)   Music Room (#400)   Green Drawing Room (#402)   Lower Library Doorway (#404)   Billiard Room Doorway (#406)   Conservatory (#415)   Lower Library (#419)   West Servant's Passage (#422)   Billiard Room (#428)   Billiard Room Servant's Passage (#431)   Back Parlour (#434)   Back Parlour Doorway (#437)   Back Parlour Servant's Passage (#442)   White Drawing Room Doorway (#446)   White Drawing Room (#449)   Back Scullery Servant's Passage (#452)   Back Scullery (#457)   Winter Hall (#462)   Dining Room Servant's Passage (#465)   Drawing Room Servant's Passage (#467)   Water Closet (#481)   Summer Hall (#485)   Theater (#487)   Backstage (#489)   Stage (#492)
The Generic Editor(#46) has 3 kids.
Mail Room (#43)   Note Editor (#44)   Verb Editor (#45)
-----
#44:EXPLODE
===========

(No documentation.)

#44:"expl*ode" any any any
if (!(who = this:loaded(player)))
  player:tell(this:nothing_loaded_msg());
elseif (this.mode[who] != "value")
  player:tell("Sorry, `", verb, "' works only in value mode.");
elseif (typeof(range = this:parse_range(who, {"_", "1"}, @args)) != LIST)
  player:tell(range);
elseif (range[3])
  player:tell("Junk at end of cmd:  ", range[3]);
else
  text = this.texts[who];
  newins = ins = this.inserting[who];
  start = range[1];
  if (typeof(debris = this:explode_line("", text[start])) == STR)
    player:tell("Line ", start, ":  ", debris);
    return;
  endif
  if (!debris[1])
    debris = listdelete(debris, 1);
  endif
  newlines = {};
  for line in (text[i = start + 1..end = range[2]])
    dlen = length(debris);
    newlines = {@newlines, @debris[1..dlen - 1]};
    if (ins == i)
      newins = start + length(newlines) + 1;
    endif
    if (typeof(debris = this:explode_line(debris[dlen], line)) == STR)
      player:tell("Line ", i, ":  ", debris);
      return;
    endif
    i = i + 1;
  endfor
  explen = length(newlines) + length(debris);
  if (ins > end)
    newins = ins - (end - start + 1) + explen;
  endif
  this.texts[who] = {@text[1..start - 1], @newlines, @debris, @text[end + 1..length(text)]};
  this.inserting[who] = newins;
  // player:tell("--> ", start, "..", start + explen - 1);
  for line in [start..start + explen - 1]
    this:list_line(player in this.active, line);
    if ($command_utils:running_out_of_time())
      suspend(0);
      if (!(who = this:loaded(player)))
        player:tell("ack!  something bad happened during a suspend...");
        return;
      endif
    endif
  endfor
  if (newins > length(text) && length(text) == start + explen - 1)
    player:tell("^^^^");
  endif
endif
The Note Editor
Commands:

say         <text>                      w*hat       
emote       <text>                      mode        [string|list]
lis*t       [<range>] [nonum]           e*dit       <note>
ins*ert     [<ins>] ["<text>]           save        [<note>]
n*ext,p*rev [n] ["<text>]               abort       
enter                                   q*uit,done,pause 
del*ete     [<range>]                   
f*ind       /<str>[/[c][<range>]]       
s*ubst      /<str1>/<str2>[/[g][c][<range>]]
m*ove,c*opy [<range>] to <ins>          
j,joinl     [<range>]                   
fill        [<range>] [@<col>]          

----  Do `help <cmdname>' for help with a given command.  ----

  <ins> ::= $ (the end) | [^]n (above line n) | _n (below line n) | . (current)
<range> ::= <lin> | <lin>-<lin> | from <lin> | to <lin> | from <lin> to <lin>
  <lin> ::= n | [n]$ (n from the end) | [n]_ (n before .) | [n]^ (n after .)
`help insert' and `help ranges' describe these in detail.
That is not a valid command.
That is not a valid command.
-----
TASKS
=====

A task is an execution of a MOO program.  There are five ways for tasks to be created in LambdaMOO:

  o  Every time a player types a command, a task is created to execute that command; we call these 'command tasks'.
  o  Whenever a player connects or disconnects from the MOO, the server starts a task to do whatever processing is necessary, such as printing out 'Munchkin has connected' to all of the players in the same room; these are called 'server tasks'.
  o  The FORK statement in the programming language creates a task whose execution is delayed for at least some given number of seconds; these are 'forked tasks'.
  o  The suspend() function suspends the execution of the current task.  A snapshot is taken of whole state of the execution, and the execution will be resumed later.  These are called `suspended tasks'.
  o  The read() function also suspends the execution of the current task, in this case waiting for the player to type a line of input.  When the line is received, the task resumes with the read() function returning the input line as result.  These are called `reading tasks'.

The last three kinds of tasks above are collectively known as `queued tasks' or `waiting tasks', since they may not run immediately.

To prevent a maliciously- or incorrectly-written MOO program from running forever and monopolizing the server, limits are placed on the running time of every task.  One limit is that no task is allowed to run longer than 15 seconds; this limit is, in practice, never reached.  The reason is that there is a second limit on the number of operations a task may execute.

The server counts down 'ticks' as any task executes.  Roughly speaking, it counts one tick for every expression evaluation (other than variables and literals), one for every `if', `fork' or `return' statement, and one for every iteration of a loop.  If the count gets all the way down to zero, the task is immediately and unceremoniously aborted.  All tasks begin or resume with an store of 30,000 ticks; this is enough for almost all normal uses.

Because queued tasks may exist for long periods of time before they begin execution, there are commands to list the ones that you own and to kill them before they execute.  These commands are covered in the following help topics:

@forked[1]
      listing the forked tasks that you own
@kill[2]
      killing a particular forked task

Queue ID    Start Time            Owner         Verb (Line) [This]
--------    ----------            -----         ------------------
1395476826  Apr 28 01:00:00 2013  Core-Wizard   #174:measurement_task (12)
-----
$CODE_UTILS:EVAL_D
==================

:eval_d(code...) => {compiled?,result}

This works exactly like the builtin eval() except that the code is evaluated 

as if the d flag were unset.

Searching for verbs that appear to call :eval_d ...

#30:subst [+d unknown hacker (#35)]:        value = $no_one:eval_d(prog);
#36:eval_d [-d Core-Wizard (#184)]:  ":eval_d(code)";
#52:set_eval_env [-d Core-Wizard (#184)]:  value = $code_utils:eval_d(timedprog = tostr(ticks, " = ticks_left();", program, ";return ", ticks, " - ticks_left() - 2;"));
#52:eval_cmd_string [+d Core-Wizard (#184)]:  value = debug ? eval(program) | $code_utils:eval_d(program);
#52:#* [-d Core-Wizard (#184)]:    value = (this.programmer ? $code_utils | $no_one):eval_d(tostr(";return ", what, ".(", $string_utils:print(prop = verb[dot + 2..length(verb)]), ");"));
#53:eval_d [+d Core-Wizard (#184)]:  ":eval_d(code...) => {compiled?,result}";
#53:1 [-d Core-Wizard (#184)]:  "Do not remove this verb!  This is an auxiliary verb for :eval_d().";
#173:find_topics [+d unknown hacker (#35)]:    o = $no_one:eval_d(what);
#203:unpack_from [+d Core-Wizard (#184)]:      result = $no_one:eval_d(local);
#203:duplicate_object_finalize [+d Core-Wizard (#184)]:        {worked, result} = $no_one:eval_d(evalprfx + value + ";");
#203:update_from [+d Core-Wizard (#184)]:      result = $no_one:eval_d($command_utils:read("an expression that evaluates to the `" + lname + "' object"));

Total: 11 verbs.
Last modified Sat Apr 27 14:33:31 2013 PDT by Core-Wizard (#184).
#53:"1" ()
// Do not remove this verb!  This is an auxiliary verb for :eval_d().
#53:"eval_d" any any any
// :eval_d(code...) => {compiled?,result}
// This works exactly like the builtin eval() except that the code is evaluated 
// as if the d flag were unset.
code = {"set_verb_code(this,2,{\"\\\"Do not remove this verb!  This is an auxiliary verb for :eval_d().\\\";\"});", "dobj=iobj=this=#-1;", "dobjstr=iobjstr=prepstr=argstr=verb=\"\";", tostr("caller=", caller, ";"), "set_task_perms(caller_perms());", @args};
if (!caller_perms().programmer)
  return E_PERM;
elseif (svc = set_verb_code(this, 2, code))
  lines = {};
  for line in (svc)
    if (index(line, "Line ") == 1 && (n = tonum(line[6..(colon = index(line + ":", ":")) - 1])))
      lines = {@lines, tostr("Line ", n - 5, line[colon..length(line)])};
    else
      lines = {@lines, line};
    endif
  endfor
  return {0, lines};
else
  set_task_perms(caller_perms());
  return {1, this:("1")()};
endif
The verb :eval_d is nowhere to be found.
#53:"eval_d" any any any
// :eval_d(code...) => {compiled?,result}
// This works exactly like the builtin eval() except that the code is evaluated 
// as if the d flag were unset.
code = {"set_verb_code(this,2,{\"\\\"Do not remove this verb!  This is an auxiliary verb for :eval_d().\\\";\"});", "dobj=iobj=this=#-1;", "dobjstr=iobjstr=prepstr=argstr=verb=\"\";", tostr("caller=", caller, ";"), "set_task_perms(caller_perms());", @args};
if (!caller_perms().programmer)
  return E_PERM;
elseif (svc = set_verb_code(this, 2, code))
  lines = {};
  for line in (svc)
    if (index(line, "Line ") == 1 && (n = tonum(line[6..(colon = index(line + ":", ":")) - 1])))
      lines = {@lines, tostr("Line ", n - 5, line[colon..length(line)])};
    else
      lines = {@lines, line};
    endif
  endfor
  return {0, lines};
else
  set_task_perms(caller_perms());
  return {1, this:("1")()};
endif
Verb arguments changed.
#63:"add_cleanup" any any any
if (!$perm_utils:controls(caller_perms(), this))
  return E_PERM;
endif
what = args[1];
if (!valid(what))
  return "invalid object";
endif
who = length(args) > 1 ? args[2] | player;
where = length(args) > 2 ? args[3] | what.location;
if ($object_utils:isa(who, $guest))
  return tostr("Guests can't use the ", this:name(), ".");
endif
if (!is_player(who))
  return tostr("Non-players can't use the ", this:name(), ".");
endif
if (!valid(where))
  return tostr("The ", this:name(), "doesn't know how to find ", where, " in order to put away ", what:name(), ".");
endif
for x in (this.eschews)
  if ($object_utils:isa(what, x[1]))
    ok = 0;
    for y in [3..length(x)]
      if ($object_utils:isa(what, x[y]))
        ok = 1;
      endif
    endfor
    if (!ok)
      return tostr("The ", this:name(), " doesn't do ", x[2], "!");
    endif
  endif
endfor
if ($object_utils:has_callable_verb(where, "litterp") ? where:litterp(what) | where in this.public_places && !(what in where.residents))
  return tostr("The ", this:name(), " won't litter ", where:name(), "!");
endif
if (i = what in this.clean)
  if (!this:controls(i, who) && valid(this.destination[i]))
    return tostr(this.requestors[i]:name(), " already asked that ", what:name(), " be kept at ", this.destination[i]:name(), "!");
  endif
  this.requestors[i] = who;
  this.destination[i] = where;
else
  this.clean = {what, @this.clean};
  this.requestors = {who, @this.requestors};
  this.destination = {where, @this.destination};
endif
return tostr(this:dnamec(), " will keep ", what:dname(), " ", valid(where) ? where:in_name() | where, ".");
Searching for verbs that appear to call :add_cleanup ...


Total: 0 verbs.
   #63:add_cleanup              housekeeper (#63)    rxd    any any any
-------------------------------- finished ---------------------------------
Searching for core verbs containing the string "add_cleanup" ...


Total: 0 verbs.
Verb arguments changed.
That is not a valid command.
-----
`HELP @LOGIN-O' NOT FOUND
=========================

Sorry, but no help is available on `@Login-o'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
HELP ON THE LOGIN WATCHER MARK 2
================================

This feature can notify you when people connect and disconnect.   Try typing `@add-feature login' and `@login' to get started.

@login-o*ptions @Logino*ptions
==============================

@login-option <option> [is] <value>   sets <option> to <value>
@login-option <option>=<value>        sets <option> to <value>
@login-option +<option>     sets <option>   (usually equiv. to <option>=1
@login-option -<option>     resets <option> (equiv. to <option>=0)
@login-option !<option>     resets <option> (equiv. to <option>=0)
@login-option <option>      displays value of <option>

@login-options for a listing of available options.

@inter*esting
=============

Usage: @inter*esting [player] ...
Declares players interesting to you.
Displays current list of interesting players if called with no arguments.
An empty interesting list means you see all logins/logouts.

@uninter*esting
===============

Usage: @unint*eresting player [player ...]
Declares players to be uninteresting to you.  (I.e. removes them from your .interesting list.)

@login
======

Usage: @login [on|off|all|interesting]
Without arguments, tells you your current login-watcher settings.
@login on and @login off do the obvious.  If `all' is specified, sets the login watcher to show all login announcements, even those for people not in your interesting list.  If `interesting' is specified, sets the login watcher to show only login announcements for people in your interesting list.

Usage:  @add-feature <object>
Available features not already in your feature list include:
Community Group Commands                login watcher mark 2
documentation feature                   
The login watcher mark 2 (#83) added as a feature.
Current login options:

-on            You will not get notified of connections and disconnections.
-interest      Showing all connections and disconnections.
 message       < %Ni %n:(has) %m.  Total: %c >
               looks like: < Crag has connected.  Total: 3 >
-idle          Always show messages.
+on            You will get notified of connections and disconnections.
-----
`HELP @ADDCOMMAND' NOT FOUND
============================

Sorry, but no help is available on `@addcommand'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

The verb :take is on   Crag(#243)--generic player(#6)   brown Persian rug(#257)--generic thing(#5)   detailed painting(#262)--generic container(#126)   timbered ceiling(#273)--generic container(#126)   chaise longues(#274)--generic sittable object(#80)   butler's desk(#275)--generic container(#126)   demi-lune table(#277)--generic container(#126)   Wind-Up Duck(#261)--generic thing(#5)   microphone(#282)--generic thing(#5)   porter's chair(#286)--generic sittable object(#80)   How $staff will notice people rummaging(#290)--generic thing(#5)   Beaker(#256)--generic player(#6)   Generic Nesting Decoration(#265)--generic container(#126)   more stuff(#507)--generic thing(#5)
    #6:"get take"               Core-Wizard (#184)   rxd    this none none
-------------------------------- finished ---------------------------------
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
  #243:find_all_commands        Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:core_objects this none this" name: "MOO verb: #243:core_objects this none this" type: moo-code content*: "" _data-tag: 328763359156
#$#* 328763359156 content: // Find all objects with core names (like $local)
#$#* 328763359156 content: {?o = #0, ?pfx = "$", ?seen = {}} = args;
#$#* 328763359156 content: for o in ($object_utils:descendents(#1))
#$#* 328763359156 content:   o.core_names = {};
#$#* 328763359156 content: endfor
#$#* 328763359156 content: for p in (properties(o))
#$#* 328763359156 content:   v = o.(p);
#$#* 328763359156 content:   name = pfx + p;
#$#* 328763359156 content:   if (typeof(v) == OBJ && valid(v))
#$#* 328763359156 content:     player:tell(name + " => " + v:name_and_number());
#$#* 328763359156 content:     if (!(name in v.core_names))
#$#* 328763359156 content:       v.core_names = {@v.core_names, name};
#$#* 328763359156 content:     endif
#$#* 328763359156 content:     if (!(v in seen))
#$#* 328763359156 content:       this:core_objects(v, pfx + p + ".", {@seen, v});
#$#* 328763359156 content:     endif
#$#* 328763359156 content:   else
#$#* 328763359156 content:     player:tell(name + " => " + $string_utils:from_value(v));
#$#* 328763359156 content:   endif
#$#* 328763359156 content: endfor
#$#: 328763359156
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#243:find_all_commands this none this" name: "MOO verb: #243:find_all_commands this none this" type: moo-code content*: "" _data-tag: 516297580157
#$#* 516297580157 content: // list all verbs that are not this none this
#$#* 516297580157 content: headers = {"names", "dobj", "prep", "iobj", "definer"};
#$#* 516297580157 content: v_list = {};
#$#* 516297580157 content: for o in [#0..max_object()]
#$#* 516297580157 content:   if (!valid(o))
#$#* 516297580157 content:     continue;
#$#* 516297580157 content:   endif
#$#* 516297580157 content:   for v_idx in [1..length(verbs(o))]
#$#* 516297580157 content:     {owner, perms, names} = verb_info(o, v_idx);
#$#* 516297580157 content:     {d_obj, prep, i_obj} = verb_args(o, v_idx);
#$#* 516297580157 content:     if (d_obj != "this" && prep != "none" && i_obj != "this")
#$#* 516297580157 content:       v_list = {@v_list, {names, d_obj, prep, i_obj, o:name_and_number()}};
#$#* 516297580157 content:     endif
#$#* 516297580157 content:   endfor
#$#* 516297580157 content: endfor
#$#* 516297580157 content: player:tell_lines($string_utils:columnize_with_headers(headers, v_list));
#$#* 516297580157 content: player:tell("Found " + tostr(length(v_list)) + " verbs.");
#$#: 516297580157
0 errors.
Verb programmed.
names                                                                                                                                                                              dobj  prep                     iobj  definer
-----                                                                                                                                                                              ----  ----                     ----  -------
say                                                                                                                                                                                any   any                      any   generic room (#3)
emote                                                                                                                                                                              any   any                      any   generic room (#3)
@exits                                                                                                                                                                             any   none                     none  generic room (#3)
@entrances                                                                                                                                                                         none  none                     none  generic room (#3)
go                                                                                                                                                                                 any   none                     none  generic room (#3)
l*ook                                                                                                                                                                              any   any                      any   generic room (#3)
@add-exit @addexit                                                                                                                                                                 any   none                     none  generic room (#3)
@add-entrance @addentrance                                                                                                                                                         any   none                     none  generic room (#3)
e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down                                                                                      none  none                     none  generic room (#3)
@eject                                                                                                                                                                             any   none                     none  generic room (#3)
@resident*s                                                                                                                                                                        any   none                     none  generic room (#3)
@remove-exit                                                                                                                                                                       any   none                     none  generic room (#3)
@remove-entrance                                                                                                                                                                   any   none                     none  generic room (#3)
sit                                                                                                                                                                                none  none                     none  generic room (#3)
stand                                                                                                                                                                              none  none                     none  generic room (#3)
topic                                                                                                                                                                              any   any                      any   generic room (#3)
@quota                                                                                                                                                                             any   none                     none  generic builder (#4)
@create                                                                                                                                                                            any   any                      any   generic builder (#4)
@recycle                                                                                                                                                                           any   none                     none  generic builder (#4)
@recreate                                                                                                                                                                          any   as                       any   generic builder (#4)
@dig                                                                                                                                                                               any   any                      any   generic builder (#4)
@auditDB                                                                                                                                                                           any   any                      any   generic builder (#4)
@count                                                                                                                                                                             any   none                     none  generic builder (#4)
@countDB                                                                                                                                                                           any   none                     none  generic builder (#4)
@sort-owned*-objects                                                                                                                                                               none  none                     none  generic builder (#4)
@add-owned                                                                                                                                                                         any   none                     none  generic builder (#4)
@verify-owned                                                                                                                                                                      none  none                     none  generic builder (#4)
@unlock                                                                                                                                                                            any   none                     none  generic builder (#4)
@lock                                                                                                                                                                              any   with/using               any   generic builder (#4)
@newmess*age                                                                                                                                                                       any   any                      any   generic builder (#4)
@unmess*age                                                                                                                                                                        any   any                      any   generic builder (#4)
@kids                                                                                                                                                                              any   none                     none  generic builder (#4)
@contents                                                                                                                                                                          any   none                     none  generic builder (#4)
@par*ents                                                                                                                                                                          any   none                     none  generic builder (#4)
@location*s                                                                                                                                                                        any   none                     none  generic builder (#4)
@audit                                                                                                                                                                             any   any                      any   generic builder (#4)
@building-o*ptions @buildingo*ptions                                                                                                                                               any   any                      any   generic builder (#4)
@recycle!                                                                                                                                                                          any   none                     none  generic builder (#4)
@move                                                                                                                                                                              any   at/to                    any   generic builder (#4)
@measure                                                                                                                                                                           any   any                      any   generic builder (#4)
@grant                                                                                                                                                                             any   at/to                    any   generic builder (#4)
@set*property                                                                                                                                                                      any   at/to                    any   generic builder (#4)
get take                                                                                                                                                                           this  none                     none  generic thing (#5)
d*rop throw chuck                                                                                                                                                                  this  none                     none  generic thing (#5)
gi*ve ha*nd                                                                                                                                                                        this  at/to                    any   generic thing (#5)
@more                                                                                                                                                                              any   none                     none  generic player (#6)
@wrap                                                                                                                                                                              none  any                      none  generic player (#6)
@linelen*gth                                                                                                                                                                       any   none                     none  generic player (#6)
@pagelen*gth                                                                                                                                                                       any   none                     none  generic player (#6)
@gag                                                                                                                                                                               any   any                      any   generic player (#6)
@listgag @gaglist @gagged                                                                                                                                                          none  none                     none  generic player (#6)
@ungag                                                                                                                                                                             any   none                     none  generic player (#6)
@paranoid                                                                                                                                                                          any   any                      any   generic player (#6)
@sw*eep                                                                                                                                                                            none  none                     none  generic player (#6)
wh*isper                                                                                                                                                                           any   at/to                    this  generic player (#6)
i inv*entory                                                                                                                                                                       none  none                     none  generic player (#6)
home                                                                                                                                                                               none  none                     none  generic player (#6)
@sethome                                                                                                                                                                           none  none                     none  generic player (#6)
get take                                                                                                                                                                           this  none                     none  generic player (#6)
@eject                                                                                                                                                                             any   out of/from inside/from  any   generic player (#6)
where*is @where*is                                                                                                                                                                 any   any                      any   generic player (#6)
@wizards                                                                                                                                                                           any   none                     none  generic player (#6)
@mail                                                                                                                                                                              any   any                      any   generic player (#6)
@read @peek                                                                                                                                                                        any   any                      any   generic player (#6)
@next @prev                                                                                                                                                                        any   any                      any   generic player (#6)
@rmm*ail                                                                                                                                                                           any   any                      any   generic player (#6)
@renumber                                                                                                                                                                          any   none                     none  generic player (#6)
@unrmm*ail                                                                                                                                                                         any   any                      any   generic player (#6)
@send                                                                                                                                                                              any   any                      any   generic player (#6)
@answer @repl*y                                                                                                                                                                    any   any                      any   generic player (#6)
@forward                                                                                                                                                                           any   any                      any   generic player (#6)
@gripe                                                                                                                                                                             any   any                      any   generic player (#6)
@typo @bug @suggest*ion @idea @comment                                                                                                                                             any   any                      any   generic player (#6)
@skip @unsub*scribe                                                                                                                                                                any   any                      any   generic player (#6)
@subscribe                                                                                                                                                                         any   any                      any   generic player (#6)
@rn check_mail_lists @subscribed                                                                                                                                                   none  none                     none  generic player (#6)
@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @misco*ptions @misc-o*ptions @cliento*ptions @client-o*ptions @whoo*ptions @who-o*ptions @parseo*ptions @parse-o*ptions  any   any                      any   generic player (#6)
@rename*#                                                                                                                                                                          any   at/to                    any   generic player (#6)
@add-alias*# @addalias*# @add_alias*#                                                                                                                                              any   at/to                    any   generic player (#6)
@rmalias*# @rm-alias*#                                                                                                                                                             any   out of/from inside/from  any   generic player (#6)
@desc*ribe                                                                                                                                                                         any   as                       any   generic player (#6)
@mess*ages                                                                                                                                                                         any   none                     none  generic player (#6)
@notedit                                                                                                                                                                           any   none                     none  generic player (#6)
@password                                                                                                                                                                          any   any                      any   generic player (#6)
@last-c*onnection                                                                                                                                                                  any   none                     none  generic player (#6)
@gender                                                                                                                                                                            any   none                     none  generic player (#6)
@ex*amine                                                                                                                                                                          any   none                     none  generic player (#6)
ex*amine                                                                                                                                                                           any   none                     none  generic player (#6)
@add-feature @addfeature                                                                                                                                                           any   none                     none  generic player (#6)
@remove-feature @rmfeature @rm-feature                                                                                                                                             any   none                     none  generic player (#6)
@features                                                                                                                                                                          any   for/about                any   generic player (#6)
@features                                                                                                                                                                          any   none                     none  generic player (#6)
@memory                                                                                                                                                                            none  none                     none  generic player (#6)
@version                                                                                                                                                                           none  none                     none  generic player (#6)
@uptime                                                                                                                                                                            none  none                     none  generic player (#6)
@quit quit                                                                                                                                                                         none  none                     none  generic player (#6)
QUIT-IN-ALL-CAPS                                                                                                                                                                   none  none                     none  generic player (#6)
@quicksend @qsend                                                                                                                                                                  any   any                      any   generic player (#6)
!*                                                                                                                                                                                 any   any                      any   generic player (#6)
'*                                                                                                                                                                                 any   any                      any   generic player (#6)
@pronoun_sub @pronoun-sub                                                                                                                                                          none  with/using               any   generic player (#6)
@set-note-string @set-note-text @set-note-value                                                                                                                                    any   none                     none  generic player (#6)
@nn                                                                                                                                                                                none  none                     none  generic player (#6)
mu*rmur                                                                                                                                                                            any   any                      any   generic player (#6)
@option*s                                                                                                                                                                          any   any                      any   generic player (#6)
@set-jtext-form                                                                                                                                                                    any   none                     none  generic player (#6)
@edit*#                                                                                                                                                                            any   any                      any   generic player (#6)
@forward-me @forwardme                                                                                                                                                             any   any                      any   generic player (#6)
picknew                                                                                                                                                                            any   none                     none  generic player (#6)
walk go                                                                                                                                                                            none  at/to                    any   generic player (#6)
join                                                                                                                                                                               any   none                     none  generic player (#6)
pick                                                                                                                                                                               any   on top of/on/onto/upon   this  generic player (#6)
pop                                                                                                                                                                                none  on top of/on/onto/upon   this  generic player (#6)
@co @currentobject @current-object                                                                                                                                                 any   none                     none  generic player (#6)
@pusho*bject                                                                                                                                                                       any   none                     none  generic player (#6)
@popo*object                                                                                                                                                                       none  none                     none  generic player (#6)
@swapo*bject                                                                                                                                                                       none  none                     none  generic player (#6)
jdetails                                                                                                                                                                           any   none                     none  generic player (#6)
@@sendmail                                                                                                                                                                         any   any                      any   generic player (#6)
fol*low                                                                                                                                                                            this  none                     none  generic player (#6)
unfol*low                                                                                                                                                                          any   any                      any   generic player (#6)
followers                                                                                                                                                                          any   any                      any   generic player (#6)
following                                                                                                                                                                          none  none                     none  generic player (#6)
news                                                                                                                                                                               any   none                     none  generic player (#6)
@helpme @911                                                                                                                                                                       any   any                      any   generic player (#6)
@admin*istrators @admins                                                                                                                                                           any   none                     none  generic player (#6)
@url                                                                                                                                                                               any   any                      any   generic player (#6)
@read-all-new*-mail                                                                                                                                                                any   none                     none  generic player (#6)
@add-help-db                                                                                                                                                                       any   none                     none  generic player (#6)
@rm-help-db                                                                                                                                                                        any   none                     none  generic player (#6)
@unsubscribed                                                                                                                                                                      none  none                     none  generic player (#6)
@resend                                                                                                                                                                            any   any                      any   generic player (#6)
help ?*                                                                                                                                                                            any   any                      any   generic player (#6)
@aliases                                                                                                                                                                           any   none                     none  generic player (#6)
page                                                                                                                                                                               any   any                      any   generic player (#6)
is_idle                                                                                                                                                                            none  none                     none  generic player (#6)
idle reidle                                                                                                                                                                        any   any                      any   generic player (#6)
doing undoing                                                                                                                                                                      any   any                      any   generic player (#6)
@who                                                                                                                                                                               any   any                      any   generic player (#6)
@desc*ribe                                                                                                                                                                         any   none                     none  generic player (#6)
@netforw*ard                                                                                                                                                                       any   any                      any   generic player (#6)
@register                                                                                                                                                                          any   as                       any   generic player (#6)
@register @email-address                                                                                                                                                           any   none                     none  generic player (#6)
sit                                                                                                                                                                                none  with/using               this  generic player (#6)
@shout                                                                                                                                                                             any   any                      any   generic player (#6)
@ch*eck-full                                                                                                                                                                       any   any                      any   generic player (#6)
@add-handler @addhandler                                                                                                                                                           any   none                     none  generic player (#6)
@remove-handler @rmhandler @rm-handler                                                                                                                                             any   none                     none  generic player (#6)
@handlers                                                                                                                                                                          any   for/about                any   generic player (#6)
@handlers                                                                                                                                                                          any   none                     none  generic player (#6)
stop                                                                                                                                                                               none  none                     none  generic player (#6)
@age                                                                                                                                                                               any   none                     none  generic player (#6)
+*                                                                                                                                                                                 any   any                      any   generic player (#6)
lose                                                                                                                                                                               any   any                      any   generic player (#6)
@room*# @rooms*#                                                                                                                                                                   any   any                      any   generic player (#6)
@lastlog                                                                                                                                                                           any   none                     none  generic player (#6)
open                                                                                                                                                                               this  none                     none  generic openable container (#8)
@lock_for_open @lock-for-open                                                                                                                                                      this  with/using               any   generic openable container (#8)
close                                                                                                                                                                              this  none                     none  generic openable container (#8)
@unlock_for_open @unlock-for-open                                                                                                                                                  this  none                     none  generic openable container (#8)
@opacity                                                                                                                                                                           this  is                       any   generic openable container (#8)
r*ead                                                                                                                                                                              this  none                     none  generic note (#9)
er*ase                                                                                                                                                                             this  none                     none  generic note (#9)
wr*ite                                                                                                                                                                             any   on top of/on/onto/upon   this  generic note (#9)
del*ete rem*ove                                                                                                                                                                    any   out of/from inside/from  this  generic note (#9)
encrypt                                                                                                                                                                            this  with/using               any   generic note (#9)
decrypt                                                                                                                                                                            this  none                     none  generic note (#9)
mailme                                                                                                                                                                             this  none                     none  generic note (#9)
show                                                                                                                                                                               this  at/to                    any   generic note (#9)
read-new                                                                                                                                                                           this  none                     none  generic note (#9)
?                                                                                                                                                                                  any   none                     any   Login Commands (#10)
h*elp @h*elp                                                                                                                                                                       any   none                     any   Login Commands (#10)
w*ho @w*ho                                                                                                                                                                         any   none                     any   Login Commands (#10)
co*nnect @co*nnect safe-c*onnect safec*onnect                                                                                                                                      any   none                     any   Login Commands (#10)
cr*eate @cr*eate                                                                                                                                                                   any   none                     any   Login Commands (#10)
q*uit @q*uit                                                                                                                                                                       any   none                     any   Login Commands (#10)
up*time @up*time                                                                                                                                                                   any   none                     any   Login Commands (#10)
v*ersion @v*ersion                                                                                                                                                                 any   none                     any   Login Commands (#10)
@req*uest req*uest @register register                                                                                                                                              any   none                     any   Login Commands (#10)
guest                                                                                                                                                                              any   none                     any   Login Commands (#10)
i*dle                                                                                                                                                                              any   none                     any   Login Commands (#10)
GET                                                                                                                                                                                any   none                     any   Login Commands (#10)
substitute_d*elimited                                                                                                                                                              none  none                     none  string utilities (#18)
cleanup                                                                                                                                                                            this  none                     none  Site DB (#25)
set_topic_text                                                                                                                                                                     none  none                     none  Generic Help Database (#30)
@dump-help-db                                                                                                                                                                      this  none                     none  Generic Help Database (#30)
@password                                                                                                                                                                          any   any                      any   generic guest (#31)
create                                                                                                                                                                             any   any                      any   generic guest (#31)
@last-c*onnection                                                                                                                                                                  any   none                     none  generic guest (#31)
@register @request*-character                                                                                                                                                      any   for/about                any   generic guest (#31)
@boot*!                                                                                                                                                                            this  for/about                any   generic guest (#31)
@name                                                                                                                                                                              any   any                      any   generic guest (#31)
@boot*!                                                                                                                                                                            this  none                     none  generic guest (#31)
@desc*ribe                                                                                                                                                                         any   as                       any   generic guest (#31)
check                                                                                                                                                                              this  none                     none  Player Database (#37)
day                                                                                                                                                                                none  none                     none  time utilities (#39)
month                                                                                                                                                                              none  none                     none  time utilities (#39)
ampm                                                                                                                                                                               none  none                     none  time utilities (#39)
pri*nt                                                                                                                                                                             any   none                     none  Mail Room (#43)
subj*ect:                                                                                                                                                                          any   any                      any   Mail Room (#43)
to*:                                                                                                                                                                               any   any                      any   Mail Room (#43)
also*-to: cc*:                                                                                                                                                                     any   any                      any   Mail Room (#43)
reply-to*: replyto*:                                                                                                                                                               any   any                      any   Mail Room (#43)
send                                                                                                                                                                               none  none                     none  Mail Room (#43)
who                                                                                                                                                                                any   none                     none  Mail Room (#43)
showlists                                                                                                                                                                          any   none                     none  Mail Room (#43)
subsc*ribe                                                                                                                                                                         any   at/to                    any   Mail Room (#43)
unsubsc*ribe                                                                                                                                                                       any   out of/from inside/from  any   Mail Room (#43)
e*dit                                                                                                                                                                              any   none                     none  Note Editor (#44)
save                                                                                                                                                                               any   none                     none  Note Editor (#44)
w*hat                                                                                                                                                                              none  none                     none  Note Editor (#44)
mode                                                                                                                                                                               any   none                     none  Note Editor (#44)
expl*ode                                                                                                                                                                           any   any                      any   Note Editor (#44)
implode                                                                                                                                                                            any   none                     none  Note Editor (#44)
j*oinliteral                                                                                                                                                                       any   any                      any   Note Editor (#44)
e*dit                                                                                                                                                                              any   any                      any   Verb Editor (#45)
com*pile                                                                                                                                                                           none  any                      any   Verb Editor (#45)
say                                                                                                                                                                                any   any                      any   Generic Editor (#46)
emote                                                                                                                                                                              any   any                      any   Generic Editor (#46)
enter                                                                                                                                                                              any   none                     none  Generic Editor (#46)
lis*t view                                                                                                                                                                         any   any                      any   Generic Editor (#46)
ins*ert n*ext p*revious .                                                                                                                                                          any   none                     none  Generic Editor (#46)
del*ete                                                                                                                                                                            any   any                      any   Generic Editor (#46)
f*ind                                                                                                                                                                              any   any                      any   Generic Editor (#46)
s*ubst                                                                                                                                                                             any   any                      any   Generic Editor (#46)
m*ove c*opy                                                                                                                                                                        any   any                      any   Generic Editor (#46)
j*oinliteral                                                                                                                                                                       any   any                      any   Generic Editor (#46)
fill                                                                                                                                                                               any   any                      any   Generic Editor (#46)
pub*lish perish unpub*lish depub*lish                                                                                                                                              none  none                     none  Generic Editor (#46)
w*hat                                                                                                                                                                              none  none                     none  Generic Editor (#46)
abort                                                                                                                                                                              none  none                     none  Generic Editor (#46)
done q*uit pause                                                                                                                                                                   none  none                     none  Generic Editor (#46)
@flush                                                                                                                                                                             this  any                      any   Generic Editor (#46)
@stateprop                                                                                                                                                                         any   for/about                this  Generic Editor (#46)
@rmstateprop                                                                                                                                                                       any   out of/from inside/from  this  Generic Editor (#46)
topic                                                                                                                                                                              any   any                      any   Generic Editor (#46)
@chown*#                                                                                                                                                                           any   any                      any   generic wizard (#51)
@grant @grants*                                                                                                                                                                    any   at/to                    any   generic wizard (#51)
@programmer                                                                                                                                                                        any   none                     none  generic wizard (#51)
@shutdown                                                                                                                                                                          any   any                      any   generic wizard (#51)
@dump-d*atabase                                                                                                                                                                    none  none                     none  generic wizard (#51)
@who-calls                                                                                                                                                                         any   any                      any   generic wizard (#51)
@toad*                                                                                                                                                                             any   any                      any   generic wizard (#51)
@untoad @detoad                                                                                                                                                                    any   any                      any   generic wizard (#51)
@quota                                                                                                                                                                             any   is                       any   generic wizard (#51)
@players                                                                                                                                                                           any   any                      any   generic wizard (#51)
@grepcore @egrepcore                                                                                                                                                               any   any                      any   generic wizard (#51)
@net-who @@who                                                                                                                                                                     any   any                      any   generic wizard (#51)
@make-player                                                                                                                                                                       any   any                      any   generic wizard (#51)
@abort-sh*utdown                                                                                                                                                                   any   any                      any   generic wizard (#51)
@newt                                                                                                                                                                              any   none                     none  generic wizard (#51)
@unnewt @denewt @get-better                                                                                                                                                        any   any                      any   generic wizard (#51)
@log                                                                                                                                                                               any   any                      any   generic wizard (#51)
@guests                                                                                                                                                                            any   none                     none  generic wizard (#51)
@rn mail_catch_up check_mail_lists current_message set_current_message get_current_message make_current_message kill_current_message @subscribed @read-all-new @mail-all-new       none  none                     none  generic wizard (#51)
@blacklist @graylist @redlist @unblacklist @ungraylist @unredlist @spooflist @unspooflist                                                                                          any   any                      any   generic wizard (#51)
@copyo*bject                                                                                                                                                                       any   any                      any   generic wizard (#51)
@corify                                                                                                                                                                            any   as                       any   generic wizard (#51)
@make-guest                                                                                                                                                                        any   any                      any   generic wizard (#51)
@wiz-boot                                                                                                                                                                          any   any                      any   generic wizard (#51)
@idlers @kill-idlers @kill-useless @useless @Kill-unconnected @unconnected                                                                                                         any   none                     none  generic wizard (#51)
@report                                                                                                                                                                            any   none                     none  generic wizard (#51)
@immortal*ize                                                                                                                                                                      any   none                     none  generic wizard (#51)
@zap                                                                                                                                                                               any   any                      any   generic wizard (#51)
@chmod-raw                                                                                                                                                                         any   any                      any   generic wizard (#51)
@grepjhcore @egrepjhcore                                                                                                                                                           any   any                      any   generic wizard (#51)
@make-core-db                                                                                                                                                                      any   none                     none  generic wizard (#51)
@check-all-owned-objects                                                                                                                                                           none  none                     none  generic wizard (#51)
@prop*erty                                                                                                                                                                         any   any                      any   generic programmer (#52)
@chmod*#                                                                                                                                                                           any   any                      any   generic programmer (#52)
@args @args#                                                                                                                                                                       any   any                      any   generic programmer (#52)
@chparent                                                                                                                                                                          any   at/to                    any   generic programmer (#52)
eval eval-d eval+d                                                                                                                                                                 any   any                      any   generic programmer (#52)
@rmprop*erty                                                                                                                                                                       any   any                      any   generic programmer (#52)
@verb                                                                                                                                                                              any   any                      any   generic programmer (#52)
@rmverb @rmverb#                                                                                                                                                                   any   any                      any   generic programmer (#52)
@list*#                                                                                                                                                                            any   any                      any   generic programmer (#52)
@kill                                                                                                                                                                              any   none                     none  generic programmer (#52)
@copy @copy-x                                                                                                                                                                      any   at/to                    any   generic programmer (#52)
@prog*ram @program#                                                                                                                                                                any   any                      any   generic programmer (#52)
@setenv                                                                                                                                                                            any   any                      any   generic programmer (#52)
@pros*pectus pros*pectus                                                                                                                                                           any   any                      any   generic programmer (#52)
@d*isplay                                                                                                                                                                          any   none                     none  generic programmer (#52)
@db*size                                                                                                                                                                           none  none                     none  generic programmer (#52)
@prospectusDB                                                                                                                                                                      any   any                      any   generic programmer (#52)
@grep @egrep                                                                                                                                                                       any   any                      any   generic programmer (#52)
@s*how                                                                                                                                                                             any   any                      any   generic programmer (#52)
@check-chp*arent                                                                                                                                                                   any   at/to                    any   generic programmer (#52)
@check-p*roperty                                                                                                                                                                   any   none                     none  generic programmer (#52)
@clearp*roperty @clprop*erty @clear-p*roperty                                                                                                                                      any   none                     none  generic programmer (#52)
@disown @disinherit                                                                                                                                                                any   any                      any   generic programmer (#52)
@dump(new)                                                                                                                                                                         any   any                      any   generic programmer (#52)
@verbs                                                                                                                                                                             any   none                     none  generic programmer (#52)
@make-setter @make_setter                                                                                                                                                          any   none                     none  generic programmer (#52)
@displayo*ptions @display-o*ptions @listo*ptions @list-o*ptions @evalo*ptions @eval-o*ptions                                                                                       any   any                      any   generic programmer (#52)
#*                                                                                                                                                                                 any   any                      any   generic programmer (#52)
@mailverb @mailme-verb @rubber-chicken                                                                                                                                             any   none                     any   generic programmer (#52)
@find                                                                                                                                                                              any   none                     none  generic programmer (#52)
@jdump                                                                                                                                                                             any   any                      any   generic programmer (#52)
@regexp-d*isplay(new) @rd*isplay(new)                                                                                                                                              any   none                     none  generic programmer (#52)
@forked                                                                                                                                                                            any   any                      any   generic programmer (#52)
@dump                                                                                                                                                                              any   any                      any   generic programmer (#52)
_fix_preps                                                                                                                                                                         this  at/to                    this  code utilities (#53)
show*-history                                                                                                                                                                      this  none                     none  Recycling Center (#55)
request                                                                                                                                                                            any   out of/from inside/from  this  Recycling Center (#55)
cleanup_list                                                                                                                                                                       any   none                     none  housekeeper (#63)
remove_cleanup                                                                                                                                                                     any   none                     none  housekeeper (#63)
@fix-commands @fix_commands                                                                                                                                                        this  none                     none  Generic Feature Object (#65)
@reg*ister @unreg*ister                                                                                                                                                            this  none                     none  Generic Feature Object (#65)
`* -*                                                                                                                                                                              any   any                      any   Stage-Talk Feature (#67)
[*                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
]*                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
~*                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
to                                                                                                                                                                                 any   any                      any   Stage-Talk Feature (#67)
think-big                                                                                                                                                                          any   any                      any   Thinking Feature (#68)
think %* thikn                                                                                                                                                                     any   any                      any   Thinking Feature (#68)
think-med                                                                                                                                                                          any   any                      any   Thinking Feature (#68)
parse_objspec                                                                                                                                                                      none  none                     none  pronoun substitution (#69)
@add-vowel-exc*eption @add-nonvowel-exc*eption                                                                                                                                     any   at/to                    this  English Utilities (#72)
unparse_verb                                                                                                                                                                       none  none                     none  Two-Letter Pronoun_Sub Translator (#78)
unparse_noun                                                                                                                                                                       none  none                     none  Two-Letter Pronoun_Sub Translator (#78)
unparse_property                                                                                                                                                                   none  none                     none  Two-Letter Pronoun_Sub Translator (#78)
unparse_special                                                                                                                                                                    none  none                     none  Two-Letter Pronoun_Sub Translator (#78)
count                                                                                                                                                                              any   in/inside/into           this  New Generic Database (#79)
get take                                                                                                                                                                           this  none                     none  generic sittable object (#80)
sit                                                                                                                                                                                any   on top of/on/onto/upon   this  generic piece of furniture (#81)
stand get                                                                                                                                                                          any   out of/from inside/from  this  generic piece of furniture (#81)
sh*ove pu*sh                                                                                                                                                                       any   out of/from inside/from  this  generic piece of furniture (#81)
sendmail                                                                                                                                                                           any   none                     none  network utils (#82)
@login-o*ptions @Logino*ptions                                                                                                                                                     any   any                      any   login watcher mark 2 (#83)
@inter*esting                                                                                                                                                                      any   any                      any   login watcher mark 2 (#83)
@uninter*esting                                                                                                                                                                    any   any                      any   login watcher mark 2 (#83)
@login                                                                                                                                                                             any   any                      any   login watcher mark 2 (#83)
@wwho                                                                                                                                                                              any   any                      any   login watcher mark 2 (#83)
get_aliases                                                                                                                                                                        none  none                     none  Country Database (#94)
@programmer!                                                                                                                                                                       any   none                     none  generic testing player (#99)
@quit                                                                                                                                                                              none  none                     none  generic testing player (#99)
delete_player                                                                                                                                                                      none  none                     none  Registrar (#108)
@rm-dep*endent @rmdep*endent                                                                                                                                                       any   out of/from inside/from  this  generic event dispatching object (#110)
@add-dep*endent @adddep*endent                                                                                                                                                     any   at/to                    this  generic event dispatching object (#110)
open                                                                                                                                                                               this  none                     none  generic door (#121)
close shut                                                                                                                                                                         this  none                     none  generic door (#121)
lock                                                                                                                                                                               this  none                     none  generic door (#121)
unlock                                                                                                                                                                             this  none                     none  generic door (#121)
knock                                                                                                                                                                              none  on top of/on/onto/upon   this  generic door (#121)
pull                                                                                                                                                                               any   through                  this  generic door (#121)
p*ut in*sert d*rop qput                                                                                                                                                            any   in/inside/into           this  generic container (#126)
remove take get                                                                                                                                                                    any   out of/from inside/from  this  generic container (#126)
@set-newspaper                                                                                                                                                                     this  at/to                    any   News (#141)
@boot*!                                                                                                                                                                            any   for/about                any   Community Group Commands (#149)
@newt                                                                                                                                                                              any   any                      any   Community Group Commands (#149)
@unnewt @denewt @get-better                                                                                                                                                        any   any                      any   Community Group Commands (#149)
@net-who @@who @@who-cg                                                                                                                                                            any   any                      any   Community Group Commands (#149)
@new-password @newpassword @new-password-cg                                                                                                                                        any   is                       any   Community Group Commands (#149)
@ungag                                                                                                                                                                             any   out of/from inside/from  any   Community Group Commands (#149)
@make-player @make-player-cg                                                                                                                                                       any   any                      any   Community Group Commands (#149)
@set-group                                                                                                                                                                         this  at/to                    any   generic secure group-command-feature (#150)
open                                                                                                                                                                               this  none                     none  feature object registry (#151)
close                                                                                                                                                                              this  none                     none  feature object registry (#151)
write enter                                                                                                                                                                        any   in/inside/into           this  feature object registry (#151)
turn open                                                                                                                                                                          this  at/to                    any   feature object registry (#151)
read                                                                                                                                                                               this  none                     none  feature object registry (#151)
read lookup                                                                                                                                                                        any   in/inside/into           this  feature object registry (#151)
@add*member                                                                                                                                                                        any   at/to                    this  generic admin group (#163)
@rm*member                                                                                                                                                                         any   out of/from inside/from  this  generic admin group (#163)
@vacation                                                                                                                                                                          any   out of/from inside/from  this  generic admin group (#163)
@return                                                                                                                                                                            any   at/to                    this  generic admin group (#163)
@incognito                                                                                                                                                                         any   for/about                this  generic admin group (#163)
@reveal                                                                                                                                                                            any   for/about                this  generic admin group (#163)
@gethelp                                                                                                                                                                           any   none                     none  documentation feature (#169)
@copyhelp                                                                                                                                                                          any   at/to                    any   documentation feature (#169)
@sethelp @sethelp-text @sethelp-string @sethelp-value                                                                                                                              any   none                     none  documentation feature (#169)
@helpedit @edithelp                                                                                                                                                                any   none                     none  documentation feature (#169)
@addhelp                                                                                                                                                                           any   none                     none  documentation feature (#169)
@rmhelp                                                                                                                                                                            any   none                     none  documentation feature (#169)
@linkhelp                                                                                                                                                                          any   at/to                    any   documentation feature (#169)
@findhelp                                                                                                                                                                          any   none                     none  documentation feature (#169)
@showhelp                                                                                                                                                                          any   none                     none  documentation feature (#169)
do_summary                                                                                                                                                                         any   with/using               this  Byte Quota Utilities (#174)
write                                                                                                                                                                              any   on top of/on/onto/upon   this  topic sign (#178)
cover                                                                                                                                                                              this  with/using               any   topic sign (#178)
uncover                                                                                                                                                                            this  none                     none  topic sign (#178)
remove kick                                                                                                                                                                        this  none                     none  topic sign (#178)
carve                                                                                                                                                                              any   on top of/on/onto/upon   this  topic sign (#178)
shake                                                                                                                                                                              this  none                     none  topic sign (#178)
watch unwatch ignore                                                                                                                                                               any   in/inside/into           this  syslog (#183)
read                                                                                                                                                                               any   in/inside/into           this  syslog (#183)
@reg*ister @@reg*ister                                                                                                                                                             any   on top of/on/onto/upon   this  Local Namespace (#193)
@unreg*ister @@unreg*ister                                                                                                                                                         any   on top of/on/onto/upon   this  Local Namespace (#193)
dump                                                                                                                                                                               this  at/to                    any   module system module (#202)
@pack-verb                                                                                                                                                                         this  at/to                    any   module system module (#202)
@pack                                                                                                                                                                              this  at/to                    any   generic module (#203)
@unpack                                                                                                                                                                            this  out of/from inside/from  any   generic module (#203)
@add                                                                                                                                                                               any   at/to                    this  generic module (#203)
@remove                                                                                                                                                                            any   out of/from inside/from  this  generic module (#203)
@define @undefine @force-define                                                                                                                                                    any   on top of/on/onto/upon   this  generic module (#203)
@check-dependencies                                                                                                                                                                this  none                     none  generic module (#203)
@update                                                                                                                                                                            this  out of/from inside/from  any   generic module (#203)
@add-local                                                                                                                                                                         any   at/to                    this  generic module (#203)
@remove-local                                                                                                                                                                      any   out of/from inside/from  this  generic module (#203)
try_pack_to                                                                                                                                                                        this  at/to                    any   generic module (#203)
@add-package @remove-package                                                                                                                                                       any   at/to                    this  MCP package registry (#209)
@set-group                                                                                                                                                                         this  at/to                    any   MCP package registry (#209)
start stop                                                                                                                                                                         this  none                     none  generic daemon listener (#211)
pile                                                                                                                                                                               any   on top of/on/onto/upon   this  Generic Pile (#242)
@dumpkids                                                                                                                                                                          any   none                     none  Crag (#243)
pile                                                                                                                                                                               this  on top of/on/onto/upon   any   Generic Pilable Thing (#255)
wind                                                                                                                                                                               this  none                     none  Generic Wind-Up Toy (#260)
d*rop th*row                                                                                                                                                                       this  none                     none  Generic Wind-Up Toy (#260)
@add-delegate @rm-delegate                                                                                                                                                         any   any                      this  Generic Delegator (#269)
@delegates                                                                                                                                                                         none  on top of/on/onto/upon   this  Generic Delegator (#269)
@addcommand                                                                                                                                                                        any   any                      any   Generic Delegate (#270)
@addproperty                                                                                                                                                                       any   any                      any   Generic Delegate (#270)
@addmethod                                                                                                                                                                         any   any                      any   Generic Delegate (#270)
p*ut in*sert d*rop qput                                                                                                                                                            any   on top of/on/onto/upon   this  Generic Table (#280)
drop                                                                                                                                                                               this  none                     none  microphone (#282)
lounge                                                                                                                                                                             none  on top of/on/onto/upon   this  chaise longue (#499)
lie                                                                                                                                                                                none  on top of/on/onto/upon   this  chaise longue (#499)
lie                                                                                                                                                                                none  on top of/on/onto/upon   this  bed (#501)
-----                                                                                                                                                                              ----  ----                     ----  -------
Found 419 verbs.
=> 0
-----
`HELP POP' AMBIGUOUS
====================

Sorry, the topic `pop' is ambiguous.  I don't know which of the following topics you mean:

`help @popo'[1]         `help @popobject'[2]    

-----
`HELP PICK' NOT FOUND
=====================

Sorry, but no help is available on `pick'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
HELP
====

Syntax:  help
         help <topic>
         help index

Print out entries from the online documentation system.  The commands `?' and `information' (usually abbreviated `info') are synonyms for `help'.

The first form prints out a summary table of contents for the entire help system.  

The second form prints out the documentation available on the given topic.  Many help system entries contain references to other entries accessible in this way.  The topic name may be abbreviated; if there is no topic exactly matching the name you give, the help system checks for topics for which the name is a prefix, perhaps with the addition or omission of an initial `@', or perhaps with some confusion beween dashes (-) and underscores (_), e.g., 

      `bui' instead of `building', 
      `who' instead of `@who', 
     `@wri' instead of `write',
  `add_ent' instead of `@add-entrance',
 `unlock-'  instead of `@unlock_for_open'

If the abbreviation you give is ambiguous, you will be presented with a list of the matching complete topic names.

The `help index'[1] commands prints out a list of indices for the various help databases.  Each index gives a list of topics available on that database.  It is sometimes easier to find the topics you're interested in this way, rather than tracing through the chain of cross references.

For programmers, the help system provides the following additional forms:

  help object:verbname   -- prints any documentation strings that are present
                            at the beginning of the program for that verb.
  help $<whatever>_utils -- prints general information about one of the 
                            $..._utils objects (e.g., $string_utils, 
                            $list_utils, etc...), which are all libraries 
                            of generally used verbs.
  help builtin()         -- prints documentation from the programmers manual
                            about the named primitive, for example length()

For information about how the help system itself works and about how to associate local help databases with specific rooms or player classes, see `help $help'[2].

-----
THE HELP SYSTEM
===============

When a player types help, the following list of objects is consulted for .help properties:  the player itself, all ancestors of player up to and including $player, and, if the current location is a room, the current location together with all ancestors of the current location back to and including $room.  Each help property should have as value either an object or a list of objects (otherwise we just ignore it).  These objects are then strung together as a list of "help databases" to be searched in order for the requested topic.

A help database (in the sense of anything that is usable by $player:help()) is any object having the following verbs:

  :find_topics([string])
     where string is a supposed help topic, returns a list of strings,
     i.e., actual help topics that this db knows about, or some boolean 
     false value in the event that this db is clueless...
     If no arguments are given, this should return a list of all topics
     in the db.  However, in the case that such a list can't (reasonably)
     be constructed, it might just return {} or another subset of all
     available topics.

  :get_topic(string,dblist)
     given one of the strings returned by :find_topics this either
     returns a list of strings (text to be spewed to the player) or
     returns 1 to indicate that it has already taken care of printing
     information to the player.
     The second argument is the list of all help dbs that are being 
     consulted.

  :topic_text(string)
     like get_topic, but instead returns the raw contents of a help topic

  :set_topic_text(string, text)
     sets the contents of a help topic

  :dump_topic(string)
     like topic_text, but instead returns a script that can be used to
     upload the text.  this is somewhat obsolete now, as it doesn't need
     to be customized on any help databases but instead always uses
     :set_topic-text.

  :has_topic(string)
     returns true if and only if this db has a topic matching that name
     exactly

  :add_topic(string)
     returns true if the topic was added

  :delete_topic(string)
     likewise with deletion

If :find_topic reports that a particular db knows about a given topic it returns the full topic name, so that :get_topic may be called on it later.

The remaining verbs are used by maintainers (see $prog:@gethelp) to edit help topics.

$GENERIC_HELP AND $HELP
-----------------------

The Generic Help Database, $generic_help, is the parent class of a particular kind of help database of which $help is an instance.  On help databases of this type, every help topic has a corresponding property, interpreted as follows:

  this.(topic) = string             
      one-line help text.

  this.(topic) = {"*<verb>*",@args}
      call this:<verb>(args,dblist) to get text; dblist is the full list of 
      help objects that are being consulted (as passed in by :get_topic).

  this.(topic) = other list of strings 
      multi-line help text--see `help help-format' for more information

For the {"*<verb>*",...} form, the current verbs available are

  {"*forward*", topic, @rest}   
     - get help text for topic and then append the lines of `rest'.  
       rest may, in turn, begin with a "*<verb>*"...

  {"*pass*", topic, @rest}   
     - get help text for topic from the first help database after this one
       that actually has help text for topic, and then append lines of `rest'.
       As with "*forward*" rest may, in turn, begin with a "*<verb>*"...

  {"*unpass*", topic, @rest}
     - get help text for topic from the first help database
       that actually has help text for topic, and then append lines of `rest'.
       This is identical to *pass* except that we begin the search of help
       dbs from the beginning of the list.  Care should be exercised since
       this can cause loops...

  {"*subst*", @lines} 
     - All occurences of %[exp] in lines are replaced with the value of exp
         which is assumed to evaluate to a string.  
       All lines beginning with %;exp are replaced with the value of exp 
         which is assumed to evaluate to a list of strings.
       Evaluation is done using $no_one's permissions so exp in either case
       can only refer to public information.

  {"*index*", title}
     - returns a list of all topics in this database, arranged in columns.
       title is used as a heading for this index.

  {"*objectdoc*", object}
     - gets the documentation for the given object (i.e., object:help_msg())
       N.B. as with all other *verb* arguments, object must be a string.

  {"*verbdoc*", objec
       N.B. as with all other *verb* arguments, object must be a string.

  {"*verbdoc*", object, verbname}
     - gets the documentation for the named verb on the given object
       (i.e., any strings at the beginnine documentation for the named verb on the given object
       (i.e., any strings at the beginning of said verbcode)

Individual help dbs are free to define additional verbs that may be used in this context.  $help itself defines the following additional such verbs:

  {"*index_list*"}
     - returns a list of all index topics in all databases in the search list.
       An index topic is one whose actual text is {"*index*", something}.
       When creating a help db, you should be sure to make an index topic.

  {"*full_index*"}
     - prints indices for all help databases in the search list.

It should be noted (once again) that help databases need not be children of $generic_help, so long as they have :find_topics/:get_topic/:dump_topic working as specified above.

-----
ENCRYPT
=======

Syntax:  encrypt <note> with <key-expression>

Restricts the set of players who can read the named note or letter to those for whom the given key expression is true.  See `help keys'[1] for information on the syntax and semantics of key expressions.  Only the owner of a note may do this.

Last modified Sat Jan 13 20:18:23 2001 PST by Xplat (#4014) (on Waterpoint).
#9:"encrypt" this (with/using) any
set_task_perms(player);
key = $lock_utils:parse_keyexp(iobjstr, player);
if (typeof(key) == STR)
  player:tell("That key expression is malformed:");
  player:tell("  ", key);
else
  try
    this.encryption_key = key;
    player:tell("Encrypted ", this:name(), " with this key:");
    player:tell("  ", $lock_utils:unparse_key(key));
  except (E_PERM)
    player:tell(E_PERM);
  endtry
endif
-----
`HELP CHECKPOINT' NOT FOUND
===========================

Sorry, but no help is available on `checkpoint'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

generic wizard (#51) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic programmer (#52).
  Location generic room (#3).
   #51:@chown*#                 Core-Wizard (#184)   r d    any any any
   #51:"@grant @grants*"        Core-Wizard (#184)   r d    any at/to any
   #51:@programmer              Core-Wizard (#184)   r d    any none none
   #51:@shutdown                Core-Wizard (#184)   r d    any any any
   #51:@dump-d*atabase          Core-Wizard (#184)   r d    none none none
   #51:@who-calls               Core-Wizard (#184)   r d    any any any
   #51:mcd_2                    Wizard (#2)          rxd    this none this
   #51:@toad*                   Core-Wizard (#184)   r      any any any
   #51:"@untoad @detoad"        Core-Wizard (#184)   r d    any any any
   #51:@quota                   Core-Wizard (#184)   r      any is any
   #51:@players                 Core-Wizard (#184)   r d    any any any
   #51:kill_aux_wizard_parse    Core-Wizard (#184)   rxd    this none this
   #51:"@grepcore @egrepcore"   Core-Wizard (#184)   r d    any any any
   #51:"@net-who @@who"         Core-Wizard (#184)   r      any any any
   #51:@make-player             Core-Wizard (#184)   r d    any any any
   #51:@abort-sh*utdown         Core-Wizard (#184)   r d    any any any
   #51:"toad_msg toad_victim_msg programmer_msg programmer_victim_msg newt_msg newt_victim_msg" Core-Wizard (#184) rxd this none this
   #51:moveto                   Core-Wizard (#184)   rxd    this none this
   #51:@newt                    Core-Wizard (#184)   r      any none none
   #51:"@unnewt @denewt @get-better" Core-Wizard (#184) r   any any any
   #51:@log                     Core-Wizard (#184)   r d    any any any
   #51:@guests                  Core-Wizard (#184)   r d    any none none
   #51:"@rn mail_catch_up check_mail_lists current_message set_current_message get_current_message make_current_message kill_current_message @subscribed @read-all-new @mail-all-new" Core-Wizard (#184) rxd none none none
   #51:"@blacklist @graylist @redlist @unblacklist @ungraylist @unredlist @spooflist @unspooflist" Core-Wizard (#184) r d any any any
   #51:@copyo*bject             Core-Wizard (#184)   r d    any any any
   #51:@corify                  Core-Wizard (#184)   r      any as any
   #51:@make-guest              Core-Wizard (#184)   r d    any any any
   #51:@wiz-boot                Core-Wizard (#184)   r d    any any any
   #51:"@idlers @kill-idlers @kill-useless @useless @Kill-unconnected @unconnected" Core-Wizard (#184) r d any none none
   #51:@report                  Core-Wizard (#184)   rxd    any none none
   #51:@immortal*ize            Core-Wizard (#184)   r d    any none none
   #51:@zap                     Core-Wizard (#184)   rxd    any any any
   #51:@chmod-raw               Core-Wizard (#184)   r d    any any any
   #51:"@grepjhcore @egrepjhcore" Core-Wizard (#184) r d    any any any
   #51:@make-core-db            Wizard (#2)          r d    any none none
   #51:renumber_for_core        Wizard (#2)          rxd    this none this
   #51:@check-all-owned-objects Core-Wizard (#184)   r d    none none none
   #51:dcd_5                    Wizard (#2)          rx     this none this
   #51:dcd_renumber             Wizard (#2)          rx     this none this
-------------------------------- finished ---------------------------------
-----
`HELP @DUMP-D' AMBIGUOUS
========================

Sorry, the topic `@dump-d' is ambiguous.  I don't know which of the following topics you mean:

`help @dump-database'[1]                        `help dump_database()'[2]

-----
@DUMP-DATABASE
==============

Syntax:  @dump-database

Invokes the builtin dump_database(), which requests that the server checkpoint the database at its next opportunity.  It is not normally necessary to call this function; the server automatically checkpoints the database at regular intervals; see the chapter on server assumptions about the database for details.

Dumping...
Objects owned by stormagnet (from #0 to #538):
  6K #246 stormagnet                 [Great Hall]
  5K #260 Generic Wind-Up Toy        [stormagnet]
  2K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows            *North Vestibule->Northern Entrance
  1K #267 Northern Entrance         
  1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [Nowhere]
 <1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling           *[generic room]
 <1K #273 timbered ceiling          *[North Vestibule]
  2K #274 chaise longues            *[North Vestibule]
  2K #275 butler's desk             *[North Vestibule]
 <1K #276 butler's key               [stormagnet]
  1K #277 demi-lune table           *[North Vestibule]
  1K #278 silver salver              [demi-lune table]
  1K #284 calling cards              [silver salver]
  1K #285 chandelier                 [timbered ceiling]
  2K #286 porter's chair            *[North Vestibule]
  1K #287 Great Hall                
 <1K #288 south                      *North Vestibule->Great Hall
 <1K #289 generic bot                [stormagnet]
  2K #249 tracery windows            Northern Entrance->*North Vestibule
  1K #292 Northeast Tower           
 <1K #293 east                       Great Hall->Northeast Tower
  1K #294 Northwest Tower           
 <1K #295 west                       Great Hall->Northwest Tower
  1K #296 East Hall                 
 <1K #297 south                      Northeast Tower->East Hall
  1K #298 Atrium                    
 <1K #300 north                      East Hall->Northeast Tower
 <1K #301 west                       Northeast Tower->Great Hall
  1K #302 Atrium                    
 <1K #303 south                      Great Hall->Atrium
  1K #304 West Hall                 
 <1K #305 south                      Northwest Tower->West Hall
 <1K #306 north                      West Hall->Northwest Tower
 <1K #307 east                       West Hall->Atrium
 <1K #308 east                       Northwest Tower->Great Hall
 <1K #309 north                      Great Hall->*North Vestibule
  1K #310 East Foyer                
 <1K #311 east                       East Hall->East Foyer
 <1K #299 west                       East Hall->Atrium
  1K #312 Southeast Tower           
 <1K #313 south                      East Hall->Southeast Tower
 <1K #314 north                      Southeast Tower->East Hall
  1K #315 South Hall                
 <1K #316 west                       Southeast Tower->South Hall
 <1K #317 north                      South Hall->Atrium
  1K #318 South Vestibule           
 <1K #319 south                      South Hall->South Vestibule
 <1K #320 east                       South Hall->Southeast Tower
  1K #321 Southwest Tower           
 <1K #322 west                       South Hall->Southwest Tower
  1K #323 Muscician's Gallery       
 <1K #324 up                         East Hall->Muscician's Gallery
 <1K #325 north                      Atrium->Great Hall
 <1K #326 south                      Atrium->South Hall
 <1K #327 east                       Atrium->East Hall
 <1K #328 west                       Atrium->West Hall
 <1K #329 west                       East Foyer->East Hall
  1K #330 Ballroom                  
 <1K #331 south                      East Foyer->Ballroom
  1K #332 Smoking Room Doorway      
 <1K #333 north1                     East Foyer->Smoking Room Doorwa
  1K #334 Dining Room Doorway       
 <1K #335 north2                     East Foyer->Dining Room Doorway
  1K #336 Drawing Room Doorway      
 <1K #337 north3                     East Foyer->Drawing Room Doorwa
  1K #338 Side Foyer                
 <1K #339 turn corner                East Foyer->Side Foyer
 <1K #340 north                      Side Foyer->East Foyer
 <1K #341 down                       Muscician's Gallery->East Hall
 <1K #342 north                      Southwest Tower->West Hall
 <1K #343 east                       Southwest Tower->South Hall
 <1K #344 north                      South Vestibule->South Hall
 <1K #345 north                      Ballroom->East Foyer
  1K #346 Refreshment Room          
 <1K #347 south1                     Ballroom->Refreshment Room
  1K #348 Card Room                 
 <1K #349 south2                     Ballroom->Card Room
  1K #350 Smoking Room              
 <1K #351 south                      Card Room->Smoking Room
 <1K #352 north                      Card Room->Ballroom
  1K #353 East Servant's Passage    
 <1K #354 east                       Card Room->East Servant's Pass
 <1K #355 north                      Smoking Room->Card Room
 <1K #356 north                      Refreshment Room->Ballroom
  1K #357 Fainting Room             
 <1K #358 south                      Refreshment Room->Fainting Room
 <1K #359 north                      Fainting Room->Refreshment Room
 <1K #360 south                      Smoking Room Doorwa->East Foyer
  1K #361 Smoking Room              
 <1K #362 north                      Smoking Room Doorwa->Smoking Room
 <1K #363 south                      Smoking Room->Smoking Room Doorwa
  1K #364 Dining Room               
 <1K #365 east                       Smoking Room->Dining Room
 <1K #366 west                       Dining Room->Smoking Room
 <1K #367 south                      Dining Room->Dining Room Doorway
  1K #368 Red Drawing Room          
 <1K #369 east                       Dining Room->Red Drawing Room
 <1K #370 north                      Dining Room Doorway->Dining Room
 <1K #371 south                      Dining Room Doorway->East Foyer
 <1K #372 west                       Red Drawing Room->Dining Room
 <1K #373 south                      Red Drawing Room->Drawing Room Doorwa
  1K #374 Blue Drawing Room         
 <1K #375 east                       Red Drawing Room->Blue Drawing Room
 <1K #376 north                      Drawing Room Doorwa->Red Drawing Room
 <1K #377 south                      Drawing Room Doorwa->East Foyer
 <1K #378 west                       Blue Drawing Room->Red Drawing Room
  1K #379 Solarium                  
 <1K #380 east                       Blue Drawing Room->Solarium
  1K #381 Morning Room              
 <1K #382 south                      Blue Drawing Room->Morning Room
 <1K #383 north                      Morning Room->Blue Drawing Room
 <1K #384 east                       Morning Room->Solarium
  1K #385 Breakfast Room            
 <1K #386 south                      Morning Room->Breakfast Room
 <1K #387 north                      Breakfast Room->Morning Room
 <1K #388 east                       Breakfast Room->Solarium
 <1K #389 west1                      Solarium->Blue Drawing Room
 <1K #390 west2                      Solarium->Morning Room
 <1K #391 west3                      Solarium->Breakfast Room
 <1K #392 west4                      Solarium->Breakfast Room
  1K #393 West Foyer                
 <1K #394 west                       West Hall->West Foyer
 <1K #395 east                       West Foyer->West Hall
  1K #396 South Foyer               
 <1K #397 south                      West Foyer->South Foyer
  1K #398 Front Parlour             
  1K #399 n1                         West Foyer->Front Parlour
  1K #400 Music Room                
  1K #401 n2                         West Foyer->Music Room
  1K #402 Green Drawing Room        
  1K #403 n3                         West Foyer->Green Drawing Room
  1K #404 Lower Library Doorway     
  1K #405 south1                     West Foyer->Lower Library Doorw
  1K #406 Billiard Room Doorway     
  1K #407 south2                     West Foyer->Billiard Room Doorw
 <1K #408 south                      Front Parlour->West Foyer
 <1K #409 west                       Front Parlour->Music Room
 <1K #410 south                      Music Room->West Foyer
 <1K #411 east                       Music Room->Front Parlour
 <1K #412 west                       Music Room->Green Drawing Room
 <1K #413 south                      Green Drawing Room->West Foyer
 <1K #414 east                       Green Drawing Room->Music Room
  1K #415 Conservatory              
 <1K #416 west                       Green Drawing Room->Conservatory
  1K #418 northeast                  Conservatory->Green Drawing Room
  1K #417 southeast                  Conservatory->West Foyer
  1K #419 Lower Library             
 <1K #420 south                      Lower Library Doorw->Lower Library
 <1K #421 north                      Lower Library Doorw->West Foyer
  1K #422 West Servant's Passage    
 <1K #423 west                       Lower Library Doorw->West Servant's Pass
 <1K #424 north                      Lower Library->Lower Library Doorw
 <1K #425 east                       West Servant's Pass->Lower Library Doorw
 <1K #426 west                       West Servant's Pass->Billiard Room Doorw
 <1K #427 north                      Billiard Room Doorw->West Foyer
  1K #428 Billiard Room             
 <1K #429 south                      Billiard Room Doorw->Billiard Room
 <1K #430 east                       Billiard Room Doorw->West Servant's Pass
  1K #431 Billiard Room Servant's P 
 <1K #432 west                       Billiard Room Doorw->Billiard Room Serva
 <1K #433 north                      Billiard Room->Billiard Room Doorw
  1K #434 Back Parlour              
 <1K #435 south                      Billiard Room->Back Parlour
 <1K #436 north                      Back Parlour->Billiard Room
  1K #437 Back Parlour Doorway      
 <1K #438 west                       Back Parlour->Back Parlour Doorwa
 <1K #439 north                      Back Parlour Doorwa->Billiard Room Serva
 <1K #440 east                       Back Parlour Doorwa->Back Parlour
 <1K #441 west                       Back Parlour Doorwa->South Foyer
  1K #442 Back Parlour Servant's Pa 
 <1K #443 south                      Back Parlour Doorwa->Back Parlour Servan
 <1K #444 north                      Back Parlour Servan->Back Parlour Doorwa
  1K #446 White Drawing Room Doorwa 
 <1K #447 south                      Back Parlour Servan->White Drawing Room 
  1K #449 White Drawing Room        
 <1K #450 east                       White Drawing Room ->White Drawing Room
 <1K #451 west                       White Drawing Room ->South Foyer
  1K #452 Back Scullery Servant's P 
 <1K #453 south                      White Drawing Room ->Back Scullery Serva
 <1K #454 north                      White Drawing Room ->Back Parlour Servan
 <1K #455 west                       White Drawing Room->White Drawing Room 
 <1K #456 north                      Back Scullery Serva->White Drawing Room 
  1K #457 Back Scullery             
 <1K #458 east                       Back Scullery Serva->Back Scullery
 <1K #459 south                      Billiard Room Serva->Back Parlour Doorwa
 <1K #460 east                       Billiard Room Serva->Billiard Room Doorw
 <1K #461 west                       Back Scullery->South Foyer
  1K #462 Winter Hall               
 <1K #463 south                      South Foyer->Winter Hall
 <1K #464 east                       South Foyer->West Foyer
  1K #465 Dining Room Servant's Pas 
 <1K #466 west                       Dining Room Doorway->Dining Room Servant
  1K #467 Drawing Room Servant's Pa 
 <1K #468 east                       Dining Room Doorway->Drawing Room Servan
 <1K #469 east                       Dining Room Servant->Dining Room Doorway
 <1K #470 west                       Dining Room Servant->Smoking Room Doorwa
 <1K #471 east                       Smoking Room Doorwa->Dining Room Servant
 <1K #472 west                       Drawing Room Servan->Dining Room Doorway
 <1K #473 east                       Drawing Room Servan->Drawing Room Doorwa
 <1K #474 west                       Drawing Room Doorwa->Drawing Room Servan
 <1K #475 east                       Drawing Room Doorwa->East Servant's Pass
 <1K #476 west                       East Servant's Pass->Card Room
 <1K #477 north                      East Servant's Pass->Drawing Room Doorwa
 <1K #478 north                      Winter Hall->South Foyer
 <1K #479 first east                 South Foyer->Back Parlour Doorwa
 <1K #480 second east                South Foyer->White Drawing Room 
  1K #481 Water Closet              
 <1K #482 third east                 South Foyer->Water Closet
 <1K #483 fourth east                South Foyer->Back Scullery
 <1K #484 first west                 South Foyer->Conservatory
  1K #485 Summer Hall               
 <1K #486 second west                South Foyer->Summer Hall
  1K #487 Theater                   
 <1K #488 third west                 South Foyer->Theater
  1K #489 Backstage                 
 <1K #490 fourth west                South Foyer->Backstage
 <1K #491 east                       Backstage->South Foyer
  1K #492 Stage                     
 <1K #493 north                      Backstage->Stage
 <1K #494 south                      Stage->Backstage
 <1K #495 down                       Stage->Theater
 <1K #496 up                         Theater->Stage
 <1K #497 east                       Theater->South Foyer
 <1K #498 east                       Summer Hall->South Foyer
  2K #499 chaise longue              [Nowhere]
  1K #500 chair                      [Nowhere]
  1K #501 bed                        [Nowhere]
 <1K #506 tea table                  [Front Parlour]
  1K #512 floor                      [Nowhere]
  1K #513 front parlour floor        [Front Parlour]
 <1K #515 front parlour ceiling      [Front Parlour]
 <1K #514 brass chandelier           [front parlour ceiling]
 <1K #516 oriental rug               [Front Parlour]
  1K #502 settee                     [Nowhere]
  1K #517 settees                    [Front Parlour]
 <1K #518 walls                      [Nowhere]
 <1K #519 walls                      [Front Parlour]
 <1K #520 acanthus leaves            [walls]
 <1K #521 picture rail               [Nowhere]
 <1K #522 frieze                     [Front Parlour]
 <1K #523 cornice                    [walls]
 <1K #524 picture rail               [walls]
 <1K #525 painting                   [Nowhere]
  1K #526 floor                      [Great Hall]
 <1K #527 walls                      [Great Hall]
 <1K #528 basalt block               [walls]
 <1K #529 pillar                     [Nowhere]
 <1K #530 pillars                    [Great Hall]
  1K #534 chaises                    [Great Hall]
 <1K #535 demi-lune tables           [Great Hall]
 <1K #536 vase                       [Nowhere]
 <1K #537 crystal vases              [demi-lune tables]
 <1K #538 flower                     [Great Hall]
-- 256 objects.  Total bytes: 273,124.----------------------------------------
#539 does not exist.
flower (#538) [ readable ]
  Owned by stormagnet (#246).
  Child of generic thing (#5).
  Location Great Hall (#287).
  #538:smell                    stormagnet (#246)    r d    this none none
-------------------------------- finished ---------------------------------
Usage:  @list <object>:<verb> [<dobj> <prep> <iobj>] [with|without parentheses|numbers] [all] [ranges]
Last modified Sat Apr 27 20:05:31 2013 PDT by stormagnet (#246).
#538:"smell" this none none
if (player.location = this.location)
  player:tell(string_utils:pronoun_sub(this.smell_msg));
else
  player:tell("You can't smell the ", this:name(), " from here.");
endif
-----
@SHOW
=====

Syntax:  @show <object>
         @show <object>.<prop-name>
         @show <object>:<verb-name>

Displays quite detailed information about an object, property or verb, including its name, owner, permission bits, etc.  The information displayed for an object can be quite long.

See also @display, which displays different information and is controlled differently.

That is not a valid command.
Object ID:  #243
Name:       Crag
Parent:     generic wizard (#51)
Location:   North Vestibule (#70)
Owner:      Crag (#243)
Flags:      player programmer wizard
Verb definitions:
    core_objects
    @dumpkids
    find_all_commands
Property definitions:
    debug
Properties:
    key: 0
    aliases: {"Crag"}
    description: "An anachronistic cliche barbarian. He may wish to axe you a question."
    visible: 1
    integrate_room_msg: ""
    integrate_player_msg: {#69, "do", {"name", "thing", {""}}, " ", {"verb", "thing", "is"}, " riding ", {"name", {"location", "thing"}, {""}}, " piggyback."}
    integrate_container_msg: {#69, "do", {"name", "thing", {""}}, " is in ", {"name", {"location", "thing"}, {"d"}}, "! That can't be good..."}
    unique: 1
    proper: 1
    integrate_in: {#145}
    handlers: {}
    number: 1
    offered: #-1
    object_size: {12577, 1366989279}
    core_names: {}
    dependents: {}
    in_msg: {#69, "do", "in"}
    features: {#67, #68, #83}
    previous_connection: {1366989551, "localhost"}
    mail_lists: {}
    email_address: ""
    last_disconnect_time: 1367021712
    help: 0
    linetask: {0, 0}
    linesleft: 0
    linebuffer: {}
    pagelen: 0
    _mail_task: 0
    owned_objects: {#243, #245, #244, #242, #248, #250, #251, #252, #253, #254, #255, #262, #263, #264, #265, #269, #270, #271, #279, #280, #282, #290, #291, #445, #448, #503, #504, #258, #507, #509, #510, #511, #531, #532, #533}
    linelen: -79
    current_folder: #243
    all_connect_places: {"localhost"}
    last_connect_place: "port 7777 from localhost, port 59784"
    dict: {}
    messages_going: {}
    responsible: {}
    lines: 20
    page_absent_msg: {#69, "do", {"dname", "player", 1}, " ", {"verb", "player", "is"}, " not currently logged in."}
    page_origin_msg: ""
    page_echo_msg: 0
    mail_notify: {}
    mail_forward: {}
    edit_options: {"local"}
    mail_options: {}
    current_message: {0, 0}
    messages: {}
    last_connect_time: 1367022241
    ownership_quota: -10000
    gender: #156
    home: #70
    password: "pVyQLU2dxtTzA"
    gaglist: {}
    paranoid: 0
    spoof_attribution_msg: "     --"
    pronoun_sub_style: #78
    last_player_paged: "sm"
    contributed_line: ""
    contributed_links: {}
    followers: {}
    followable: 1
    integrate_sep_msg: "  "
    integration_enabled: 1
    jtext_form: "linemode"
    focus_object: #243
    misc_options: {{"fstamp", "[ $o:$M $p ]"}}
    authentication_key: 0
    client_options: {"mcp_edit", "edit"}
    link_shepherd: #-1
    walking_task: 0
    temp_brief: 0
    jaddress_stack: {{#131, {{"subject", "@dump-database"}}, #-1}, {#131, {{"subject", "editors"}}, #-1}, {#131, {{"subject", "@notedit"}}, #-1}, {#131, {{"subject", "$room_matching_utils"}}, #-1}, {#131, {{"subject", "match()"}}, #-1}, {#131, {{"subject", "@chmod"}}, #-1}, {#131, {{"subject", "callers()"}}, #-1}, {#131, {{"subject", "move()"}}, #-1}, {#131, {{"subject", "@currentobject"}}, #-1}, {#131, {{"subject", "current-object"}}, #-1}, {#131, {{"subject", "@copy"}}, #-1}, {#131, {{"subject", "locking"}}, #-1}, {#131, {{"subject", "@dump-database"}}, #-1}, {#131, {{"subject", "current-object"}}, #-1}, {#131, {{"subject", "@co"}}, #-1}, {#131, {{"subject", "@quota"}}, #-1}, {#131, {{"subject", "keys"}}, #-1}, {#131, {{"subject", "pronoun-example"}}, #-1}, {#131, {{"subject", "pronouns"}}, #-1}, {#131, {{"subject", "two-letter"}}, #-1}}
    total_started: 0
    total_connect_time: 2272193
    started_keeping_total: 1364748609
    current_object: {#510, "#510"}
    current_object_stack: {}
    following: {}
    walk_randomness: {1, 8}
    client_features: {}
    client_authkey: ""
    client_disfuncs: {}
    client_debug: 0
    remote_emote_prefix_msg: {#69, "do", "(from ", {"iname", "location", 0}, ")"}
    who_options: {{"columns", {"name", "location", "idle", "doing"}}, {"order", "idle"}}
    last_entrance_time: 768064450
    dozing_msg: {#69, "do", "idling"}
    idle_start_time: 0
    idle_msg: {#69, "do", "real life intrusion"}
    idle_string: ""
    dozing_string: ""
    doing_string: ""
    doing_msg: {#69, "do"}
    disconnect_task: 0
    last_password_time: 0
    last_timestamp: 830677321
    size_quota: {0, 54648, 1366989279, 0}
    shout_msg: {#69, "do", {"name", "player", {"dc"}}, " ", {"verb", "player", "shouts"}, ", \"", {"string", "argstr", 0}, "\""}
    contributed_document: E_NONE
    walking_dest: #-1
    use_do_command: 0
    first_connect_time: 1364748609
    out_of_band_session: #247
    parse_options: {"guess_object", "report", "super_room"}
    timezone: #39
    queued_task_limit: -1
    recreate_enabled: 1
    building_options: {"create_set_co"}
    display_options: {}
    list_options: {"nonumbers", "//_comments"}
    eval_options: {{"ticks", 6}, {"env", "me=player;here=player.location;_=player.current_object[1]"}}
    newt_victim_msg: ""
    newt_msg: {#69, "do", {"name", "player", {"dc"}}, " ", {"verb", "player", "@newts"}, " ", {"name", "dobj", {"d"}}, " (", {"objnum", "dobj"}, ")."}
    public_identity: #-1
    programmer_msg: {#69, "do", {"dname", "dobj", 1}, " ", {"verb", "dobj", "is"}, " now a programmer."}
    programmer_victim_msg: "You are now a programmer."
    toad_victim_msg: "Have a nice life..."
    toad_msg: {#69, "do", {"dname", "player", 1}, " ", {"verb", "player", "@toads"}, " ", {"dname", "dobj", 0}, " (", {"objnum", "dobj"}, ")."}
    mail_identity: #-1
    boot_player_msg: {#69, "do", {"dname", "player", 1}, " ", {"verb", "player", "boots"}, " ", {"dname", "dobj", 0}, "."}
    debug: 0
Contents:
    Group Utilities (#248)
    MCP parent (#251)
    Parsing objects (#252)
    Text generation objects (#253)
    Abstract class (#254)
    Generic Nesting Decoration (#265)
    Generic Delegator (#269)
    Generic Delegate (#270)
    New Generic Room (#271)
    Room Exit Delegate (#279)
    more stuff (#507)
    Generic Input Handler (#509)
    Generic Command Handler (#510)
    Beaker's Commands (#511)
    Generic Command (#531)
    Generic English Command (#532)
    Grouping Command (#533)
-----
$NOTE:SHOW
==========

(No documentation.)

#9:"show" this (at/to) any
if (!(this.location in {player, player.location}))
  player:tell("I see no \"", dobjstr, "\" here.");
  return;
elseif ($command_utils:object_match_failed(iobj = player.location:match_object(iobjstr), iobjstr))
  return;
endif
// player:tell("Unfortunately, due to a security bug, showing of notes does not work.  Please tell ", iobj:dname(), " to read ", this:name(), ".");
// return;
$you:say_action("%N %<shows> %t to %i.");
this:do_read(iobj);
#9:"read-new" this none none
// Copied from jtext note (#701):read by Jay (#88) Wed Apr 20 13:04:10 1994 EDT
if (this.text)
  player:receive_document({$jaddress.note, {{"objnum", tostr(this)}}, this});
  // player:receive_vbox(this.text);
else
  player:tell("This note hasn't been written yet.");
endif
#9:"r*ead" this none none
if (caller != this && !this:is_readable_by(valid(caller_perms()) ? caller_perms() | player))
  player:tell("Sorry, but it seems to be written in some code that you can't read.");
else
  this:do_read(player);
endif
That is not a valid command.
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaises sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
You see a flower here.
stormagnet is here.
You have arrived.
An ordinary flower
#538:smell, line 1:  Permission denied
(End of traceback)
Last modified Sat Apr 27 20:08:34 2013 PDT by stormagnet (#246).
#538:"smell" this none none
if (player.location = this.location)
  player:tell($string_utils:pronoun_sub(this.smell_msg));
else
  player:tell("You can't smell the", this:name(), " from here.");
endif
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#538:smell this none none" name: "MOO verb: #538:smell this none none" type: moo-code content*: "" _data-tag: 138307991158
#$#* 138307991158 content: if (player.location = this.location)
#$#* 138307991158 content:   player:tell($string_utils:pronoun_sub(this.smell_msg));
#$#* 138307991158 content: else
#$#* 138307991158 content:   player:tell("You can't smell the", this:name(), " from here.");
#$#* 138307991158 content: endif
#$#: 138307991158
0 errors.
Verb programmed.
Crag smells the flower.
@integrate_room flower isn't set.
@integrate_player flower isn't set.
@integrate_container flower is "%Tld %tl:(holds) %ti."
@drop_failed flower is "You can't seem to drop %td here."
@drop_succeeded flower is "You drop %td."
@odrop_failed flower is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded flower is "%n:(drops) %ti."
@otake_succeeded flower is "%n:(picks) up %td."
@otake_failed flower isn't set.
@take_succeeded flower is "You take %td."
@take_failed flower is "You can't pick up %td."
@smell flower is "%Nn %n:(smells) %td."
You set the "smell" message of the flower (#538).
You set the "smell" message of the flower (#538).
He smells the flower.
Usage:  @newmessage <message-name> [<message>] [on <object>]
@osmell on the flower is now "".
You set the "osmell" message of the flower (#538).
You set the "smell" message of the flower (#538).
Searching for verbs in me containing the string "say_action" ...


Total: 0 verbs.
Objects owned by Crag (from #0 to #538):
 12K #243 Crag                      *[Great Hall]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table              [Nowhere]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
-- 35 objects.  Total bytes: 51,175.------------------------------------------
Searching for verbs in #242 containing the string "say_action" ...

#242:pile [+d Crag (#243)]:    $you:say_action(this:pile_failed_message());

Total: 1 verb.
@integrate_room #242 isn't set.
@integrate_player #242 isn't set.
@integrate_container #242 isn't set.
The Generic Pile(#242) has 1 kid.
pile of stuff (#258)
@integrate_room #258 isn't set.
@integrate_player #258 isn't set.
@integrate_container #258 isn't set.
-----
$YOU:SAY_ACTION
===============

$you:say_action(message [,who [, thing[, where[, dobj[, iobj]]]]]).

announce 'message' with pronoun substitution as if it were just 

  where:announce_all($string_utils:pronoun_sub(message, who, thing, where, dobj, iobj)); 

except that all involved parties get modified messages, with the appropriate use of 'you' instead of their name.

who   default player

thing default object that called this verb

where default who.location

Any of these may be lists, of the form {<list of objs>, @<args to $string_utils:english_list>}.

Last modified Sat Apr 27 20:09:50 2013 PDT by Crag (#243).
#538:"smell" this none none
if (player:location() == this:location())
  player:tell($string_utils:pronoun_sub(this.smell_msg));
else
  player:tell("You can't smell the", this:name(), " from here.");
endif
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#538:smell this none none" name: "MOO verb: #538:smell this none none" type: moo-code content*: "" _data-tag: 2143188946159
#$#* 2143188946159 content: if (player:location() == this:location())
#$#* 2143188946159 content:   player:tell($string_utils:pronoun_sub(this.smell_msg));
#$#* 2143188946159 content: else
#$#* 2143188946159 content:   player:tell("You can't smell the", this:name(), " from here.");
#$#* 2143188946159 content: endif
#$#: 2143188946159
-----
HERE:ANNOUNCE_ALL_BUT
=====================

(No documentation.)

Object #287 does not define that verb, but its ancestor #3 does.
Last modified Fri Jul 28 14:36:53 2000 PDT by Xeric (#999) (on Waterpoint (for core)).
#3:"announce_all_but" this none this
text = listdelete(args, 1);
contents = this.contents;
for l in (args[1])
  contents = setremove(contents, l);
endfor
for listener in (contents)
  listener:tell(@text);
endfor
0 errors.
Verb programmed.
-----
$STRING_UTILS:PRONOUN_SUB
=========================

Pronoun (and other things) substitution. See 'help pronouns' for details.

syntax:  $string_utils:pronoun_sub(text[,who[,thing[,location[,dobj[,iobj]]]]])

msg is either a string, which is parsed according to lambdacore pronoun_sub style, or a raw pronoun_sub list.

who, thing, location, dobj, and iobj can all be objects or lists of {<list of objects>, @<args to $string_utils:english_list>}.

who defaults to player.

thing defaults to caller.

location defaults to who.location.

dobj and iobj default to dobj and iobj.

=> #34 (you)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#538:smell this none none" name: "MOO verb: #538:smell this none none" type: moo-code content*: "" _data-tag: 1635147352160
#$#* 1635147352160 content: if (player:location() == this:location())
#$#* 1635147352160 content:   player:tell($string_utils:pronoun_sub(this.smell_msg));
#$#* 1635147352160 content:   player:location():announce_all_but({player}, $string_utils:pronoun_sub(this.smell_msg));
#$#* 1635147352160 content: else
#$#* 1635147352160 content:   player:tell("You can't smell the", this:name(), " from here.");
#$#* 1635147352160 content: endif
#$#: 1635147352160
0 errors.
Verb programmed.
You smell the flower.
@integrate_room flower isn't set.
@integrate_player flower isn't set.
@integrate_container flower is "%Tld %tl:(holds) %ti."
@drop_failed flower is "You can't seem to drop %td here."
@drop_succeeded flower is "You drop %td."
@odrop_failed flower is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded flower is "%n:(drops) %ti."
@otake_succeeded flower is "%n:(picks) up %td."
@otake_failed flower isn't set.
@take_succeeded flower is "You take %td."
@take_failed flower is "You can't pick up %td."
@smell flower is "You %n:(smells) %td."
@osmell flower is "%Ns %n:(smells) %td."
You set the "smell" message of the flower (#538).
You set the "smell" message of the flower (#538).
You smell the flower.
#25:"cleanup" this none none
That verb has not been programmed.
Site DB (#25) [ ]
  Owned by unknown hacker (#35).
  Child of New Generic Database (#79).
   #25:find(old)                unknown hacker (#35) r d    this none this
   #25:add                      unknown hacker (#35) rxd    this none this
   #25:load                     Core-Wizard (#184)   rxd    this none this
   #25:domain_literal           unknown hacker (#35) rxd    this none this
   #25:init_for_core            Core-Wizard (#184)   rxd    this none this
   #25:cleanup                  unknown hacker (#35) r d    this none none
   #25:"prohibit_lookup prohibit_modify" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
You see no "$help_db" here.
Last modified Sat Apr 27 20:16:08 2013 PDT by Crag (#243).
#538:"smell" this none none
if (player:location() == this:location())
  player:tell($string_utils:pronoun_sub(this.smell_msg, $you));
  player:location():announce_all_but({player}, $string_utils:pronoun_sub(this.smell_msg));
else
  player:tell("You can't smell the", this:name(), " from here.");
endif
You see no "smell" here.
@integrate_room flower isn't set.
@integrate_player flower isn't set.
@integrate_container flower is "%Tld %tl:(holds) %ti."
@drop_failed flower is "You can't seem to drop %td here."
@drop_succeeded flower is "You drop %td."
@odrop_failed flower is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded flower is "%n:(drops) %ti."
@otake_succeeded flower is "%n:(picks) up %td."
@otake_failed flower isn't set.
@take_succeeded flower is "You take %td."
@take_failed flower is "You can't pick up %td."
@smell flower is "%Nd %n:(smells) %td."
@osmell flower is "%Ns %n:(smells) %td."
You set the "osmell" message of the flower (#538).
You set the "osmell" message of the flower (#538).
-----
TWO-LETTER-QR
=============

This help text is a quick reference for pronoun_sub format strings.  For explanation, see `help two-letter'[1].

General format:   %<object specifier><information specifier>

Object Specifiers
  %t - this           %d - the dobj     %l - the player location
  %n - the player     %i - the iobj
  Append `l' to refer to that object's location, or `L' for the outermost.
  Append `c' for the contents.
  %x<object specifier>{foo arg1 arg2 ...} is an object specifier meaning
  "call :obj_foo on the specified object, with the given arguments."

Information Specifiers (capitalizable)
  n - the object's name         ("Susan",   "duck",    "king and queen")
  d - definite-article          ("Susan",   "the duck","the king and queen")
  i - indefinite-article        ("Susan",   "a duck",  "a king and queen")
  o  - the objective pronoun    ("her",     "him",     "them")
  p  - possessive adjective     ("her",     "his",     "their")
  q  - possessive pronoun       ("hers",    "his",     "theirs")
  r  - reflexive pronoun        ("herself", "himself", "themselves")
  s  - subjective pronoun       ("she",     "he,       "they")
  'i - indefinite possessive    ("a duck's")
  'd - definite possessive      ("the duck's")
  'n - possessive title         ("duck's")
  #  - the object's number 
  <object specifier>x{foo arg1 arg2 ...} is an information specifier
  meaning "call :sub_foo on the object, with the given arguments."

Verbs, Nouns, Properties (capitalizable)
  :(foos) - conjugate the verb `to foo'
  '(foo)  - pluralize the noun `foo' if necessary
  .(foo)  - the object's `foo' property

Other Substitutions
  %${a,d,i,p} - the {arg,dobj,iobj,prep}str 

#30:"@dump-help-db" this none none
set_task_perms(player);
for i in (properties(this))
  player:notify("");
  player:notify_lines(this:dump_topic(i));
  player:notify("");
  $command_utils:suspend_if_needed(0);
endfor
player:notify("\"*** finished ***");
-----
#37:CHECK
=========

:check() -- checks for recycled and toaded players that managed not to get expunged from the db.

#37:"check" this none none
// :check() -- checks for recycled and toaded players that managed not to get expunged from the db.
for p in (properties($player_db))
  if (ticks_left() < 500 || seconds_left() < 2)
    player:tell("...", p);
    suspend(0);
  endif
  if (p[1] == " ")
    for o in (this.(p)[4])
      if (valid(o) && is_player(o))
      else
        player:tell(".", p, "==", $string_utils:print(this.(p)), " <= ", o);
      endif
    endfor
  endif
endfor
player:tell("done.");
That is not a valid command.
stormagnet smells the flower. It smells nice!
@integrate_room flower isn't set.
@integrate_player flower isn't set.
@integrate_container flower is "%Tld %tl:(holds) %ti."
@drop_failed flower is "You can't seem to drop %td here."
@drop_succeeded flower is "You drop %td."
@odrop_failed flower is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded flower is "%n:(drops) %ti."
@otake_succeeded flower is "%n:(picks) up %td."
@otake_failed flower isn't set.
@take_succeeded flower is "You take %td."
@take_failed flower is "You can't pick up %td."
@smell flower is "%Nd %n:(smells) %td. %Ts %t:(smells) nice!"
@osmell flower is "%Nd %n:(smells) %td."
stormagnet heads off to the Verb Editor.
< stormagnet has disconnected.  Total: 2 >
< stormagnet has connected.  Total: 3 >
stormagnet comes back from the Verb Editor.
Last modified Sat Apr 27 20:16:08 2013 PDT by Crag (#243).
#538:"smell" this none none
if (player:location() == this:location())
  player:tell($string_utils:pronoun_sub(this.smell_msg, $you));
  player:location():announce_all_but({player}, $string_utils:pronoun_sub(this.smell_msg));
else
  player:tell("You can't smell the", this:name(), " from here.");
endif
Now programming flower:smell[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
stormagnet has disconnected.
Now programming flower:smell[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
stormagnet has connected.
Now programming flower:smell[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Last modified Sat Apr 27 20:27:50 2013 PDT by Crag (#243).
#538:"smell" this none none
if (player:location() == this:location())
  player:tell($string_utils:pronoun_sub(this.smell_msg, $you));
  player:location():announce_all_but({player}, $string_utils:pronoun_sub(this.smell_msg));
else
  player:tell("You can't smell the", this:name(), " from here.");
endif
Now programming flower:smell[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
stormagnet smells the flower.
The flower disappears suddenly for parts unknown, moved by stormagnet.
#1:"acceptable" this none this
return 0;
// Copied from root class (#1):accept by Erik (#74) Sun Nov 20 21:16:08 1994 EST
Last modified Sun Jan  7 16:18:37 2001 PST by Xythian (#199) (on Waterpoint).
#126:"acceptable" this none this
return !is_player(args[1]);
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaises sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
You see a bouquet here.
stormagnet is here.
The Great Hall (#287) contains a floor (#526), some walls (#527), some pillars (#530), some chaises (#534), some demi-lune tables (#535), Crag (#243), stormagnet (#246), and a bouquet (#539).
The floor underfoot is formed of enormous blocks of black basalt, carefully mitered into a seamless whole. Age, polishing, and the passage of countless feet have worn it smooth in the middle, but toward the edges of the room the blocks are still rough to the touch.
You sit on the floor.
Crag sprawls
-----
GENERAL INFORMATION ON $OBJECT_UTILS[1]
=======================================

These routines are useful for finding out information about individual objects.

Examining everything an object has defined on it:
  all_verbs          (object) => like it says
  all_properties     (object) => likewise
  findable_properties(object) => tests to see if caller can "find" them
  owned_properties   (object[, owner]) => tests for ownership

Investigating inheritance:
  ancestors(object[,object...]) => all ancestors
  descendants      (object)     => all descendants
  ordered_descendants(object)   => descendants, in a different order
  leaves           (object)     => descendants with no children
  branches         (object)     => descendants with children 
  isa        (object,class) => true iff object is a descendant of class (or ==)

Considering containment:
  contains      (obj1, obj2) => Does obj1 contain obj2 (nested)?
  all_contents      (object) => return all the (nested) contents of object

Verifying verbs and properties:
  has_property(object,pname) => false/true   according as object.(pname) exists
  has_verb    (object,vname) => false/{#obj} according as object:(vname) exists
  has_callable_verb          => same, but verb must be callable from a program
  match_verb  (object,vname) => false/{location, newvname}
                               (identify location and usable name of verb)
Suspending:
  Many of the above verbs have ..._suspended versions to assist with very large object hierarchies.  The following exist:
   descendants_suspended              
   branches_suspended                 
   leaves_suspended                   
   all_properties_suspended           
   descendants_with_property_suspended

@integrate_room $container isn't set.
@integrate_player $container isn't set.
@integrate_container $container isn't set.
@in $container is "in"
@put_fail $container is "You can't put %dd %tx{in} that."
@remove_fail $container is "You can't remove that."
@remove $container is "%Nd %n:(removes) %di from %id."
@put $container is "%Nd %n:(puts) %dd %tx{in} %id."
@empty $container is "%Ts %t:(is) empty."
@integrate_sep $container is "  "
stormagnet takes the bouquet.
stormagnet drops a bouquet.
stormagnet takes the bouquet.
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Objects owned by stormagnet (from #0 to #539):
  6K #246 stormagnet                 [Great Hall]
  5K #260 Generic Wind-Up Toy        [stormagnet]
  2K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows            *North Vestibule->Northern Entrance
  1K #267 Northern Entrance         
  1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [Nowhere]
 <1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling           *[generic room]
 <1K #273 timbered ceiling          *[North Vestibule]
  2K #274 chaise longues            *[North Vestibule]
  2K #275 butler's desk             *[North Vestibule]
 <1K #276 butler's key               [stormagnet]
  1K #277 demi-lune table           *[North Vestibule]
  1K #278 silver salver              [demi-lune table]
  1K #284 calling cards              [silver salver]
  1K #285 chandelier                 [timbered ceiling]
  2K #286 porter's chair            *[North Vestibule]
  1K #287 Great Hall                
 <1K #288 south                      *North Vestibule->Great Hall
 <1K #289 generic bot                [stormagnet]
  2K #249 tracery windows            Northern Entrance->*North Vestibule
  1K #292 Northeast Tower           
 <1K #293 east                       Great Hall->Northeast Tower
  1K #294 Northwest Tower           
 <1K #295 west                       Great Hall->Northwest Tower
  1K #296 East Hall                 
 <1K #297 south                      Northeast Tower->East Hall
  1K #298 Atrium                    
 <1K #300 north                      East Hall->Northeast Tower
 <1K #301 west                       Northeast Tower->Great Hall
  1K #302 Atrium                    
 <1K #303 south                      Great Hall->Atrium
  1K #304 West Hall                 
 <1K #305 south                      Northwest Tower->West Hall
 <1K #306 north                      West Hall->Northwest Tower
 <1K #307 east                       West Hall->Atrium
 <1K #308 east                       Northwest Tower->Great Hall
 <1K #309 north                      Great Hall->*North Vestibule
  1K #310 East Foyer                
 <1K #311 east                       East Hall->East Foyer
 <1K #299 west                       East Hall->Atrium
  1K #312 Southeast Tower           
 <1K #313 south                      East Hall->Southeast Tower
 <1K #314 north                      Southeast Tower->East Hall
  1K #315 South Hall                
 <1K #316 west                       Southeast Tower->South Hall
 <1K #317 north                      South Hall->Atrium
  1K #318 South Vestibule           
 <1K #319 south                      South Hall->South Vestibule
 <1K #320 east                       South Hall->Southeast Tower
  1K #321 Southwest Tower           
 <1K #322 west                       South Hall->Southwest Tower
  1K #323 Muscician's Gallery       
 <1K #324 up                         East Hall->Muscician's Gallery
 <1K #325 north                      Atrium->Great Hall
 <1K #326 south                      Atrium->South Hall
 <1K #327 east                       Atrium->East Hall
 <1K #328 west                       Atrium->West Hall
 <1K #329 west                       East Foyer->East Hall
  1K #330 Ballroom                  
 <1K #331 south                      East Foyer->Ballroom
  1K #332 Smoking Room Doorway      
 <1K #333 north1                     East Foyer->Smoking Room Doorwa
  1K #334 Dining Room Doorway       
 <1K #335 north2                     East Foyer->Dining Room Doorway
  1K #336 Drawing Room Doorway      
 <1K #337 north3                     East Foyer->Drawing Room Doorwa
  1K #338 Side Foyer                
 <1K #339 turn corner                East Foyer->Side Foyer
 <1K #340 north                      Side Foyer->East Foyer
 <1K #341 down                       Muscician's Gallery->East Hall
 <1K #342 north                      Southwest Tower->West Hall
 <1K #343 east                       Southwest Tower->South Hall
 <1K #344 north                      South Vestibule->South Hall
 <1K #345 north                      Ballroom->East Foyer
  1K #346 Refreshment Room          
 <1K #347 south1                     Ballroom->Refreshment Room
  1K #348 Card Room                 
 <1K #349 south2                     Ballroom->Card Room
  1K #350 Smoking Room              
 <1K #351 south                      Card Room->Smoking Room
 <1K #352 north                      Card Room->Ballroom
  1K #353 East Servant's Passage    
 <1K #354 east                       Card Room->East Servant's Pass
 <1K #355 north                      Smoking Room->Card Room
 <1K #356 north                      Refreshment Room->Ballroom
  1K #357 Fainting Room             
 <1K #358 south                      Refreshment Room->Fainting Room
 <1K #359 north                      Fainting Room->Refreshment Room
 <1K #360 south                      Smoking Room Doorwa->East Foyer
  1K #361 Smoking Room              
 <1K #362 north                      Smoking Room Doorwa->Smoking Room
 <1K #363 south                      Smoking Room->Smoking Room Doorwa
  1K #364 Dining Room               
 <1K #365 east                       Smoking Room->Dining Room
 <1K #366 west                       Dining Room->Smoking Room
 <1K #367 south                      Dining Room->Dining Room Doorway
  1K #368 Red Drawing Room          
 <1K #369 east                       Dining Room->Red Drawing Room
 <1K #370 north                      Dining Room Doorway->Dining Room
 <1K #371 south                      Dining Room Doorway->East Foyer
 <1K #372 west                       Red Drawing Room->Dining Room
 <1K #373 south                      Red Drawing Room->Drawing Room Doorwa
  1K #374 Blue Drawing Room         
 <1K #375 east                       Red Drawing Room->Blue Drawing Room
 <1K #376 north                      Drawing Room Doorwa->Red Drawing Room
 <1K #377 south                      Drawing Room Doorwa->East Foyer
 <1K #378 west                       Blue Drawing Room->Red Drawing Room
  1K #379 Solarium                  
 <1K #380 east                       Blue Drawing Room->Solarium
  1K #381 Morning Room              
 <1K #382 south                      Blue Drawing Room->Morning Room
 <1K #383 north                      Morning Room->Blue Drawing Room
 <1K #384 east                       Morning Room->Solarium
  1K #385 Breakfast Room            
 <1K #386 south                      Morning Room->Breakfast Room
 <1K #387 north                      Breakfast Room->Morning Room
 <1K #388 east                       Breakfast Room->Solarium
 <1K #389 west1                      Solarium->Blue Drawing Room
 <1K #390 west2                      Solarium->Morning Room
 <1K #391 west3                      Solarium->Breakfast Room
 <1K #392 west4                      Solarium->Breakfast Room
  1K #393 West Foyer                
 <1K #394 west                       West Hall->West Foyer
 <1K #395 east                       West Foyer->West Hall
  1K #396 South Foyer               
 <1K #397 south                      West Foyer->South Foyer
  1K #398 Front Parlour             
  1K #399 n1                         West Foyer->Front Parlour
  1K #400 Music Room                
  1K #401 n2                         West Foyer->Music Room
  1K #402 Green Drawing Room        
  1K #403 n3                         West Foyer->Green Drawing Room
  1K #404 Lower Library Doorway     
  1K #405 south1                     West Foyer->Lower Library Doorw
  1K #406 Billiard Room Doorway     
  1K #407 south2                     West Foyer->Billiard Room Doorw
 <1K #408 south                      Front Parlour->West Foyer
 <1K #409 west                       Front Parlour->Music Room
 <1K #410 south                      Music Room->West Foyer
 <1K #411 east                       Music Room->Front Parlour
 <1K #412 west                       Music Room->Green Drawing Room
 <1K #413 south                      Green Drawing Room->West Foyer
 <1K #414 east                       Green Drawing Room->Music Room
  1K #415 Conservatory              
 <1K #416 west                       Green Drawing Room->Conservatory
  1K #418 northeast                  Conservatory->Green Drawing Room
  1K #417 southeast                  Conservatory->West Foyer
  1K #419 Lower Library             
 <1K #420 south                      Lower Library Doorw->Lower Library
 <1K #421 north                      Lower Library Doorw->West Foyer
  1K #422 West Servant's Passage    
 <1K #423 west                       Lower Library Doorw->West Servant's Pass
 <1K #424 north                      Lower Library->Lower Library Doorw
 <1K #425 east                       West Servant's Pass->Lower Library Doorw
 <1K #426 west                       West Servant's Pass->Billiard Room Doorw
 <1K #427 north                      Billiard Room Doorw->West Foyer
  1K #428 Billiard Room             
 <1K #429 south                      Billiard Room Doorw->Billiard Room
 <1K #430 east                       Billiard Room Doorw->West Servant's Pass
  1K #431 Billiard Room Servant's P 
 <1K #432 west                       Billiard Room Doorw->Billiard Room Serva
 <1K #433 north                      Billiard Room->Billiard Room Doorw
  1K #434 Back Parlour              
 <1K #435 south                      Billiard Room->Back Parlour
 <1K #436 north                      Back Parlour->Billiard Room
  1K #437 Back Parlour Doorway      
 <1K #438 west                       Back Parlour->Back Parlour Doorwa
 <1K #439 north                      Back Parlour Doorwa->Billiard Room Serva
 <1K #440 east                       Back Parlour Doorwa->Back Parlour
 <1K #441 west                       Back Parlour Doorwa->South Foyer
  1K #442 Back Parlour Servant's Pa 
 <1K #443 south                      Back Parlour Doorwa->Back Parlour Servan
 <1K #444 north                      Back Parlour Servan->Back Parlour Doorwa
  1K #446 White Drawing Room Doorwa 
 <1K #447 south                      Back Parlour Servan->White Drawing Room 
  1K #449 White Drawing Room        
 <1K #450 east                       White Drawing Room ->White Drawing Room
 <1K #451 west                       White Drawing Room ->South Foyer
  1K #452 Back Scullery Servant's P 
 <1K #453 south                      White Drawing Room ->Back Scullery Serva
 <1K #454 north                      White Drawing Room ->Back Parlour Servan
 <1K #455 west                       White Drawing Room->White Drawing Room 
 <1K #456 north                      Back Scullery Serva->White Drawing Room 
  1K #457 Back Scullery             
 <1K #458 east                       Back Scullery Serva->Back Scullery
 <1K #459 south                      Billiard Room Serva->Back Parlour Doorwa
 <1K #460 east                       Billiard Room Serva->Billiard Room Doorw
 <1K #461 west                       Back Scullery->South Foyer
  1K #462 Winter Hall               
 <1K #463 south                      South Foyer->Winter Hall
 <1K #464 east                       South Foyer->West Foyer
  1K #465 Dining Room Servant's Pas 
 <1K #466 west                       Dining Room Doorway->Dining Room Servant
  1K #467 Drawing Room Servant's Pa 
 <1K #468 east                       Dining Room Doorway->Drawing Room Servan
 <1K #469 east                       Dining Room Servant->Dining Room Doorway
 <1K #470 west                       Dining Room Servant->Smoking Room Doorwa
 <1K #471 east                       Smoking Room Doorwa->Dining Room Servant
 <1K #472 west                       Drawing Room Servan->Dining Room Doorway
 <1K #473 east                       Drawing Room Servan->Drawing Room Doorwa
 <1K #474 west                       Drawing Room Doorwa->Drawing Room Servan
 <1K #475 east                       Drawing Room Doorwa->East Servant's Pass
 <1K #476 west                       East Servant's Pass->Card Room
 <1K #477 north                      East Servant's Pass->Drawing Room Doorwa
 <1K #478 north                      Winter Hall->South Foyer
 <1K #479 first east                 South Foyer->Back Parlour Doorwa
 <1K #480 second east                South Foyer->White Drawing Room 
  1K #481 Water Closet              
 <1K #482 third east                 South Foyer->Water Closet
 <1K #483 fourth east                South Foyer->Back Scullery
 <1K #484 first west                 South Foyer->Conservatory
  1K #485 Summer Hall               
 <1K #486 second west                South Foyer->Summer Hall
  1K #487 Theater                   
 <1K #488 third west                 South Foyer->Theater
  1K #489 Backstage                 
 <1K #490 fourth west                South Foyer->Backstage
 <1K #491 east                       Backstage->South Foyer
  1K #492 Stage                     
 <1K #493 north                      Backstage->Stage
 <1K #494 south                      Stage->Backstage
 <1K #495 down                       Stage->Theater
 <1K #496 up                         Theater->Stage
 <1K #497 east                       Theater->South Foyer
 <1K #498 east                       Summer Hall->South Foyer
  2K #499 chaise longue              [Nowhere]
  1K #500 chair                      [Nowhere]
  1K #501 bed                        [Nowhere]
 <1K #506 tea table                  [Front Parlour]
  1K #512 floor                      [Nowhere]
  1K #513 front parlour floor        [Front Parlour]
 <1K #515 front parlour ceiling      [Front Parlour]
 <1K #514 brass chandelier           [front parlour ceiling]
 <1K #516 oriental rug               [Front Parlour]
  1K #502 settee                     [Nowhere]
  1K #517 settees                    [Front Parlour]
 <1K #518 walls                      [Nowhere]
 <1K #519 walls                      [Front Parlour]
 <1K #520 acanthus leaves            [walls]
 <1K #521 picture rail               [Nowhere]
 <1K #522 frieze                     [Front Parlour]
 <1K #523 cornice                    [walls]
 <1K #524 picture rail               [walls]
 <1K #525 painting                   [Nowhere]
  1K #526 floor                      [Great Hall]
 <1K #527 walls                      [Great Hall]
 <1K #528 basalt block               [walls]
 <1K #529 pillar                     [Nowhere]
 <1K #530 pillars                    [Great Hall]
  1K #534 chaises                    [Great Hall]
 <1K #535 demi-lune tables           [Great Hall]
 <1K #536 vase                       [Nowhere]
 <1K #537 crystal vases              [demi-lune tables]
 <1K #538 flower                     [Nowhere]
 <1K #539 bouquet                    [stormagnet]
-- 257 objects.  Total bytes: 273,805.----------------------------------------
Your current object is now #539.
Object #539 does not define that verb, but its ancestor #126 does.
Last modified Sat May 31 17:19:19 1997 PDT by Xythian (#199) (on Waterpoint).
#126:"description" this none this
desc = pass(@args);
// defaultdesc = {"You see nothing special."};
// if (!desc)
//  desc = defaultdesc;
// endif
integrate = $integration_utils:integrate(args, "integrate_container_msg");
if (integrate)
  if (!desc)
    return integrate;
  else
    desc[$] = desc[$] + $string_utils:pronoun_sub(this.integrate_sep_msg) + integrate[1];
    if (length(integrate) > 1)
      desc = {@desc, @integrate[2..$]};
    endif
  endif
endif
return desc;
Object #539 does not define that verb, but its ancestor #145 does.
Last modified Fri May 31 08:49:53 1996 PDT by DavidSan (#84) (on JHM).
#145:"look_self" this none this
things = this:visible_of(this:contents());
integrate = {};
if ("for now" || this.integration_enabled)
  for i in (things)
    if (this:ok_to_integrate(i))
      integrate = {@integrate, i};
      things = setremove(things, i);
    endif
  endfor
endif
pass(integrate);
this:tell_contents(things);
return;
bouquet (#539)   generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
Object #110 does not define that verb, but its ancestor #1 does.
#1:"look_self" this none this
desc = this:description(@args);
if (desc)
  player:tell_lines(desc);
else
  player:tell("You see nothing special.");
endif
Object #110 does not define that verb, but its ancestor #1 does.
#1:"description" this none this
// Always return a list.
// (I've been wanting to do this for a long time.)
if (desc = this.description)
  if (typeof(desc) == LIST)
    return desc;
  else
    return {desc};
  endif
else
  return {};
endif
Object #145 does not define that verb, but its ancestor #1 does.
#1:"description" this none this
// Always return a list.
// (I've been wanting to do this for a long time.)
if (desc = this.description)
  if (typeof(desc) == LIST)
    return desc;
  else
    return {desc};
  endif
else
  return {};
endif
Last modified Sat May 31 17:19:19 1997 PDT by Xythian (#199) (on Waterpoint).
#126:"description" this none this
desc = pass(@args);
// defaultdesc = {"You see nothing special."};
// if (!desc)
//  desc = defaultdesc;
// endif
integrate = $integration_utils:integrate(args, "integrate_container_msg");
if (integrate)
  if (!desc)
    return integrate;
  else
    desc[$] = desc[$] + $string_utils:pronoun_sub(this.integrate_sep_msg) + integrate[1];
    if (length(integrate) > 1)
      desc = {@desc, @integrate[2..$]};
    endif
  endif
endif
return desc;
-----
$INTEGRATION_UTILS:INTEGRATE
============================

integrate(list, verb_or_property)

generic window (#179) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic door (#121).
-------------------------------- finished ---------------------------------
Your current object is now $window, a generic window (#179).
generic window (#179) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic door (#121).
-------------------------------- finished ---------------------------------
generic window (#179) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic door (#121).
-------------------------------- finished ---------------------------------
generic window (#179) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic door (#121).
 open_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
 close_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
,open                    unknown hack (#35)    r      0
 opened_msg              unknown hack (#35)    r c    {#69, "do", "The door t..
 closed_msg              unknown hack (#35)    r c    {#69, "do", "The door t..
,automatic               unknown hack (#35)    r      0
 locked_msg              unknown hack (#35)    r c    {#69, "do", "The door t..
 other_side              unknown hack (#35)    r      #-1
,opens_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
,closes_msg              unknown hack (#35)    r c    {#69, "do", {"name", "p..
 user_key                unknown hack (#35)    r      #-1
 unlocked_msg            unknown hack (#35)    r c    {#69, "do", "The door "..
 lock_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
 unlock_msg              unknown hack (#35)    r c    {#69, "do", {"name", "p..
 locked                  unknown hack (#35)    r      0
,locks_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
,unlocks_msg             unknown hack (#35)    r c    {#69, "do", {"name", "p..
 knock_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
,knocks_msg              unknown hack (#35)    r c    {#69, "do", {"name", "p..
,opaque                  unknown hack (#35)    r      0
,help                    unknown hack (#35)    r c    {"Windows are just like..
 no_key_msg              unknown hack (#35)    r c    {#69, "do", "You don't ..
 close_delay             unknown hack (#35)    r      -1
 closing_task            unknown hack (#35)    r      0
 self_closes_msg         unknown hack (#35)    r c    {#69, "do", "The door t..
 pull_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
,obvious                 unknown hack (#35)    r c    0
 source                  unknown hack (#35)    r c    #-1
 dest                    unknown hack (#35)    r c    #-1
 nogo_msg                unknown hack (#35)    r c    0
 onogo_msg               unknown hack (#35)    r c    0
 arrive_msg              unknown hack (#35)    r c    0
 oarrive_msg             unknown hack (#35)    r c    0
 oleave_msg              unknown hack (#35)    r c    0
 leave_msg               unknown hack (#35)    r c    0
 nothing_msg             unknown hack (#35)    r c    "nothing"
 no_one_msg              unknown hack (#35)    r c    "no one"
 prefix_name             unknown hack (#35)    r c    1
 through_msg             unknown hack (#35)    r c    {#69, "do", {"name", {"..
 walking_cost            unknown hack (#35)    r      1
 dependents              Core-Wizard (#184)    r      {}
,key                     unknown hack (#35)      c    0
,aliases                 unknown hack (#35)    r c    {"generic window", "win..
 description             unknown hack (#35)    r c    {}
 visible                 unknown hack (#35)    r      1
,integrate_room_msg      unknown hack (#35)    r c    {#69, "do", {"name", "t..
 integrate_player_msg    unknown hack (#35)    r c    ""
 integrate_container_msg unknown hack (#35)    r c    ""
 unique                  unknown hack (#35)    r c    0
 proper                  unknown hack (#35)    r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {2766, 1238564325}
,core_names              unknown hack (#35)    r c    {}
-------------------------------- finished ---------------------------------
generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
    #7:recycle                  Core-Wizard (#184)   rxd    this none this
    #7:"leave_msg oleave_msg arrive_msg oarrive_msg nogo_msg onogo_msg no_one_msg" Core-Wizard (#184) rxd this none this
    #7:set_name                 Core-Wizard (#184)   rxd    this none this
    #7:set_aliases              Core-Wizard (#184)   rxd    this none this
    #7:defaulting_oleave_msg    Core-Wizard (#184)   rxd    this none this
    #7:moveto                   Core-Wizard (#184)   rxd    this none this
    #7:examine_key              Core-Wizard (#184)   rxd    this none this
    #7:substitute               Core-Wizard (#184)   rxd    this none this
    #7:dest_who                 Core-Wizard (#184)   rxd    this none this
    #7:dest_contents            Core-Wizard (#184)   rxd    this none this
    #7:dest_description         Core-Wizard (#184)   rxd    this none this
    #7:set_message              Core-Wizard (#184)   rxd    this none this
    #7:set_description          Core-Wizard (#184)   rxd    this none this
    #7:invoke                   Core-Wizard (#184)   rxd    this none this
    #7:integrate_in             Core-Wizard (#184)   rxd    this none this
    #7:"direction sub_direction" unknown hacker (#35) rxd   this none this
    #7:description              Core-Wizard (#184)   rxd    this none this
    #7:sub_who                  Core-Wizard (#184)   rxd    this none this
    #7:move                     Core-Wizard (#184)   rxd    this none this
    #7:sweep_for_followers      Core-Wizard (#184)   rxd    this none this
    #7:obvious                  unknown hacker (#35) rxd    this none this
    #7:defaulting_oarrive_msg   unknown hacker (#35) rxd    this none this
    #7:integrate_room_msg       Core-Wizard (#184)   rxd    this none this
    #7:dependents_event_move_by_exit_* Core-Wizard (#184) rxd this none this
    #7:"other_side obj_other_side" Core-Wizard (#184) rxd   this none this
    #7:set_walking_cost         unknown hacker (#35) rxd    this none this
    #7:walking_cost             unknown hacker (#35) rxd    this none this
    #7:"obj_dest obj_source"    unknown hacker (#35) rxd    this none this
    #7:"moddir_d moddir_i"      unknown hacker (#35) rxd    this none this
    #7:moddir_*                 unknown hacker (#35) rxd    this none this
    #7:through_msg              Core-Wizard (#184)   rxd    this none this
    #7:where_are_you            Core-Wizard (#184)   rxd    this none this
    #7:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
#7:"description" this none this
// 'description (...)', etc. - Return messages for the transparent exit.
text = pass(@args);
result = {};
for item in (text)
  result = {@result, this:substitute(item)};
endfor
if (typeof(through = this:through_msg(this)) == LIST)
  result = {@result, @through};
elseif (through)
  result = {@result, through};
endif
return result;
You now have Generic See-through Portal with object number #540 and parent generic exit (#7).
The created object is now your current object.
Object #540 does not define that verb, but its ancestor #7 does.
#7:"invoke" this none this
if (typeof(this.obvious) == LIST)
  this.obvious = setadd(this.obvious, player);
endif
this:move(player);
Searching for verbs that appear to call :invoke ...

#3:go [+d Core-Wizard (#184)]:    exit:invoke();
#3:e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down [+d unknown hacker (#35)]:    exit:invoke();
#3:here_huh [+d Core-Wizard (#184)]:    exit:invoke();
#6:@send [+d Core-Wizard (#184)]:  $mail_editor:invoke(args, verb, @subject);
#6:@answer @repl*y [+d Core-Wizard (#184)]:      $mail_editor:invoke(2, verb, p[1]:messages_in_seq(p[2])[1][2], @flags_replytos);
#6:@gripe [+d Core-Wizard (#184)]:  $mail_editor:invoke($gripe_recipients, "@gripe", "@gripe: " + argstr);
#6:@typo @bug @suggest*ion @idea @comment [+d Core-Wizard (#184)]:    $mail_editor:invoke({tostr(loc.owner)}, verb, subject);
#6:@notedit [+d unknown hacker (#35)]:  $note_editor:invoke(dobjstr, verb);
#6:@quicksend @qsend [+d Core-Wizard (#184)]:        $mail_editor:invoke(1, verb, recipients, subject, {}, message[2]);
#6:@edit*# [+d Core-Wizard (#184)]:      active[1]:invoke(dobjstr, verb);
#45:e*dit [+d unknown hacker (#35)]:    this:invoke(argstr, verb);
#46:invoke [+d unknown hacker (#35)]:  ":invoke(...)";
#169:@helpedit @edithelp [+d Core-Wizard (#184)]:  $help_editor:invoke(dobjstr, verb);
#282:drop [+d Crag (#243)]:    exits[random(length(exits))]:invoke();
#531:match_command [+d Crag (#243)]:  "  handler:invoke(@parameters);";

Total: 15 verbs.
Object #287 does not define that verb, but its ancestor #3 does.
Last modified Thu Jan 31 15:57:55 2002 PST by Xplat (#4014) (on Waterpoint).
#3:"go" any none none
if (!args || !(dir = args[1]))
  player:tell("You need to specify a direction.");
  return E_INVARG;
elseif (valid(exit = this:match_exit(dir)))
  exit:invoke();
  if (length(args) > 1)
    old_room = player.location;
    argstr = args[2];
    // Now give objects in the room we just entered a chance to act.
    fork (1)
      if (player.location == old_room)
        // player didn't move or get moved while we were suspended
        player.location:go(@listdelete(args, 1));
      endif
    endfork
  endif
elseif (valid(exit = this:match_exit(dir = argstr)))
  exit:invoke();
elseif (exit == $failed_match)
  player:tell("You can't go that way (", dir, ").");
else
  player:tell("There's more than one way to go in the direction `", dir, "'.");
endif
Object #287 does not define that verb, but its ancestor #3 does.
#3:"match_exit match_entrance" (what)
// Only full matches are successful.  This is so, for example, "s" doesn't match "secret door".
if (what)
  yes = $failed_match;
  for e in (this:(verb == "match_exit" ? "exits" | "entrances")())
    if (valid(e) && what in {e.name, @e.aliases})
      if (yes == $failed_match)
        yes = e;
      elseif (yes != e)
        return $ambiguous_match;
      endif
    endif
  endfor
  return yes;
else
  return $nothing;
endif
generic door (#121) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic exit (#7).
  #121:open                     unknown hacker (#35) rxd    this none none
  #121:"close shut"             unknown hacker (#35) rxd    this none none
  #121:"opens_msg closes_msg locks_msg unlocks_msg knocks_msg opened_msg closed_msg locked_msg unlocked_msg no_key_msg" unknown hacker (#35) rxd this none this
  #121:description              unknown hacker (#35) rxd    this none this
  #121:move                     unknown hacker (#35) rxd    this none this
  #121:trusted                  unknown hacker (#35) rxd    this none this
  #121:lock                     unknown hacker (#35) rxd    this none none
  #121:unlock                   unknown hacker (#35) rxd    this none none
  #121:is_locked                unknown hacker (#35) rxd    this none this
  #121:has_key                  unknown hacker (#35) rxd    this none this
  #121:find_other_side          unknown hacker (#35) rxd    this none this
  #121:setup_connection         unknown hacker (#35) rxd    this none this
  #121:"other_side obj_other_side" unknown hacker (#35) rxd this none this
  #121:knock                    unknown hacker (#35) rxd    none on top of/on/onto/upon this
  #121:"set_user_key set_close_delay" unknown hacker (#35) rxd this none this
  #121:"knock_msg open_msg close_msg lock_msg unlock_msg self_closes_msg" unknown hacker (#35) rxd this none this
  #121:"set_locked set_other_side set_opaque set_automatic set_closing_task" unknown hacker (#35) rxd this none this
  #121:self_close               unknown hacker (#35) rxd    this none this
  #121:set_open                 unknown hacker (#35) rxd    this none this
  #121:close_delay              unknown hacker (#35) rxd    this none this
  #121:event_directed_speech    unknown hacker (#35) rxd    this none this
  #121:is_unlocked_for          unknown hacker (#35) rxd    this none this
  #121:help_text                unknown hacker (#35) rxd    this none this
  #121:through_msg              unknown hacker (#35) rxd    this none this
  #121:sub_open                 Core-Wizard (#184)   rxd    this none this
  #121:pull                     unknown hacker (#35) rxd    any through this
  #121:walking_cost             unknown hacker (#35) rxd    this none this
  #121:obj_user_key             unknown hacker (#35) rxd    this none this
  #121:modname_open             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Wed Jul 17 07:43:42 2002 PDT by Xplat (#4014) (on Waterpoint).
#121:"open" this none none
who = caller == this ? args[1] | player;
if (this.open)
  who:tell(this:opened_msg());
  return;
endif
who.location:broadcast_event_door_open_attempted(who, this);
if (this:is_locked())
  if (this.automatic)
    this:unlock(who);
    if (this:is_locked())
      who.location:broadcast_event_door_open_failed(who, this);
      return;
    endif
  else
    who.location:broadcast_event_door_open_failed(who, this);
    who:tell(this:locked_msg());
    return;
  endif
endif
$you:say_action(this:open_msg(), who);
this:set_open(1);
who.location:broadcast_event_door_open_completed(who, this);
if (typeof(other_side = this:other_side()) == OBJ && $object_utils:isa(other_side, $door))
  other_side.source:announce_all_but({who}, other_side:opens_msg(who));
  other_side:set_open(1);
  other_side.source:broadcast_event_door_open_other_side(who, other_side);
endif
Last modified Sun Jan  7 17:59:17 2001 PST by Xplat (#4014) (on Waterpoint).
#121:"set_open" this none this
// Usage: set_open(open)
// 
// Sets the open flag of the door to <open>.  True means the door is open, false means it isn't.  It will raise the usual errors for bad arguments (hope this doesn't break anything) and raises or returns E_PERM for permission errors (right now it returns E_PERM, but in the future it will raise instead).  If, however, everything goes well, it returns the new value of the open flag.
// 
// Don't count on the open flag being the exact value you put in.  In the future all values will probably be converted to 0 or 1.
// 
// Additionally, this is where we manage the self-closing task if this is a self-closing door.
// 
{open} = args;
if (!this:trusted(caller))
  // FIXME: this should be 'raise' when other code permits:
  return E_PERM;
endif
if (this.open = open)
  if ((delay = this:close_delay()) >= 0)
    fork t (delay)
      if (this.open)
        this:self_close();
      endif
    endfork
    this:set_closing_task(t);
  endif
else
  if (this.closing_task && this.closing_task != task_id())
    // yes, this does get called from .closing_task, which will suicide without the above check
    `kill_task(this.closing_task) ! E_INVARG, E_PERM';
    // in the above line we take care of the case where the closing task has already run, been killed, or just died.  The E_PERM is kinda random -- we don't expect the taskid to get reused, but if someone hijacked it there's nothing any of our callers is likely to be able to do about it so we ignore that condition too.
    this:set_closing_task(0);
  endif
endif
return this.open;
A delicate flower.  stormagnet is holding a bouquet.
She is awake, but has been staring off into space for 8 minutes.
Carrying:
 a Generic Wind-Up Toy                   a butler's key
 a leather couch                         a generic bot
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#121:set_open this none this" name: "MOO verb: #121:set_open this none this" type: moo-code content*: "" _data-tag: 861859694167
#$#* 861859694167 content: // Usage: set_open(open)
#$#* 861859694167 content: // 
#$#* 861859694167 content: // Sets the open flag of the door to <open>.  True means the door is open, false means it isn't.  It will raise the usual errors for bad arguments (hope this doesn't break anything) and raises or returns E_PERM for permission errors (right now it returns E_PERM, but in the future it will raise instead).  If, however, everything goes well, it returns the new value of the open flag.
#$#* 861859694167 content: // 
#$#* 861859694167 content: // Don't count on the open flag being the exact value you put in.  In the future all values will probably be converted to 0 or 1.
#$#* 861859694167 content: // 
#$#* 861859694167 content: // Additionally, this is where we manage the self-closing task if this is a self-closing door.
#$#* 861859694167 content: // 
#$#* 861859694167 content: {open} = args;
#$#* 861859694167 content: if (!this:trusted(caller))
#$#* 861859694167 content:   // FIXME: this should be 'raise' when other code permits:
#$#* 861859694167 content:   return E_PERM;
#$#* 861859694167 content: endif
#$#* 861859694167 content: if (this.open = open)
#$#* 861859694167 content:   if ((delay = this:close_delay()) >= 0)
#$#* 861859694167 content:     fork t (delay)
#$#* 861859694167 content:       if (this.open)
#$#* 861859694167 content:         this:self_close();
#$#* 861859694167 content:       endif
#$#* 861859694167 content:     endfork
#$#* 861859694167 content:     this:set_closing_task(t);
#$#* 861859694167 content:   endif
#$#* 861859694167 content: else
#$#* 861859694167 content:   if (this.closing_task && this.closing_task != task_id())
#$#* 861859694167 content:     // yes, this does get called from .closing_task, which will suicide without the above check
#$#* 861859694167 content:     `kill_task(this.closing_task) ! E_INVARG, E_PERM';
#$#* 861859694167 content:     // in the above line we take care of the case where the closing task has already run, been killed, or just died.  The E_PERM is kinda random -- we don't expect the taskid to get reused, but if someone hijacked it there's nothing any of our callers is likely to be able to do about it so we ignore that condition too.
#$#* 861859694167 content:     this:set_closing_task(0);
#$#* 861859694167 content:   endif
#$#* 861859694167 content: endif
#$#* 861859694167 content: return this.open;
#$#: 861859694167
0 errors.
Verb programmed.
Last modified Wed Jul 17 07:43:42 2002 PDT by Xplat (#4014) (on Waterpoint).
#121:"open" this none none
who = caller == this ? args[1] | player;
if (this.open)
  who:tell(this:opened_msg());
  return;
endif
who.location:broadcast_event_door_open_attempted(who, this);
if (this:is_locked())
  if (this.automatic)
    this:unlock(who);
    if (this:is_locked())
      who.location:broadcast_event_door_open_failed(who, this);
      return;
    endif
  else
    who.location:broadcast_event_door_open_failed(who, this);
    who:tell(this:locked_msg());
    return;
  endif
endif
$you:say_action(this:open_msg(), who);
this:set_open(1);
who.location:broadcast_event_door_open_completed(who, this);
if (typeof(other_side = this:other_side()) == OBJ && $object_utils:isa(other_side, $door))
  other_side.source:announce_all_but({who}, other_side:opens_msg(who));
  other_side:set_open(1);
  other_side.source:broadcast_event_door_open_other_side(who, other_side);
endif
=> #540 (Generic See-through Portal)
Locked Generic See-through Portal to this key:
  #-1
You see no "$dootr" here.
Parent changed.
You stand up from the floor.
You open the door to the Generic See-through Portal.
You close the door to the Generic See-through Portal.
=> 0
Locked Generic See-through Portal to this key:
  #-1
That key expression is malformed:
  Can't find an object named '0'
Locked Generic See-through Portal to this key:
  #-1 && !#-1
You open the door to the Generic See-through Portal.
Object #540 does not define that verb, but its ancestor #121 does.
#121:"is_locked" this none this
return this.locked;
generic door (#121) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic exit (#7).
.open_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
.close_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
.open                    unknown hack (#35)    r      0
.opened_msg              unknown hack (#35)    r c    {#69, "do", "The door t..
.closed_msg              unknown hack (#35)    r c    {#69, "do", "The door t..
.automatic               unknown hack (#35)    r      1
.locked_msg              unknown hack (#35)    r c    {#69, "do", "The door t..
.other_side              unknown hack (#35)    r      #-1
.opens_msg               unknown hack (#35)    r c    {#69, "do", "The door t..
.closes_msg              unknown hack (#35)    r c    {#69, "do", "The door "..
.user_key                unknown hack (#35)    r      #-1
.unlocked_msg            unknown hack (#35)    r c    {#69, "do", "The door "..
.lock_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
.unlock_msg              unknown hack (#35)    r c    {#69, "do", {"name", "p..
.locked                  unknown hack (#35)    r      0
.locks_msg               unknown hack (#35)    r c    {#69, "do", "You hear t..
.unlocks_msg             unknown hack (#35)    r c    {#69, "do", "You hear t..
.knock_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
.knocks_msg              unknown hack (#35)    r c    {#69, "do", "Someone kn..
.opaque                  unknown hack (#35)    r      1
.help                    unknown hack (#35)    r c    {"A Generic Door which ..
.no_key_msg              unknown hack (#35)    r c    {#69, "do", "You don't ..
.close_delay             unknown hack (#35)    r      -1
.closing_task            unknown hack (#35)    r      0
.self_closes_msg         unknown hack (#35)    r c    {#69, "do", "The door t..
.pull_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
-------------------------------- finished ---------------------------------
=> 0
That is not a valid command.
Generic See-through Portal (#540) [ readable ]
  Child of generic door (#121).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
generic door (#121) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic exit (#7).
  #121:open                     unknown hacker (#35) rxd    this none none
  #121:"close shut"             unknown hacker (#35) rxd    this none none
  #121:"opens_msg closes_msg locks_msg unlocks_msg knocks_msg opened_msg closed_msg locked_msg unlocked_msg no_key_msg" unknown hacker (#35) rxd this none this
  #121:description              unknown hacker (#35) rxd    this none this
  #121:move                     unknown hacker (#35) rxd    this none this
  #121:trusted                  unknown hacker (#35) rxd    this none this
  #121:lock                     unknown hacker (#35) rxd    this none none
  #121:unlock                   unknown hacker (#35) rxd    this none none
  #121:is_locked                unknown hacker (#35) rxd    this none this
  #121:has_key                  unknown hacker (#35) rxd    this none this
  #121:find_other_side          unknown hacker (#35) rxd    this none this
  #121:setup_connection         unknown hacker (#35) rxd    this none this
  #121:"other_side obj_other_side" unknown hacker (#35) rxd this none this
  #121:knock                    unknown hacker (#35) rxd    none on top of/on/onto/upon this
  #121:"set_user_key set_close_delay" unknown hacker (#35) rxd this none this
  #121:"knock_msg open_msg close_msg lock_msg unlock_msg self_closes_msg" unknown hacker (#35) rxd this none this
  #121:"set_locked set_other_side set_opaque set_automatic set_closing_task" unknown hacker (#35) rxd this none this
  #121:self_close               unknown hacker (#35) rxd    this none this
  #121:set_open                 unknown hacker (#35) rxd    this none this
  #121:close_delay              unknown hacker (#35) rxd    this none this
  #121:event_directed_speech    unknown hacker (#35) rxd    this none this
  #121:is_unlocked_for          unknown hacker (#35) rxd    this none this
  #121:help_text                unknown hacker (#35) rxd    this none this
  #121:through_msg              unknown hacker (#35) rxd    this none this
  #121:sub_open                 Core-Wizard (#184)   rxd    this none this
  #121:pull                     unknown hacker (#35) rxd    any through this
  #121:walking_cost             unknown hacker (#35) rxd    this none this
  #121:obj_user_key             unknown hacker (#35) rxd    this none this
  #121:modname_open             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
You can't see that here.
=> #540 (Generic See-through Portal)
-----
_:LOCK
======

(No documentation.)

Object #540 does not define that verb, but its ancestor #121 does.
#121:"lock" this none none
if (player.location != this.source)
  player:tell("You can't see that here.");
  return;
endif
if (this:is_locked())
  player:tell(this:locked_msg());
  return;
endif
if (this:has_key())
  if (this.open)
    if (this.automatic)
      this:close(@args);
    endif
    if (this.open)
      player:tell(this:opened_msg());
      return;
    endif
  endif
  $you:say_action(this:lock_msg());
  this:set_locked(1);
  if (typeof(other_side = this:other_side()) == OBJ && $object_utils:isa(other_side, $door))
    other_side.source:announce(this:locks_msg());
    other_side:set_locked(1);
  endif
else
  player:tell(this:no_key_msg());
endif
Object #540 does not define that verb, but its ancestor #121 does.
Last modified Tue May 14 09:53:41 2002 PDT by Xythian (#199) (on Waterpoint).
#121:"has_key" this none this
{?who = player, @rest} = args;
return this.user_key in who.contents || this.user_key == this || $object_utils:contains(this, this.user_key);
generic door (#121) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic exit (#7).
  #121:open                     unknown hacker (#35) rxd    this none none
  #121:"close shut"             unknown hacker (#35) rxd    this none none
  #121:"opens_msg closes_msg locks_msg unlocks_msg knocks_msg opened_msg closed_msg locked_msg unlocked_msg no_key_msg" unknown hacker (#35) rxd this none this
  #121:description              unknown hacker (#35) rxd    this none this
  #121:move                     unknown hacker (#35) rxd    this none this
  #121:trusted                  unknown hacker (#35) rxd    this none this
  #121:lock                     unknown hacker (#35) rxd    this none none
  #121:unlock                   unknown hacker (#35) rxd    this none none
  #121:is_locked                unknown hacker (#35) rxd    this none this
  #121:has_key                  unknown hacker (#35) rxd    this none this
  #121:find_other_side          unknown hacker (#35) rxd    this none this
  #121:setup_connection         unknown hacker (#35) rxd    this none this
  #121:"other_side obj_other_side" unknown hacker (#35) rxd this none this
  #121:knock                    unknown hacker (#35) rxd    none on top of/on/onto/upon this
  #121:"set_user_key set_close_delay" unknown hacker (#35) rxd this none this
  #121:"knock_msg open_msg close_msg lock_msg unlock_msg self_closes_msg" unknown hacker (#35) rxd this none this
  #121:"set_locked set_other_side set_opaque set_automatic set_closing_task" unknown hacker (#35) rxd this none this
  #121:self_close               unknown hacker (#35) rxd    this none this
  #121:set_open                 unknown hacker (#35) rxd    this none this
  #121:close_delay              unknown hacker (#35) rxd    this none this
  #121:event_directed_speech    unknown hacker (#35) rxd    this none this
  #121:is_unlocked_for          unknown hacker (#35) rxd    this none this
  #121:help_text                unknown hacker (#35) rxd    this none this
  #121:through_msg              unknown hacker (#35) rxd    this none this
  #121:sub_open                 Core-Wizard (#184)   rxd    this none this
  #121:pull                     unknown hacker (#35) rxd    any through this
  #121:walking_cost             unknown hacker (#35) rxd    this none this
  #121:obj_user_key             unknown hacker (#35) rxd    this none this
  #121:modname_open             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
=> #-1 <$nothing>
The door to the Generic See-through Portal is open.
You close the door to the Generic See-through Portal.
You can't see that here.
generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
.obvious                 Core-Wizard (#184)    r c    1
.source                  Core-Wizard (#184)    r c    #-1
.dest                    Core-Wizard (#184)    r c    #-1
.nogo_msg                Core-Wizard (#184)    r c    0
.onogo_msg               Core-Wizard (#184)    r c    0
.arrive_msg              Core-Wizard (#184)    r c    0
.oarrive_msg             Core-Wizard (#184)    r c    0
.oleave_msg              Core-Wizard (#184)    r c    0
.leave_msg               Core-Wizard (#184)    r c    0
.nothing_msg             Core-Wizard (#184)    r c    "nothing"
.no_one_msg              Core-Wizard (#184)    r c    "no one"
.prefix_name             Core-Wizard (#184)    r c    1
.through_msg             Core-Wizard (#184)    r c    {#69, "do", {"name", {"..
.walking_cost            unknown hack (#35)    r      1
-------------------------------- finished ---------------------------------
=> #287 (Great Hall)
You don't have the key for the door to the Generic See-through Portal.
Object #540 does not define that verb, but its ancestor #121 does.
Last modified Tue May 14 09:53:41 2002 PDT by Xythian (#199) (on Waterpoint).
#121:"has_key" this none this
{?who = player, @rest} = args;
return this.user_key in who.contents || this.user_key == this || $object_utils:contains(this, this.user_key);
Crag (#243) contains some Group Utilities (#248), a MCP parent (#251), a Parsing objects (#252), a Text generation objects (#253), an Abstract class (#254), a Generic Nesting Decoration (#265), a Generic Delegator (#269), a Generic Delegate (#270), a New Generic Room (#271), a Room Exit Delegate (#279), a more stuff (#507), a Generic Input Handler (#509), a Generic Command Handler (#510), a Beaker's Commands (#511), a Generic Command (#531), a Generic English Command (#532), a Grouping Command (#533), and a Generic See-through Portal (#540).
=> #540 (Generic See-through Portal)
The door to the Generic See-through Portal is closed.
=> #-1 <$nothing>
You open the door to the Generic See-through Portal.
=> #540 (Generic See-through Portal)
You close the door to the Generic See-through Portal.
You lock the door to the Generic See-through Portal.
=> #540 (Generic See-through Portal)
=> #-1 <$nothing>
You don't have the key for the door to the Generic See-through Portal.
You don't have the key for the door to the Generic See-through Portal.
=> #-1 <$nothing>
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#540:initialize ()" name: "MOO verb: #540:initialize ()" type: moo-code content*: "" _data-tag: 246348526168
#$#: 246348526168
Generic See-through Portal (#540) [ readable ]
  Child of generic door (#121).
  Location Crag (#243).
 open_msg                Crag (#243)           r c    {#69, "do", {"name", "p..
 close_msg               Crag (#243)           r c    {#69, "do", {"name", "p..
,open                    unknown hack (#35)    r      0
 opened_msg              Crag (#243)           r c    {#69, "do", "The door t..
 closed_msg              Crag (#243)           r c    {#69, "do", "The door t..
 automatic               unknown hack (#35)    r      1
 locked_msg              Crag (#243)           r c    {#69, "do", "The door t..
 other_side              unknown hack (#35)    r      #-1
 opens_msg               Crag (#243)           r c    {#69, "do", "The door t..
 closes_msg              Crag (#243)           r c    {#69, "do", "The door "..
,user_key                unknown hack (#35)    r      #-1
 unlocked_msg            Crag (#243)           r c    {#69, "do", "The door "..
 lock_msg                Crag (#243)           r c    {#69, "do", {"name", "p..
 unlock_msg              Crag (#243)           r c    {#69, "do", {"name", "p..
,locked                  unknown hack (#35)    r      1
 locks_msg               Crag (#243)           r c    {#69, "do", "You hear t..
 unlocks_msg             Crag (#243)           r c    {#69, "do", "You hear t..
 knock_msg               Crag (#243)           r c    {#69, "do", {"name", "p..
 knocks_msg              Crag (#243)           r c    {#69, "do", "Someone kn..
,opaque                  unknown hack (#35)    r      0
 help                    Crag (#243)           r c    {"A Generic Door which ..
 no_key_msg              Crag (#243)           r c    {#69, "do", "You don't ..
 close_delay             unknown hack (#35)    r      -1
 closing_task            unknown hack (#35)    r      0
 self_closes_msg         Crag (#243)           r c    {#69, "do", "The door t..
 pull_msg                Crag (#243)           r c    {#69, "do", {"name", "p..
 obvious                 Crag (#243)           r c    1
,source                  Crag (#243)           r c    #-1
 dest                    Crag (#243)           r c    #-1
 nogo_msg                Crag (#243)           r c    0
 onogo_msg               Crag (#243)           r c    0
 arrive_msg              Crag (#243)           r c    0
 oarrive_msg             Crag (#243)           r c    0
 oleave_msg              Crag (#243)           r c    0
 leave_msg               Crag (#243)           r c    0
 nothing_msg             Crag (#243)           r c    "nothing"
 no_one_msg              Crag (#243)           r c    "no one"
 prefix_name             Crag (#243)           r c    1
 through_msg             Crag (#243)           r c    {#69, "do", {"name", {"..
 walking_cost            unknown hack (#35)    r      1
,dependents              Core-Wizard (#184)    r      {}
,key                     Crag (#243)             c    {"&&", #-1, {"!", #-1}}
,aliases                 Crag (#243)           r c    {"Generic See-through P..
 description             Crag (#243)           r c    {}
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Crag (#243)           r c    {#69, "do", "The door t..
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
 unique                  Crag (#243)           r c    0
 proper                  Crag (#243)           r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {825, 1367121364}
,core_names              Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Unlocked Generic See-through Portal.
Last modified Sat Apr 27 01:06:32 2013 PDT by Crag (#243).
#1:"initialize" this none this
if (caller == this || $perm_utils:controls(caller_perms(), this))
  this.key = 0;
  $quota_utils.byte_based && $quota_utils.byte:object_size(this);
  owned = `this.owner.owned_objects ! E_INVIND, E_PROPNF';
  if (typeof(owned) == LIST)
    this.owner.owned_objects = setadd(owned, this);
  elseif (typeof(owned) == NUM)
    this.owner.owned_objects = owned + 1;
  endif
  if (parent(this) == $root_class)
    this.unique = 0;
  endif
  this.offered = #-1;
  this.core_names = {};
endif
0 errors.
Verb programmed.
;verbs(#1) => {"initialize", "recycle", "set_name", "name", "titlec namec", "set_aliases", "match", "match_object", "set_description", "description", "look_self", "notify", "tell", "tell_lines", "accept", "moveto", "eject", "is_unlocked_for", "huh", "set_message", "do_examine", "examine_key", "examine_names", "examine_desc", "examine_contents", "examine_verbs", "init_for_core", "contents objects_for_match", "examine_verb_ok", "is_listening", "obvious_verbs hidden_verbs help_verbs", "examine_owner", "announce*_all_but", "visible", "integrate_room_msg integrate_container_msg", "dname*c iname*c", "where_am_i where_are_you", "integrate_in", "name_for_look_self namec_for_look_self", "look_in", "integrate_player_msg", "default_editing", "title", "name_for_tell_contents namec_for_tell_contents", "tell_lines_suspended", "is_hidden_verb", "verb_sub noun_sub adj_sub", "exitfunc", "editing_for", "event_*", "name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number", "add_handler", "_add_handler", "remove_handler", "handlers_event_*", "ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu", "gender gender_name", "set_number set_visible set_integrate_in", "number", "is_plural are_plural plural", "gender_obj", "you", "modname_d", "modname_i", "modname_c", "modname_p", "base_name", "nominate_for_core", "help_text", "modname_u", "modname_titleize", "empty_message", "empty_message_integrate_room empty_message_integrate_container", "modname_in", "acceptable", "modname_v", "modname_#", "modname_l", "get_messages", "get_message", "set_proper set_unique", "call_from_self_*", "name_for", "name_mentioned", "namebuilder_i namebuilder_d", "verb_sub_for noun_sub_for", "ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for", "match_type_object", "clear_for_rebuild", "location", "location_for_caller", "core_names"}
#55:"_create" this none this
// :_create(parent[, owner]) => OBJ or ERR
e = set_task_perms(caller_perms());
if (typeof(e) == ERR)
  return e;
else
  val = this:_recreate(@args);
  return val == E_NONE ? $quota_utils:bi_create(@args) | val;
endif
Last modified Thu Jan  4 23:02:47 2001 PST by Xeric (#999) (on Waterpoint).
#55:"_recreate" this none this
// Return a toad (child of #1, owned by $hacker) from this.contents.  Move it to #-1.  Recreate as a child of args[1], or of #1 if no args are given.  Chown to caller_perms() or args[2] if present.
what = args ? args[1] | $root_class;
who = length(args) == 2 ? args[2] | caller_perms();
if (!(caller_perms().wizard || who == caller_perms()))
  return E_PERM;
elseif (!(what == #-1 || valid(what) && is_player(who)))
  return E_INVARG;
elseif (what != #-1 && (who != what.owner && !what.f && !who.wizard))
  return E_PERM;
endif
for potential in (this.contents)
  if (potential.owner == $hacker && parent(potential) == $garbage && !children(potential))
    return this:setup_toad(potential, who, what);
  endif
endfor
return E_NONE;
#55:"setup_toad" this none this
// this:setup_toad(objnum,new_owner,parent)
// Called by :_create and :request.
if (caller != this)
  return E_PERM;
endif
potential = args[1];
who = args[2];
what = args[3];
if (!$quota_utils:creation_permitted(who))
  return E_QUOTA;
elseif (parent(potential) != $garbage)
  stack = $string_utils:print({args, parent(potential), callers()});
  message = tostr("SETUP_TOAD FAILURE: ", stack);
  server_log(message);
  for dude in ($db_group:connected_members())
    dude:receive_page(message);
  endfor
  $error:raise(E_PERM);
else
  $wiz_utils:set_owner(potential, who);
  move(potential, #-1);
  set_task_perms({@callers(), {#-1, "", player}}[2][3]);
  // ... if :initialize crashes...
  this:add_orphan(potential);
  $building_utils:recreate(potential, what);
  this:remove_orphan(potential);
  // ... if we don't get this far, the object stays on the orphan list...
  // ... orphan list should be checked periodically...
  return potential;
endif
Last modified Sat Jan 13 14:34:43 2001 PST by Xeric (#999) (on Waterpoint).
#19:"recreate" (object, parent)
// :recreate(object,newparent) -- effectively recycle and recreate the specified object as a child of parent.  Returns true iff successful.
who = caller_perms();
if (!(valid(object) && (parent == #-1 || valid(parent))))
  return E_INVARG;
elseif (who.wizard)
  // no problemo
elseif (who != object.owner || !(parent == #-1 || parent.f || who == parent.owner))
  return E_PERM;
endif
// Chparent any children to their grandparent instead of orphaning them horribly.  Have to do the chparent with wizperms, in case the children are owned by others, so do this before set_task_perms.
for c in (children(object))
  chparent(c, parent(object));
endfor
set_task_perms(who);
if ($object_utils:has_verb(object, "recycle"))
  object:recycle();
endif
chparent(object, #-1);
for p in (properties(object))
  delete_property(object, p);
endfor
for v in (verbs(object))
  delete_verb(object, 1);
endfor
for item in (object.contents)
  move(item, #-1);
endfor
chparent(object, parent);
object.name = "";
if ($object_utils:has_verb(parent, "initialize"))
  object:initialize();
endif
object.r = 1;
object.f = 0;
object.w = 0;
return 1;
stormagnet goes west.
=> #540 (Generic See-through Portal)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#540:initialize this none this" name: "MOO verb: #540:initialize this none this" type: moo-code content*: "" _data-tag: 595055529169
#$#* 595055529169 content: if (caller == this || $perm_utils:controls(caller_perms(), this))
#$#* 595055529169 content:   pass(@args);
#$#* 595055529169 content:   this.open = 0;
#$#* 595055529169 content:   this.user_key = $nothing;
#$#* 595055529169 content:   this.locked = 1;
#$#* 595055529169 content:   this.opaque = 0;
#$#* 595055529169 content: endif
#$#: 595055529169
0 errors.
Verb programmed.
Object #243 does not define that verb, but its ancestor #52 does.
#52:"@chparent" any (at/to) any
set_task_perms(player);
if ($command_utils:object_match_failed(object = player:my_match_object(dobjstr), dobjstr))
  // ...bogus object...
elseif ($command_utils:object_match_failed(parent = player:my_match_object(iobjstr), iobjstr))
  // ...bogus new parent...
  // elseif (object == player && !player.programmer)
  //   player:notify("You need to be a programmer to do this.");
  //   player:notify("If you want to become a programmer, talk to a wizard.");
elseif (this != player && !$object_utils:isa(player, $player))
  // ...They chparented to #1 and want to chparent back to $prog.  Probably for some nefarious purpose...
  player:notify("You don't seem to already be a valid player class.  Perhaps chparenting away from the $player hierarchy was not such a good idea.  Permission denied.");
elseif (is_player(object) && !$object_utils:isa(parent, $player))
  player:notify(tostr(object, " is a player and ", parent, " is not a player class."));
  player:notify("You really *don't* want to do this.  Trust me.");
elseif (typeof(result = chparent(object, parent)) != ERR)
  player:notify("Parent changed.");
elseif (result == E_INVARG && (valid(object) && valid(parent)))
  player:notify(tostr("Some property existing on ", parent, " is defined on ", object, " or one of its descendants."));
  player:notify(tostr("Try @check-chparent ", dobjstr, " to ", iobjstr));
else
  player:notify(tostr(result));
endif
-----
CHPARENT()
==========

Syntax:  chparent (obj <object>, obj <new-parent>)   => none

Changes the parent of <object> to be <new-parent>.  If <object> is not valid, or if <new-parent> is neither valid nor equal to `#-1', then `E_INVARG' is raised.  If the programmer is neither a wizard or the owner of <object>, or if <new-parent> is not fertile (i.e., its `f' bit is not set) and the programmer is neither the owner of <new-parent> nor a wizard, then `E_PERM' is raised.  If <new-parent> is equal to `object' or one of its current ancestors, `E_RECMOVE' is raised.  If <object> or one of its descendants defines a property with the same name as one defined either on <new-parent> or on one of its ancestors, then `E_INVARG' is raised.

Changing an object's parent can have the effect of removing some properties from and adding some other properties to that object and all of its descendants (i.e., its children and its children's children, etc.).  Let <common> be the nearest ancestor that <object> and <new-parent> have in common before the parent of <object> is changed.  Then all properties defined by ancestors of <object> under <common> (that is, those ancestors of <object> that are in turn descendants of <common>) are removed from <object> and all of its descendants.  All properties defined by <new-parent> or its ancestors under <common> are added to <object> and all of its descendants.  As with `create()', the newly-added properties are given the same permission bits as they have on <new-parent>, the owner of each added property is either the owner of the object it's added to (if the `c' permissions bit is set) or the owner of that property on <new-parent>, and the value of each added property is "clear"; see the description of the built-in function `clear_property()' for details.  All properties that are not removed or added in the reparenting process are completely unchanged.

If <new-parent> is equal to `#-1', then <object> is given no parent at all; it becomes a new root of the parent/child hierarchy.  In this case, all formerly inherited properties on <object> are simply removed.

The verb :@chparent is on   Crag(#243)--generic programmer(#52)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#52:@chparent any to any" name: "MOO verb: #52:@chparent any to any" type: moo-code content*: "" _data-tag: 1773194673170
#$#* 1773194673170 content: set_task_perms(player);
#$#* 1773194673170 content: if ($command_utils:object_match_failed(object = player:my_match_object(dobjstr), dobjstr))
#$#* 1773194673170 content:   // ...bogus object...
#$#* 1773194673170 content: elseif ($command_utils:object_match_failed(parent = player:my_match_object(iobjstr), iobjstr))
#$#* 1773194673170 content:   // ...bogus new parent...
#$#* 1773194673170 content:   // elseif (object == player && !player.programmer)
#$#* 1773194673170 content:   //   player:notify("You need to be a programmer to do this.");
#$#* 1773194673170 content:   //   player:notify("If you want to become a programmer, talk to a wizard.");
#$#* 1773194673170 content: elseif (this != player && !$object_utils:isa(player, $player))
#$#* 1773194673170 content:   // ...They chparented to #1 and want to chparent back to $prog.  Probably for some nefarious purpose...
#$#* 1773194673170 content:   player:notify("You don't seem to already be a valid player class.  Perhaps chparenting away from the $player hierarchy was not such a good idea.  Permission denied.");
#$#* 1773194673170 content: elseif (is_player(object) && !$object_utils:isa(parent, $player))
#$#* 1773194673170 content:   player:notify(tostr(object, " is a player and ", parent, " is not a player class."));
#$#* 1773194673170 content:   player:notify("You really *don't* want to do this.  Trust me.");
#$#* 1773194673170 content: elseif (typeof(result = chparent(object, parent)) != ERR)
#$#* 1773194673170 content:   player:notify("Parent changed.");
#$#* 1773194673170 content: elseif (result == E_INVARG && (valid(object) && valid(parent)))
#$#* 1773194673170 content:   player:notify(tostr("Some property existing on ", parent, " is defined on ", object, " or one of its descendants."));
#$#* 1773194673170 content:   player:notify(tostr("Try @check-chparent ", dobjstr, " to ", iobjstr));
#$#* 1773194673170 content: else
#$#* 1773194673170 content:   player:notify(tostr(result));
#$#* 1773194673170 content: endif
#$#: 1773194673170
0 errors.
Verb programmed.
Verb added [2] (1).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#540:notice_chparent ()" name: "MOO verb: #540:notice_chparent ()" type: moo-code content*: "" _data-tag: 364919663171
#$#: 364919663171
0 errors.
Verb programmed.
#540:init_portal code set.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#540:initialize this none this" name: "MOO verb: #540:initialize this none this" type: moo-code content*: "" _data-tag: 1965669692172
#$#* 1965669692172 content: if (caller == this || $perm_utils:controls(caller_perms(), this))
#$#* 1965669692172 content:   pass(@args);
#$#* 1965669692172 content:   this.open = 0;
#$#* 1965669692172 content:   this.user_key = $nothing;
#$#* 1965669692172 content:   this.locked = 1;
#$#* 1965669692172 content:   this.opaque = 0;
#$#* 1965669692172 content: endif
#$#: 1965669692172
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#540:init_portal this none this" name: "MOO verb: #540:init_portal this none this" type: moo-code content*: "" _data-tag: 60283251173
#$#* 60283251173 content: if (caller == this || $perm_utils:controls(caller_perms(), this))
#$#* 60283251173 content:   pass(@args);
#$#* 60283251173 content:   this.open = 0;
#$#* 60283251173 content:   this.user_key = $nothing;
#$#* 60283251173 content:   this.locked = 1;
#$#* 60283251173 content:   this.opaque = 0;
#$#* 60283251173 content: endif
#$#: 60283251173
0 errors.
Verb programmed.
You see no "$helpful" here.
Crag (#243)   generic wizard (#51)   generic programmer (#52)   generic builder (#4)   generic player (#6)   generic containing object (#145)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
Last modified Sun Apr 14 23:53:11 2013 PDT by Crag (#243).
#250:"help_text" this none this
all_help = `this.help_text ! E_PROPNF' || {};
if (typeof(all_help) == STR)
  all_help = {all_help};
endif
helpless = {};
for vrb in (this:help_verbs(player))
  if (typeof(vrb) == LIST)
    vrb = vrb[2];
    if (space = index(vrb, " "))
      vrb = vrb[1..space - 1];
    endif
    vrb = strsub(vrb, "*", "");
  endif
  if (loc = $object_utils:has_verb(this, vrb))
    $command_utils:suspend_if_needed(0);
    help = $code_utils:verb_documentation(loc[1], vrb);
    if (help)
      msg = verb_info(loc[1], vrb)[3];
      underline = $string_utils:space(length(msg), "=");
      if (all_help)
        // all_help = {@all_help, "", tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {@all_help, "", msg, underline, "", @help};
      else
        // all_help = {tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {msg, underline, "", @help};
      endif
    else
      helpless = {@helpless, vrb};
    endif
  endif
endfor
if (helpless)
  if (all_help)
    all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
  else
    return {tostr("Sorry, but no help is avilable on ", name = this:name(), "(", this, ").", "  Try `examine ", name, "'.")};
  endif
endif
return all_help ? {@all_help, "", "----"} | {};
// Copied from generic thing (#5):help_text by Crag (#243) Sun Apr 14 23:53:11 2013 PDT
You see no "$portal" here.
  ** property not found, "help_text" **
-------------------------------- finished ---------------------------------
Property added with value "".
-----
#65:HELP_TEXT
=============

Definition from #79

#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "str:#540.help_text" name: "Generic See-through Portal.help_text" type: string content*: "" _data-tag: 1429054911174
#$#* 1429054911174 content: 
#$#: 1429054911174
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> #540 (Generic See-through Portal)
Property added with value #540.
That is not a valid command.
Current building options:

-room          No default room set, uses $room
-exit          No default exit set, uses $exit
-furnishing    @created objects are carried by you, unlocked
+create-set-co @create sets your current object to the one created.
-bi-create     @create/@recycle re-use object numbers.
Set help_text property of the Generic See-through Portal (#540).
-----
HELP ON THE GENERIC SEE-THROUGH PORTAL
======================================

A Generic Door which can be opened and closed.
To make a door, simply @chparent your exit to this object.  Actually, you'll want to @chparent the returning exit to this object too.  Then try opening or closing or something and it will automatically set the other_side property.

Properties:
@set <door>.user_key to <object || #-1>
 - Use this to set the object which is used as the key for locking and unlocking the door.  This is very different from the @lock commands.  A $door key should be some object which you wish to use as the key.  You might @create a $thing called "key" or just use something you already have.  You have to be holding it to use it.  (This means if your key is in your backpack and you are holding your backpack, it won't work.)  If you set the door itself as its key, then anyone may lock it (from that side), i.e. it has a regular bolt attached to it.  The default is #-1 (no key).
@set <door>.automatic to <0 || 1>
 - Set this to 0 for non-automatic or 1 for automatic.  An Automatic door is one which automatically tries to be opened when someone tries to walk through it.  In effect, it's like typing `open door' (and even `unlock door' if necessary), before exiting.  The default is 1 (automatic).
@set <door>.close_delay to <seconds || -1>
 - Set this to the number of seconds before the door closes by itself after being opened, or -1 if it doesn't close by itself.  The default is -1 (don't close).

Messages:
@open/@close/@lock/@unlock/@knock
 - Displayed to the room and player when the action is performed on the door.
@opens/@closes/@locks/@unlocks/@knocks
 - Displayed to the other side of the door when the action is performed.
@self_closes
 - Displayed to the room when the door closes by itself.
@opened/@closed/@locked/@unlocked
 - Says the door is currently open/closed/etc.  Displayed in the door's description and when someone tries to open/close/etc it when it is already open/closed/etc.
@no_key
 - Displayed to the player when the player tries to unlock/open/go through a locked door without having the key.
@integrate_room
 - The message integrated into the room's description. Use [Open] or [open] to be substituted with "Open"/"Closed" depending on the state of the door.
@whos_there
 - A message saying who's visible through the door when open. (In the message, [Dest] or [dest] is the destination and [Who] or [who] is a list of people on the other side.)
@no_one
 - Used in @whos_there when no one is visible.
Most of the default messages on the door will work well enough.  Type `@messages $door' for examples of good messages.

  ** property not found, "help_text" **
-------------------------------- finished ---------------------------------
#121:"help_text" this none this
return this.help;
// Copied from generic door (#1200):help_msg by Erik (#74) Sun Oct 23 18:13:50 1994 EDT
=> {"A Generic Door which can be opened and closed.", "To make a door, simply @chparent your exit to this object.  Actually, you'll want to @chparent the returning exit to this object too.  Then try opening or closing or something and it will automatically set the other_side property.", "", "Properties:", "@set <door>.user_key to <object || #-1>", " - Use this to set the object which is used as the key for locking and unlocking the door.  This is very different from the @lock commands.  A $door key should be some object which you wish to use as the key.  You might @create a $thing called \"key\" or just use something you already have.  You have to be holding it to use it.  (This means if your key is in your backpack and you are holding your backpack, it won't work.)  If you set the door itself as its key, then anyone may lock it (from that side), i.e. it has a regular bolt attached to it.  The default is #-1 (no key).", "@set <door>.automatic to <0 || 1>", " - Set this to 0 for non-automatic or 1 for automatic.  An Automatic door is one which automatically tries to be opened when someone tries to walk through it.  In effect, it's like typing `open door' (and even `unlock door' if necessary), before exiting.  The default is 1 (automatic).", "@set <door>.close_delay to <seconds || -1>", " - Set this to the number of seconds before the door closes by itself after being opened, or -1 if it doesn't close by itself.  The default is -1 (don't close).", "", "Messages:", "@open/@close/@lock/@unlock/@knock", " - Displayed to the room and player when the action is performed on the door.", "@opens/@closes/@locks/@unlocks/@knocks", " - Displayed to the other side of the door when the action is performed.", "@self_closes", " - Displayed to the room when the door closes by itself.", "@opened/@closed/@locked/@unlocked", " - Says the door is currently open/closed/etc.  Displayed in the door's description and when someone tries to open/close/etc it when it is already open/closed/etc.", "@no_key", " - Displayed to the player when the player tries to unlock/open/go through a locked door without having the key.", "@integrate_room", " - The message integrated into the room's description. Use [Open] or [open] to be substituted with \"Open\"/\"Closed\" depending on the state of the door.", "@whos_there", " - A message saying who's visible through the door when open. (In the message, [Dest] or [dest] is the destination and [Who] or [who] is a list of people on the other side.)", "@no_one", " - Used in @whos_there when no one is visible.", "Most of the default messages on the door will work well enough.  Type `@messages $door' for examples of good messages."}
That object or one of its ancestors or descendants already has a property named "help".
=> {"A Generic Door which can be opened and closed.", "To make a door, simply @chparent your exit to this object.  Actually, you'll want to @chparent the returning exit to this object too.  Then try opening or closing or something and it will automatically set the other_side property.", "", "Properties:", "@set <door>.user_key to <object || #-1>", " - Use this to set the object which is used as the key for locking and unlocking the door.  This is very different from the @lock commands.  A $door key should be some object which you wish to use as the key.  You might @create a $thing called \"key\" or just use something you already have.  You have to be holding it to use it.  (This means if your key is in your backpack and you are holding your backpack, it won't work.)  If you set the door itself as its key, then anyone may lock it (from that side), i.e. it has a regular bolt attached to it.  The default is #-1 (no key).", "@set <door>.automatic to <0 || 1>", " - Set this to 0 for non-automatic or 1 for automatic.  An Automatic door is one which automatically tries to be opened when someone tries to walk through it.  In effect, it's like typing `open door' (and even `unlock door' if necessary), before exiting.  The default is 1 (automatic).", "@set <door>.close_delay to <seconds || -1>", " - Set this to the number of seconds before the door closes by itself after being opened, or -1 if it doesn't close by itself.  The default is -1 (don't close).", "", "Messages:", "@open/@close/@lock/@unlock/@knock", " - Displayed to the room and player when the action is performed on the door.", "@opens/@closes/@locks/@unlocks/@knocks", " - Displayed to the other side of the door when the action is performed.", "@self_closes", " - Displayed to the room when the door closes by itself.", "@opened/@closed/@locked/@unlocked", " - Says the door is currently open/closed/etc.  Displayed in the door's description and when someone tries to open/close/etc it when it is already open/closed/etc.", "@no_key", " - Displayed to the player when the player tries to unlock/open/go through a locked door without having the key.", "@integrate_room", " - The message integrated into the room's description. Use [Open] or [open] to be substituted with \"Open\"/\"Closed\" depending on the state of the door.", "@whos_there", " - A message saying who's visible through the door when open. (In the message, [Dest] or [dest] is the destination and [Who] or [who] is a list of people on the other side.)", "@no_one", " - Used in @whos_there when no one is visible.", "Most of the default messages on the door will work well enough.  Type `@messages $door' for examples of good messages."}
=> {"Usage of $portal:", "", "  You may either @building-o exit=$portal, or @chparent an existing $exit or $door to $portal. The resulting object will be locked for open and transparent (show its destination in its description)."}
-----
HELP ON THE GENERIC SEE-THROUGH PORTAL
======================================

Usage of $portal:

  You may either @building-o exit=$portal, or @chparent an existing $exit or $door to $portal. The resulting object will be locked for open and transparent (show its destination in its description).

Moved.
Your current object is now Generic See-through Portal (#540).
Your current object stack is empty.
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaises sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
The generic container(#126) has 7 kids.
generic openable container (#8)   Generic Nesting Decoration (#265)   silver salver (#278)   Generic Table (#280)   picture_rail (#521)   vase (#536)   bouquet (#539)
Generic Nesting Decoration (#265) [ readable ]
  Child of generic container (#126).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Generic Nesting Decoration (#265) [ readable ]
  Child of generic container (#126).
  Location Crag (#243).
  #265:tell_contents            Crag (#243)          rxd    this none this
  #265:examine_contents         Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 20 16:09:33 2013 PDT by Crag (#243).
#265:"tell_contents" ()
That verb has not been programmed.
Last modified Sat Apr 20 16:17:02 2013 PDT by Crag (#243).
#265:"examine_contents" ()
That verb has not been programmed.
  ** property not found, "help" **
-------------------------------- finished ---------------------------------
  ** property not found, "help_text" **
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "str:#265.description" name: "Generic Nesting Decoration.description" type: string content*: "" _data-tag: 1343976100175
#$#* 1343976100175 content: 
#$#: 1343976100175
Set description property of the Generic Nesting Decoration (#265).
@integrate_room $container isn't set.
@integrate_player $container isn't set.
@integrate_container $container isn't set.
@in $container is "in"
@put_fail $container is "You can't put %dd %tx{in} that."
@remove_fail $container is "You can't remove that."
@remove $container is "%Nd %n:(removes) %di from %id."
@put $container is "%Nd %n:(puts) %dd %tx{in} %id."
@empty $container is "%Ts %t:(is) empty."
@integrate_sep $container is "  "
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"remove take get"        Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
.put_fail_msg            unknown hack (#35)    r      {#69, "do", "You can't ..
.remove_fail_msg         unknown hack (#35)    r      {#69, "do", "You can't ..
.remove_msg              unknown hack (#35)    r      {#69, "do", {"dname", "..
.put_msg                 unknown hack (#35)    r      {#69, "do", {"name", "p..
.empty_msg               unknown hack (#35)    r      {#69, "do", {"pronoun",..
.integrate_sep_msg       unknown hack (#35)    r      {#69, "do", "  "}
.integration_enabled     unknown hack (#35)    r      1
-------------------------------- finished ---------------------------------
The generic container(#126) has 8 kids.
generic openable container (#8)   Generic Nesting Decoration (#265)   silver salver (#278)   Generic Table (#280)   picture_rail (#521)   vase (#536)   bouquet (#539)   drawer (#542)
,core_names              unknown hacker (#35)  r c    {}
-------------------------------- finished ---------------------------------
generic openable container (#8) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic container (#126).
  Location generic player (#6).
    #8:look_self                unknown hacker (#35) rxd    this none this
    #8:open                     unknown hacker (#35) rxd    this none none
    #8:"@lock_for_open @lock-for-open" unknown hacker (#35) rxd this with/using any
    #8:is_openable_by           unknown hacker (#35) rxd    this none this
    #8:close                    unknown hacker (#35) rxd    this none none
    #8:"@unlock_for_open @unlock-for-open" unknown hacker (#35) rxd this none none
    #8:set_opened               unknown hacker (#35) rxd    this none this
    #8:@opacity                 unknown hacker (#35) r d    this is any
    #8:set_opaque               unknown hacker (#35) rxd    this none this
    #8:"open_msg close_msg"     unknown hacker (#35) rxd    this none this
    #8:look_in                  unknown hacker (#35) rxd    this none this
    #8:"open_fail_msg empty_msg" unknown hacker (#35) rxd   this none this
    #8:can_put_in               unknown hacker (#35) rxd    this none this
    #8:can_get_from             unknown hacker (#35) rxd    this none this
    #8:is_closable_by           unknown hacker (#35) rxd    this none this
    #8:"sub_open sub_opened"    unknown hacker (#35) rxd    this none this
    #8:"modname_open modname_opened" unknown hacker (#35) rxd this none this
    #8:"set_open_key set_automatic" unknown hacker (#35) rxd this none this
    #8:open_fail_others_msg     Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
generic openable container (#8) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic container (#126).
  Location generic player (#6).
.close_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
.open_msg                unknown hack (#35)    r c    {#69, "do", {"dname", "..
.opaque                  unknown hack (#35)    r      1
.dark                    unknown hack (#35)    r      0
.open_fail_msg           unknown hack (#35)    r c    {#69, "do", "You can't ..
.opened                  unknown hack (#35)    r      1
.open_key                unknown hack (#35)           0
.automatic               unknown hack (#35)    r      1
.open_fail_others_msg    unknown hack (#35)    r c    0
-------------------------------- finished ---------------------------------
-----
#8:@LOCK_FOR_OPEN
=================

(No documentation.)

Last modified Thu Jan  4 22:59:57 2001 PST by Xeric (#999) (on Waterpoint).
#8:"@lock_for_open @lock-for-open" this (with/using) any
if (!$perm_utils:controls(valid(cp = caller_perms()) ? cp | player, this))
  return player:tell("Permission denied.");
endif
key = $lock_utils:parse_keyexp(iobjstr, player);
if (typeof(key) == STR)
  player:tell("That key expression is malformed:");
  player:tell("  ", key);
else
  this:set_open_key(key);
  player:tell("Locked opening of ", this:name(), " with this key:");
  player:tell("  ", $lock_utils:unparse_key(key));
endif
Last modified Mon Apr 22 19:17:45 2013 PDT by Crag (#243).
#8:"open" this none none
here = this:location();
if (this.opened)
  player:tell("It's already open.");
elseif (this:is_openable_by(player))
  this:set_opened(1);
  $you:say_action(this:open_msg());
else
  player:tell($string_utils:pronoun_sub(this:open_fail_msg()));
  here:announce_all_but({player}, $string_utils:pronoun_sub(this:open_fail_others_msg()));
  here:broadcast_event_open_failed(player, this);
endif
You see no "sm" here.
stormagnet (#246) contains a Generic Wind-Up Toy (#260), a leather couch (#245), a butler's key (#276), and a generic bot (#289).
The Northwest Tower
The West Hall
The West Foyer
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  The door to south is open.  The door to west is closed.
You see a frieze here.
stormagnet is here.
You have arrived.
A small French-style writing desk, of polished mahogany inlaid with fruitwood. It has three small drawers on top, and one large drawer below.
The bureau a gradin (#543) contains a bottom drawer (#544), a left drawer (#545), a middle drawer (#546), and a right drawer (#547).
You see nothing special.
It is empty.
Crag | l desk's middle
It's already open.
Crag | open desk's middle
You can't get at the middle drawer.
Object #546 does not define that verb, but its ancestor #8 does.
#8:"close" this none none
if (!this.opened)
  player:tell("It's already closed.");
elseif (this:is_closable_by(player))
  this:set_opened(0);
  $you:say_action(this:close_msg());
endif
Object #546 does not define that verb, but its ancestor #8 does.
#8:"is_closable_by" this none this
return this:can_reach(@args);
Object #546 does not define that verb, but its ancestor #126 does.
Last modified Sun Jan  7 16:18:37 2001 PST by Xythian (#199) (on Waterpoint).
#126:"can_reach" (who)
// can_reach(<who>)
// Can <who> reach this to manipulate it?
// Print failure messages to player if not.
if (this.location != who && this.location != who.location)
  // Should probably be more generalized.
  player:tell("You can't get at ", this:dname(), ".");
  return 0;
endif
return 1;
=> #542 (drawer)
Verb added [1] (0).
=> #541 (desk)
#542:can_reach code set.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#542:can_reach (who)" name: "MOO verb: #542:can_reach (who)" type: moo-code content*: "" _data-tag: 266540943177
#$#* 266540943177 content: // can_reach(<who>)
#$#* 266540943177 content: // Can <who> reach this to manipulate it?
#$#* 266540943177 content: // Print failure messages to player if not.
#$#* 266540943177 content: if (this.location != who && this.location != who.location)
#$#* 266540943177 content:   // Should probably be more generalized.
#$#* 266540943177 content:   player:tell("You can't get at ", this:dname(), ".");
#$#* 266540943177 content:   return 0;
#$#* 266540943177 content: endif
#$#* 266540943177 content: return 1;
#$#* 266540943177 content: // Copied from generic container (#126):can_reach by Crag (#243) Sat Apr 27 21:55:57 2013 PDT
#$#: 266540943177
0 errors.
Verb programmed.
Object #542 does not define that verb, but its ancestor #1 does.
Last modified Sat Apr 20 14:20:55 2013 PDT by Crag (#243).
#1:"location" this none this
return this.location:location_for_caller();
Object #542 does not define that verb, but its ancestor #1 does.
Last modified Sat Apr 20 14:20:34 2013 PDT by Crag (#243).
#1:"location_for_caller" this none this
// We're assuming the caller is actually in this. If not, why are they calling? The point is that group objects which want their contents to not know they're contained can override this.
return this;
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#541:location_for_caller ()" name: "MOO verb: #541:location_for_caller ()" type: moo-code content*: "" _data-tag: 1741512350178
#$#: 1741512350178
object utilities (#47) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #47:has_property             Core-Wizard (#184)   rxd    this none this
   #47:all_properties           Core-Wizard (#184)   rxd    this none this
   #47:has_verb                 Core-Wizard (#184)   rxd    this none this
   #47:has_callable_verb        Core-Wizard (#184)   rxd    this none this
   #47:all_verbs                Core-Wizard (#184)   rxd    this none this
   #47:match_verb               Core-Wizard (#184)   rxd    this none this
   #47:isa                      Core-Wizard (#184)   rxd    this none this
   #47:ancestors                Core-Wizard (#184)   rxd    this none this
   #47:"descendants descendents" Core-Wizard (#184)  rxd    this none this
   #47:"descendants_suspended descendents_suspended" Core-Wizard (#184) rxd this none this
   #47:ordered_descendants      Core-Wizard (#184)   rxd    this none this
   #47:branches                 unknown hacker (#35) rxd    this none this
   #47:branches_suspended       Core-Wizard (#184)   rxd    this none this
   #47:leaves                   unknown hacker (#35) rxd    this none this
   #47:leaves_suspended         Core-Wizard (#184)   rxd    this none this
   #47:contains                 Core-Wizard (#184)   rxd    this none this
   #47:all_contents             Core-Wizard (#184)   rxd    this none this
   #47:findable_properties      Core-Wizard (#184)   rxd    this none this
   #47:owned_properties         Core-Wizard (#184)   rxd    this none this
   #47:property_conflicts       Core-Wizard (#184)   rx     this none this
   #47:descendants_with_property_suspended Core-Wizard (#184) rx this none this
   #47:locations                Core-Wizard (#184)   rxd    this none this
   #47:"fertile_descendants fertile_descendents" Core-Wizard (#184) rxd this none this
   #47:all_properties_suspended Core-Wizard (#184)   rxd    this none this
   #47:match_verbs(new)         unknown hacker (#35) rx     this none this
   #47:connected                unknown hacker (#35) rxd    this none this
   #47:all_contents_bfs         unknown hacker (#35) rxd    this none this
   #47:match_verbs_named        Core-Wizard (#184)   rxd    this none this
   #47:check_for_legacy         unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
You close the middle drawer.
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  The door to south is open.  The door to west is closed.
You see a frieze here.
stormagnet is here, distracted.
stormagnet closes the left drawer.
The Front Parlour (#398) contains a front parlour floor (#513), a front parlour ceiling (#515), an oriental rug (#516), a tea table (#506), some settees (#517), some walls (#519), a frieze (#522), stormagnet (#246), a bureau a gradin (#543), and Crag (#243).
stormagnet closes the right drawer.
stormagnet closes the bottom drawer.
=> {#544, #545, #546, #547}
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
#1:"contents objects_for_match" this none this
// Returns a list of the objects that are apparently inside this one.  Don't confuse this with .contents, which is a property kept consistent with .location by the server.  This verb should be used in `VR' situations, for instance when looking in a room, and does not necessarily have anything to do with the value of .contents (although the default implementation does).  `Non-VR' commands (like @contents) should look directly at .contents.
return this.contents;
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  The door to south is open.  The door to west is closed.
You see a frieze here.
stormagnet is here, daydreaming.
-----
`HELP TIME' AMBIGUOUS
=====================

Sorry, the topic `time' is ambiguous.  I don't know which of the following topics you mean:

`help time()'[1]        `help time-stamp'[2]    `help time-stamping'[3]
`help time-stamps'[4]   `help timestamping'[5]  `help timestamps'[6]

=> 1367128130
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           Front Parlour                 0 seconds                         
stormagnet     Front Parlour                 11 seconds                        
Beaker         North Vestibule               5 hours                           

Total: 3 people, 2 of whom have been active recently.
Name           Location                      Last Disconnected                 
----           --------                      -----------------                 
Wizard         North Vestibule               Mon Apr 22 22:53:33 2013 PDT

Total: 1 person, who has not been active recently.
Searching for core verbs containing the string "time(" ...

#0:server_started [+d Core-Wizard (#184)]:    $last_restart_time = time();
#0:user_disconnected user_client_disconnected [+d Core-Wizard (#184)]:  user.last_disconnect_time = time();
#153:bf_set_verb_code [+d Core-Wizard (#184)]:    last_modify = {time(), "core initialization", who, "core"};
#153:set_verb_metadata [+d Core-Wizard (#184)]:  last_modify = {time(), who.name, who, $network.moo_name};
#4:@auditDB [+d Core-Wizard (#184)]:    if ($command_utils:running_out_of_time())
#4:@countDB [+d Core-Wizard (#184)]:    if ($command_utils:running_out_of_time())
#10:up*time @up*time [+d Core-Wizard (#184)]:    notify(player, tostr("The server has been up for ", $time_utils:english_time(time() - $last_restart_time), "."));
#10:check_for_shutdown [+d Core-Wizard (#184)]:  when = $shutdown_time - time();
#10:record_connection [+d Core-Wizard (#184)]:    plyr.last_connect_time = time();
#10:bootlisted [+d Core-Wizard (#184)]:    if (time() > item[2])
#10:is_newted newt_message_for [+d Core-Wizard (#184)]:    if (time() < until)
#10:avg_idle [+d Core-Wizard (#184)]:    return $time_utils:english_time(idle / length(connected_players()));
#12:last [+d Core-Wizard (#184)]:      on = l[3] ? (ct = ctime(l[3]))[1..3] + ct[9..19] | "earlier";
#14:receive_batch [+d unknown hacker (#35)]:      if ($command_utils:running_out_of_time())
#14:receive_message [+d unknown hacker (#35)]:    this.last_used_time = time();
#14:renumber [+d unknown hacker (#35)]:    while (n <= msgtree[2] && !$command_utils:running_out_of_time())
#14:__fix [+d unknown hacker (#35)]:    if ($command_utils:running_out_of_time())
#17:msg_summary_line [+d Core-Wizard (#184)]:  when = ctime(args[1])[5..10];
#24:_set_property_flags [+d Core-Wizard (#184)]:  if (args[4] && $command_utils:running_out_of_time(0))
#24:net_connections [-d Core-Wizard (#184)]:        lctime = ctime(time() - connected_seconds(u));
#25:load [+d Core-Wizard (#184)]:        if ($command_utils:running_out_of_time())
#29:receive_message [+d unknown hacker (#35)]:    this.last_used_time = time();
#29:display_seq_headers display_seq_full [+d unknown hacker (#35)]:      hdr = tostr(ctime(ldate)[5..16], "   ", $string_utils:left(tostr(x[2][4], " (", x[2][3], ")"), 30), valid(w = x[2][2]) ? w:name() | "??", " (", x[2][2], ")");
#31:confunc [+d Core-Wizard (#184)]:    $guest_log:enter(1, time(), $string_utils:connection_hostname(connection_name(this)));
#31:log_disconnect [+d Core-Wizard (#184)]:    $guest_log:enter(0, time(), $string_utils:connection_hostname(cname));
#31:do_boot [+d Core-Wizard (#184)]:    until = time() + 3600 * 24;
#79:make_node [+d Core-Wizard (#184)]:  this.last_modify = {time(), task_id()};
#79:kill_node [+d Core-Wizard (#184)]:  this.last_modify = {time(), task_id()};
#79:set_node [+d unknown hacker (#35)]:  this.last_modify = {time(), task_id()};
#37:suspend_restart [+d unknown hacker (#35)]:  elseif ($command_utils:running_out_of_time())
#37:create_player [+d Core-Wizard (#184)]:    new.last_disconnect_time = time();
#37:gensym_name gensym_alias [+d unknown hacker (#35)]:  while (!$command_utils:running_out_of_time())
#6:my_huh [+d Core-Wizard (#184)]:    if ($command_utils:running_out_of_time())
#6:tell [+d Core-Wizard (#184)]:    if (time() - this.last_timestamp > abs(v * 60) && !($login_watcher in $list_utils:slice(callers(), 4)))
#6:@skip @unsub*scribe [+d Core-Wizard (#184)]:      this:set_current_message(folder, lseq && folder:messages_in_seq({lseq, lseq + 1})[1][1], time());
#6:@last-c*onnection [+d Core-Wizard (#184)]:  elseif (prev[1] > time())
#6:@uptime [+d unknown hacker (#35)]:  player:notify(tostr("The server has been up for ", $time_utils:english_time(time() - $last_restart_time), "."));
#6:reconfunc [+d Core-Wizard (#184)]:  this.last_disconnect_time = time();
#6:@resend [+d Core-Wizard (#184)]:  hdrs = {msgtxt[4], pmh[3][1], {"Original-Date", pmh[3][2] || ctime(msgtxt[1])}, @orig_from ? {{"Original-From", orig_from}} | {}, @pmh[1]};
#6:is_idle [+d Core-Wizard (#184)]:    return time() - this.idle_start_time - 5 <= idle_seconds(this);
#6:start_idling [+d Core-Wizard (#184)]:    player.idle_start_time = time();
#6:idle reidle [+d Core-Wizard (#184)]:  ctime = player:ctime();
#6:@netforw*ard [+d Core-Wizard (#184)]:      lines = {tostr("Message ", msg[1], folderstr, ":"), tostr("Date:     ", ctime(msg[2][1])), "From:     " + msg[2][2], "To:       " + msg[2][3], @length(subj = msg[2][4]) > 1 ? {"Subject:  " + subj} | {}};
#6:@register [+d Core-Wizard (#184)]:    who.last_password_time = time();
#6:timestamp_string [+d Core-Wizard (#184)]:  now = time();
#6:@age [+d Core-Wizard (#184)]:    duration = time() - dobj.last_disconnect_time;
#6:send_forwarded_moomail [+d Core-Wizard (#184)]:    forwarded_message = {"--- Forwarded Message ---", "Date: " + ctime(when), "From: " + ofrm, "To: " + oto, "Subject: " + subject, "", @body};
#6:ctime [+d unknown hacker (#35)]:  return this.timezone:ctime(@args);
#6:@lastlog [+d unknown hacker (#35)]:  now = time();
#39:day [+d unknown hacker (#35)]:  "Given a time() or ctime()-style date, this returns the full name of the day.";
#39:month [+d unknown hacker (#35)]:  "Given a time() or ctime()-style date, this returns the full name";
#39:ampm [+d unknown hacker (#35)]:  "[1]   either a time()- or a ctime()-style date, and";
#39:to_seconds [+d unknown hacker (#35)]:  "Given string hh:mm:ss ($string_utils:explode(ctime(time))[4]), this returns";
#39:sun [+d unknown hacker (#35)]:  time = args == {} ? time() | args[1];
#39:from_ctime [+d unknown hacker (#35)]:  "Given a string such as returned by ctime(), return the corresponding time-in-seconds-since-1970 time returned by time(), or E_DIV if the format is wrong in some essential way.";
#39:english_time [+d unknown hacker (#35)]:  "english_time(time [,reference time]): returns the time as a string of";
#39:from_day [+d unknown hacker (#35)]:  time = time() - delta;
#39:from_month [+d unknown hacker (#35)]:  day = (time() - 28800) / 86400;
#39:dst_midnight [+d unknown hacker (#35)]:  return time - 3600 * ((tonum(this:ctime(time)[12..13]) + 12) % 24 - 12);
#39:time_sub [+d unknown hacker (#35)]:  "time is an optional integer in time() format.  If omitted, time() is used.";
#39:ctime [+d Core-Wizard (#184)]:  {?t = time()} = args;
#39:is_dst [+d unknown hacker (#35)]:  {?t = time()} = args;
#39:server_started [+d unknown hacker (#35)]:  c = ctime();
#39:from_rfc822 [+d unknown hacker (#35)]:  "Given a (pre-folded) RFC822 date string, return the corresponding time-in-seconds-since-1970 time returned by time(), or E_DIV if the format is wrong in some essential way.";
#41:receive_message [+d unknown hacker (#35)]:    this.last_used_time = time();
#41:__fix [+d Core-Wizard (#184)]:    if ($command_utils:running_out_of_time())
#42:touch [+d unknown hacker (#35)]:  "touch(name or list,seen) => does .last_used_time = time() if we haven't already touched this in the last hour";
#42:make_message [+d unknown hacker (#35)]:  return {this:make_time(), fromline, recips, subj || " ", @replyto ? {"Reply-to: " + replyto} | {}, @others, "", @body};
#42:msg_summary_line [+d unknown hacker (#35)]:  if (args[1] < time() - 31536000)
#42:msg_summary_line(slow) [+d unknown hacker (#35)]:    date = ctime(args[1])[5..16];
#42:_parse_date [+d unknown hacker (#35)]:      time = $time_utils:dst_midnight(time() - time() % 86400 - 86400);
#42:__convert_new [+d Core-Wizard (#184)]:      date = $time_utils:from_ctime(line[6..length(line)]);
#42:to_text [-d unknown hacker (#35)]:  start = {"Date:     " + ctime(args[1]), "From:     " + this:english_address_field(args[2]), "To:       " + this:english_address_field(args[3]), @args[4] == " " ? {} | {"Subject:  " + args[4]}};
#42:make_time time [+d unknown hacker (#35)]:  time = time();
#44:expl*ode [+d unknown hacker (#35)]:      if ($command_utils:running_out_of_time())
#46:lis*t view [+d unknown hacker (#35)]:      if ($command_utils:running_out_of_time())
#46:del*ete [+d unknown hacker (#35)]:      this.times[who] = time();
#46:s*ubst [+d unknown hacker (#35)]:        this.times[who] = time();
#46:m*ove c*opy [+d unknown hacker (#35)]:      this.times[who] = time();
#46:set_changed [+d unknown hacker (#35)]:  return this:ok(who = args[1]) && ((unchanged = !args[2]) || (this.times[who] = time()) && (this.changes[who] = !unchanged));
#46:load [+d unknown hacker (#35)]:  this.times[who] = time();
#46:insert_line [+d unknown hacker (#35)]:        this.times[who] = time();
#46:append_line [+d unknown hacker (#35)]:      this.times[who] = time();
#46:join_lines [+d unknown hacker (#35)]:      this.times[who] = time();
#46:new_session [+d Core-Wizard (#184)]:    for p in ({{"active", who_obj}, {"original", valid(from) ? from | $nothing}, {"times", time()}, @this.stateprops})
#46:reset_session [+d Core-Wizard (#184)]:    this.times[who] = time();
#46:@flush [+d unknown hacker (#35)]:        player:tell(this.active[-i]:name(), "(", this.active[-i], ") ", ctime(this.times[-i]));
#50:suspend_if_needed [+d Core-Wizard (#184)]:  if (this:running_out_of_time() && valid(player))
#50:_suspend [+d Core-Wizard (#184)]:    timeout = args ? args[1] + time() | $maxint;
#51:@shutdown [+d Core-Wizard (#184)]:    $shutdown_time = time() + announce_times[1];
#51:mcd_2 [+d Wizard (#2)]:    if ($command_utils:running_out_of_time())
#51:@players [+d Core-Wizard (#184)]:  now = time();
#51:@net-who @@who [-d Core-Wizard (#184)]:        lctime = ctime(time() - connected_seconds(u));
#51:@abort-sh*utdown [+d Core-Wizard (#184)]:    $shutdown_time = time() - 1;
#51:@idlers @kill-idlers @kill-useless @useless @Kill-unconnected @unconnected [+d Core-Wizard (#184)]:  threshold = time() - months * 31 * 24 * 60 * 60;
#51:@report [+d Core-Wizard (#184)]:    notify(player, tostr(">> ****NEVER CONNECTED, CREATED :", $time_utils:english_time(time() - who.last_disconnect_time), " ago"));
#51:@zap [+d Core-Wizard (#184)]:  if (time() - who.last_connect_time < 3 * 30 * 24 * 60 * 60)
#51:@make-core-db [+d Wizard (#2)]:    if ($command_utils:running_out_of_time())
#51:dcd_5 [-d Wizard (#2)]:  $core_extraction_time = time();
#52:@list*# [+d Core-Wizard (#184)]:      modify_string = tostr("Last modified ", ctime(m_when), " by ", m_name, " (", m_who, ")", m_moo == $network.moo_name ? "" | " (on " + m_moo + ")", ".");
#52:@kill [-d Core-Wizard (#184)]:    now = time();
#52:@copy @copy-x [+d Core-Wizard (#184)]:    code = {@code, tostr("\"Copied from ", from[1]:name_and_number(), ":", from[2], from[1] == owner ? " " | tostr(" by ", player:name_and_number(), " "), ctime(), "\";")};
#52:@db*size [+d Core-Wizard (#184)]:    if ($command_utils:running_out_of_time())
#52:@prospectusDB [-d Core-Wizard (#184)]:    if ($command_utils:running_out_of_time())
#52:@mailverb @mailme-verb @rubber-chicken [+d Core-Wizard (#184)]:        cmnt = "\"Copied from " + tostr(object) + "@" + tostr($network.MOO_name) + " " + ctime() + "\";";
#52:@forked [+d Core-Wizard (#184)]:    now = time();
#53:find_verbs_containing [+d Core-Wizard (#184)]:      if ($command_utils:running_out_of_time())
#53:_find_verbs_containing [-d Core-Wizard (#184)]:    if ($command_utils:running_out_of_time())
#53:find_verbs_matching [+d Core-Wizard (#184)]:      if ($command_utils:running_out_of_time())
#53:_find_verbs_matching [-d Core-Wizard (#184)]:    if ($command_utils:running_out_of_time())
#141:description [+d Core-Wizard (#184)]:  raw = ctime(this.messages ? this.messages[length(this.messages)][2][1] | 0);
#55:add_orphan [+d unknown hacker (#35)]:    this.orphans = {{time(), callers(), args[1]}, @this.orphans};
#63:continuous [-d housekeeper (#63)]:        suspend(this.testing ? 2 | this:time());
#63:clean_status [+d housekeeper (#63)]:  player:tell("Time to complete one cleaning circuit: ", $time_utils:english_time(length(this.clean) * this:time()));
#108:init_for_core [-d Core-Wizard (#184)]:    set_verb_code(this, "add_log", {"if (caller == this)", "return this.log={@this.log,{callers(),time(),@args}};", "else", "return E_PERM;", "endif"});
#108:add_log [+d Core-Wizard (#184)]:    return this.log = {@this.log, {callers(), time(), @args}};
#89:_format_last_disconnect [+d unknown hacker (#35)]:  return s ? this:left_just(`dobj:ctime(s) ! ANY => ctime(s)', l) | "Never";
#174:display_quota_summary [+d Quota (#185)]:  player:tell($string_utils:pronoun_sub("%P total usage was ", who), $string_utils:group_number(usage), " as of ", ctime(timestamp), ".");
#174:do_summary [+d Quota (#185)]:    player:tell("  Oldest measurement date ", ctime(oldest), " (", $string_utils:from_seconds(time() - oldest), " ago) of object ", eldest, " (", eldest.name, ")");
#174:summarize_one_user [+d Quota (#185)]:  "  most-out-of-date : the time() the oldest actual measurement was taken";
#174:object_bytes object_size [+d Core-Wizard (#184)]:    o.object_size = {b, time()};
#174:recent_object_bytes [-d Core-Wizard (#184)]:  elseif (object.object_size[2] > time() - since * 24 * 60 * 60)
#174:measurement_task [+d Core-Wizard (#184)]:    start_time = time();
#182:dijkstra [+d Core-Wizard (#184)]:      if ($command_utils:running_out_of_time())
#182:bfs [+d Core-Wizard (#184)]:      if ($command_utils:running_out_of_time())
#182:dijkstra(bak) [+d Core-Wizard (#184)]:      if ($command_utils:running_out_of_time())
#175:schedule_checkpoint [+d Core-Wizard (#184)]:  this:log("Next checkpoint scheduled for " + ctime(time() + next) + ".");
#175:next_checkpoint [+d Core-Wizard (#184)]:  now = args ? ctime(args[1]) | ctime()[12..19];
#175:description [+d Core-Wizard (#184)]:  scheduleinfo = tostr("Checkpoints are scheduled for ", $string_utils:english_list(times, "every " + $time_utils:english_time($dump_interval)), ".  The next checkpoint is scheduled for ", this:ftime(time() + this:next_checkpoint()), ".");
#175:checkpoint_started [+d Core-Wizard (#184)]:    this.in_progress = time();
#175:checkpoint_finished [+d Core-Wizard (#184)]:        dude:send_self_netmail("checkpoint failed", {"The checkpoint of " + ctime() + " has failed.   This should probably be fixed ASAP."});
#175:ftime [+d Core-Wizard (#184)]:  "Usage:  :ftime(then)";
#183:_log [+d Core-Wizard (#184)]:  this.(logprop) = {@this.(logprop), {time(), message}};
#183:announce [+d Core-Wizard (#184)]:    msg = "[syslog:" + name + "] <" + $time_utils:time_sub("$H:$M", time()) + "> " + message;
#183:read [+d Core-Wizard (#184)]:      player:notify(ctime(t) + ": " + msg);
#87:get get_cache [+d unknown hacker (#35)]:  now = time();
#87:post_now post [+d Core-Wizard (#184)]:  opentime = time();
#87:post_binary [+d Core-Wizard (#184)]:  opentime = time();
#87:get_now_b get_now [+d Core-Wizard (#184)]:  opentime = time();
#87:streaming_get [+d Core-Wizard (#184)]:  opentime = time();
#203:pack [+d Core-Wizard (#184)]:  this:pack_header({"Name", this:name()}, {"Date", ctime()}, {"Type", this.format_description}, {"Boundary", boundary = "---module/body-item-boundary"}, {"Objects", $string_utils:from_list($list_utils:map_arg(this, "obj_name", objects), " ")}, {"Locals", $string_utils:from_list($list_utils:map_arg(this, "local_name", this.locals), " ")});
#212:sendmail [+d Core-Wizard (#184)]:    headers[idx][2] = $time_utils:time_sub(this.time_format, time());
#76:sub_message [+d unknown hacker (#35)]:  " standard_msg = $string_utils:substitute(standard, subset = {{\"%h\", has}, {\"%t\", ctime()[12..16]}, {\"%d\", ctime()[5..10]}, {\"%w\", ctime()[1..3]}, {\"%d\", who:dname()}, {\"%i\", who:iname()}, {\"%n\", who:name()}, {\"%D\", who:dnamec()}, {\"%I\", who:inamec()}, {\"%N\", who:namec()}, {\"%m\", message}, {\"%#\", tostr(who)}, {\"%c\", tostr(length($code_utils:connected_players()))}}, 1);";
#149:@boot*! [+d Core-Wizard (#184)]:        until = time() + 3600 * 24;
#149:@net-who @@who @@who-cg [-d Core-Wizard (#184)]:        lctime = ctime(time() - connected_seconds(u));
#225:check_flood [+d Core-Wizard (#184)]:  now = time();

Total: 146 verbs.
-----
GENERAL INFORMATION ON $TIME_UTILS[1]
=====================================

    Converting from seconds-since-1970    
dhms          (time)                 => string ...DD:HH:MM:SS
english_time  (time[, reference time)=> string of y, m, d, m, s

    Converting to seconds
to_seconds    ("hh:mm:ss")           => seconds since 00:00:00
from_ctime    (ctime)                => corresponding time-since-1970
from_day      (day_of_week, which)   => time-since-1970 for the given day*
from_month    (month, which)         => time-since-1970 for the given month*
    (* the first midnight of that day/month)

    Converting to some standard English formats
day           ([c]time)              => what day it is
month         ([c]time)              => what month it is
ampm          ([c]time[, precision]) => what time it is, with am or pm

    Substitution
time_sub      (string, time)         => substitute time information

    Miscellaneous
sun           ([time])               => angle between sun and zenith
dst_midnight  (time)                 
lunar_phase   (time)                 => string of phase of the moon

#39:ampm, line 6:  Range error
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> "10:50 P.M."
Last modified Thu Aug 29 19:04:57 2002 PDT by Xythian (#199) (on Waterpoint).
#39:"time_sub" this none this
// Usage:  $time_utils:time_sub(string, time)
// 
// Works like pronoun substitution, but substitutes time stuff.  Returns a string.
// 
// time is an optional integer in time() format.  If omitted, time() is used.
// 
// Macros which are unknown are ignored. $Q -> the empty string.
// Terminal $ are ignored.
// 
// $H -> hour #. $M -> min #. $S -> second #. 24-hour format, fixed width.
// $h, $m, $s same x/c have not-fixed format. 00:03:24 vs. 0:3:24
// $O/$o -> numeric hour in 12-hour format.
// $D -> long day name. $d -> short day name.
// $N -> long month name. $n -> short month name.
// $Y -> long year # (e.g. '1991'). $y -> short year # (e.g. '91')
// $Z -> the time zone    (added in by r'm later)
// $P/$p -> AM/PM, or am/pm.
// $T -> date number. $t -> date number with no extra whitespace etc.
// $1 -> Month in fixed-width numeric format (01-12)   (added by dpk)
// $2 -> Month in nonfixed numeric format (1-12)
// $3 -> Date in fixed-width format, 0-fill
// $$ -> $.
res = "";
thestr = args[1];
if (length(args) > 1)
  thetime = tonum(args[2]);
else
  thetime = time();
endif
if (typeof(thestr) != STR || typeof(thetime) != NUM)
  player:tell("Bad arguments to time_subst.");
  return;
endif
itslength = length(thestr);
if (!itslength)
  return "";
endif
done = 0;
curchar = 1;
cctime = this:ctime(thetime);
while (!done)
  if (thestr[curchar] != "$")
    res = res + thestr[curchar];
  else
    // Now we begin substitution.
    curchar = curchar + 1;
    thechar = thestr[curchar];
    if (curchar > length(thestr))
      return res;
    endif
    if (thechar == "$")
      res = res + "$";
    elseif (!strcmp(thechar, "h"))
      res = res + $string_utils:trim(tostr(tonum(cctime[12..13])));
    elseif (thechar == "H")
      res = res + cctime[12..13];
    elseif (!strcmp(thechar, "m"))
      res = res + $string_utils:trim(tostr(tonum(cctime[15..16])));
    elseif (thechar == "M")
      res = res + cctime[15..16];
    elseif (!strcmp(thechar, "s"))
      res = res + $string_utils:trim(tostr(tonum(cctime[18..19])));
    elseif (thechar == "S")
      res = res + cctime[18..19];
    elseif (!strcmp(thechar, "D"))
      res = res + $time_utils:day(thetime);
    elseif (thechar == "d")
      res = res + cctime[1..3];
    elseif (!strcmp(thechar, "N"))
      res = res + $time_utils:month(thetime);
    elseif (thechar == "n")
      res = res + cctime[5..7];
    elseif (!strcmp(thechar, "T"))
      res = res + cctime[9..10];
    elseif (thechar == "t")
      res = res + $string_utils:trim(cctime[9..10]);
    elseif (thechar == "O")
      res = res + tostr((tonum(cctime[12..13]) + 11) % 12 + 1);
    elseif (!strcmp(thechar, "p"))
      res = res + (tonum(cctime[12..13]) >= 12 ? "pm" | "am");
    elseif (thechar == "P")
      res = res + (tonum(cctime[12..13]) >= 12 ? "PM" | "AM");
    elseif (!strcmp(thechar, "y"))
      res = res + cctime[23..24];
    elseif (thechar == "Y")
      res = res + cctime[21..24];
    elseif (thechar == "Z")
      res = res + cctime[26..28];
    elseif (thechar == "1")
      res = res + $string_utils:right(tostr($string_utils:explode(cctime)[2] in this.monthabbrs), 2, "0");
    elseif (thechar == "2")
      res = res + tostr($string_utils:explode(cctime)[2] in this.monthabbrs);
    elseif (thechar == "3")
      res = res + $string_utils:subst(cctime[9..10], {{" ", "0"}});
    endif
  endif
  curchar = curchar + 1;
  if (curchar > itslength)
    done = 1;
  endif
endwhile
return res;
Last modified Thu Aug 29 19:04:38 2002 PDT by Xythian (#199) (on Waterpoint).
#39:"ctime" this none this
{?t = time()} = args;
return ctime(t);
=> "Sat Apr 27 22:52:18 2013 PDT"
=> "Sat Apr 27 22:52:26 2013 PDT"
time utilities (#39) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #39:day                      unknown hacker (#35) rxd    none none none
   #39:month                    unknown hacker (#35) rxd    none none none
   #39:ampm                     unknown hacker (#35) rxd    none none none
   #39:to_seconds               unknown hacker (#35) rxd    this none this
   #39:sun                      unknown hacker (#35) rxd    this none this
   #39:from_ctime               unknown hacker (#35) rxd    this none this
   #39:"dhms dayshoursminutesseconds" unknown hacker (#35) rxd this none this
   #39:english_time             unknown hacker (#35) rxd    this none this
   #39:from_day                 unknown hacker (#35) rxd    this none this
   #39:from_month               unknown hacker (#35) rxd    this none this
   #39:dst_midnight             unknown hacker (#35) rxd    this none this
   #39:time_sub                 unknown hacker (#35) rxd    this none this
   #39:lunar_phase              Core-Wizard (#184)   rxd    this none this
   #39:parse_english_time_interval Core-Wizard (#184) rxd   this none this
   #39:nominate_for_core        Core-Wizard (#184)   rxd    this none this
   #39:ctime                    Core-Wizard (#184)   rxd    this none this
   #39:is_dst                   unknown hacker (#35) rxd    this none this
   #39:offset_seconds           unknown hacker (#35) rxd    this none this
   #39:server_started           unknown hacker (#35) rxd    this none this
   #39:from_rfc822              unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
#39:"sun" this none this
r = 10000;
h = r * r + r / 2;
time = args == {} ? time() | args[1];
t = (time + 120) % 86400 / 240;
s = 5 * ((time - 14957676) % 31556952) / 438291;
phi = s + t + this.corr;
cs = $math_utils:cos(s);
spss = ($math_utils:sin(phi) * $math_utils:sin(s) + h) / r - r;
cpcs = ($math_utils:cos(phi) * cs + h) / r - r;
return (this.stsd * cs - this.ctcd * cpcs - this.ct * spss + h) / r - r;
#39:"lunar_phase" this none this
// :lunar_phase(time) => STR
p = (args[1] - this.lunar_phase) % this.lunar_period;
if (p < 43200 || p > this.lunar_period - 43200)
  return "full";
elseif (p > this.lunar_period / 2 - 43200 && p < this.lunar_period / 2 + 43200)
  return "new";
elseif (p > this.lunar_period / 4 - 129600 && p < this.lunar_period / 4 + 129600 || (p > this.lunar_period * 3 / 4 - 129600 && p < this.lunar_period * 3 / 4 + 129600))
  ret = "half full";
elseif (p < this.lunar_period / 4 || p > this.lunar_period * 3 / 4)
  ret = "gibbous";
else
  ret = "crescent";
endif
if (p > this.lunar_period / 2)
  return ret + " and waxing";
else
  return ret + " and waning";
endif
#39:lunar_phase, line 2:  Range error
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> "gibbous and waxing"
-----
GENERAL INFORMATION ON $TIME_UTILS[1]
=====================================

    Converting from seconds-since-1970    
dhms          (time)                 => string ...DD:HH:MM:SS
english_time  (time[, reference time)=> string of y, m, d, m, s

    Converting to seconds
to_seconds    ("hh:mm:ss")           => seconds since 00:00:00
from_ctime    (ctime)                => corresponding time-since-1970
from_day      (day_of_week, which)   => time-since-1970 for the given day*
from_month    (month, which)         => time-since-1970 for the given month*
    (* the first midnight of that day/month)

    Converting to some standard English formats
day           ([c]time)              => what day it is
month         ([c]time)              => what month it is
ampm          ([c]time[, precision]) => what time it is, with am or pm

    Substitution
time_sub      (string, time)         => substitute time information

    Miscellaneous
sun           ([time])               => angle between sun and zenith
dst_midnight  (time)                 
lunar_phase   (time)                 => string of phase of the moon

stormagnet puts the left cabinet on the sideboard.
stormagnet puts the right cabinet on the sideboard.
stormagnet puts the top drawer on the sideboard.
stormagnet puts the middle drawer on the sideboard.
stormagnet puts the bottom drawer on the sideboard.
stormagnet closes the left cabinet.
stormagnet closes the right cabinet.
stormagnet closes the top drawer.
stormagnet closes the middle drawer.
stormagnet closes the bottom drawer.
stormagnet hangs the frieze on the walls.
The door to west is closed.
@integrate_room west is "The door to %td %t:(is) %tx{open 0}."
@integrate_player west isn't set.
@integrate_container west isn't set.
@nogo west isn't set.
@onogo west isn't set.
@arrive west isn't set.
@oarrive west isn't set.
@oleave west isn't set.
@leave west isn't set.
@nothing west is "nothing"
@no_one west is "no one"
@through west is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open west is "%Nd %n:(opens) the door to %td."
@close west is "%Nd %n:(closes) the door to %td."
@opened west is "The door to %td %t:(is) open."
@closed west is "The door to %td %t:(is) closed."
@locked west is "The door to %td %t:(is) locked."
@opens west is "The door to %td %t:(opens) from the other side."
@closes west is "The door %td %t:(closes) from the other side."
@unlocked west is "The door %td %t:(is) unlocked."
@lock west is "%Nd %n:(locks) the door to %td."
@unlock west is "%Nd %n:(unlocks) the door to %td."
@locks west is "You hear the click of the door to %td being locked from the other side."
@unlocks west is "You hear the click of the door to %td being unlocked from the other side."
@knock west is "%Nd %n:(knocks) on the door to %td."
@knocks west is "Someone knocks on the door to %td."
@no_key west is "You don't have the key for the door to %td."
@self_closes west is "The door to %td %t:(closes)."
@pull west is "%Ni %n:(reaches) through the door to %td and %n:(pulls) %dd into %nld."
The door to west is closed.
west (#409) [ ]
  Owned by stormagnet (#246).
  Child of generic door (#121).
-------------------------------- finished ---------------------------------
 unique                  stormagnet (#246)     r c    1
-------------------------------- finished ---------------------------------
,proper                  stormagnet (#246)     r c    1
-------------------------------- finished ---------------------------------
=> 0
The door to the west is closed.
Line 2:  syntax error
1 error.
generic door (#121)
n (#268)
south (#283)
south (#288)
east (#293)
west (#295)
south (#297)
north (#300)
west (#301)
south (#305)
north (#306)
east (#307)
east (#308)
north (#309)
east (#311)
west (#299)
south (#313)
north (#314)
west (#316)
north (#317)
south (#319)
east (#320)
west (#322)
up (#324)
north (#325)
south (#326)
east (#327)
west (#328)
west (#329)
south (#331)
north1 (#333)
north2 (#335)
north3 (#337)
turn corner (#339)
north (#340)
down (#341)
north (#342)
east (#343)
north (#344)
north (#345)
south1 (#347)
south2 (#349)
south (#351)
north (#352)
east (#354)
north (#355)
north (#356)
south (#358)
north (#359)
south (#360)
north (#362)
south (#363)
east (#365)
west (#366)
south (#367)
east (#369)
north (#370)
south (#371)
west (#372)
south (#373)
east (#375)
north (#376)
south (#377)
west (#378)
east (#380)
south (#382)
north (#383)
east (#384)
south (#386)
north (#387)
east (#388)
west1 (#389)
west2 (#390)
west3 (#391)
west4 (#392)
west (#394)
east (#395)
south (#397)
n1 (#399)
n2 (#401)
n3 (#403)
south1 (#405)
south2 (#407)
south (#410)
east (#411)
west (#412)
south (#413)
east (#414)
west (#416)
northeast (#418)
southeast (#417)
south (#420)
north (#421)
west (#423)
north (#424)
east (#425)
west (#426)
north (#427)
south (#429)
east (#430)
west (#432)
north (#433)
south (#435)
north (#436)
west (#438)
north (#439)
east (#440)
west (#441)
south (#443)
north (#444)
south (#447)
east (#450)
west (#451)
south (#453)
north (#454)
west (#455)
north (#456)
east (#458)
south (#459)
east (#460)
west (#461)
south (#463)
east (#464)
west (#466)
east (#468)
east (#469)
west (#470)
east (#471)
west (#472)
east (#473)
west (#474)
east (#475)
west (#476)
north (#477)
north (#478)
first east (#479)
second east (#480)
third east (#482)
fourth east (#483)
first west (#484)
second west (#486)
third west (#488)
fourth west (#490)
east (#491)
north (#493)
south (#494)
down (#495)
up (#496)
east (#497)
east (#498)
generic window (#179)
south (#408)
west (#409)
south (#303)
Generic See-through Portal (#540)
tracery windows (#266)
tracery windows (#249)
=> 0
,proper                  stormagnet (#246)     r c    1
-------------------------------- finished ---------------------------------
Object #7 does not define that verb, but its ancestor #110 does.
#110:"initialize" this none this
this.dependents = {};
return pass(@args);
Last modified Sat Apr 27 01:06:32 2013 PDT by Crag (#243).
#1:"initialize" this none this
if (caller == this || $perm_utils:controls(caller_perms(), this))
  this.key = 0;
  $quota_utils.byte_based && $quota_utils.byte:object_size(this);
  owned = `this.owner.owned_objects ! E_INVIND, E_PROPNF';
  if (typeof(owned) == LIST)
    this.owner.owned_objects = setadd(owned, this);
  elseif (typeof(owned) == NUM)
    this.owner.owned_objects = owned + 1;
  endif
  if (parent(this) == $root_class)
    this.unique = 0;
  endif
  this.offered = #-1;
  this.core_names = {};
endif
generic exit (#7)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
,proper                  Core-Wizard (#184)    r c    0
-------------------------------- finished ---------------------------------
    #1:initialize               Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
generic door (#121)
n (#268)
south (#283)
south (#288)
east (#293)
west (#295)
south (#297)
north (#300)
west (#301)
south (#305)
north (#306)
east (#307)
east (#308)
north (#309)
east (#311)
west (#299)
south (#313)
north (#314)
west (#316)
north (#317)
south (#319)
east (#320)
west (#322)
up (#324)
north (#325)
south (#326)
east (#327)
west (#328)
west (#329)
south (#331)
north1 (#333)
north2 (#335)
north3 (#337)
turn corner (#339)
north (#340)
down (#341)
north (#342)
east (#343)
north (#344)
north (#345)
south1 (#347)
south2 (#349)
south (#351)
north (#352)
east (#354)
north (#355)
north (#356)
south (#358)
north (#359)
south (#360)
north (#362)
south (#363)
east (#365)
west (#366)
south (#367)
east (#369)
north (#370)
south (#371)
west (#372)
south (#373)
east (#375)
north (#376)
south (#377)
west (#378)
east (#380)
south (#382)
north (#383)
east (#384)
south (#386)
north (#387)
east (#388)
west1 (#389)
west2 (#390)
west3 (#391)
west4 (#392)
west (#394)
east (#395)
south (#397)
n1 (#399)
n2 (#401)
n3 (#403)
south1 (#405)
south2 (#407)
south (#410)
east (#411)
west (#412)
south (#413)
east (#414)
west (#416)
northeast (#418)
southeast (#417)
south (#420)
north (#421)
west (#423)
north (#424)
east (#425)
west (#426)
north (#427)
south (#429)
east (#430)
west (#432)
north (#433)
south (#435)
north (#436)
west (#438)
north (#439)
east (#440)
west (#441)
south (#443)
north (#444)
south (#447)
east (#450)
west (#451)
south (#453)
north (#454)
west (#455)
north (#456)
east (#458)
south (#459)
east (#460)
west (#461)
south (#463)
east (#464)
west (#466)
east (#468)
east (#469)
west (#470)
east (#471)
west (#472)
east (#473)
west (#474)
east (#475)
west (#476)
north (#477)
north (#478)
first east (#479)
second east (#480)
third east (#482)
fourth east (#483)
first west (#484)
second west (#486)
third west (#488)
fourth west (#490)
east (#491)
north (#493)
south (#494)
down (#495)
up (#496)
east (#497)
east (#498)
generic window (#179)
south (#408)
west (#409)
south (#303)
Generic See-through Portal (#540)
tracery windows (#266)
tracery windows (#249)
=> 0
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the door to the foyer.  The door to the south is open.  The door to the west is closed.
stormagnet is here, daydreaming.
The south (#408) leads to the West Foyer (#393) via {south, s}.
The west (#409) leads to the Music Room (#400) via {west, w}.
A pair of double doors lead south to the West Foyer.
In the West Foyer, you see nothing.
The door to the south is open.
Searching for core verbs containing the string "\".proper = 1\"" ...


Total: 0 verbs.
Searching for core verbs containing the string "\".proper = \"" ...


Total: 0 verbs.
Searching for core verbs containing the string "\".proper =\"" ...


Total: 0 verbs.
Searching for core verbs containing the string "\".propper = 1\"" ...


Total: 0 verbs.
 proper                  Core-Wizard (#184)    r      1
-------------------------------- finished ---------------------------------
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
-------------------------------- finished ---------------------------------
Last modified Tue Aug 19 18:33:38 1997 PDT by Xythian (#199) (on Waterpoint).
#1:"set_proper set_unique" this none this
// This is the standard :set_foo verb.  It allows the property to be set if called by this or called with adequate permissions (this's owner or wizardly).
if (caller == this || $perm_utils:controls(caller_perms(), this))
  return this.(verb[5..length(verb)]) = args[1];
else
  return E_PERM;
endif
The verb :set_proper is on   Crag(#243)--root class(#1)   Front Parlour(#398)--root class(#1)   front parlour floor(#513)--root class(#1)   front parlour ceiling(#515)--root class(#1)   oriental rug(#516)--root class(#1)   tea table(#506)--root class(#1)   settees(#517)--root class(#1)   walls(#519)--root class(#1)   stormagnet(#246)--root class(#1)   bureau a gradin(#543)--root class(#1)   desk chair(#548)--root class(#1)   sideboard(#549)--root class(#1)   Group Utilities(#248)--root class(#1)   MCP parent(#251)--root class(#1)   Parsing objects(#252)--root class(#1)   Text generation objects(#253)--root class(#1)   Abstract class(#254)--root class(#1)   Generic Nesting Decoration(#265)--root class(#1)   Generic Delegator(#269)--root class(#1)   Generic Delegate(#270)--root class(#1)   New Generic Room(#271)--root class(#1)   Room Exit Delegate(#279)--root class(#1)   more stuff(#507)--root class(#1)   Generic Input Handler(#509)--root class(#1)   Generic Command Handler(#510)--root class(#1)   Beaker's Commands(#511)--root class(#1)   Generic Command(#531)--root class(#1)   Generic English Command(#532)--root class(#1)   Grouping Command(#533)--root class(#1)   Stage-Talk Feature(#67)--root class(#1)   Thinking Feature(#68)--root class(#1)   login watcher mark 2(#83)--root class(#1)
Searching for core verbs containing the string ":set_proper" ...

#24:set_property_owner [-d Core-Wizard (#184)]:  ":set_property_owner(object,prop,newowner[,suspendok])  changes the ownership of object.prop to newowner.  If the property is !c, changes the ownership on all of the descendents as well.  Otherwise, we just chown the property on the object itself and give a warning if newowner!=object.owner (--Rog thinks this is a server bug that one is able to do this at all...).";
#24:set_property_flags [-d Core-Wizard (#184)]:  ":set_property_flags(object,prop,flags[,suspendok])  changes the permissions on object.prop to flags.  Unlike a mere set_property_info, this changes the flags on all descendant objects as well.  We also change the ownership on the descendent properties where necessary.";
#24:_set_property_flags [+d Core-Wizard (#184)]:  "auxiliary to :set_property_flags... don't call this directly.";
#24:do_grant [+d Core-Wizard (#184)]:      $wiz_utils:set_property_owner(object, prop, newowner, suspendok);
#51:@chown*# [+d Core-Wizard (#184)]:      e = $wiz_utils:set_property_owner(object, pname, owner);
#51:@grant @grants* [+d Core-Wizard (#184)]:  "A correct (?) version of @grant.  Ownership of the object changes as in @chown and :set_owner (i.e., .owner and all c properties change).  In addition all verbs and !c properties owned by the original owner change ownership as well.  Finally, for !c properties, instances on descendant objects change ownership (as in :set_property_owner).";
#52:@chmod*# [+d Core-Wizard (#184)]:      result = $wiz_utils:set_property_flags(object, pname, perms);
#203:update_property-defined [+d Core-Wizard (#184)]:      if (e = $wiz_utils:set_property_owner(wot, name, ownr))

Total: 8 verbs.
Searching for core verbs containing the string ":set_proper(" ...


Total: 0 verbs.
generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
-------------------------------- finished ---------------------------------
You now have foo_exit with object number #555 and parent generic exit (#7).
The created object is now your current object.
 proper                  Crag (#243)           r c    0
-------------------------------- finished ---------------------------------
Sure you want to recycle the foo_exit (#555)? [Enter `yes' or `no']
The foo_exit (#555) recycled.
-----
@DIG
====

Syntax:  @dig <exit-spec> to <new-room-names>
         @dig <exit-spec> to <old-room-object-number>

This is the basic building tool.  It creates an exit leading from your current location to another room, and optionally another exit leading back.  The destination room may already exist, or it may be created by the @dig command.

An <exit-spec> has one of the following two forms:
        <names>
        <names>|<names>
where the first form is used when you only want to create one exit, from your current room to the destination room, and the second form when you also want an exit back.

The <names> piece is just a list of names for the exit, as described in `help @rename':
        <name-and-alias>,<alias>,...,<alias> [preferred]
        <name>:<alias>,...,<alias>           [not preferred]
These are the names of the commands people can type to use the exit.  It is usually a good idea to include explicitly the standard abbreviations for direction names (e.g., 'n' for 'north', 'se' for 'southeast', etc.).  DO NOT put spaces in the names of exits; they are useless in MOO.

If you give an object number for the indirect object of the command (<old-room-object-number>), then that object will be used as the destination room.  Otherwise, that part of the command is another set of names and aliases, which will be used to create a new room.

NOTE: You must own the room at one end or the other of the exits you create.  If you own both, everything is fine.  If you own only one end, then after creating the exits you should write down their object numbers.  You must then get the owner of the other room to use @add-exit and @add-entrance to link your new exits to their room.

You can determine what objects will be used as the parents of new exits and rooms that @dig creates by setting your building options:
    @options building room=<parent class>
and
    @options building exit=<parent class>
will set your defaults.  You can also specify "-room" or "-exit" to use the global defaults ($room and $exit).

Examples:

    @dig north,n to "The North Pole"
creates a new room and also an exit linking the player's current location to the new room; players would say either 'north' or 'n' to get from here to the new room.  No way to get back from that room is created.

    @dig west,w|east,e,out to "The Department of Auto-Musicology"
creates a new room and two exits, one taking players from here to the new room (via the commands 'west' or 'w') and one taking them from the new room to here (via 'east', 'e', or 'out').

    @dig up,u to #7164
creates an exit leading from the player's current room to #7164, which must be an existing room.

North Pole (#555) created.
Exit from Front Parlour (#398) to North Pole (#555) via {"foo_exit"} created with id #556.
 proper                  Crag (#243)           r c    0
-------------------------------- finished ---------------------------------
Sure you want to recycle the North Pole (#555)? [Enter `yes' or `no']
The North Pole (#555) recycled.
Sure you want to recycle the foo_exit (#556)? [Enter `yes' or `no']
The foo_exit (#556) recycled.
generic door (#121) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic exit (#7).
  #121:open                     unknown hacker (#35) rxd    this none none
  #121:"close shut"             unknown hacker (#35) rxd    this none none
  #121:"opens_msg closes_msg locks_msg unlocks_msg knocks_msg opened_msg closed_msg locked_msg unlocked_msg no_key_msg" unknown hacker (#35) rxd this none this
  #121:description              unknown hacker (#35) rxd    this none this
  #121:move                     unknown hacker (#35) rxd    this none this
  #121:trusted                  unknown hacker (#35) rxd    this none this
  #121:lock                     unknown hacker (#35) rxd    this none none
  #121:unlock                   unknown hacker (#35) rxd    this none none
  #121:is_locked                unknown hacker (#35) rxd    this none this
  #121:has_key                  unknown hacker (#35) rxd    this none this
  #121:find_other_side          unknown hacker (#35) rxd    this none this
  #121:setup_connection         unknown hacker (#35) rxd    this none this
  #121:"other_side obj_other_side" unknown hacker (#35) rxd this none this
  #121:knock                    unknown hacker (#35) rxd    none on top of/on/onto/upon this
  #121:"set_user_key set_close_delay" unknown hacker (#35) rxd this none this
  #121:"knock_msg open_msg close_msg lock_msg unlock_msg self_closes_msg" unknown hacker (#35) rxd this none this
  #121:"set_locked set_other_side set_opaque set_automatic set_closing_task" unknown hacker (#35) rxd this none this
  #121:self_close               unknown hacker (#35) rxd    this none this
  #121:set_open                 unknown hacker (#35) rxd    this none this
  #121:close_delay              unknown hacker (#35) rxd    this none this
  #121:event_directed_speech    unknown hacker (#35) rxd    this none this
  #121:is_unlocked_for          unknown hacker (#35) rxd    this none this
  #121:help_text                unknown hacker (#35) rxd    this none this
  #121:through_msg              unknown hacker (#35) rxd    this none this
  #121:sub_open                 Core-Wizard (#184)   rxd    this none this
  #121:pull                     unknown hacker (#35) rxd    any through this
  #121:walking_cost             unknown hacker (#35) rxd    this none this
  #121:obj_user_key             unknown hacker (#35) rxd    this none this
  #121:modname_open             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic door (#121) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic exit (#7).
.open_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
.close_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
.open                    unknown hack (#35)    r      0
.opened_msg              unknown hack (#35)    r c    {#69, "do", "The door t..
.closed_msg              unknown hack (#35)    r c    {#69, "do", "The door t..
.automatic               unknown hack (#35)    r      1
.locked_msg              unknown hack (#35)    r c    {#69, "do", "The door t..
.other_side              unknown hack (#35)    r      #-1
.opens_msg               unknown hack (#35)    r c    {#69, "do", "The door t..
.closes_msg              unknown hack (#35)    r c    {#69, "do", "The door "..
.user_key                unknown hack (#35)    r      #-1
.unlocked_msg            unknown hack (#35)    r c    {#69, "do", "The door "..
.lock_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
.unlock_msg              unknown hack (#35)    r c    {#69, "do", {"name", "p..
.locked                  unknown hack (#35)    r      0
.locks_msg               unknown hack (#35)    r c    {#69, "do", "You hear t..
.unlocks_msg             unknown hack (#35)    r c    {#69, "do", "You hear t..
.knock_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
.knocks_msg              unknown hack (#35)    r c    {#69, "do", "Someone kn..
.opaque                  unknown hack (#35)    r      1
.help                    unknown hack (#35)    r c    {"A Generic Door which ..
.no_key_msg              unknown hack (#35)    r c    {#69, "do", "You don't ..
.close_delay             unknown hack (#35)    r      -1
.closing_task            unknown hack (#35)    r      0
.self_closes_msg         unknown hack (#35)    r c    {#69, "do", "The door t..
.pull_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
-------------------------------- finished ---------------------------------
,proper                  unknown hacker (#35)  r c    0
-------------------------------- finished ---------------------------------
#-1:Input to EVAL, line 5:  Variable not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
`HELP CLEAR' AMBIGUOUS
======================

Sorry, the topic `clear' is ambiguous.  I don't know which of the following topics you mean:

`help clear_property()'[1]                      `help @clearproperty'[2]

=> 0
,proper                  Core-Wizard (#184)    r c    0
-------------------------------- finished ---------------------------------
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the door to the foyer.  The door to the south is open.  The door to the west is closed.
stormagnet is here.
A pair of double doors lead south to the West Foyer.
In the West Foyer, you see nothing.
The door to the south is open.
The door to the west is closed.
A delicate flower.
She is awake and looks alert.
Carrying:
 a Generic Wind-Up Toy                   a butler's key
 a leather couch                         a generic bot
@integrate_room west is "The '(door) to %td %t:(is) %tx{open 0}."
@integrate_player west isn't set.
@integrate_container west isn't set.
@nogo west isn't set.
@onogo west isn't set.
@arrive west isn't set.
@oarrive west isn't set.
@oleave west isn't set.
@leave west isn't set.
@nothing west is "nothing"
@no_one west is "no one"
@through west is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open west is "%Nd %n:(opens) the '(door) to %td."
@close west is "%Nd %n:(closes) the '(door) to %td."
@opened west is "The '(door) to %td %t:(is) open."
@closed west is "The '(door) to %td %t:(is) closed."
@locked west is "The '(door) to %td %t:(is) locked."
@opens west is "The '(door) to %td %t:(opens) from the other side."
@closes west is "The '(door) %td %t:(closes) from the other side."
@unlocked west is "The '(door) %td %t:(is) unlocked."
@lock west is "%Nd %n:(locks) the '(door) to %td."
@unlock west is "%Nd %n:(unlocks) the '(door) to %td."
@locks west is "You hear the click of the '(door) to %td being locked from the other side."
@unlocks west is "You hear the click of the '(door) to %td being unlocked from the other side."
@knock west is "%Nd %n:(knocks) on the '(door) to %td."
@knocks west is "Someone knocks on the '(door) to %td."
@no_key west is "You don't have the key for the '(door) to %td."
@self_closes west is "The '(door) to %td %t:(closes)."
@pull west is "%Ni %n:(reaches) through the '(door) to %td and %n:(pulls) %dd into %nld."
You set the "opened" message of the west (#409).
You set the "closed" message of the west (#409).
You set the "locked" message of the west (#409).
You set the "opens" message of the west (#409).
You set the "closes" message of the west (#409).
You set the "unlocked" message of the west (#409).
You set the "lock" message of the west (#409).
You set the "unlock" message of the west (#409).
You set the "locks" message of the west (#409).
You set the "unlocks" message of the west (#409).
You set the "knock" message of the west (#409).
You set the "knocks" message of the west (#409).
You set the "no_key" message of the west (#409).
You set the "self_closes" message of the west (#409).
You set the "pull" message of the west (#409).
The doors to the west are closed.
@integrate_room $container isn't set.
@integrate_player $container isn't set.
@integrate_container $container isn't set.
@in $container is "in"
@put_fail $container is "You can't put %dd %tx{in} that."
@remove_fail $container is "You can't remove that."
@remove $container is "%Nd %n:(removes) %di from %id."
@put $container is "%Nd %n:(puts) %dd %tx{in} %id."
@empty $container is "%Ts %t:(is) empty."
@integrate_sep $container is "  "
Last modified Sat May 31 17:19:19 1997 PDT by Xythian (#199) (on Waterpoint).
#126:"description" this none this
desc = pass(@args);
// defaultdesc = {"You see nothing special."};
// if (!desc)
//  desc = defaultdesc;
// endif
integrate = $integration_utils:integrate(args, "integrate_container_msg");
if (integrate)
  if (!desc)
    return integrate;
  else
    desc[$] = desc[$] + $string_utils:pronoun_sub(this.integrate_sep_msg) + integrate[1];
    if (length(integrate) > 1)
      desc = {@desc, @integrate[2..$]};
    endif
  endif
endif
return desc;
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the door to the foyer.  The '(door) to the south are open.  The '(door) to the west are closed.
stormagnet is here, daydreaming.
That is not a valid command.
@integrate_room $door is "The '(door) to %td %t:(is) %tx{open 0}."
@integrate_player $door isn't set.
@integrate_container $door isn't set.
@nogo $door isn't set.
@onogo $door isn't set.
@arrive $door isn't set.
@oarrive $door isn't set.
@oleave $door isn't set.
@leave $door isn't set.
@nothing $door is "nothing"
@no_one $door is "no one"
@through $door is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $door is "%Nd %n:(opens) the '(door) to %td."
@close $door is "%Nd %n:(closes) the '(door) to %td."
@opened $door is "The '(door) to %td %t:(is) open."
@closed $door is "The '(door) to %td %t:(is) closed."
@locked $door is "The '(door) to %td %t:(is) locked."
@opens $door is "The '(door) to %td %t:(opens) from the other side."
@closes $door is "The '(door) %td %t:(closes) from the other side."
@unlocked $door is "The '(door) %td %t:(is) unlocked."
@lock $door is "%Nd %n:(locks) the '(door) to %td."
@unlock $door is "%Nd %n:(unlocks) the '(door) to %td."
@locks $door is "You hear the click of the '(door) to %td being locked from the other side."
@unlocks $door is "You hear the click of the '(door) to %td being unlocked from the other side."
@knock $door is "%Nd %n:(knocks) on the '(door) to %td."
@knocks $door is "Someone knocks on the '(door) to %td."
@no_key $door is "You don't have the key for the '(door) to %td."
@self_closes $door is "The '(door) to %td %t:(closes)."
@pull $door is "%Ni %n:(reaches) through the '(door) to %td and %n:(pulls) %dd into %nld."
@integrate_room west is "The '(door) to %td %t:(is) %tx{open 0}."
@integrate_player west isn't set.
@integrate_container west isn't set.
@nogo west isn't set.
@onogo west isn't set.
@arrive west isn't set.
@oarrive west isn't set.
@oleave west isn't set.
@leave west isn't set.
@nothing west is "nothing"
@no_one west is "no one"
@through west is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open west is "%Nd %n:(opens) the '(door) to %td."
@close west is "%Nd %n:(closes) the '(door) to %td."
@opened west is "The %t'(door) to %td %t:(is) open."
@closed west is "The %t'(door) to %td %t:(is) closed."
@locked west is "The %t'(door) to %td %t:(is) locked."
@opens west is "The %t'(door) to %td %t:(opens) from the other side."
@closes west is "The %t'(door) %td %t:(closes) from the other side."
@unlocked west is "The %t'(door) %td %t:(is) unlocked."
@lock west is "%Nd %n:(locks) the %t'(door) to %td."
@unlock west is "%Nd %n:(unlocks) the %t'(door) to %td."
@locks west is "You hear the click of the %t'(door) to %td being locked from the other side."
@unlocks west is "You hear the click of the %t'(door) to %td being unlocked from the other side."
@knock west is "%Nd %n:(knocks) on the %t'(door) to %td."
@knocks west is "Someone knocks on the %t'(door) to %td."
@no_key west is "You don't have the key for the %t'(door) to %td."
@self_closes west is "The %t'(door) to %td %t:(closes)."
@pull west is "%Ni %n:(reaches) through the %t'(door) to %td and %n:(pulls) %dd into %nld."
@integrate_room $door is "The '(door) to %td %t:(is) %tx{open 0}."
@integrate_player $door isn't set.
@integrate_container $door isn't set.
@nogo $door isn't set.
@onogo $door isn't set.
@arrive $door isn't set.
@oarrive $door isn't set.
@oleave $door isn't set.
@leave $door isn't set.
@nothing $door is "nothing"
@no_one $door is "no one"
@through $door is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $door is "%Nd %n:(opens) the '(door) to %td."
@close $door is "%Nd %n:(closes) the '(door) to %td."
@opened $door is "The '(door) to %td %t:(is) open."
@closed $door is "The '(door) to %td %t:(is) closed."
@locked $door is "The '(door) to %td %t:(is) locked."
@opens $door is "The '(door) to %td %t:(opens) from the other side."
@closes $door is "The '(door) %td %t:(closes) from the other side."
@unlocked $door is "The '(door) %td %t:(is) unlocked."
@lock $door is "%Nd %n:(locks) the '(door) to %td."
@unlock $door is "%Nd %n:(unlocks) the '(door) to %td."
@locks $door is "You hear the click of the '(door) to %td being locked from the other side."
@unlocks $door is "You hear the click of the '(door) to %td being unlocked from the other side."
@knock $door is "%Nd %n:(knocks) on the '(door) to %td."
@knocks $door is "Someone knocks on the '(door) to %td."
@no_key $door is "You don't have the key for the '(door) to %td."
@self_closes $door is "The '(door) to %td %t:(closes)."
@pull $door is "%Ni %n:(reaches) through the '(door) to %td and %n:(pulls) %dd into %nld."
You set the "integrate_room" message of the generic door (#121).
You set the "open" message of the generic door (#121).
You set the "close" message of the generic door (#121).
You set the "opened" message of the generic door (#121).
You set the "closed" message of the generic door (#121).
You set the "locked" message of the generic door (#121).
You set the "opens" message of the generic door (#121).
You set the "closes" message of the generic door (#121).
You set the "unlocked" message of the generic door (#121).
You set the "lock" message of the generic door (#121).
You set the "unlock" message of the generic door (#121).
You set the "locks" message of the generic door (#121).
You set the "unlocks" message of the generic door (#121).
You set the "knock" message of the generic door (#121).
You set the "knocks" message of the generic door (#121).
You set the "no_key" message of the generic door (#121).
You set the "self_closes" message of the generic door (#121).
You set the "pull" message of the generic door (#121).
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the door to the foyer.  The doors to the south are open.  The doors to the west are closed.
stormagnet is here, daydreaming.
The West Foyer
You see nothing special.
You can't go that way.
The east (#395) leads to the West Hall (#304) via {east, e}.
The south (#397) leads to the South Foyer (#396) via {south, s}.
The n1 (#399) leads to the Front Parlour (#398) via {n1, north1, first door north, first north, 1stn, 1st north}.
The n2 (#401) leads to the Music Room (#400) via {n2, north2, second door north, second north, 2nd north, 2ndn}.
The n3 (#403) leads to the Green Drawing Room (#402) via {n3, north3, third door north, third north, 3rd north, 3rdn}.
The south1 (#405) leads to the Lower Library Doorway (#404) via {south1, s1, first door south, first south, 1st south, 1sts}.
The south2 (#407) leads to the Billiard Room Doorway (#406) via {south2, s2, second door south, second south, 2nd south, 2nds}.
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the door to the foyer.  The doors to the south are open.  The doors to the west are closed.
stormagnet is here, dozing.
You open the doors to the west.
The Music Room
You see nothing special.
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the door to the foyer.  The doors to the south are open.  The doors to the west are open.
stormagnet is here.
The generic room(#3) has 60 kids.
Generic Editor (#46)   North Vestibule (#70)   Northern Entrance (#267)   Great Hall (#287)   Northeast Tower (#292)   Northwest Tower (#294)   East Hall (#296)   Atrium (#298)   Atrium (#302)   West Hall (#304)   East Foyer (#310)   Southeast Tower (#312)   South Hall (#315)   South Vestibule (#318)   Southwest Tower (#321)   Muscician's Gallery (#323)   Ballroom (#330)   Smoking Room Doorway (#332)   Dining Room Doorway (#334)   Drawing Room Doorway (#336)   Side Foyer (#338)   Refreshment Room (#346)   Card Room (#348)   Smoking Room (#350)   East Servant's Passage (#353)   Fainting Room (#357)   Smoking Room (#361)   Dining Room (#364)   Red Drawing Room (#368)   Blue Drawing Room (#374)   Solarium (#379)   Morning Room (#381)   Breakfast Room (#385)   West Foyer (#393)   South Foyer (#396)   Front Parlour (#398)   Music Room (#400)   Green Drawing Room (#402)   Lower Library Doorway (#404)   Billiard Room Doorway (#406)   Conservatory (#415)   Lower Library (#419)   West Servant's Passage (#422)   Billiard Room (#428)   Billiard Room Servant's Passage (#431)   Back Parlour (#434)   Back Parlour Doorway (#437)   Back Parlour Servant's Passage (#442)   White Drawing Room Doorway (#446)   White Drawing Room (#449)   Back Scullery Servant's Passage (#452)   Back Scullery (#457)   Winter Hall (#462)   Dining Room Servant's Passage (#465)   Drawing Room Servant's Passage (#467)   Water Closet (#481)   Summer Hall (#485)   Theater (#487)   Backstage (#489)   Stage (#492)
The West Foyer
The West Hall
The Northwest Tower
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaises sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
You have arrived.
A series of six engraved pillars run the length of the Great Hall, supporting the double barrel vaults of the ceiling overhead.
You see no "window" here.
You see no "trace" here.
You see no "elabor" here.
A pair of low walnut chaise longues, upholhstered in a golf fern-figured damask
A pair of small semi-circular occassional tables.  Some crystal vases are on the demi-lune tables.
A pair of large, fluted crystal vases.
stormagnet arrives from the Northwest Tower.
You sit on the floor.
The floor underfoot is formed of enormous blocks of black basalt, carefully mitered into a seamless whole. Age, polishing, and the passage of countless feet have worn it smooth in the middle, but toward the edges of the room the blocks are still rough to the touch.  You are sitting on it.
You stand up from the floor.
The Northeast Tower
You see nothing special.
The south (#297) leads to the East Hall (#296) via {south, s}.
The west (#301) leads to the Great Hall (#287) via {west, w}.
The East Hall
You see nothing special.
The north (#300) leads to the Northeast Tower (#292) via {north, n}.
The east (#311) leads to the East Foyer (#310) via {east, e}.
The west (#299) leads to the Atrium (#298) via {west, w}.
The south (#313) leads to the Southeast Tower (#312) via {south, s}.
The up (#324) leads to the Muscician's Gallery (#323) via {up, u}.
The Muscician's Gallery
You see nothing special.
The down (#341) leads to the East Hall (#296) via {down, d}.
The East Hall
You see nothing special.
The Northeast Tower
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaises sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
stormagnet is here, distracted.
You have arrived.
You see no "marble" here.
You see no "glass" here.
You see no "doors" here.
The Great Hall (#287) contains a floor (#526), some walls (#527), some pillars (#530), some chaises (#534), some demi-lune tables (#535), stormagnet (#246), and Crag (#243).
The walls of the Great Hall are formed of enormous blocks of quarried black basalt.
When you look closer, you can see that the walls are constructed without mortar. Yet the blocks are expertly cut, and join together almost seamlessly. You can only imagine how old they must be.
You lounge on the chaises.
stormagnet puts the engraving in the vaulted ceiling.
Crag looks around...
Overhead, two steeply arched vaults soar off into shadows, divided and supported by the line of pillars that runs the length of the Great Hall. The ribs of the vaults are richly engraved.
You see no "ribs" here.
Among the engravings, you can make out a series of peculiar grotesques. Peering down at you with motionless stone eyes from their concealing branches and fronds are demons and dragons, fairies and elfs.
Objects owned by stormagnet (from #0 to #556):
  6K #246 stormagnet                 [Great Hall]
  5K #260 Generic Wind-Up Toy        [stormagnet]
  2K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows            *North Vestibule->Northern Entrance
  1K #267 Northern Entrance         
  1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [Nowhere]
 <1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling           *[generic room]
 <1K #273 timbered ceiling          *[North Vestibule]
  2K #274 chaise longues            *[North Vestibule]
  2K #275 butler's desk             *[North Vestibule]
 <1K #276 butler's key               [stormagnet]
  1K #277 demi-lune table           *[North Vestibule]
  1K #278 silver salver              [demi-lune table]
  1K #284 calling cards              [silver salver]
  1K #285 chandelier                 [timbered ceiling]
  2K #286 porter's chair            *[North Vestibule]
  1K #287 Great Hall                
 <1K #288 south                      *North Vestibule->Great Hall
 <1K #289 generic bot                [stormagnet]
  2K #249 tracery windows            Northern Entrance->*North Vestibule
  1K #292 Northeast Tower           
 <1K #293 east                       Great Hall->Northeast Tower
  1K #294 Northwest Tower           
 <1K #295 west                       Great Hall->Northwest Tower
  1K #296 East Hall                 
 <1K #297 south                      Northeast Tower->East Hall
  1K #298 Atrium                    
 <1K #300 north                      East Hall->Northeast Tower
 <1K #301 west                       Northeast Tower->Great Hall
  1K #302 Atrium                    
 <1K #303 south                      Great Hall->Atrium
  1K #304 West Hall                 
 <1K #305 south                      Northwest Tower->West Hall
 <1K #306 north                      West Hall->Northwest Tower
 <1K #307 east                       West Hall->Atrium
 <1K #308 east                       Northwest Tower->Great Hall
 <1K #309 north                      Great Hall->*North Vestibule
  1K #310 East Foyer                
 <1K #311 east                       East Hall->East Foyer
 <1K #299 west                       East Hall->Atrium
  1K #312 Southeast Tower           
 <1K #313 south                      East Hall->Southeast Tower
 <1K #314 north                      Southeast Tower->East Hall
  1K #315 South Hall                
 <1K #316 west                       Southeast Tower->South Hall
 <1K #317 north                      South Hall->Atrium
  1K #318 South Vestibule           
 <1K #319 south                      South Hall->South Vestibule
 <1K #320 east                       South Hall->Southeast Tower
  1K #321 Southwest Tower           
 <1K #322 west                       South Hall->Southwest Tower
  1K #323 Muscician's Gallery       
 <1K #324 up                         East Hall->Muscician's Gallery
 <1K #325 north                      Atrium->Great Hall
 <1K #326 south                      Atrium->South Hall
 <1K #327 east                       Atrium->East Hall
 <1K #328 west                       Atrium->West Hall
 <1K #329 west                       East Foyer->East Hall
  1K #330 Ballroom                  
 <1K #331 south                      East Foyer->Ballroom
  1K #332 Smoking Room Doorway      
 <1K #333 north1                     East Foyer->Smoking Room Doorwa
  1K #334 Dining Room Doorway       
 <1K #335 north2                     East Foyer->Dining Room Doorway
  1K #336 Drawing Room Doorway      
 <1K #337 north3                     East Foyer->Drawing Room Doorwa
  1K #338 Side Foyer                
 <1K #339 turn corner                East Foyer->Side Foyer
 <1K #340 north                      Side Foyer->East Foyer
 <1K #341 down                       Muscician's Gallery->East Hall
 <1K #342 north                      Southwest Tower->West Hall
 <1K #343 east                       Southwest Tower->South Hall
 <1K #344 north                      South Vestibule->South Hall
 <1K #345 north                      Ballroom->East Foyer
  1K #346 Refreshment Room          
 <1K #347 south1                     Ballroom->Refreshment Room
  1K #348 Card Room                 
 <1K #349 south2                     Ballroom->Card Room
  1K #350 Smoking Room              
 <1K #351 south                      Card Room->Smoking Room
 <1K #352 north                      Card Room->Ballroom
  1K #353 East Servant's Passage    
 <1K #354 east                       Card Room->East Servant's Pass
 <1K #355 north                      Smoking Room->Card Room
 <1K #356 north                      Refreshment Room->Ballroom
  1K #357 Fainting Room             
 <1K #358 south                      Refreshment Room->Fainting Room
 <1K #359 north                      Fainting Room->Refreshment Room
 <1K #360 south                      Smoking Room Doorwa->East Foyer
  1K #361 Smoking Room              
 <1K #362 north                      Smoking Room Doorwa->Smoking Room
 <1K #363 south                      Smoking Room->Smoking Room Doorwa
  1K #364 Dining Room               
 <1K #365 east                       Smoking Room->Dining Room
 <1K #366 west                       Dining Room->Smoking Room
 <1K #367 south                      Dining Room->Dining Room Doorway
  1K #368 Red Drawing Room          
 <1K #369 east                       Dining Room->Red Drawing Room
 <1K #370 north                      Dining Room Doorway->Dining Room
 <1K #371 south                      Dining Room Doorway->East Foyer
 <1K #372 west                       Red Drawing Room->Dining Room
 <1K #373 south                      Red Drawing Room->Drawing Room Doorwa
  1K #374 Blue Drawing Room         
 <1K #375 east                       Red Drawing Room->Blue Drawing Room
 <1K #376 north                      Drawing Room Doorwa->Red Drawing Room
 <1K #377 south                      Drawing Room Doorwa->East Foyer
 <1K #378 west                       Blue Drawing Room->Red Drawing Room
  1K #379 Solarium                  
 <1K #380 east                       Blue Drawing Room->Solarium
  1K #381 Morning Room              
 <1K #382 south                      Blue Drawing Room->Morning Room
 <1K #383 north                      Morning Room->Blue Drawing Room
 <1K #384 east                       Morning Room->Solarium
  1K #385 Breakfast Room            
 <1K #386 south                      Morning Room->Breakfast Room
 <1K #387 north                      Breakfast Room->Morning Room
 <1K #388 east                       Breakfast Room->Solarium
 <1K #389 west1                      Solarium->Blue Drawing Room
 <1K #390 west2                      Solarium->Morning Room
 <1K #391 west3                      Solarium->Breakfast Room
 <1K #392 west4                      Solarium->Breakfast Room
  1K #393 West Foyer                
 <1K #394 west                       West Hall->West Foyer
 <1K #395 east                       West Foyer->West Hall
  1K #396 South Foyer               
 <1K #397 south                      West Foyer->South Foyer
  1K #398 Front Parlour             
  1K #399 n1                         West Foyer->Front Parlour
  1K #400 Music Room                
  1K #401 n2                         West Foyer->Music Room
  1K #402 Green Drawing Room        
  1K #403 n3                         West Foyer->Green Drawing Room
  1K #404 Lower Library Doorway     
  1K #405 south1                     West Foyer->Lower Library Doorw
  1K #406 Billiard Room Doorway     
  1K #407 south2                     West Foyer->Billiard Room Doorw
 <1K #408 south                      Front Parlour->West Foyer
 <1K #409 west                       Front Parlour->Music Room
 <1K #410 south                      Music Room->West Foyer
 <1K #411 east                       Music Room->Front Parlour
 <1K #412 west                       Music Room->Green Drawing Room
 <1K #413 south                      Green Drawing Room->West Foyer
 <1K #414 east                       Green Drawing Room->Music Room
  1K #415 Conservatory              
 <1K #416 west                       Green Drawing Room->Conservatory
  1K #418 northeast                  Conservatory->Green Drawing Room
  1K #417 southeast                  Conservatory->West Foyer
  1K #419 Lower Library             
 <1K #420 south                      Lower Library Doorw->Lower Library
 <1K #421 north                      Lower Library Doorw->West Foyer
  1K #422 West Servant's Passage    
 <1K #423 west                       Lower Library Doorw->West Servant's Pass
 <1K #424 north                      Lower Library->Lower Library Doorw
 <1K #425 east                       West Servant's Pass->Lower Library Doorw
 <1K #426 west                       West Servant's Pass->Billiard Room Doorw
 <1K #427 north                      Billiard Room Doorw->West Foyer
  1K #428 Billiard Room             
 <1K #429 south                      Billiard Room Doorw->Billiard Room
 <1K #430 east                       Billiard Room Doorw->West Servant's Pass
  1K #431 Billiard Room Servant's P 
 <1K #432 west                       Billiard Room Doorw->Billiard Room Serva
 <1K #433 north                      Billiard Room->Billiard Room Doorw
  1K #434 Back Parlour              
 <1K #435 south                      Billiard Room->Back Parlour
 <1K #436 north                      Back Parlour->Billiard Room
  1K #437 Back Parlour Doorway      
 <1K #438 west                       Back Parlour->Back Parlour Doorwa
 <1K #439 north                      Back Parlour Doorwa->Billiard Room Serva
 <1K #440 east                       Back Parlour Doorwa->Back Parlour
 <1K #441 west                       Back Parlour Doorwa->South Foyer
  1K #442 Back Parlour Servant's Pa 
 <1K #443 south                      Back Parlour Doorwa->Back Parlour Servan
 <1K #444 north                      Back Parlour Servan->Back Parlour Doorwa
  1K #446 White Drawing Room Doorwa 
 <1K #447 south                      Back Parlour Servan->White Drawing Room 
  1K #449 White Drawing Room        
 <1K #450 east                       White Drawing Room ->White Drawing Room
 <1K #451 west                       White Drawing Room ->South Foyer
  1K #452 Back Scullery Servant's P 
 <1K #453 south                      White Drawing Room ->Back Scullery Serva
 <1K #454 north                      White Drawing Room ->Back Parlour Servan
 <1K #455 west                       White Drawing Room->White Drawing Room 
 <1K #456 north                      Back Scullery Serva->White Drawing Room 
  1K #457 Back Scullery             
 <1K #458 east                       Back Scullery Serva->Back Scullery
 <1K #459 south                      Billiard Room Serva->Back Parlour Doorwa
 <1K #460 east                       Billiard Room Serva->Billiard Room Doorw
 <1K #461 west                       Back Scullery->South Foyer
  1K #462 Winter Hall               
 <1K #463 south                      South Foyer->Winter Hall
 <1K #464 east                       South Foyer->West Foyer
  1K #465 Dining Room Servant's Pas 
 <1K #466 west                       Dining Room Doorway->Dining Room Servant
  1K #467 Drawing Room Servant's Pa 
 <1K #468 east                       Dining Room Doorway->Drawing Room Servan
 <1K #469 east                       Dining Room Servant->Dining Room Doorway
 <1K #470 west                       Dining Room Servant->Smoking Room Doorwa
 <1K #471 east                       Smoking Room Doorwa->Dining Room Servant
 <1K #472 west                       Drawing Room Servan->Dining Room Doorway
 <1K #473 east                       Drawing Room Servan->Drawing Room Doorwa
 <1K #474 west                       Drawing Room Doorwa->Drawing Room Servan
 <1K #475 east                       Drawing Room Doorwa->East Servant's Pass
 <1K #476 west                       East Servant's Pass->Card Room
 <1K #477 north                      East Servant's Pass->Drawing Room Doorwa
 <1K #478 north                      Winter Hall->South Foyer
 <1K #479 first east                 South Foyer->Back Parlour Doorwa
 <1K #480 second east                South Foyer->White Drawing Room 
  1K #481 Water Closet              
 <1K #482 third east                 South Foyer->Water Closet
 <1K #483 fourth east                South Foyer->Back Scullery
 <1K #484 first west                 South Foyer->Conservatory
  1K #485 Summer Hall               
 <1K #486 second west                South Foyer->Summer Hall
  1K #487 Theater                   
 <1K #488 third west                 South Foyer->Theater
  1K #489 Backstage                 
 <1K #490 fourth west                South Foyer->Backstage
 <1K #491 east                       Backstage->South Foyer
  1K #492 Stage                     
 <1K #493 north                      Backstage->Stage
 <1K #494 south                      Stage->Backstage
 <1K #495 down                       Stage->Theater
 <1K #496 up                         Theater->Stage
 <1K #497 east                       Theater->South Foyer
 <1K #498 east                       Summer Hall->South Foyer
  2K #499 chaise longue              [Nowhere]
  1K #500 chair                      [Nowhere]
  1K #501 bed                        [Nowhere]
 <1K #506 tea table                  [Front Parlour]
  1K #512 floor                      [Nowhere]
  1K #513 front parlour floor        [Front Parlour]
 <1K #515 front parlour ceiling      [Front Parlour]
 <1K #514 brass chandelier           [front parlour ceiling]
 <1K #516 oriental rug               [Front Parlour]
  1K #502 settee                     [Nowhere]
  1K #517 settees                    [Front Parlour]
 <1K #518 walls                      [Nowhere]
 <1K #519 walls                      [Front Parlour]
 <1K #520 acanthus leaves            [walls]
 <1K #521 picture_rail               [Nowhere]
 <1K #522 frieze                     [walls]
 <1K #523 cornice                    [walls]
 <1K #524 picture rail               [walls]
 <1K #525 painting                   [Nowhere]
  1K #526 floor                      [Great Hall]
 <1K #527 walls                      [Great Hall]
 <1K #528 basalt block               [walls]
 <1K #529 pillar                     [Nowhere]
 <1K #530 pillars                    [Great Hall]
  1K #534 chaises                    [Great Hall]
 <1K #535 demi-lune tables           [Great Hall]
 <1K #536 vase                       [Nowhere]
 <1K #537 crystal vases              [demi-lune tables]
 <1K #538 flower                     [Nowhere]
 <1K #539 bouquet                    [Nowhere]
 <1K #541 desk                       [Nowhere]
 <1K #542 drawer                     [Nowhere]
 <1K #543 bureau a gradin            [Front Parlour]
 <1K #544 bottom drawer              [bureau a gradin]
 <1K #545 left drawer                [bureau a gradin]
 <1K #546 middle drawer              [bureau a gradin]
 <1K #547 right drawer               [bureau a gradin]
  1K #548 desk chair                 [Front Parlour]
 <1K #549 sideboard                  [Front Parlour]
 <1K #550 left cabinet               [sideboard]
 <1K #551 right cabinet              [sideboard]
 <1K #552 top drawer                 [sideboard]
 <1K #553 middle drawer              [sideboard]
 <1K #554 bottom drawer              [sideboard]
 <1K #555 vaulted ceiling            [Great Hall]
 <1K #556 engraving                  [vaulted ceiling]
-- 273 objects.  Total bytes: 286,901.----------------------------------------
Objects owned by Crag (from #0 to #556):
 12K #243 Crag                      *[Great Hall]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  2K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  1K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  1K #280 Generic Table              [Nowhere]
  1K #282 microphone                *[North Vestibule]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
 <1K #540 Generic See-through Porta  <invalid>-><invalid>
-- 36 objects.  Total bytes: 52,000.------------------------------------------
Moved.
You drop the microphone.
You stand up from the chaises.
You open the door to the south.
The Atrium
You see nothing special.
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaises sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
You see a microphone here.
stormagnet is here, daydreaming.
You take the microphone.
stormagnet goes west.
The Northwest Tower
The West Hall
The West Foyer
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the doors to the foyer.  The doors to the south are open.  The doors to the west are open.
stormagnet is here.
You have arrived.
Usage:  sit with <someone>
        sit on <seat>
        sit
Usage:  sit with <someone>
        sit on <seat>
        sit
You sit on the settees.
A deep brown Oriental rug, figured in a pattern of vines and cabbage roses in pale gold and wheat.
A group of three matching settees, pulled cozily together. They are upholstered in a shiny champagne-and-ginger pinstriped silk, with scalloped yoke backs and cabriolet legs in polished mahogany.  You are sitting on them.
A small French-style writing desk, of polished mahogany inlaid with fruitwood. It has three small drawers on top, and one large drawer below.
You see no "bureau's large" here.
You haven't specified which "bureau's drawer" you mean.
A small, shallow drawer set into a ledge behind the writing surface of the desk. The face o
f the drawer is outlined with a pearwood inlay, and beneath the brass drawer pull is a small keyhole.
The bureau a gradin (#543) contains a bottom drawer (#544), a left drawer (#545), a middle drawer (#546), and a right drawer (#547).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "str:#546.description" name: "middle drawer.description" type: string-list content*: "" _data-tag: 2091610973188
#$#* 2091610973188 content: A small, shallow drawer set into a ledge behind the writing surface of the desk. The face o
#$#* 2091610973188 content: f the drawer is outlined with a pearwood inlay, and beneath the brass drawer pull is a small keyhole.
#$#: 2091610973188
Set description property of the middle drawer (#546).
A small, shallow drawer set into a ledge behind the writing surface of the desk. The face of the drawer is outlined with a pearwood inlay, and beneath the brass drawer pull is a small keyhole.
You see no "bureau's middle's keyhole" here.
You haven't specified which "bureau's top" you mean.
A small, shallow drawer set into a ledge behind the writing surface of the desk. The face of the drawer is outlined with a pearwood inlay, and beneath the brass drawer pull is a small keyhole.
A small, shallow drawer set into a ledge behind the writing surface of the desk. The face o
f the drawer is outlined with a pearwood inlay, and beneath the brass drawer pull is a small keyhole.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "str:#547.description" name: "right drawer.description" type: string-list content*: "" _data-tag: 1989617662189
#$#* 1989617662189 content: A small, shallow drawer set into a ledge behind the writing surface of the desk. The face o
#$#* 1989617662189 content: f the drawer is outlined with a pearwood inlay, and beneath the brass drawer pull is a small keyhole.
#$#: 1989617662189
Set description property of the right drawer (#547).
A small, shallow drawer set into a ledge behind the writing surface of the desk. The face of the drawer is outlined with a pearwood inlay, and beneath the brass drawer pull is a small keyhole.
< Beaker has disconnected.  Total: 2 >
Usage:  @add-feature <object>
Available features not already in your feature list include:
Community Group Commands                documentation feature
Feature Name
------- ----
#67     Stage-Talk Feature
#68     Thinking Feature
#83     login watcher mark 2
------- ----
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  You are sitting on them.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the doors to the foyer.  The doors to the south are open.  The doors to the west are open.
stormagnet is here.
A small mahogany chair, with a low curved back and arms, and cabriolet legs. It is upholstered in pale gold silk damask, in an acanthus leaf pattern.
A large, rather ornate mahogany sideboard, with a bowed front and brass fittings. In the center are a set of three drawers, with cabinets to either side.
You see nothing special.
You see nothing special.
You see nothing special.
You see no "sideboard's cabinets" here.
You see nothing special.
You see nothing special.
A white plaster ceiling, embossed with a pattern of grape vines and acanthus leaves.  A brass chandelier hangs overhead, casting a dazzlingly bright light.
A brass chandelier, fitted with electric lights.
A waxed wooden floor, in dark-brown stained maplewood.
That is not a valid command.
That is not a valid command.
-----
`HELP SEATS' NOT FOUND
======================

Sorry, but no help is available on `seats'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

You are already sitting on the settees.
You stand up from the settees.
You sit on the front parlour floor.
Crag doodles with crayons.
The walls are papered in a brown and gold pattern of acanthus leaves.  A cornice meets the ceiling above.  A picture rail runs the length of the room, below the frieze.
You see no "frieze" here.
The frieze is simply carved in a pattern of repeating recessed lozenges.
The cornice is carved in an acanthus pattern, from the same dark-washed maple as the floor and frieze.
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settees are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the doors to the foyer.  The doors to the south are open.  The doors to the west are open.
stormagnet is here, daydreaming.
A highly polished, round mahogany tea table.
It has nothing on it.
A pair of double doors lead south to the West Foyer.
In the West Foyer, you see nothing.
The doors to the south are open.
In the Music Room, you see nothing.
The doors to the west are open.
The walls are papered in a brown and gold pattern of acanthus leaves.  A cornice meets the ceiling above.  A picture rail runs the length of the room, below the frieze.
You see no "picture" here.
A narrow strip of bevelled wood runs along the upper wall of the room.
Nothing is hanging from the picture rail.
William Morris's 1875 Acanthus pattern, for you design nerds out there who have bothered to look this close.
The walls (#519) contain an acanthus leaves (#520), a cornice (#523), a picture rail (#524), and a frieze (#522).
=> "The walls are papered in a brown and gold pattern of acanthus leaves."
@integrate_room #520 isn't set.
@integrate_player #520 isn't set.
@integrate_container #520 isn't set.
@drop_failed #520 is "You can't seem to drop %td here."
@drop_succeeded #520 is "You drop %td."
@odrop_failed #520 is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded #520 is "%n:(drops) %ti."
@otake_succeeded #520 is "%n:(picks) up %td."
@otake_failed #520 isn't set.
@take_succeeded #520 is "You take %td."
@take_failed #520 is "You can't pick up %td."
-----
CLEAR_PROPERTY()
================

Syntax:  is_clear_property (obj <object>, str <prop-name>)   => int
            clear_property (obj <object>, str <prop-name>)   => none

These two functions test for clear and set to clear, respectively, the property named <prop-name> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> has no non-built-in property named <prop-name>, then `E_PROPNF' is raised.  If the programmer does not have read (write) permission on the property in question, then `is_clear_property()' (`clear_property()') raises `E_PERM'.  If a property is clear, then when the value of that property is queried the value of the parent's property of the same name is returned.  If the parent's property is clear, then the parent's parent's value is examined, and so on.  If <object> is the definer of the property <prop-name>, as opposed to an inheritor of the property, then `clear_property()' raises `E_INVARG'.

The fireplace disappears suddenly for parts unknown, moved by stormagnet.
You are already there.
A group of three matching settees, pulled cozily together. They are upholstered in a shiny champagne-and-ginger pinstriped silk, with scalloped yoke backs and cabriolet legs in polished mahogany.  No one is currently sitting on them.
@integrate_room set isn't set.
@integrate_player set isn't set.
@integrate_container set isn't set.
@drop_failed set is "You can't seem to drop %td here."
@drop_succeeded set is "You drop %td."
@odrop_failed set is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded set is "%n:(drops) %ti."
@otake_succeeded set is "%n:(picks) up %td."
@otake_failed set isn't set.
@take_succeeded set is "You take %td."
@take_failed set is "You can't pick up %td."
@empty set is "No one is currently %tx{sitting} %tx{on} %ts."
@sitting set is "sitting"
@on set is "on"
@desc_along_with set is "along with"
@sit set is "%Nd %n:(sits) %tx{on} %td"
@squeeze set is "%Dd %d:(is) squeezed off the %tn."
@stand set is "%Dd %d:(stands) up from the %tn."
@fall set is "%Dd %d:(falls) off the %tn."
@shove set is "%Nd %n:(shoves) %dd off the %tn!"
@also_shove set is "%Nd %n:(takes) %dd with %no."
@nosqueeze set is "There's no room %tx{on} %td."
@integrate_empty set is "Across the room, '(%ti) are drawn up in a semi-circle around a tea table."
@integrate_sitters set is "  %Ni %n:(is) %tx{sitting} %tx{on} it."
@next_to set is " %d'(beside/between) %dd"
@already_sitting set is "You are already %tx{sitting} %tx{on} the %tn."
@move_next_to set is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting set isn't set.
@desc_empty set is "No one is currently %tx{sitting} %tx{on} %to."
settee (#517) [ readable ]
  Owned by stormagnet (#246).
  Child of settee (#502).
  Location Front Parlour (#398).
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
    #1:core_names               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
=> #517 (settee)
#1:modname_p (this == #517), line 1:  Range error
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Object #517 does not define that verb, but its ancestor #1 does.
#1:"modname_p" this none this
return args[1] + "'s";
// Copied from naming test object (#373):modname_p by Erik (#74) Thu Sep 22 17:35:40 1994 EDT
stormagnet goes south.
A group of three matching settees, pulled cozily together. They are upholstered in a shiny champagne-and-ginger pinstriped silk, with scalloped yoke backs and cabriolet legs in polished mahogany.  No one is currently sitting on them.
@integrate_room set isn't set.
@integrate_player set isn't set.
@integrate_container set isn't set.
@drop_failed set is "You can't seem to drop %td here."
@drop_succeeded set is "You drop %td."
@odrop_failed set is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded set is "%n:(drops) %ti."
@otake_succeeded set is "%n:(picks) up %td."
@otake_failed set isn't set.
@take_succeeded set is "You take %td."
@take_failed set is "You can't pick up %td."
@empty set is "No one is currently %tx{sitting} %tx{on} %ts."
@sitting set is "sitting"
@on set is "on"
@desc_along_with set is "along with"
@sit set is "%Nd %n:(sits) %tx{on} %td"
@squeeze set is "%Dd %d:(is) squeezed off the %tn."
@stand set is "%Dd %d:(stands) up from the %tn."
@fall set is "%Dd %d:(falls) off the %tn."
@shove set is "%Nd %n:(shoves) %dd off the %tn!"
@also_shove set is "%Nd %n:(takes) %dd with %no."
@nosqueeze set is "There's no room %tx{on} %td."
@integrate_empty set is "Across the room, a few %t'(settee) are drawn up in a semi-circle around a tea table."
@integrate_sitters set is "  %Ni %n:(is) %tx{sitting} %tx{on} it."
@next_to set is " %d'(beside/between) %dd"
@already_sitting set is "You are already %tx{sitting} %tx{on} the %tn."
@move_next_to set is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting set isn't set.
@desc_empty set is "No one is currently %tx{sitting} %tx{on} %to."
You set the "integrate_empty" message of the settee (#517).
You set the "integrate_empty" message of the settee (#517).
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, a few some settee are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the doors to the foyer.  The doors to the south are open.  The doors to the west are open.
A group of three matching settees, pulled cozily together. They are upholstered in a shiny champagne-and-ginger pinstriped silk, with scalloped yoke backs and cabriolet legs in polished mahogany.  No one is currently sitting on them.
You set the "integrate_empty" message of the settee (#517).
-----
PRONOUN-SUBSTITUTION
====================

This text describes the basic pronoun substitution model.  An introduction to the pronoun substitution concept can be found in `help pronouns'[1], and a detailed example can be find in `help pronoun-example'[2].  Detailed information on the format of a two-letter substitution is in `help two-letter'[3].

Messages
--------

Pronoun substitution is performed on messages.  A message is a special list (or sometimes, string) containing detailed instructions on the substitutions to be done.  To ease the construction of messages, three parsers are provided to convert messages to and from ordinary strings.  Each parser has its own way of expressing the actual substitutions as strings.

The "generic" parser uses a simple and general way of converting the message lists into strings, but for the user it is longwinded and finicky.  Because of its great generality, it is also used as a fallback method by other parsers for representing certain very complicated substitutions or illegal messages that could not have been constructed by any of the other parsers.

The "lambdacore" parser offers a certain simplicity and the greatest degree of compatibility with very different MOOs, because it is based on the format used for pronoun substitution on one of the very earliest MOOs, LambdaMOO.  It is very useful for porting objects from other MOOs for this reason.  However, it has difficulty in expressing more complex substitutions than existed early in the history of MOO, and it is not always obvious how much text will be replaced when a substitution is made.

The "two-letter" parser is more compact than the general parser and makes it harder to mistakenly construct illegal messages.  It is also more general and systematic than the lambdacore parser.  With the two-letter parser anything that will be substituted for starts with a "%" character, and the substituted text only continues past a space if it is enclosed in "()", "[]", "<>" or "{}".  Many of the most common substitutions are expressed as a "%" followed by two letters, hence the name of the parser.  The two-letter parser is sometimes considered cryptic, but it is recommended for most uses.  More detailed information can be found at `help two-letter'[4].

The two-letter parser will be used for all examples in this article.

Using Parsers
-------------

In code, the three parsers are referred to as "$pronoun_sub.generic", "$pronoun_sub.lambdacore" and "$pronoun_sub.two_letter".  Creating a message from a string is done with the parser's ":parse" verb:

  $pronoun_sub.two_letter:parse("%Td %t:(sets) in the west.")


Converting a message back to a string requires the ":unparse" verb:

  $pronoun_sub.two_letter:unparse($thing.drop_msg)


You can unparse a message with any parser, regardless of which one created it.

To set which parser you use when building verbs parse and unparse messages automatically, use your own "@pronoun-sub" verb:

  @pronoun-sub with two-letter


The Evaluation Context
----------------------

Pronoun substition is done on a string by calling:

  $string_utils:pronoun_sub(message);
 

This will return a new string that is based on the format of string and the context in which pronoun_sub:() was called.

For example, if an object named `sun' calls this code:

  $string_utils:pronoun_sub($pronoun_sub.two_letter:parse("%Td sets in the west."));
 

the returned string will be:

  "The sun sets in the west."
 

The information that :pronoun_sub() can use to try to decipher the string includes, (along with they way they can be referred to in the format string):

  o  The player who caused the code to execute. (%n)
  o  The object where the code is stored, usually referred to as `this'. (%t)
  o  The location of the player. (%l)
  o  The direct object of the command line that was typed by the player. (%d)
  o  The indirect object of the command line that was typed by the player. (%i)

These values, which :pronoun_sub() figures out by itself, can be set explicitly by passing them in as arguments:

   $string_utils:pronoun_sub(string, player, this, location, dobj, iobj)
 

All of these (except the string) are optional, but order is important, so if you want to change the location, you also need to specifically mention the string, player, and this.

Each of these arguments can be:

  o  an object (as you'd expect)
  o  a list of objects
  o  a list like you'd pass to $string_utils:english_list, i.e: :pronoun_sub("The %n", {{#0, #1, #2}, "nothing", " or "})

Multiple Similar Contexts
-------------------------

It often turns out that you want to say nearly the same thing to several different targets.  For example, if Munchkin picks up a duck, three messages will probably be printed:

  To Munchkin: You pick the duck up.
  To the duck: Munchkin picks you up.
  To everyone else in the room: Munchkin picks the duck up.

If you want to use :pronoun_sub() to create these messages, you'll either have to call it three times with three different format messages, or you'll have to call it three times with one format while tweaking the arguments to :pronoun_sub().

This happens so often that a special command has been created to do this for you.  The verb $you:say_action(string) takes the string and then substitutes in appropriately for everything involved or nearby.  In the above situation, you would simply call:

  $you:say_action($pronoun_sub.two_letter:parse("%nD %n:(picks) up %td."))


This will print the message according to how each person should see it, exactly like the three messages above.

A detailed example using $you:say_action() can be found in `help pronoun-example'[5].

-----
TWO-LETTER
==========

This help text describes the format of pronoun-substitution messages.  Other help texts on pronoun_substitution include:

pronouns[1]
      An overview.
pronoun-substitution[2]
      How to call pronoun_sub and how it works.
pronoun-example[3]
      A detailed example.
two-letter-qr[4]
      A quick reference guide to the format string.
pronoun-style[5]
      Dunno yet.

Pronoun-substitution messages are entered as strings, but are usually converted to an arcane list format before they're used.  This document is about the format of the string entry; the list format may be discussed elsewhere.

The information passed to :pronoun_sub() can have subsitution specifiers in it that are replaced by values that depend on the context.  The string that results after all the substitutions are made is returned.

In the format string that :pronoun_sub() parses, a `%' indicates that a substition should take place.  The characters after it specify the type of substition.  Take a look at this string:

  "%Td %t:(looks) at %dd oddly."

It has three substitutions to be made in it:  `%Td', `%t:(looks)', and `%dd'.

In most cases, a substition consists of three elements:

  o  The % sign, indicating that a substitution should be made.
  o  A symbol indicating the object that should be considered.
  o  A symbol indicating what about that object to substitute.


The Object Specifier
====================

The object specifier is the letter that follows the % sign.  Consider the string:

    "%Td %t:(looks) at %dd oddly."
 

In `%Td' and in `%t:', the object specifer is `t'.  In `%dd', the object specifer is `d'.

The possible letters and the objects that they correspond to include:

  t - represents the thing where the verb calling :pronoun_sub() is stored
  n - represents the player that started the command
  d - represents the direct object of the initial command
  i - represents the indirect object of the initial command
  l - represents the location of the player

As an example, If Munchkin typed this command:

  put duck in pond
 

and the duck had this as a @put_in_water message:

  "%Nd %n:(puts) %td in %id."
 

Then:

  %Nd would get the `d' information on Munchkin and capitalize it.

  %n:(puts) would conjugate `puts' according to Munchkin's gender.

  %td would get the `d' information from the duck.

  %id would get the `d' information from the pond.


The Information Specifier
=========================

The character following the object specifier is the information specifier.  It specifies what sort of information to get about the object.  It can be any of these characters:

  n - the object's name        ("Susan",   "duck",    "king and queen")
  d - definite-article         ("Susan",   "the duck","the king and queen")
  i - indefinite-article       ("Susan",   "a duck",  "a king and queen")
  o - the objective pronoun    ("her",     "him",     "them")
  p - possessive adjective     ("her",     "his",     "their")
  q - possessive pronoun       ("hers",    "his",     "theirs")
  r - reflexive pronoun        ("herself", "himself", "themselves")
  s - subjective pronoun       ("she",     "he,       "they")

Sometimes, several characters follow the object specifier:

  'i  - indefinite possessive  ("a duck's")
  'd  - definite possessive    ("the duck's")
  'n  - possessive name        ("duck's")

In using any of these, you can capitalize the object specifier to have the phrase capitalize--for example, `%Nd' might become "The duck".  If you capitalize both the object specifier and the information specifier (`%ND'), you'll get all caps--"THE DUCK".

Information Specifiers for Verb Conjugation
===========================================

You often want to insert a verb into a sentence, but the conjugation depends on the context that it's used in.  Give this as the information specifer in order to have pronoun_sub conjugate a verb:

  :(foos) - conjugate the verb `to foo'

For example:
  "%ns %n:(runs)"

will result in "he runs", "she runs", or "they run", depending on the gender of the player who called the verb.

If you capitalize the verb, the result will be capitalized:

  "%ns %n:(Runs)"
  => "he Runs"


Information Specifiers for Pluralizing Nouns
============================================

If you want to make a noun singular or plural depending on context, you can give the noun as an information specifier, and it will be pluralized if the object you specified is plural.  This is the format of the information specification:

  '(noun)
 

For example, this string:
  "%nD %n:(shakes) %d'd %d'(hand)."

may result in either:
  "Munchkin shakes Susan's hand."
or
  "Munchkin shakes the king and queen's hands."

Again, capitalizing the noun will result in a capitalized substitution.


Information Specifiers for Object Data
======================================

You can also obtain information about the actual object by using these information specifiers.

  #      - the object's number 
  .(foo) - the object's "foo" property

For example:
  %t.(mood)
would return the string in the object's `mood' property.

If the proprety doesn't exist, the string `Property not found' will be returned.

If you capitalize the property name, the resulting string will be capitalized.


Information Specifiers for Odd Cases
====================================

A list of arguments enclosed in curly brackets (see `help pronoun-literals'[6]) can be used as an information specifier, e.g.:

  %n{u}
 

which produces the same result as `%NN'.  The arguments will be passed directly to :name() during substitution.  Some forms of name, such as the 'in' name, can only be obtained in this manner.  See `help #1:name'[7] for more information.


Random Choice
=============

To add a little variety to oft-used messages, you can specify that one of several messages be chosen at random each time a message is used.  For example:

  %Nd %(%n:(dives) gracefully|%n:(bellyflops) clumsily) into the water.
 

The section in parentheses will be broken up into phrases at the vertical bars (|) and only one of these phrases, chosen at random, will be displayed.  This also works whenever an information specifier contains something enclosed in parentheses:

  %Nd %n:(dives|plunges) gracefully into the water.
 

When used with $you:say_action (see `help $you:say_action') the same alternatives will be used for everyone.  Vertical bars may be included literally by preceding them with a percent sign.
 
Object Locations and Contents
=============================

Sometimes you want information about an object's location.  This can be retrieved by appending an `l' to the object specifier.  For example:

  %tln - Get the `thing' this code is on, find out where it's located, and then get the name of that location. 

This can be done to every kind of object specifier: %tl, %nl, %il, %dl, and %ll.

Moreover, `L' and `c' may be used in the same fashion, to refer to the object's outermost location (usually a room) and its visible contents, respectively.

Object Callbacks
================

The letter `x' can be used in two ways to call back to an object for specialized information.

Firstly, it can be used as an object specifier, followed by another object specifier and some data in curly brackets, thusly:

  %xn{foo arg1 arg2 ...}d

The data in curly brackets is changed into a list, in the way specified in the next section.  Then, during substitution, the substitution mechanism will call the verb `:obj_foo(arg1, arg2, ...)' on the object(s) specified by `%n' to obtain some objects to get the `d' information of.

Secondly, it can be used as an information specifier, like this:

  %nx{foo arg1 arg2 ...}

This case is similar to the above, only the verb called is `:sub_foo' and the mechanism expects text rather than objects.  The returned text is inserted literally for single objects, and turned into an English-style list otherwise.

Other Substitutions
===================

In addition to the format of %(object specifier)(information specifier), you can also use these substitutions:

  %% - A percent sign.   That is:  %
 
  %$a - the argstr to the verb that called :pronoun_sub().
  %$d - the dobjstr to the verb that called :pronoun_sub().
  %$i - the iobjstr to the verb that called :pronoun_sub().
  %$p - the prepstr to the verb that called :pronoun_sub().
 
  %{information} 
 

%{information} allows one to insert an arbitrary list into the data structure used for pronoun substitution.  The format in which the list is specified is discussed in `help pronoun-literals'[8]; how it is interpreted is beyond the scope of this document.

Errata
======

If the information following the % isn't a valid substitution string, the % will remain a %.  This is a clue that the format string needs some work.

-----
#1:NAME
=======

Usage: <obj>:name([<flagstring> | {<flag>, @<flag_args>}]*)

Returns the name of <obj>, modified as indicated by the flags.

<flagstring> - single-character flags run together as a string
<flag> - character or string flag, associated with the verb
         obj:modname_<flag>()
<flag_args> - args for obj:modname_<flag>()

Valid flags are:
  p - possessive
  d - definite article
  i - indefinite article
  s - add idle suffix if any
  c - capitalize
  in - prefix a preposition if necessary to describe being 'in' this

=> #517 (settee)
=> "some settee"
Object #517 does not define that verb, but its ancestor #1 does.
Last modified Sun Dec 31 20:46:50 2000 PST by splat (#4014) (on Waterpoint).
#1:"name" this none this
// Usage: <obj>:name([<flagstring> | {<flag>, @<flag_args>}]*)
// 
// Returns the name of <obj>, modified as indicated by the flags.
// 
// <flagstring> - single-character flags run together as a string
// <flag> - character or string flag, associated with the verb
//          obj:modname_<flag>()
// <flag_args> - args for obj:modname_<flag>()
// 
// Valid flags are:
//   p - possessive
//   d - definite article
//   i - indefinite article
//   s - add idle suffix if any
//   c - capitalize
//   in - prefix a preposition if necessary to describe being 'in' this
name = this:base_name();
for i in (args)
  if (typeof(i) == LIST)
    name = `this:("modname_" + i[1])(name, @listdelete(i, 1)) ! ANY => name';
    // 'ANY => name' is an ugly but cheap way of handling malfunctioning or nonexistent modname_foo verbs.
  elseif (typeof(i) == STR)
    for j in [1..length(i)]
      name = this:("modname_" + i[j])(name) || name;
    endfor
  endif
endfor
return name;
// Copied from naming test object (#373):name by Erik (#74) Thu Sep 22 17:45:37 1994 EDT
Last modified Fri May 25 13:02:59 2001 PDT by Xplat (#4014) (on Waterpoint).
#1:"modname_i" this none this
// Usage:  :modname_i(<name>,[<adj>])
// 
// Returns <name> prepended with proper indefinite article (e.g. "a").
// 
// The (optional) <adj>ective will be inserted between the article and the name.
// 
// Relevant properties on this:
// 
//   * .proper == 1 if this is a proper noun (e.g. John or Pittsburgh)
//   * .possessor == <possessing object> if this's name includes a possessive (e.g. John's car)
//   * :possessor() will be used, if it exists.
//   * .indef_art == definite article to use instead of "a" (e.g. "lots of" money)
//   * :indef_art() will be used, if it exists.
// 
// Also, if this.unique == 1 then this:modname_d(@args) will be returned instead (e.g. "the" System Object instead of "a" System Object).
{name, ?adj = ""} = args;
if (this.unique)
  return this:modname_d(@args);
endif
if (adj)
  adj = this:adj_sub(adj);
  name = adj + " " + name;
endif
if (this.proper && !adj)
  art = "";
elseif ($recycler:valid(pos = `$code_utils:verb_or_property(this, "possessor") ! E_PROPNF => #-1') && (art = `pos:name("ip") ! E_VERBNF => ""'))
  // elseif ((typeof(art = this:indef_art()) == STR) || (typeof(art = this.indef_art) == STR))
elseif (typeof(art = `$code_utils:verb_or_property(this, "indef_art", name) ! E_PROPNF') == STR)
else
  art = $english:indef_article(name, this:is_plural());
endif
return art + (art ? " " | "") + name;
// Copied from root class (#1):dname by James (#2142) Sun Sep  4 21:25:07 1994 EDT
// Copied from naming test object (#373):modname_i by Erik (#74) Thu Sep 22 17:35:36 1994 EDT
The verb :indef_art is nowhere to be found.
Verb added [93] (92).
  ** property not found, "indef_art" **
-------------------------------- finished ---------------------------------
Now programming root class:indef_art[93](92).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
>> Command Aborted <<
Verb #1:indef_art [93] {this none this} removed.
Last modified Sun Dec 31 20:46:50 2000 PST by splat (#4014) (on Waterpoint).
#1:"name" this none this
// Usage: <obj>:name([<flagstring> | {<flag>, @<flag_args>}]*)
// 
// Returns the name of <obj>, modified as indicated by the flags.
// 
// <flagstring> - single-character flags run together as a string
// <flag> - character or string flag, associated with the verb
//          obj:modname_<flag>()
// <flag_args> - args for obj:modname_<flag>()
// 
// Valid flags are:
//   p - possessive
//   d - definite article
//   i - indefinite article
//   s - add idle suffix if any
//   c - capitalize
//   in - prefix a preposition if necessary to describe being 'in' this
name = this:base_name();
for i in (args)
  if (typeof(i) == LIST)
    name = `this:("modname_" + i[1])(name, @listdelete(i, 1)) ! ANY => name';
    // 'ANY => name' is an ugly but cheap way of handling malfunctioning or nonexistent modname_foo verbs.
  elseif (typeof(i) == STR)
    for j in [1..length(i)]
      name = this:("modname_" + i[j])(name) || name;
    endfor
  endif
endfor
return name;
// Copied from naming test object (#373):name by Erik (#74) Thu Sep 22 17:45:37 1994 EDT
Generic See-through Portal (#540) [ readable ]
  Child of generic door (#121).
-------------------------------- finished ---------------------------------
@integrate_room $portal is "The %t'(door) to %td %t:(is) %tx{open 0}."
@integrate_player $portal isn't set.
@integrate_container $portal isn't set.
@nogo $portal isn't set.
@onogo $portal isn't set.
@arrive $portal isn't set.
@oarrive $portal isn't set.
@oleave $portal isn't set.
@leave $portal isn't set.
@nothing $portal is "nothing"
@no_one $portal is "no one"
@through $portal is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $portal is "%Nd %n:(opens) the %t'(door) to %td."
@close $portal is "%Nd %n:(closes) the %t'(door) to %td."
@opened $portal is "The %t'(door) to %td %t:(is) open."
@closed $portal is "The %t'(door) to %td %t:(is) closed."
@locked $portal is "The %t'(door) to %td %t:(is) locked."
@opens $portal is "The %t'(door) to %td %t:(opens) from the other side."
@closes $portal is "The %t'(door) %td %t:(closes) from the other side."
@unlocked $portal is "The %t'(door) %td %t:(is) unlocked."
@lock $portal is "%Nd %n:(locks) the %t'(door) to %td."
@unlock $portal is "%Nd %n:(unlocks) the %t'(door) to %td."
@locks $portal is "You hear the click of the %t'(door) to %td being locked from the other side."
@unlocks $portal is "You hear the click of the %t'(door) to %td being unlocked from the other side."
@knock $portal is "%Nd %n:(knocks) on the %t'(door) to %td."
@knocks $portal is "Someone knocks on the %t'(door) to %td."
@no_key $portal is "You don't have the key for the %t'(door) to %td."
@self_closes $portal is "The %t'(door) to %td %t:(closes)."
@pull $portal is "%Ni %n:(reaches) through the %t'(door) to %td and %n:(pulls) %dd into %nld."
The Generic See-through Portal(#540) has 1 kid.
tracery windows (#266)
Last modified Fri May 25 13:02:59 2001 PDT by Xplat (#4014) (on Waterpoint).
#1:"modname_i" this none this
// Usage:  :modname_i(<name>,[<adj>])
// 
// Returns <name> prepended with proper indefinite article (e.g. "a").
// 
// The (optional) <adj>ective will be inserted between the article and the name.
// 
// Relevant properties on this:
// 
//   * .proper == 1 if this is a proper noun (e.g. John or Pittsburgh)
//   * .possessor == <possessing object> if this's name includes a possessive (e.g. John's car)
//   * :possessor() will be used, if it exists.
//   * .indef_art == definite article to use instead of "a" (e.g. "lots of" money)
//   * :indef_art() will be used, if it exists.
// 
// Also, if this.unique == 1 then this:modname_d(@args) will be returned instead (e.g. "the" System Object instead of "a" System Object).
{name, ?adj = ""} = args;
if (this.unique)
  return this:modname_d(@args);
endif
if (adj)
  adj = this:adj_sub(adj);
  name = adj + " " + name;
endif
if (this.proper && !adj)
  art = "";
elseif ($recycler:valid(pos = `$code_utils:verb_or_property(this, "possessor") ! E_PROPNF => #-1') && (art = `pos:name("ip") ! E_VERBNF => ""'))
  // elseif ((typeof(art = this:indef_art()) == STR) || (typeof(art = this.indef_art) == STR))
elseif (typeof(art = `$code_utils:verb_or_property(this, "indef_art", name) ! E_PROPNF') == STR)
else
  art = $english:indef_article(name, this:is_plural());
endif
return art + (art ? " " | "") + name;
// Copied from root class (#1):dname by James (#2142) Sun Sep  4 21:25:07 1994 EDT
// Copied from naming test object (#373):modname_i by Erik (#74) Thu Sep 22 17:35:36 1994 EDT
@integrate_room $portal is "The %t'(door) to %td %t:(is) %tx{open 0}."
@integrate_player $portal isn't set.
@integrate_container $portal isn't set.
@nogo $portal isn't set.
@onogo $portal isn't set.
@arrive $portal isn't set.
@oarrive $portal isn't set.
@oleave $portal isn't set.
@leave $portal isn't set.
@nothing $portal is "nothing"
@no_one $portal is "no one"
@through $portal is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $portal is "%Nd %n:(opens) the %t'(door) to %td."
@close $portal is "%Nd %n:(closes) the %t'(door) to %td."
@opened $portal is "The %t'(door) to %td %t:(is) open."
@closed $portal is "The %t'(door) to %td %t:(is) closed."
@locked $portal is "The %t'(door) to %td %t:(is) locked."
@opens $portal is "The %t'(door) to %td %t:(opens) from the other side."
@closes $portal is "The %t'(door) %td %t:(closes) from the other side."
@unlocked $portal is "The %t'(door) %td %t:(is) unlocked."
@lock $portal is "%Nd %n:(locks) the %t'(door) to %td."
@unlock $portal is "%Nd %n:(unlocks) the %t'(door) to %td."
@locks $portal is "You hear the click of the %t'(door) to %td being locked from the other side."
@unlocks $portal is "You hear the click of the %t'(door) to %td being unlocked from the other side."
@knock $portal is "%Nd %n:(knocks) on the %t'(door) to %td."
@knocks $portal is "Someone knocks on the %t'(door) to %td."
@no_key $portal is "You don't have the key for the %t'(door) to %td."
@self_closes $portal is "The %t'(door) to %td %t:(closes)."
@pull $portal is "%Ni %n:(reaches) through the %t'(door) to %td and %n:(pulls) %dd into %nld."
You set the "integrate_room" message of the Generic See-through Portal (#540).
You set the "open" message of the Generic See-through Portal (#540).
You set the "close" message of the Generic See-through Portal (#540).
You set the "opened" message of the Generic See-through Portal (#540).
You set the "closed" message of the Generic See-through Portal (#540).
You set the "locked" message of the Generic See-through Portal (#540).
You set the "opens" message of the Generic See-through Portal (#540).
You set the "closes" message of the Generic See-through Portal (#540).
You set the "unlocked" message of the Generic See-through Portal (#540).
You set the "lock" message of the Generic See-through Portal (#540).
You set the "unlock" message of the Generic See-through Portal (#540).
You set the "locks" message of the Generic See-through Portal (#540).
You set the "unlocks" message of the Generic See-through Portal (#540).
You set the "knock" message of the Generic See-through Portal (#540).
You set the "knocks" message of the Generic See-through Portal (#540).
You set the "no_key" message of the Generic See-through Portal (#540).
You set the "self_closes" message of the Generic See-through Portal (#540).
You set the "pull" message of the Generic See-through Portal (#540).
The Generic See-through Portal(#540) has 1 kid.
tracery windows (#266)
A pair of medieval tracery windows flank the doors, their delicate stone carvings belying the thickness of the walls.
In the Northern Entrance, you see nothing.
The the tracery windows to the tracery windows are closed.
@integrate_room $door is "The %t'(door) to %td %t:(is) %tx{open 0}."
@integrate_player $door isn't set.
@integrate_container $door isn't set.
@nogo $door isn't set.
@onogo $door isn't set.
@arrive $door isn't set.
@oarrive $door isn't set.
@oleave $door isn't set.
@leave $door isn't set.
@nothing $door is "nothing"
@no_one $door is "no one"
@through $door is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $door is "%Nd %n:(opens) the %t'(door) to %td."
@close $door is "%Nd %n:(closes) the %t'(door) to %td."
@opened $door is "The %t'(door) to %td %t:(is) open."
@closed $door is "The %t'(door) to %td %t:(is) closed."
@locked $door is "The %t'(door) to %td %t:(is) locked."
@opens $door is "The %t'(door) to %td %t:(opens) from the other side."
@closes $door is "The %t'(door) %td %t:(closes) from the other side."
@unlocked $door is "The %t'(door) %td %t:(is) unlocked."
@lock $door is "%Nd %n:(locks) the %t'(door) to %td."
@unlock $door is "%Nd %n:(unlocks) the %t'(door) to %td."
@locks $door is "You hear the click of the %t'(door) to %td being locked from the other side."
@unlocks $door is "You hear the click of the %t'(door) to %td being unlocked from the other side."
@knock $door is "%Nd %n:(knocks) on the %t'(door) to %td."
@knocks $door is "Someone knocks on the %t'(door) to %td."
@no_key $door is "You don't have the key for the %t'(door) to %td."
@self_closes $door is "The %t'(door) to %td %t:(closes)."
@pull $door is "%Ni %n:(reaches) through the %t'(door) to %td and %n:(pulls) %dd into %nld."
You set the "integrate_room" message of the Generic See-through Portal (#540).
You set the "open" message of the Generic See-through Portal (#540).
You set the "close" message of the Generic See-through Portal (#540).
You set the "opened" message of the Generic See-through Portal (#540).
You set the "closed" message of the Generic See-through Portal (#540).
You set the "locked" message of the Generic See-through Portal (#540).
You set the "opens" message of the Generic See-through Portal (#540).
You set the "closes" message of the Generic See-through Portal (#540).
You set the "unlocked" message of the Generic See-through Portal (#540).
You set the "lock" message of the Generic See-through Portal (#540).
You set the "unlock" message of the Generic See-through Portal (#540).
You set the "locks" message of the Generic See-through Portal (#540).
You set the "unlocks" message of the Generic See-through Portal (#540).
You set the "knock" message of the Generic See-through Portal (#540).
You set the "knocks" message of the Generic See-through Portal (#540).
You set the "no_key" message of the Generic See-through Portal (#540).
You set the "self_closes" message of the Generic See-through Portal (#540).
You set the "pull" message of the Generic See-through Portal (#540).
A pair of medieval tracery windows flank the doors, their delicate stone carvings belying the thickness of the walls.
In the Northern Entrance, you see nothing.
The tracery windows to the tracery windows are closed.
The tracery windows (#266) are nowhere (#-1).
The Generic See-through Portal(#540) has 1 kid.
tracery windows (#266)
You stand up from the front parlour floor.
The West Foyer
The West Hall
The Northwest Tower
The Great Hall
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  The doors to north are closed.  The tracery windows are carved into the northern wall.
You see Wind-Up Duck, a How $staff will notice people rummaging, and a pile of stuff here.
stormagnet is here, distracted.
You have arrived.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  The doors to north are closed.  The tracery windows are carved into the northern wall.
You see Wind-Up Duck, a How $staff will notice people rummaging, and a pile of stuff here.
stormagnet is here, daydreaming.
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaise longues sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
You have arrived.
Objects owned by Crag (from #0 to #557):
 12K #243 Crag                      *[Great Hall]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  4K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  2K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  3K #280 Generic Table              [Nowhere]
  1K #282 microphone                 [Crag]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
 <1K #540 Generic See-through Porta  <invalid>-><invalid>
-- 36 objects.  Total bytes: 63,920.------------------------------------------
Your current object is foo_exit, a vaulted ceiling (#555).
Your current object stack is empty.
Your current object is now ~beak, Beaker (#256).
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location Limbo (#15).
  #256:receive_input            Crag (#243)          rxd    this none this
  #256:match_command            Crag (#243)          rxd    this none this
  #256:explain_ambiguous_command Crag (#243)         rxd    this none this
  #256:explain_unknown_command  Crag (#243)          rxd    this none this
  #256:invoke_command           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 17:27:54 2013 PDT by Crag (#243).
#256:"match_command" this none this
{command_str} = args;
matches = {};
for d in (this:dictionaries())
  matches = $set_utils:union(matches, d:match_command(command_str));
endfor
return matches;
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaise longues sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
The Northwest Tower
The West Hall
The West Foyer
You open the doors to the n1.
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settee are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the doors to the foyer.  The doors to the south are open.  The doors to the west are open.
You have arrived.
The walls are papered in a brown and gold pattern of acanthus leaves.  A cornice meets the ceiling above.  A picture rail runs the length of the room, below the frieze.
No change.
You now have Cardgame Feature (aka cardfeature) with object number #558 and parent Generic Feature Object (#65).
The created object is now your current object.
Property added with value {}.
=> {#2485, #2300, #2738, #5571, #5236, #7031}
Property added with value {}.
=> {"pass play discard draw take give", "gs*ay ge*mote g:*", "bid concede declare", "start*game"}
Property added with value #2363.
Property added with value #2321.
Property added with value #2373.
Property added with value #1980.
Property added with value #1386.
Property added with value {}.
You set the "say" message of the Cardgame Feature (#558).
Property added with value {}.
You set the "emote" message of the Cardgame Feature (#558).
=> 1
=> {"pass play discard draw take give", "bid concede declare", "joing*ame", "quitg*ame leaveg*ame reset*game", "autoplay", "gs*ay ge*mote g:*", "start*game"}
=> {"commands:", " - joing*ame           [<game>]", "    Join a game.  Usually the game must not have started yet.", "", " - quitg*ame|leaveg*ame [<game>]", "    Leave a game.", "    (Depending on the game, this may cause the game to end and reset itself.)", "", " - start*game          [<game>]", "    Start the game.", "    (Any player may do this once the game has an allowable", "    number of players joined up.)", "", " - reset*game          [<game>]", "    End the game and revert it to \"assembly\" state.", "", " - draw|take    [<count|cardlist>] [from <pile|player>] [for <pile>]", " - play|discard [<cardlist>]       [from <pile>] [to <pile|player>]", " - pass|give    [<cardlist>] [to <player>]", "", "    Transfer cards from one place/player to another.", "    Only some of these commands may be applicable in a given game", "    The intended default usage:", "      \"draw\" -- take cards from some pile on the table into your hand", "      \"play\" -- play cards from your hand onto some pile on the table", "      \"discard\" -- play cards from your hand onto some pile on the table", "                   (defaulting to a \"discard\" pile if there is one).", "      \"take\" -- defaults to taking cards from some other player's hand into your hand", "", "    For help on how to specify <cardlist> do help on that deck", "    (help on the game instance will get you to the list of decks in use).", "", " - pass", "     This is often used for signifying the end of your turn, if, say, ", "     this game is such that a turn can have multiple or optional actions.", "", " - bid [<bid>]", "     Enter a bid (if this is a game that has bidding).", "", " - concede [<concession>]", "     Concede the game or some portion (e.g., a hand) thereof.", "     Whether this command is allowed and how <concession> is interpreted", "     depends on the game.", "", " - gs*ay <string>", "   ge*mote <string>", "   g:<string>", "     Directed speech/emote to other watchers", "", " - autoplay using <module> [in game]", "   autoplay clear", "   autoplay list", "     see 'help autoplay'", "", "Also, hands are sensitive to where they are; in order to play, you must be holding it.  If you give your hand to someone or something, that entity takes ownership and can play your cards from then on.  Dropping your hand is equivalent to quitting."}
You say, "_.("key") => E_PERM (Permission denied)"
=> {"Cardgame Feature", "cardfeature"}
=> "UNDER CONSTRUCTION"
=> #-1 <$nothing>
=> {22553, 1367049600}
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
You say, "_.("review_history") => E_PERM (Permission denied)"
Verb added [1] (0).
Now programming Cardgame Feature:pass play discard draw take give[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [2] (1).
Now programming Cardgame Feature:bid concede declare[2](1).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [3] (2).
Now programming Cardgame Feature:joing*ame[3](2).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [4] (3).
Now programming Cardgame Feature:quitg*ame leaveg*ame reset*game[4](3).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [5] (4).
Now programming Cardgame Feature:find_joinable_games[5](4).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [6] (5).
Now programming Cardgame Feature:find_hands[6](5).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [7] (6).
Now programming Cardgame Feature:match_command[7](6).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [8] (7).
Now programming Cardgame Feature:lineparse[8](7).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [9] (8).
Now programming Cardgame Feature:match_game[9](8).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [10] (9).
Now programming Cardgame Feature:game_match_failed[10](9).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [11] (10).
Now programming Cardgame Feature:autoplay[11](10).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [12] (11).
Now programming Cardgame Feature:module_list[12](11).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [13] (12).
Now programming Cardgame Feature:gs*ay ge*mote g:*[13](12).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [14] (13).
Now programming Cardgame Feature:start*game[14](13).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [15] (14).
Now programming Cardgame Feature:init_for_module[15](14).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [16] (15).
Now programming Cardgame Feature:@addgame[16](15).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [17] (16).
Now programming Cardgame Feature:@rmgame[17](16).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
You say, "***finished***"
=> {#2485, #2300, #2738, #5571, #5236, #7031}
=> {}
There are no features in the feature object registry matching "_".
Feature Name
------- ----
#67     Stage-Talk Feature
#68     Thinking Feature
#83     login watcher mark 2
------- ----
=> #-1 <$nothing>
Generic Feature Object (#65) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
-------------------------------- finished ---------------------------------
-----
`HELP FEATURE' AMBIGUOUS
========================

Sorry, the topic `feature' is ambiguous.  I don't know which of the following topics you mean:

`help features'[1]      `help @features'[2]     

Object #243 does not define that verb, but its ancestor #6 does.
#6:"features" this none this
return this.features;
Object #243 does not define that verb, but its ancestor #6 does.
#6:"@add-feature @addfeature" any none none
// Usage:  @add-feature <feature object>
// Add an object to your features list.
set_task_perms(player);
if (dobjstr)
  if (dobj == $failed_match)
    // dobj = $feature.warehouse:match_object(dobjstr);
    if ($feature.registry:feature_match_failed(dobj = $feature.registry:match_feature(dobjstr), dobjstr))
      return;
    endif
  endif
  if (!$command_utils:object_match_failed(dobj, dobjstr))
    if (dobj in player:features())
      player:tell($string_utils:dnamec_and_number(dobj), " is already one of your features.");
    elseif (player:add_feature(dobj))
      player:tell($string_utils:dnamec_and_number(dobj), " added as a feature.");
    else
      player:tell("You can't seem to add ", $string_utils:dname_and_number(dobj), " to your features list.");
    endif
  endif
else
  player:tell("Usage:  @add-feature <object>");
  features = {};
  player_features = player:features();
  for f in ($feature.registry:features())
    if (!(f in player_features) && $code_utils:verb_or_property(f, "feature_ok", player))
      features = {@features, f};
    endif
  endfor
  feature_list = $feature.registry:feature_list_lines(player, features);
  // fe = {};
  // long = {};
  // width = abs(player.linelen);
  // half = width / 2;
  // "for c in ($feature.warehouse:contents())";
  // "name = c in player:features() ? c:name() + \" (*)\" | c:name();";
  // if (!(c in player:features()) && $code_utils:verb_or_property(c, "feature_ok", player))
  // name = c:name();
  // if (length(name) > half)
  // long = {@long, name};
  // else
  // fe = {@fe, name};
  // endif
  // endif
  // endfor
  // if (fe || long)
  if (feature_list)
    player:tell("Available features not already in your feature list include:");
    // player:tell_lines($string_utils:columnize(fe, 2, width));
    // player:tell_lines(long);
    player:tell_lines(feature_list);
  else
    player:tell("There are no available features that you don't already have.");
  endif
endif
You see no "U@d $feature.warehouse" here.
  ** property not found, "warehouse" **
-------------------------------- finished ---------------------------------
  ** property not found, "warehouse" **
-------------------------------- finished ---------------------------------
Generic Feature Object (#65) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
.feature_verbs           unknown hack (#35)    r c    {"using"}
.feature_ok              unknown hack (#35)    r      0
.commands                unknown hack (#35)    r      {"@reg*ister @unreg*ist..
.registry                unknown hack (#35)    r      #151
.help_text               unknown hack (#35)    r c    "The Generic Feature Ob..
-------------------------------- finished ---------------------------------
.registry                unknown hacker (#35)  r      #151
-------------------------------- finished ---------------------------------
feature object registry (#151) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Helpful Object (#250).
-------------------------------- finished ---------------------------------
feature object registry (#151) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Helpful Object (#250).
.features                unknown hack (#35)    r      {#67, #68, #149, #169, ..
.open                    unknown hack (#35)    r      "closed"
.closed_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
.contents_msg            unknown hack (#35)    r c    {#69, "do", {"dname", "..
.index_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
.empty_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
.feature_msg             unknown hack (#35)    r c    {#69, "do", {"dname", "..
.open_msg                unknown hack (#35)    r c    {#69, "do", {"dname", "..
.close_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
.already_open_msg        unknown hack (#35)    r c    {#69, "do", {"dname", "..
.already_closed_msg      unknown hack (#35)    r c    {#69, "do", {"dname", "..
.no_contents_msg         unknown hack (#35)    r c    {#69, "do", "(There are..
.contents_header_msg     unknown hack (#35)    r c    {#69, "do", "Table of C..
.what_page_msg           unknown hack (#35)    r c    {#69, "do", "What page ..
.turn_to_contents_msg    unknown hack (#35)    r c    {#69, "do", {"dname", "..
.turn_to_index_msg       unknown hack (#35)    r c    {#69, "do", {"dname", "..
.turn_to_empty_msg       unknown hack (#35)    r c    {#69, "do", {"dname", "..
.turn_to_feature_msg     unknown hack (#35)    r c    {#69, "do", {"dname", "..
.write_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
-------------------------------- finished ---------------------------------
feature object registry (#151) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Helpful Object (#250).
  #151:features                 unknown hacker (#35) rxd    this none this
  #151:feature_list             unknown hacker (#35) rxd    this none this
  #151:add_feature              unknown hacker (#35) rxd    this none this
  #151:remove_feature           unknown hacker (#35) rxd    this none this
  #151:"closed_msg empty_msg already_open_msg already_closed_msg index_msg contents_msg feature_msg no_contents_msg contents_header_msg what_page_msg" unknown hacker (#35) rxd this none this
  #151:open                     unknown hacker (#35) rxd    this none none
  #151:close                    unknown hacker (#35) rxd    this none none
  #151:"open_msg close_msg turn_to_contents_msg turn_to_index_msg turn_to_empty_msg turn_to_feature_msg write_msg" unknown hacker (#35) rxd this none this
  #151:contents                 unknown hacker (#35) rxd    this none this
  #151:index                    unknown hacker (#35) rxd    this none this
  #151:feature                  unknown hacker (#35) rxd    this none this
  #151:look_self                unknown hacker (#35) rxd    this none this
  #151:"write enter"            unknown hacker (#35) rxd    any in/inside/into this
  #151:"turn open"              unknown hacker (#35) rxd    this at/to any
  #151:match_feature            unknown hacker (#35) rx     this none this
  #151:feature_match_failed     Core-Wizard (#184)   rxd    this none this
  #151:"empty closed"           unknown hacker (#35) rxd    this none this
  #151:feature_list_lines       unknown hacker (#35) rxd    this none this
  #151:read                     unknown hacker (#35) rxd    this none none
  #151:"read lookup"            unknown hacker (#35) rxd    any in/inside/into this
  #151:set_open                 unknown hacker (#35) rxd    this none this
  #151:init_for_core            unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
=> {#67, #68, #149, #169, #83, #558}
The Cardgame Feature (#558) added as a feature.
-----
HELP ON THE CARDGAME FEATURE
============================

commands:
 - joing*ame           [<game>]
    Join a game.  Usually the game must not have started yet.

 - quitg*ame|leaveg*ame [<game>]
    Leave a game.
    (Depending on the game, this may cause the game to end and reset itself.)

 - start*game          [<game>]
    Start the game.
    (Any player may do this once the game has an allowable
    number of players joined up.)

 - reset*game          [<game>]
    End the game and revert it to "assembly" state.

 - draw|take    [<count|cardlist>] [from <pile|player>] [for <pile>]
 - play|discard [<cardlist>]       [from <pile>] [to <pile|player>]
 - pass|give    [<cardlist>] [to <player>]

    Transfer cards from one place/player to another.
    Only some of these commands may be applicable in a given game
    The intended default usage:
      "draw" -- take cards from some pile on the table into your hand
      "play" -- play cards from your hand onto some pile on the table
      "discard" -- play cards from your hand onto some pile on the table
                   (defaulting to a "discard" pile if there is one).
      "take" -- defaults to taking cards from some other player's hand into your hand

    For help on how to specify <cardlist> do help on that deck
    (help on the game instance will get you to the list of decks in use).

 - pass
     This is often used for signifying the end of your turn, if, say, 
     this game is such that a turn can have multiple or optional actions.

 - bid [<bid>]
     Enter a bid (if this is a game that has bidding).

 - concede [<concession>]
     Concede the game or some portion (e.g., a hand) thereof.
     Whether this command is allowed and how <concession> is interpreted
     depends on the game.

 - gs*ay <string>
   ge*mote <string>
   g:<string>
     Directed speech/emote to other watchers

 - autoplay using <module> [in game]
   autoplay clear
   autoplay list
     see 'help autoplay'

Also, hands are sensitive to where they are; in order to play, you must be holding it.  If you give your hand to someone or something, that entity takes ownership and can play your cards from then on.  Dropping your hand is equivalent to quitting.

No help found on using.

Cardgame Feature (#558) [ readable ]
  Child of Generic Feature Object (#65).
  Location Crag (#243).
.active_games            Crag (#243)           r      {}
.active_only_commands    Crag (#243)           r      {"pass play discard dra..
.generic_game            Crag (#243)           r      #2363
.generic_rules           Crag (#243)           r      #2321
.generic_hand            Crag (#243)           r      #2373
.generic_pile            Crag (#243)           r      #1980
.generic_strategy        Crag (#243)           r      #1386
.say_msg                 Crag (#243)           r c    {#69, "do", "[", {"stri..
.emote_msg               Crag (#243)           r c    {#69, "do", "[", {"stri..
-------------------------------- finished ---------------------------------
Objects owned by Crag (from #0 to #558):
 12K #243 Crag                      *[Front Parlour]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  4K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  2K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  3K #280 Generic Table              [Nowhere]
  1K #282 microphone                 [Crag]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
 <1K #540 Generic See-through Porta  <invalid>-><invalid>
 22K #558 Cardgame Feature           [Crag]
-- 37 objects.  Total bytes: 86,473.------------------------------------------
Cardgame Feature (#558) [ readable ]
  Child of Generic Feature Object (#65).
  Location Crag (#243).
.active_games            Crag (#243)           r      {}
.active_only_commands    Crag (#243)           r      {"pass play discard dra..
.generic_game            Crag (#243)           r      #2363
.generic_rules           Crag (#243)           r      #2321
.generic_hand            Crag (#243)           r      #2373
.generic_pile            Crag (#243)           r      #1980
.generic_strategy        Crag (#243)           r      #1386
.say_msg                 Crag (#243)           r c    {#69, "do", "[", {"stri..
.emote_msg               Crag (#243)           r c    {#69, "do", "[", {"stri..
-------------------------------- finished ---------------------------------
Cardgame Feature (#558) [ readable ]
  Child of Generic Feature Object (#65).
  Location Crag (#243).
.active_games            Crag (#243)           r      {}
.active_only_commands    Crag (#243)           r      {"pass play discard dra..
.generic_game            Crag (#243)           r      #2363
.generic_rules           Crag (#243)           r      #2321
.generic_hand            Crag (#243)           r      #2373
.generic_pile            Crag (#243)           r      #1980
.generic_strategy        Crag (#243)           r      #1386
.say_msg                 Crag (#243)           r c    {#69, "do", "[", {"stri..
.emote_msg               Crag (#243)           r c    {#69, "do", "[", {"stri..
-------------------------------- finished ---------------------------------
Objects owned by Crag (from #0 to #558):
 12K #243 Crag                      *[Front Parlour]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  4K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  2K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  3K #280 Generic Table              [Nowhere]
  1K #282 microphone                 [Crag]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
 <1K #540 Generic See-through Porta  <invalid>-><invalid>
 22K #558 Cardgame Feature           [Crag]
-- 37 objects.  Total bytes: 86,473.------------------------------------------
-----
`HELP DUMP' AMBIGUOUS
=====================

Sorry, the topic `dump' is ambiguous.  I don't know which of the following topics you mean:

`help @dump'[1]         `help @dump-database'[2]
`help dump_database()'[3]                       

-----
@DUMP
=====

Syntax:  @dump <object> [with [id=#<id>] [noprops] [noverbs] [create]]

This spills out all the properties and verbs on an object, calling suspend at appropriate intervals.

  o  id=#<id> -- specifies an idnumber to use in place of the object's actual id (for porting to another MOO)
  o  noprops  -- don't show properties.
  o  noverbs  -- don't show verbs.
  o  create   -- indicates that a @create command should be generated and all of the verbs be introduced with @verb rather than @args; the default assumption is that the object already exists and you're just doing this to have a look at it.

-----
`HELP RENUMBER' AMBIGUOUS
=========================

Sorry, the topic `renumber' is ambiguous.  I don't know which of the following topics you mean:

`help @renumber'[1]     `help renumber()'[2]    

-----
@RENUMBER
=========

Syntax:  @renumber [<collection>]

Renumbers the messages in your collection to go from 1 to however many you have at the moment.  The optional argument allows you to renumber the messages stored in some other collection (@renumber, like @rmmail, requires write access).

Note that if you have zombie messages from a previous @rmmail command (see `help zombie-messages'[1]), these will be expunged.

-----
RENUMBER()
==========

Syntax:  renumber (obj <object>)   => obj

The object number of the object currently numbered <object> is changed to be the least nonnegative object number not currently in use and the new object number is returned.  If <object> is not valid, then `E_INVARG' is raised.  If the programmer is not a wizard, then `E_PERM' is raised.  If there are no unused nonnegative object numbers less than <object>, then <object> is returned and no changes take place.

The references to <object> in the parent/children and location/contents hierarchies are updated to use the new object number, and any verbs, properties and/or objects owned by <object> are also changed to be owned by the new object number.  The latter operation can be quite time consuming if the database is large.  No other changes to the database are performed; in particular, no object references in property values or verb code are updated.

This operation is intended for use in making new versions of the LambdaCore database from the then-current LambdaMOO database, and other similar situations.  Its use requires great care.

Objects owned by Crag (from #0 to #558):
 12K #243 Crag                      *[Front Parlour]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  4K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  2K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  3K #280 Generic Table              [Nowhere]
  1K #282 microphone                 [Crag]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
 <1K #540 Generic See-through Porta  <invalid>-><invalid>
 22K #558 Cardgame Feature           [Crag]
-- 37 objects.  Total bytes: 86,473.------------------------------------------
stormagnet materializes out of thin air.
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settee are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the doors to the foyer.  The doors to the south are open.  The doors to the west are open.
stormagnet is here, distracted.
Objects owned by Crag (from #0 to #559):
 12K #243 Crag                      *[Front Parlour]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  4K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  2K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  3K #280 Generic Table              [Nowhere]
  1K #282 microphone                 [Crag]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
 <1K #540 Generic See-through Porta  <invalid>-><invalid>
 22K #558 Cardgame Feature           [Crag]
-- 37 objects.  Total bytes: 86,473.------------------------------------------
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
`HELP THROW()' NOT FOUND
========================

Sorry, but no help is available on `throw()'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Error Generator (#66) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Error Generator (#66) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
   #66:raise                    unknown hacker (#35) rxd    this none this
   #66:E_NONE                   unknown hacker (#35) rxd    this none this
   #66:E_TYPE                   unknown hacker (#35) rxd    this none this
   #66:E_DIV                    unknown hacker (#35) rxd    this none this
   #66:E_PERM                   unknown hacker (#35) rxd    this none this
   #66:E_PROPNF                 unknown hacker (#35) rxd    this none this
   #66:E_VERBNF                 unknown hacker (#35) rxd    this none this
   #66:E_VARNF                  unknown hacker (#35) rxd    this none this
   #66:E_INVIND                 unknown hacker (#35) rxd    this none this
   #66:E_RECMOVE                unknown hacker (#35) rxd    this none this
   #66:E_MAXREC                 unknown hacker (#35) rxd    this none this
   #66:E_RANGE                  unknown hacker (#35) rxd    this none this
   #66:E_ARGS                   unknown hacker (#35) rxd    this none this
   #66:E_NACC                   unknown hacker (#35) rxd    this none this
   #66:E_INVARG                 unknown hacker (#35) rxd    this none this
   #66:E_QUOTA                  Core-Wizard (#184)   rxd    this none this
   #66:nominate_for_core        Core-Wizard (#184)   rxd    this none this
   #66:acceptable               unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
-----
RAISE()
=======

Syntax:  raise (<code> [, str <message> [, <value>]])   => none

Raises <code> as an error in the same way as other MOO expressions, statements, and functions do.  <Message>, which defaults to the value of `tostr(<code>)', and <value>, which defaults to zero, are made available to any `try'-`except' statements that catch the error.  If the error is not caught, then <message> will appear on the first line of the traceback printed to the user.

#-1:Input to EVAL, line 4:  No error
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#66:"E_NONE" this none this
// ... hmmm... don't know how to raise E_NONE...
return E_NONE;
#66:"raise" this none this
return raise(@args);
this:(this.names[tonum(args[1]) + 1])();
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {87254, 1367136000}
.core_names              Core-Wizard (#184)    r c    {"$root", "$root_class"}
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
    #1:core_names               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
"$nothing" does not name an object.
#-1 does not exist.
-----
CREATE()
========

Syntax:  create (obj <parent> [, obj <owner>])   => obj

Creates and returns a new object whose parent is <parent> and whose owner is as described below.  Either the given <parent> object must be `#-1' or valid and fertile (i.e., its `f' bit must be set) or else the programmer must own <parent> or be a wizard; otherwise `E_PERM' is raised.  `E_PERM' is also raised if <owner> is provided and not the same as the programmer, unless the programmer is a wizard.  After the new object is created, its `initialize' verb, if any, is called with no arguments.

The new object is assigned the least non-negative object number that has not yet been used for a created object.  Note that no object number is ever reused, even if the object with that number is recycled.

The owner of the new object is either the programmer (if <owner> is not provided), the new object itself (if <owner> was given as `#-1'), or <owner> (otherwise).

The other built-in properties of the new object are initialized as follows:
    name         ""
    location     #-1
    contents     {}
    programmer   0
    wizard       0
    r            0
    w            0
    f            0
The function `is_player()' returns false for newly created objects.

In addition, the new object inherits all of the other properties on <parent>.  These properties have the same permission bits as on <parent>.  If the `c' permissions bit is set, then the owner of the property on the new object is the same as the owner of the new object itself; otherwise, the owner of the property on the new object is the same as that on <parent>.  The initial value of every inherited property is "clear"; see the description of the built-in function `clear_property()' for details.

If the intended owner of the new object has a property named `ownership_quota' and the value of that property is an integer, then `create()' treats that value as a "quota".  If the quota is less than or equal to zero, then the quota is considered to be exhausted and `create()' raises `E_QUOTA' instead of creating an object.  Otherwise, the quota is decremented and stored back into the `ownership_quota' property as a part of the creation of the new object.

You now have Class with object number #560 and parent root class (#1).
The created object is now your current object.
#-1 does not exist.
-----
CHPARENT()
==========

Syntax:  chparent (obj <object>, obj <new-parent>)   => none

Changes the parent of <object> to be <new-parent>.  If <object> is not valid, or if <new-parent> is neither valid nor equal to `#-1', then `E_INVARG' is raised.  If the programmer is neither a wizard or the owner of <object>, or if <new-parent> is not fertile (i.e., its `f' bit is not set) and the programmer is neither the owner of <new-parent> nor a wizard, then `E_PERM' is raised.  If <new-parent> is equal to `object' or one of its current ancestors, `E_RECMOVE' is raised.  If <object> or one of its descendants defines a property with the same name as one defined either on <new-parent> or on one of its ancestors, then `E_INVARG' is raised.

Changing an object's parent can have the effect of removing some properties from and adding some other properties to that object and all of its descendants (i.e., its children and its children's children, etc.).  Let <common> be the nearest ancestor that <object> and <new-parent> have in common before the parent of <object> is changed.  Then all properties defined by ancestors of <object> under <common> (that is, those ancestors of <object> that are in turn descendants of <common>) are removed from <object> and all of its descendants.  All properties defined by <new-parent> or its ancestors under <common> are added to <object> and all of its descendants.  As with `create()', the newly-added properties are given the same permission bits as they have on <new-parent>, the owner of each added property is either the owner of the object it's added to (if the `c' permissions bit is set) or the owner of that property on <new-parent>, and the value of each added property is "clear"; see the description of the built-in function `clear_property()' for details.  All properties that are not removed or added in the reparenting process are completely unchanged.

If <new-parent> is equal to `#-1', then <object> is given no parent at all; it becomes a new root of the parent/child hierarchy.  In this case, all formerly inherited properties on <object> are simply removed.

=> 0
Verb not found (#560) [ readable ]
  Child of ** none ** (#-1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Verb not found (#560) [ readable ]
  Child of ** none ** (#-1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Verb not found (#560) [ readable ]
  Child of ** none ** (#-1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
#6:@rename*# (this == #243), line 72:  Verb not found
(End of traceback)
#18:match_all match_exact_or_all, line 20:  Property not found
... called from #1:match (this == #243), line 18
... called from #18:match_object, line 14
... called from #6:my_match_object (this == #243), line 2
... called from #6:match_help_object (this == #243), line 2
... called from #6:help ?* (this == #243), line 32
(End of traceback)
=> 0
-----
`HELP RENAME()' NOT FOUND
=========================

Sorry, but no help is available on `rename()'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP RENAME' AMBIGUOUS
=======================

Sorry, the topic `rename' is ambiguous.  I don't know which of the following topics you mean:

`help @rename'[1]       `help @rename#'[2]      

#18:print_with_names, line 16:  Verb not found
... called from #52:print_eval_result (this == #243), line 17
... called from #52:eval eval-d eval+d (this == #243), line 17
(End of traceback)
=> "Class"
=> "Blank Root"
Verb not found (#560) [ readable ]
  Child of ** none ** (#-1).
-------------------------------- finished ---------------------------------
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Parent changed.
Blank Root (#560) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
You now have Interface with object number #561 and parent Blank Root (#560).
The created object is now your current object.
You now have Class with object number #562 and parent Blank Root (#560).
The created object is now your current object.
Objects owned by Crag (from #0 to #562):
 12K #243 Crag                      *[Front Parlour]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  4K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  2K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  3K #280 Generic Table              [Nowhere]
  1K #282 microphone                 [Crag]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
 <1K #540 Generic See-through Porta  <invalid>-><invalid>
 22K #558 Cardgame Feature           [Crag]
 87K #560 Blank Root                 [Nowhere]
 <1K #561 Interface                  [Crag]
 <1K #562 Class                      [Crag]
-- 40 objects.  Total bytes: 174,625.-----------------------------------------
Room Exit Delegate (#279)   Generic Delegate (#270)   root class (#1)
Parent changed.
Parent changed.
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location Front Parlour (#398).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
  #243:find_all_commands        Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Crag (#243)
Last modified Sun Apr 21 14:10:45 2013 PDT by Crag (#243).
#243:"@dumpkids" any none none
// Usage: @dump-kids <parent>
// Lists the object hierarchy from parent down
prefix = "";
if (args && typeof(args[1]) == STR && index(args[1], " ") == 1)
  prefix = args[1];
endif
thisinfo = this:name_and_number();
player:tell(prefix, thisinfo);
for child in (children(this))
  child:("@dump-kids")(prefix + "  ");
  $command_utils:suspend_if_needed(0);
endfor
Line 1:  syntax error
1 error.
#-1:Input to EVAL, line 4:  Verb not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Crag (#243)
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location Front Parlour (#398).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
  #243:find_all_commands        Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
-------------------------------- finished ---------------------------------
Objects owned by Crag (from #0 to #562):
 12K #243 Crag                      *[Front Parlour]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  4K #255 Generic Pilable Thing      [Nowhere]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
  2K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Generic Delegator          [Crag]
  1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  3K #280 Generic Table              [Nowhere]
  1K #282 microphone                 [Crag]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #503 top of pile                [pile of stuff]
 <1K #504 bottom of pile             [pile of stuff]
 <1K #258 pile of stuff             *[North Vestibule]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
 <1K #540 Generic See-through Porta  <invalid>-><invalid>
 22K #558 Cardgame Feature           [Crag]
 87K #560 Blank Root                 [Nowhere]
 <1K #561 Interface                  [Crag]
 <1K #562 Class                      [Crag]
-- 40 objects.  Total bytes: 174,625.-----------------------------------------
Object ownership changed.
Object ownership changed.
Object ownership changed.
Object ownership changed.
Sure you want to recycle the top of pile (#503)? [Enter `yes' or `no']
The top of pile (#503) recycled.
Sure you want to recycle the bottom of pile (#504)? [Enter `yes' or `no']
The bottom of pile (#504) recycled.
Sure you want to recycle the pile of stuff (#258)? [Enter `yes' or `no']
The pile of stuff (#258) recycled.
The Blank Root(#560) has 2 kids.
Interface (#561)   Class (#562)
The Class(#562) has 2 kids.
Generic Delegate (#270)   Generic Delegator (#269)
Name of #269 changed to "Delegator".  Aliases are unchanged ({"Delegator"}).
Name of #270 changed to "Delegate".  Aliases are unchanged ({"Delegate"}).
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:"__d_match_message __d_match_command" Crag (#243) rxd this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:"__d_dispatch_message __d_dispatch_command" Crag (#243) rxd this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:"@add-delegate @rm-delegate" Crag (#243)      r d    any any this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
stormagnet goes south.
The West Foyer
The doors to the n1 are open.  The doors to the n2 are closed.  The doors to the n3 are closed.  The doors to the south1 are closed.  The doors to the south2 are closed.
stormagnet is here, distracted.
Crag | ;;for var in (list) statements; endfor
=> {#395, #397, #399, #401, #403, #405, #407}
Crag | ;;for var in (here:exits()) statements; endfor
Crag | ;;for exit in (here:exits()) exit.visible = 0; endfor
,visible                 unknown hacker (#35)  r      0
-------------------------------- finished ---------------------------------
Description set.
The West Foyer
Yupp  The doors to the n1 are open.  The doors to the n2 are closed.  The doors to the n3 are closed.  The doors to the south1 are closed.  The doors to the south2 are closed.
stormagnet is here.
=> #399 (n1)
=> 0
The West Foyer
Yupp  The doors to the n1 are open.  The doors to the n2 are closed.  The doors to the n3 are closed.  The doors to the south1 are closed.  The doors to the south2 are closed.
stormagnet is here.
generic testing player (#99) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic programmer (#52).
  Location generic room (#3).
.public_identity         Core-Wizard (#184)    r      #-1
 display_options         Core-Wizard (#184)    r c    {}
 list_options            Core-Wizard (#184)    r c    {}
 eval_options            Core-Wizard (#184)    r c    {{"ticks", 6}, {"env", ..
 recreate_enabled        Core-Wizard (#184)    r c    1
 building_options        Core-Wizard (#184)    r c    {}
 features                unknown hack (#35)    r      {#67, #68}
 previous_connection     Core-Wizard (#184)           0
 mail_lists              Core-Wizard (#184)    r c    {}
 email_address           Core-Wizard (#184)           ""
 last_disconnect_time    Core-Wizard (#184)    r      0
,help                    Core-Wizard (#184)    r c    0
 linetask                unknown hack (#35)    r      {0, 0}
 linesleft               unknown hack (#35)    r      0
 linebuffer              unknown hack (#35)           {}
 pagelen                 unknown hack (#35)    r      0
 _mail_task              Core-Wizard (#184)    r c    0
 owned_objects           Quota (#185)          r      {}
 linelen                 unknown hack (#35)    r      -79
 current_folder          Core-Wizard (#184)      c    1
 all_connect_places      Core-Wizard (#184)           {}
 last_connect_place      Core-Wizard (#184)           "?"
 dict                    Core-Wizard (#184)    r c    {}
 messages_going          Core-Wizard (#184)      c    {}
 responsible             Core-Wizard (#184)      c    {}
 lines                   Core-Wizard (#184)      c    20
 page_absent_msg         Core-Wizard (#184)    r c    {#69, "do", {"dname", "..
 page_origin_msg         Core-Wizard (#184)    r c    ""
 page_echo_msg           Core-Wizard (#184)    r c    0
 mail_notify             Core-Wizard (#184)    r c    {}
 mail_forward            Core-Wizard (#184)    r c    {}
 edit_options            Core-Wizard (#184)    r c    {}
 mail_options            Core-Wizard (#184)    r c    {}
 current_message         Core-Wizard (#184)      c    {0, 0}
 messages                Core-Wizard (#184)      c    {}
 last_connect_time       Core-Wizard (#184)    r      0
 ownership_quota         Quota (#185)                 0
 gender                  Core-Wizard (#184)    r c    #158
 home                    unknown hack (#35)    r      #70
 password                Core-Wizard (#184)           "impossible password to..
 gaglist                 Core-Wizard (#184)    r c    {}
 paranoid                Core-Wizard (#184)    r c    0
 spoof_attribution_msg   Core-Wizard (#184)    r c    "     --"
 pronoun_sub_style       Core-Wizard (#184)    r c    #78
 last_player_paged       unknown hack (#35)    r      "Everyman"
 contributed_line        Core-Wizard (#184)    r      ""
 contributed_links       Core-Wizard (#184)    r      {}
 followers               unknown hack (#35)    r      {}
 followable              unknown hack (#35)    r      1
 integrate_sep_msg       Core-Wizard (#184)    r c    "  "
 integration_enabled     Core-Wizard (#184)    r c    1
 jtext_form              Core-Wizard (#184)    r      "linemode"
 focus_object            Core-Wizard (#184)    r      #-1
 misc_options            Core-Wizard (#184)    r c    {{"fstamp", "[ $o:$M $p..
 authentication_key      Core-Wizard (#184)           0
 client_options          Core-Wizard (#184)    r c    {}
 link_shepherd           unknown hack (#35)    r      #-1
 walking_task            unknown hack (#35)    r      0
 temp_brief              Core-Wizard (#184)    r c    0
 jaddress_stack          unknown hack (#35)    r      {}
 total_started           Core-Wizard (#184)           0
 total_connect_time      Core-Wizard (#184)           0
 started_keeping_total   Core-Wizard (#184)           0
 current_object          Core-Wizard (#184)    r      {#0, "#0"}
 current_object_stack    Core-Wizard (#184)    r      {}
 following               unknown hack (#35)    r      {}
 walk_randomness         Core-Wizard (#184)    r      {1, 8}
 client_features         Core-Wizard (#184)    r c    {}
 client_authkey          Core-Wizard (#184)    r c    ""
 client_disfuncs         Core-Wizard (#184)    r c    {}
 client_debug            Core-Wizard (#184)    r c    0
 remote_emote_prefix_msg Core-Wizard (#184)    r c    {#69, "do", "(from ", {..
 who_options             Core-Wizard (#184)    r      {{"columns", {"name", "..
 last_entrance_time      Core-Wizard (#184)    r      768064450
 dozing_msg              Core-Wizard (#184)    r c    {#69, "do", "idling"}
 idle_start_time         Core-Wizard (#184)    r c    0
 idle_msg                Core-Wizard (#184)    r c    {#69, "do", "real life ..
 idle_string             Core-Wizard (#184)    r c    ""
 dozing_string           Core-Wizard (#184)    r c    ""
 doing_string            unknown hack (#35)    r      ""
 doing_msg               Core-Wizard (#184)    r      {#69, "do"}
 disconnect_task         Core-Wizard (#184)    r      0
 last_password_time      Core-Wizard (#184)           0
 last_timestamp          Core-Wizard (#184)    r      830677321
 size_quota              Quota (#185)                 {0, 0, 0, 0}
 shout_msg               Core-Wizard (#184)    r c    {#69, "do", {"name", "p..
 contributed_document    Core-Wizard (#184)           E_NONE
 walking_dest            unknown hack (#35)    r      #-1
 use_do_command          Core-Wizard (#184)    r c    0
 first_connect_time      Core-Wizard (#184)    r      2147483647
 out_of_band_session     unknown hack (#35)    r      #-1
 parse_options           Core-Wizard (#184)    r c    {"guess_object", "repor..
 timezone                unknown hack (#35)    r      #39
 queued_task_limit       Core-Wizard (#184)    r      -1
 in_msg                  Core-Wizard (#184)    r c    {#69, "do", "in"}
 dependents              Core-Wizard (#184)    r      {}
,key                     Core-Wizard (#184)      c    0
,aliases                 Core-Wizard (#184)    r      {"generic testing playe..
,description             Core-Wizard (#184)    r c    "A battered test charac..
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Core-Wizard (#184)    r c    ""
 integrate_player_msg    Core-Wizard (#184)    r c    ""
 integrate_container_msg Core-Wizard (#184)    r c    ""
 unique                  Core-Wizard (#184)    r c    1
 proper                  Core-Wizard (#184)    r c    1
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {8538, 1367136000}
,core_names              Core-Wizard (#184)    r c    {}
-------------------------------- finished ---------------------------------
n1 (#399) [ ]
  Owned by stormagnet (#246).
  Child of generic door (#121).
 open_msg                stormagnet (#246)     r c    {#69, "do", {"name", "p..
 close_msg               stormagnet (#246)     r c    {#69, "do", {"name", "p..
,open                    unknown hack (#35)    r      1
 opened_msg              stormagnet (#246)     r c    {#69, "do", "The ", {"n..
 closed_msg              stormagnet (#246)     r c    {#69, "do", "The ", {"n..
 automatic               unknown hack (#35)    r      1
 locked_msg              stormagnet (#246)     r c    {#69, "do", "The ", {"n..
,other_side              unknown hack (#35)    r      #408
 opens_msg               stormagnet (#246)     r c    {#69, "do", "The ", {"n..
 closes_msg              stormagnet (#246)     r c    {#69, "do", "The ", {"n..
 user_key                unknown hack (#35)    r      #-1
 unlocked_msg            stormagnet (#246)     r c    {#69, "do", "The ", {"n..
 lock_msg                stormagnet (#246)     r c    {#69, "do", {"name", "p..
 unlock_msg              stormagnet (#246)     r c    {#69, "do", {"name", "p..
 locked                  unknown hack (#35)    r      0
 locks_msg               stormagnet (#246)     r c    {#69, "do", "You hear t..
 unlocks_msg             stormagnet (#246)     r c    {#69, "do", "You hear t..
 knock_msg               stormagnet (#246)     r c    {#69, "do", {"name", "p..
 knocks_msg              stormagnet (#246)     r c    {#69, "do", "Someone kn..
 opaque                  unknown hack (#35)    r      1
 help                    stormagnet (#246)     r c    {"A Generic Door which ..
 no_key_msg              stormagnet (#246)     r c    {#69, "do", "You don't ..
 close_delay             unknown hack (#35)    r      -1
 closing_task            unknown hack (#35)    r      0
 self_closes_msg         stormagnet (#246)     r c    {#69, "do", "The ", {"n..
 pull_msg                stormagnet (#246)     r c    {#69, "do", {"name", "p..
,obvious                 stormagnet (#246)     r c    0
,source                  stormagnet (#246)     r c    #393
,dest                    stormagnet (#246)     r c    #398
 nogo_msg                stormagnet (#246)     r c    0
 onogo_msg               stormagnet (#246)     r c    0
 arrive_msg              stormagnet (#246)     r c    0
 oarrive_msg             stormagnet (#246)     r c    0
 oleave_msg              stormagnet (#246)     r c    0
 leave_msg               stormagnet (#246)     r c    0
 nothing_msg             stormagnet (#246)     r c    "nothing"
 no_one_msg              stormagnet (#246)     r c    "no one"
 prefix_name             stormagnet (#246)     r c    1
 through_msg             stormagnet (#246)     r c    {#69, "do", {"name", {"..
 walking_cost            unknown hack (#35)    r      1
,dependents              Core-Wizard (#184)    r      {}
,key                     stormagnet (#246)       c    0
,aliases                 stormagnet (#246)     r c    {"n1", "north1", "first..
 description             stormagnet (#246)     r c    {}
,visible                 unknown hack (#35)    r      0
 integrate_room_msg      stormagnet (#246)     r c    {#69, "do", "The ", {"n..
 integrate_player_msg    stormagnet (#246)     r c    ""
 integrate_container_msg stormagnet (#246)     r c    ""
 unique                  stormagnet (#246)     r c    1
 proper                  stormagnet (#246)     r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
,number                  unknown hack (#35)    r      2
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {1057, 1367136000}
,core_names              stormagnet (#246)     r c    {}
-------------------------------- finished ---------------------------------
=> #145 (generic containing object)
=> 0
The West Foyer
Yupp  The doors to the n1 are open.  The doors to the n2 are closed.  The doors to the n3 are closed.  The doors to the south1 are closed.  The doors to the south2 are closed.
stormagnet is here, distracted.
,integrate_in            unknown hacker (#35)  r      {}
-------------------------------- finished ---------------------------------
Object #393 does not define that verb, but its ancestor #3 does.
Last modified Thu Jul 19 07:52:28 2001 PDT by Xplat (#4014) (on Waterpoint).
#3:"description" this none this
// If there's more than one paragraph of description, then add integration messages to the end as a separate paragraph(s).
// If there are more than one paragraph of integration messages, add them as separate paragraphs to the end of the description.
// Otherwise, append the integration message to the end of the description paragraph.
desc = pass(@args);
if (!this.integrate_paragraphs)
  integrate = $integration_utils:integrate(args, "integrate_room_msg");
  integrate_sep = $string_utils:pronoun_sub(this.integrate_sep_msg);
  if (integrate)
    if ((sep_is_list = typeof(integrate_sep) == LIST) || !integrate_sep || length(desc) > 1 || length(integrate) > 1)
      if (sep_is_list)
        desc = {@desc, @integrate_sep, @integrate};
      else
        desc = {@desc, @integrate};
      endif
    else
      if (desc)
        desc = {desc[1] + integrate_sep + integrate[1]};
      else
        desc = integrate;
      endif
    endif
  endif
  return desc;
else
  if (!desc)
    desc = {""};
  endif
  explicit = $list_utils:flatten(integrate = this.integrate_paragraphs);
  integrate_objects = {@this:contents(), @this:exits()};
  for i in [1..length(integrate)]
    ni = {};
    for elt in (integrate[i])
      if (elt in integrate_objects || typeof(elt) in {LIST, STR})
        ni = {@ni, elt};
      endif
    endfor
    integrate[i] = ni;
  endfor
  // integrate[i] = $set_utils:intersection(integrate[i], $set_utils:union(this:contents(), this:exits()));
  if (misc = $set_utils:diff($list_utils:flatten(args), explicit))
    integrate[l = length(integrate)] = {@integrate[l], @misc};
  endif
  if (length(desc) == 1)
    integrate[1] = {@desc, @integrate[1]};
  else
    integrate[1] = {desc[$], @integrate[1]};
    for i in [1..length(desc) - 1]
      integrate = {{desc[$ - i]}, @integrate};
    endfor
  endif
  return $integration_utils:integrate(integrate, "integrate_room_msg");
endif
 integrate_room_msg      stormagnet (#246)     r c    {#69, "do", "The ", {"noun", "thing", "door"}, " to ", {"name", "thing", {"d"}}, " ", {"verb", "thing", "is"}, " ", {"special", "thing", "open", {0}}, "."}
-------------------------------- finished ---------------------------------
=> 0
The West Foyer
#1:empty_message (this == #395), line 12:  Variable not found
... called from #3:ok_to_integrate (this == #393), line 9
... called from #3:look_self (this == #393), line 14
... called from #3:l*ook (this == #393), line 2
(End of traceback)
=> 0
The West Foyer
Yupp  The doors to the n1 are open.  The doors to the n2 are closed.  The doors to the n3 are closed.  The doors to the south1 are closed.  The doors to the south2 are closed.
stormagnet is here, daydreaming.
=> 0
=> 0
generic door (#121) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic exit (#7).
  #121:open                     unknown hacker (#35) rxd    this none none
  #121:"close shut"             unknown hacker (#35) rxd    this none none
  #121:"opens_msg closes_msg locks_msg unlocks_msg knocks_msg opened_msg closed_msg locked_msg unlocked_msg no_key_msg" unknown hacker (#35) rxd this none this
  #121:description              unknown hacker (#35) rxd    this none this
  #121:move                     unknown hacker (#35) rxd    this none this
  #121:trusted                  unknown hacker (#35) rxd    this none this
  #121:lock                     unknown hacker (#35) rxd    this none none
  #121:unlock                   unknown hacker (#35) rxd    this none none
  #121:is_locked                unknown hacker (#35) rxd    this none this
  #121:has_key                  unknown hacker (#35) rxd    this none this
  #121:find_other_side          unknown hacker (#35) rxd    this none this
  #121:setup_connection         unknown hacker (#35) rxd    this none this
  #121:"other_side obj_other_side" unknown hacker (#35) rxd this none this
  #121:knock                    unknown hacker (#35) rxd    none on top of/on/onto/upon this
  #121:"set_user_key set_close_delay" unknown hacker (#35) rxd this none this
  #121:"knock_msg open_msg close_msg lock_msg unlock_msg self_closes_msg" unknown hacker (#35) rxd this none this
  #121:"set_locked set_other_side set_opaque set_automatic set_closing_task" unknown hacker (#35) rxd this none this
  #121:self_close               unknown hacker (#35) rxd    this none this
  #121:set_open                 unknown hacker (#35) rxd    this none this
  #121:close_delay              unknown hacker (#35) rxd    this none this
  #121:event_directed_speech    unknown hacker (#35) rxd    this none this
  #121:is_unlocked_for          unknown hacker (#35) rxd    this none this
  #121:help_text                unknown hacker (#35) rxd    this none this
  #121:through_msg              unknown hacker (#35) rxd    this none this
  #121:sub_open                 Core-Wizard (#184)   rxd    this none this
  #121:pull                     unknown hacker (#35) rxd    any through this
  #121:walking_cost             unknown hacker (#35) rxd    this none this
  #121:obj_user_key             unknown hacker (#35) rxd    this none this
  #121:modname_open             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic door (#121)   generic exit (#7)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
@integrate_room $door is "The %t'(door) to %td %t:(is) %tx{open 0}."
@integrate_player $door isn't set.
@integrate_container $door isn't set.
@nogo $door isn't set.
@onogo $door isn't set.
@arrive $door isn't set.
@oarrive $door isn't set.
@oleave $door isn't set.
@leave $door isn't set.
@nothing $door is "nothing"
@no_one $door is "no one"
@through $door is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $door is "%Nd %n:(opens) the %t'(door) to %td."
@close $door is "%Nd %n:(closes) the %t'(door) to %td."
@opened $door is "The %t'(door) to %td %t:(is) open."
@closed $door is "The %t'(door) to %td %t:(is) closed."
@locked $door is "The %t'(door) to %td %t:(is) locked."
@opens $door is "The %t'(door) to %td %t:(opens) from the other side."
@closes $door is "The %t'(door) %td %t:(closes) from the other side."
@unlocked $door is "The %t'(door) %td %t:(is) unlocked."
@lock $door is "%Nd %n:(locks) the %t'(door) to %td."
@unlock $door is "%Nd %n:(unlocks) the %t'(door) to %td."
@locks $door is "You hear the click of the %t'(door) to %td being locked from the other side."
@unlocks $door is "You hear the click of the %t'(door) to %td being unlocked from the other side."
@knock $door is "%Nd %n:(knocks) on the %t'(door) to %td."
@knocks $door is "Someone knocks on the %t'(door) to %td."
@no_key $door is "You don't have the key for the %t'(door) to %td."
@self_closes $door is "The %t'(door) to %td %t:(closes)."
@pull $door is "%Ni %n:(reaches) through the %t'(door) to %td and %n:(pulls) %dd into %nld."
-----
MESSAGES
========

Most objects have messages that are printed when a player succeeds or fails in manipulating the object in some way.  Of course, the kinds of messages printed are specific to the kinds of manipulations and those, in turn, are specific to the kind of object.  Regardless of the kind of object, though, there is a uniform means for listing the kinds of messages that can be set and then for setting them.

The '@messages' command prints out all of the messages you can set on any object you own.  Type `help @messages'[1] for details.

To set a particular message on one of your objects use a command with this form:

        @<message-name> <object> is "<message>"

where '<message-name>' is the name of the message being set, <object> is the name or number of the object on which you want to set that message, and <message> is the actual text.

For example, consider the 'leave' message on an exit; it is printed to a player when they successfully use the exit to leave a room.  To set the 'leave' message on the exit 'north' from the current room, use the command

        @leave north is "You wander in a northerly way out of the room."

[Note to programmers: This class of commands automatically applies to any property whose name ends in '_msg'.  Thus, in the example above, the command is setting the 'leave_msg' property of the named exit.  You can get such a command to work on new kinds of objects simply by giving the appropriate properties names that end in '_msg'.  Additionally, in many cases the _msg property is accompanied by a _msg verb, which defaultly returns the named property, but which is available to be customized in more complex ways than allowed by simple string substitution.  You should check for the particular property you're considering whether the verb form exists (typically with @list).]

The following help topics describe the uses of the various messages available on standard kinds of objects:

container-messages[2]
      the messages on objects that can contain other objects
exit-messages[3]
      the messages on exit objects
thing-messages[4]
      the messages on objects that can be taken and dropped

That is not a valid command.
That is not a valid command.
@integrate_room n1 is "The %t'(door) to %td %t:(is) %tx{open 0}."
@integrate_player n1 isn't set.
@integrate_container n1 isn't set.
@nogo n1 isn't set.
@onogo n1 isn't set.
@arrive n1 isn't set.
@oarrive n1 isn't set.
@oleave n1 isn't set.
@leave n1 isn't set.
@nothing n1 is "nothing"
@no_one n1 is "no one"
@through n1 is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open n1 is "%Nd %n:(opens) the %t'(door) to %td."
@close n1 is "%Nd %n:(closes) the %t'(door) to %td."
@opened n1 is "The %t'(door) to %td %t:(is) open."
@closed n1 is "The %t'(door) to %td %t:(is) closed."
@locked n1 is "The %t'(door) to %td %t:(is) locked."
@opens n1 is "The %t'(door) to %td %t:(opens) from the other side."
@closes n1 is "The %t'(door) %td %t:(closes) from the other side."
@unlocked n1 is "The %t'(door) %td %t:(is) unlocked."
@lock n1 is "%Nd %n:(locks) the %t'(door) to %td."
@unlock n1 is "%Nd %n:(unlocks) the %t'(door) to %td."
@locks n1 is "You hear the click of the %t'(door) to %td being locked from the other side."
@unlocks n1 is "You hear the click of the %t'(door) to %td being unlocked from the other side."
@knock n1 is "%Nd %n:(knocks) on the %t'(door) to %td."
@knocks n1 is "Someone knocks on the %t'(door) to %td."
@no_key n1 is "You don't have the key for the %t'(door) to %td."
@self_closes n1 is "The %t'(door) to %td %t:(closes)."
@pull n1 is "%Ni %n:(reaches) through the %t'(door) to %td and %n:(pulls) %dd into %nld."
=> ""
=> 0
The West Foyer
Yupp
stormagnet is here, daydreaming.
Description set.
The West Foyer
Typical Foyer?
stormagnet is here, daydreaming.
You set the "integrate_room" message of the generic door (#121).
The West Foyer
Typical Foyer?
stormagnet is here, daydreaming.
The east (#395) leads to the West Hall (#304) via {east, e}.
The south (#397) leads to the South Foyer (#396) via {south, s}.
The n1 (#399) leads to the Front Parlour (#398) via {n1, north1, first door north, first north, 1stn, 1st north}.
The n2 (#401) leads to the Music Room (#400) via {n2, north2, second door north, second north, 2nd north, 2ndn}.
The n3 (#403) leads to the Green Drawing Room (#402) via {n3, north3, third door north, third north, 3rd north, 3rdn}.
The south1 (#405) leads to the Lower Library Doorway (#404) via {south1, s1, first door south, first south, 1st south, 1sts}.
The south2 (#407) leads to the Billiard Room Doorway (#406) via {south2, s2, second door south, second south, 2nd south, 2nds}.
In the Front Parlour, you see an oriental rug, some settee, a bureau a gradin, a desk chair, and a sideboard.
The doors to the n1 are open.
In the South Foyer, you see nothing.
The South Foyer
You see nothing special.
The south (#463) leads to the Winter Hall (#462) via {south, s}.
The east (#464) leads to the West Foyer (#393) via {east, e}.
The first east (#479) leads to the Back Parlour Doorway (#437) via {first east, first door east, 1st east, 1ste, east1, e1}.
The second east (#480) leads to the White Drawing Room Doorway (#446) via {second east, second door east, 2nd east, 2nde, east2, e2}.
The third east (#482) leads to the Water Closet (#481) via {third east, third door east, 3rd east, 3rde, east3, e3}.
The fourth east (#483) leads to the Back Scullery (#457) via {fourth east, fourth door east, 4th east, 4the, east4, e4}.
The first west (#484) leads to the Conservatory (#415) via {first west, first door west, 1st west, 1stw, west1, w1}.
The second west (#486) leads to the Summer Hall (#485) via {second west, second door west, 2nd west, 2ndw, west2, w2}.
The third west (#488) leads to the Theater (#487) via {third west, third door west, 3rd west, 3rdw, west3, w3}.
The fourth west (#490) leads to the Backstage (#489) via {fourth west, fourth door west, 4th west, 4thw, west4, w4}.
You open the doors to the third west.
The Theater
You see nothing special.
The up (#496) leads to the Stage (#492) via {up, u}.
The east (#497) leads to the South Foyer (#396) via {east, e}.
Carrying:
 some Group Utilities                    a Generic Input Handler
 a MCP parent                            a Generic Command Handler
 a Parsing objects                       a Beaker's Commands
 a Text generation objects               a Generic Command
 an Abstract class                       a Generic English Command
 a Generic Nesting Decoration            a Grouping Command
 a Delegator                             a microphone
 a Delegate                              a Cardgame Feature
 a New Generic Room                      the Interface
 a Room Exit Delegate                    the Class
 a more stuff                            
Objects owned by Crag (from #0 to #562):
 12K #243 Crag                      *[Theater]
  1K #244 generic group              [Nowhere]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
  4K #255 Generic Pilable Thing      [Nowhere]
 <1K #264 adventure party           *[bridge]
  2K #265 Generic Nesting Decoratio  [Crag]
  2K #269 Delegator                  [Crag]
  1K #270 Delegate                   [Crag]
 <1K #271 New Generic Room           [Crag]
  1K #279 Room Exit Delegate         [Crag]
  3K #280 Generic Table              [Nowhere]
  3K #290 How $staff will notice pe *[North Vestibule]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
 <1K #507 more stuff                 [Crag]
 <1K #509 Generic Input Handler      [Crag]
 <1K #510 Generic Command Handler    [Crag]
 <1K #511 Beaker's Commands          [Crag]
 <1K #531 Generic Command            [Crag]
 <1K #532 Generic English Command    [Crag]
 <1K #533 Grouping Command           [Crag]
 <1K #540 Generic See-through Porta  <invalid>-><invalid>
 22K #558 Cardgame Feature           [Crag]
 87K #560 Blank Root                 [Nowhere]
 <1K #561 Interface                  [Crag]
 <1K #562 Class                      [Crag]
-- 33 objects.  Total bytes: 165,804.-----------------------------------------
Sure you want to recycle the more stuff (#507)? [Enter `yes' or `no']
The more stuff (#507) recycled.
Your current object is Class, the Class (#562).
The Class(#562) has 2 kids.
Delegate (#270)   Delegator (#269)
Your current object is now #269.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:"__d_match_message __d_match_command" Crag (#243) rxd this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:"__d_dispatch_message __d_dispatch_command" Crag (#243) rxd this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:"@add-delegate @rm-delegate" Crag (#243)      r d    any any this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
.__d_delegates           Crag (#243)           r c    {}
.__d_delegate_ids        Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
@integrate_room $door is ""
@integrate_player $door isn't set.
@integrate_container $door isn't set.
@nogo $door isn't set.
@onogo $door isn't set.
@arrive $door isn't set.
@oarrive $door isn't set.
@oleave $door isn't set.
@leave $door isn't set.
@nothing $door is "nothing"
@no_one $door is "no one"
@through $door is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $door is "%Nd %n:(opens) the %t'(door) to %td."
@close $door is "%Nd %n:(closes) the %t'(door) to %td."
@opened $door is "The %t'(door) to %td %t:(is) open."
@closed $door is "The %t'(door) to %td %t:(is) closed."
@locked $door is "The %t'(door) to %td %t:(is) locked."
@opens $door is "The %t'(door) to %td %t:(opens) from the other side."
@closes $door is "The %t'(door) %td %t:(closes) from the other side."
@unlocked $door is "The %t'(door) %td %t:(is) unlocked."
@lock $door is "%Nd %n:(locks) the %t'(door) to %td."
@unlock $door is "%Nd %n:(unlocks) the %t'(door) to %td."
@locks $door is "You hear the click of the %t'(door) to %td being locked from the other side."
@unlocks $door is "You hear the click of the %t'(door) to %td being unlocked from the other side."
@knock $door is "%Nd %n:(knocks) on the %t'(door) to %td."
@knocks $door is "Someone knocks on the %t'(door) to %td."
@no_key $door is "You don't have the key for the %t'(door) to %td."
@self_closes $door is "The %t'(door) to %td %t:(closes)."
@pull $door is "%Ni %n:(reaches) through the %t'(door) to %td and %n:(pulls) %dd into %nld."
The South Foyer
The West Foyer
Typical Foyer?
stormagnet is here, daydreaming.
You have arrived.
You say, "the %t'(door)"
You say, "%td"
The east (#395) leads to the West Hall (#304) via {east, e}.
The south (#397) leads to the South Foyer (#396) via {south, s}.
The n1 (#399) leads to the Front Parlour (#398) via {n1, north1, first door north, first north, 1stn, 1st north}.
The n2 (#401) leads to the Music Room (#400) via {n2, north2, second door north, second north, 2nd north, 2ndn}.
The n3 (#403) leads to the Green Drawing Room (#402) via {n3, north3, third door north, third north, 3rd north, 3rdn}.
The south1 (#405) leads to the Lower Library Doorway (#404) via {south1, s1, first door south, first south, 1st south, 1sts}.
The south2 (#407) leads to the Billiard Room Doorway (#406) via {south2, s2, second door south, second south, 2nd south, 2nds}.
You open the doors to the south1.
The Lower Library Doorway
You see nothing special.
The West Foyer
Typical Foyer?
stormagnet is here.
You have arrived.
The verb :go is on   Crag(#243)--generic player(#6)   West Foyer(#393)--generic room(#3)   stormagnet(#246)--generic player(#6)
    #6:"walk go"                unknown hacker (#35) rxd    none at/to any
-------------------------------- finished ---------------------------------
    #3:go                       Core-Wizard (#184)   rxd    any none none
-------------------------------- finished ---------------------------------
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:"__d_match_message __d_match_command" Crag (#243) rxd this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:"__d_dispatch_message __d_dispatch_command" Crag (#243) rxd this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:"@add-delegate @rm-delegate" Crag (#243)      r d    any any this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
Delegator(#269) does not have the alias __d_match_command.
Alias __d_match_command removed from verb Delegator(#269):__d_match_message
Verbname is now Delegator(#269):"__d_match_message"
Alias __d_dispatch_command removed from verb Delegator(#269):__d_dispatch_message
Verbname is now Delegator(#269):"__d_dispatch_message"
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:"@add-delegate @rm-delegate" Crag (#243)      r d    any any this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
Alias @rm-delegate removed from verb Delegator(#269):@add-delegate
Verbname is now Delegator(#269):"@add-delegate"
Verb added [11] (10).
Verb arguments changed.
Verb arguments changed.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          rxd    any out of/from inside/from this
-------------------------------- finished ---------------------------------
Your current object is now delegate (#270).
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:"__d_match_message __d_match_command" Crag (#243) rxd this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_commands             Crag (#243)          rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:__d_verbs                Crag (#243)          rxd    this none this
  #270:@addcommand              Wizard (#2)          r d    any any any
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
-------------------------------- finished ---------------------------------
Alias __d_match_command removed from verb Delegate(#270):__d_match_message
Verbname is now Delegate(#270):"__d_match_message"
#270:"__d_commands" ()
That verb has not been programmed.
That object does not define that verb.
Verb #270:__d_commands [4] {this none this} removed.
Verb #270:__d_verbs [5] {this none this} removed.
Verb #270:@addcommand [5] {any any any} removed.
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
-------------------------------- finished ---------------------------------
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
.__d_commands            Crag (#243)           r c    {}
.__d_properties          Crag (#243)           r c    {}
.__d_methods             Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Property removed.
Your current object is now #269.
Your current object is now #270.
-----
CURRENT-OBJECT
==============

Your `current object' is an object that you can refer to in most commands without using its name, just by using the symbol "_".  It's intended primarily for programming.

For example, you can type

   @co $jtext.link
   @d _:

and get a list of verbs defined on the link dispatcher tag.

In addition, if your .eval_env property (see `help eval'[1]) sets _ to player.current_object, you can use it in evaluations.  The default .eval_env includes this binding.  So, to continue the example:

   >;_:dname()
   => "the link dispatcher tag"

A stack is kept of the current objects you've been using, so you can change your current object for a while and then switch back to the previous one without needing to identify it again.

To find out how to set or view your current object, read the following help topics:

@currentobject[2]
      Set current object, or find out what it is.
@pushobject[3]
      Push a current object onto the stack.
@popobject[4]
      Return to the previous current object.
@swapobject[5]
      Switch between current and previous object.

-----
@SWAPOBJECT
===========

Usage:  @swapobject [<object>]

The @swapobject (@swapo) command returns to the previous object on the current object stack (see `help current-object'[1]), but it places the _present_ object _on_ the stack.  Repeated use of this command essentially alternatives between two current objects.

The new current object is specified as in the @currentobject command (see `help @currentobject'[2]).  If used with no arguments, the @pushobject command displays the current object stack.

See also `help @pushobject'[3] and `help @popobject'[4] for information on manipulating the current object stack.

Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
-------------------------------- finished ---------------------------------
Your current object is now #269.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          rxd    any out of/from inside/from this
-------------------------------- finished ---------------------------------
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
.__d_delegates           Crag (#243)           r c    {}
.__d_delegate_ids        Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
You see no "-x" here.
Verb permissions set to "rd".
stormagnet opens the doors to the third northern door.
-----
`HELP STACK' NOT FOUND
======================

Sorry, but no help is available on `stack'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
CURRENT-OBJECT
==============

Your `current object' is an object that you can refer to in most commands without using its name, just by using the symbol "_".  It's intended primarily for programming.

For example, you can type

   @co $jtext.link
   @d _:

and get a list of verbs defined on the link dispatcher tag.

In addition, if your .eval_env property (see `help eval'[1]) sets _ to player.current_object, you can use it in evaluations.  The default .eval_env includes this binding.  So, to continue the example:

   >;_:dname()
   => "the link dispatcher tag"

A stack is kept of the current objects you've been using, so you can change your current object for a while and then switch back to the previous one without needing to identify it again.

To find out how to set or view your current object, read the following help topics:

@currentobject[2]
      Set current object, or find out what it is.
@pushobject[3]
      Push a current object onto the stack.
@popobject[4]
      Return to the previous current object.
@swapobject[5]
      Switch between current and previous object.

Your current object is now class (#562).
Class (#562) [ readable ]
  Child of Blank Root (#560).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Class (#562) [ readable ]
  Child of Blank Root (#560).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Property added with value {}.
Verb added [1] (0).
The West Foyer
Typical Foyer?
stormagnet is here, distracted.
That is not a valid command.
The east (#395) leads to the West Hall (#304) via {east, e}.
The south (#397) leads to the South Foyer (#396) via {south, s}.
The first northern room (#399) leads to the Front Parlour (#398) via {first northern room, n1, north1, first door north, first north, 1stn, 1st north}.
The second northern room (#401) leads to the Music Room (#400) via {second northern room, n2, north2, second door north, second north, 2nd north, 2ndn}.
The third northern room (#403) leads to the Green Drawing Room (#402) via {third northern room, n3, north3, third door north, third north, 3rd north, 3rdn}.
The first southern room (#405) leads to the Lower Library Doorway (#404) via {first southern room, south1, s1, first door south, first south, 1st south, 1sts}.
The second southern room (#407) leads to the Billiard Room Doorway (#406) via {second southern room, south2, s2, second door south, second south, 2nd south, 2nds}.
-----
GO
==

Usage: go <direction> ...
       go to <location>

The first form moves in the given directions in order, taking you through many rooms in a single command.  The second form will try to figure out a path that will bring you to your desired destination.

-----
LOOK
====

Syntax: look
        look <object>
        look <object> in <container>

Show a description of something.

The first form, with no arguments, shows you the name and description of the room you're in, along with a list of the other objects that are there.

The second form lets you look at a specific object.  Most objects have descriptions that may be read this way.  You can look at your own description using 'look me'.  You can set the description for an object or room, including yourself, with the 'describe' command (see `help describe'[1]).

The third form shows you the description of an object that is inside some other object, including objects being carried by another player.

-----
@DESCRIBE
=========

Syntax:  @describe <object> as <description>

Sets the description string of <object> to <description>.  This is the string that is printed out whenever someone uses the 'look' command on <object>.  To describe yourself, use 'me' as the <object>.

Example:

Munchkin types this:
  @describe me as "A very fine fellow, if a bit on the short side."
People who type 'look Munchkin' now see this:
  A very fine fellow, if a bit on the short side.

Note for programmers
====================

The description of an object is kept in its .description property.  For descriptions of more than one paragraph, .description can be a list of strings.

Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           West Foyer                    0 seconds                         
stormagnet     West Foyer                    6 minutes                         

Total: 2 people, 1 of whom has been active recently.
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Sat Aug 17 16:57:12 2002 PDT by Wizard (#2) (on CoreEditMOO).
#6:"@who" any any any
if (caller != player || player != this)
  raise(E_PERM);
endif
if (!dobjstr && prepstr == "in")
  room = player:my_match_room(iobjstr);
  if ($command_utils:room_match_failed(room, iobjstr))
    return;
  endif
  if (!(plyrs = $set_utils:intersection(room:contents(), $code_utils:players())))
    player:notify(tostr(room:dnamec(), " is empty."));
    return;
  endif
elseif (!dobjstr && prepstr == "with")
  if (!$command_utils:player_match_failed(who = player:my_match_player(iobjstr), iobjstr))
    if (!valid(room = who.location))
      return player:tell(who:dnamec(), " is not in a valid location.");
    endif
    plyrs = $set_utils:intersection(room:contents(), $code_utils:players()) || {who};
  else
    return;
  endif
else
  if (i = "by" in args)
    prepstr = "by";
    iobjstr = $string_utils:from_list(args[i + 1..$], " ");
    args = args[1..i - 1];
  endif
  plyrs = args ? listdelete($command_utils:player_match_result(player:my_match_player(args), args), 1) | $code_utils:connected_players();
endif
if (!plyrs)
  return;
endif
if (prepstr == "by")
  sort = $who_options:parse_order(1, iobjstr);
  if (typeof(sort) == STR)
    return player:tell(sort);
  else
    sort = sort[2];
  endif
  usualsort = this:who_option("order");
  this:set_who_option("order", sort);
  $who_utils:show_who_listing(plyrs);
  this:set_who_option("order", usualsort);
else
  $who_utils:show_who_listing(plyrs);
endif
// Copied from generic player (#6):@who by r'm (#1100) Thu Sep  1 22:45:38 1994 EDT
// Copied from r'm (#1100):@w by r'm (#1100) Thu Sep  1 22:51:34 1994 EDT
// Copied from generic player (#6):@who by Ken (#75) Mon Sep 12 22:07:42 1994 EDT
// Copied from Ken (#75):@who by Ken (#75) Tue Sep 13 10:41:21 1994 EDT
// Copied from generic player (#6):@who by Ken (#75) Wed Sep 14 17:09:05 1994 EDT
// Copied from Ken (#75):@who by Ken (#75) Wed Sep 14 20:19:55 1994 EDT
Last modified Mon Jan  9 12:43:40 2006 PST by Xplat (#4014) (on Waterpoint).
#89:"show_who_listing" this none this
// :show_who_listing(players, [[, moreplayers], spam])
// name:20  location:20  doing:30  last_disconnect:28
connected = {};
if (length(args) > 1)
  disconnected = args[2];
else
  disconnected = {};
endif
if (length(args) > 2)
  spamv = "tell";
  spam = toobj(args[3]);
else
  spamv = "notify";
  spam = caller;
endif
// man, this is kind of gross.  passing where to get :ctime in dobj
if ($object_utils:has_callable_verb(spam, "ctime"))
  dobj = spam;
else
  dobj = $time_utils;
endif
columns = this:_columns(player:who_option("columns") || $player:who_option("columns"));
sort = player:who_option("order") || $player:who_option("order");
asc = player:who_option("ascending");
for i in (args[1])
  this:sin();
  if (!$object_utils:isa(i, $Player))
    spam:(spamv)(tostr($string_utils:nn(i), " is not a $player."));
  elseif (typeof(idle_seconds(i)) != ERR)
    connected = setadd(connected, i);
  else
    disconnected = setadd(disconnected, i);
  endif
endfor
this:sin();
active = 0;
inactive = 0;
strings = {};
if (!connected && !disconnected)
  return;
endif
if (connected)
  strings = (v = this:_get_columns(columns, connected, sort))[3];
  sortd = v[2];
  idles = v[1];
  this:sin();
  strings = this:("_sort_by_" + sort)(sortd, strings, asc);
  disconnected && (strings = {@strings, "        " + $string_utils:space(15, "-")});
  for i in (idles)
    inactive = inactive + (i > 300);
  endfor
  active = active + (length(connected) - inactive);
endif
this:sin();
if (disconnected)
  cd = this:_columns({"name", "location", "last_disconnect"});
  stringsd = (v = this:_get_columns(cd, disconnected, "last_disconnect"))[3];
  stringsd = this:_sort_by_last_disconnect(v[2], stringsd, 0);
  inactive = inactive + length(disconnected);
  strings = {@strings, @stringsd};
endif
if (connected)
  title = this:_build_title(columns);
else
  title = this:_build_title(cd);
endif
spam:(spamv + "_lines")(title);
spam:(spamv + "_lines")(strings);
total = inactive + active;
if (total == 1)
  spam:(spamv + "_lines")({"", tostr("Total: ", total, " person, who has", active ? "" | " not", " been active recently.")});
else
  spam:(spamv + "_lines")({"", tostr("Total: ", total, " people, ", active ? active == total ? active == 2 ? "both" | "all" | active | (total == 2 ? "neither" | "none"), " of ", active == 1 ? "whom has" | "whom have", " been active recently.")});
endif
return total;
stormagnet goes south.
stormagnet arrives from the South Foyer.
stormagnet goes south.
The South Foyer
A long corridor running from north to south through the western wing, turning to the northeast. There are four sets of doors to the west, and three sets to the east. At the southernmost end, a marble archway leads to an open hall. 
stormagnet is here, distracted.
You start to follow stormagnet.
Carrying:
 some Group Utilities                    a Generic Input Handler
 a MCP parent                            a Generic Command Handler
 a Parsing objects                       a Beaker's Commands
 a Text generation objects               a Generic Command
 an Abstract class                       a Generic English Command
 a Generic Nesting Decoration            a Grouping Command
 a Delegator                             a microphone
 a Delegate                              a Cardgame Feature
 a New Generic Room                      the Interface
 a Room Exit Delegate                    the Class
=> #562 (Class)
Your current object is now #269.
=> #269 (Delegator)
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
-------------------------------- finished ---------------------------------
#269:"__d_add_delegate" ()
That verb has not been programmed.
stormagnet goes northeast.
You follow stormagnet.
The West Foyer
A long corrider running west, with a turn leading away to the south. Two sets of double doors bracket the northern wall, while three sets of double doors are spaced out evenly along the southern side. At the far end of the foyer, a final pair of double doors lead east.
stormagnet is here.
stormagnet goes east.
You follow stormagnet.
The West Hall
A long and echoing gallery lying to the west of Great Hall. To the north and south, sweeping marble staircases spiral up the corner towers. To the east, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium. A broad marble archway opens onto a corridor to the west.
stormagnet is here.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#269:__d_add_delegate ()" name: "MOO verb: #269:__d_add_delegate ()" type: moo-code content*: "" _data-tag: 1774927188199
#$#: 1774927188199
stormagnet goes east.
You follow stormagnet.
The Atrium
You see nothing special.
stormagnet is here.
stormagnet goes east.
You follow stormagnet.
The East Hall
A long and echoing gallery lying to the east of Great Hall. To the north and south, sweeping marble staircases spiral up the corner towers. To the west, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium. A broad marble archway opens onto a corridor to the east. Towards the southern end of the Hall, a small flight of stone steps lead up to a door, halfway up the wall.

stormagnet is here.
stormagnet goes east.
You follow stormagnet.
The East Foyer
You see nothing special.
stormagnet is here.
Your current object is now #270.
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
-------------------------------- finished ---------------------------------
Verb added [7] (6).
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
-------------------------------- finished ---------------------------------
You see no "$interface" here.
Interface (#561) [ readable ]
  Child of Blank Root (#560).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
-----
VERB_INFO()
===========

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Class (#562) [ readable ]
  Child of Blank Root (#560).
  Location Crag (#243).
  #562:audit_interfaces         Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Your current object is now #269.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
.__d_delegates           Crag (#243)           r c    {}
.__d_delegate_ids        Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Property added with value 0.
Line 1:  syntax error
1 error.
-----
VERB_ARGS()
===========

Syntax:  verb_args (obj <object>, str <verb-desc>)              => list
     set_verb_args (obj <object>, str <verb-desc>, list <args>) => none

These two functions get and set (respectively) the direct-object, preposition, and indirect-object specifications for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_args()' (`set_verb_args()') raises `E_PERM'.  Verb args specifications have the following form:

    {<dobj>, <prep>, <iobj>}

where <dobj> and <iobj> are strings drawn from the set `"this"', `"none"', and `"any"', and <prep> is a string that is either `"none"', `"any"', or one of the prepositional phrases listed much earlier in the description of verbs in the first chapter.  This is the kind of value returned by `verb_args()' and expected as the third argument to `set_verb_args()'.  Note that for `set_verb_args()', <prep> must be only one of the prepositional phrases, not (as is shown in that table) a set of such phrases separated by `/' characters.  `set_verb_args' raises `E_INVARG' if any of the <dobj>, <prep>, or <iobj> strings is illegal.

    verb_args($container, "take")
                        =>   {"any", "out of/from inside/from", "this"}
    set_verb_args($container, "take", {"any", "from", "this"})

stormagnet opens the doors to the south.
stormagnet goes south.
You follow stormagnet.
The Ballroom
You see nothing special.
stormagnet is here.
The Ballroom
You see nothing special.
stormagnet is here.
The north (#345) leads to the East Foyer (#310) via {north, n}.
The south1 (#347) leads to the Refreshment Room (#346) via {south1, s1, first door, first}.
The south2 (#349) leads to the Card Room (#348) via {south2, s2, second door, second}.
-----
ADD_VERB()
==========

Syntax:  add_verb (obj <object>, list <info>, list <args>)   => none

Defines a new verb on the given <object>.  The new verb's owner, permission bits and name(s) are given by <info> in the same format as is returned by `verb_info()'.  The new verb's direct-object, preposition, and indirect-object specifications are given by <args> in the same format as is returned by `verb_args()'.  The new verb initially has the empty program associated with it; this program does nothing but return an unspecified value.

If <object> is not valid, or <info> does not specify a valid owner and well-formed permission bits and verb names, or <args> is not a legitimate syntax specification, then `E_INVARG' is raised.  If the programmer does not have write permission on <object> or if the owner specified by <info> is not the programmer and the programmer is not a wizard, then `E_PERM' is raised.

-----
VERB_INFO()
===========

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

Your current object is now #270.
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
SET_VERB_CODE()
===============

Syntax:  verb_code (obj <object>, str <verb-desc> [, <fully-paren> [, <indent>]])   => list
     set_verb_code (obj <object>, str <verb-desc>, list <code>)   => list

These functions get and set (respectively) the MOO-code program associated with the verb as specified by <verb-desc> on <object>.  The program is represented as a list of strings, one for each line of the program; this is the kind of value returned by `verb_code()' and expected as the third argument to `set_verb_code()'.  For `verb_code()', the expressions in the returned code are usually written with the minimum-necessary parenthesization; if <full-paren> is true, then all expressions are fully parenthesized.  Also for `verb_code()', the lines in the returned code are usually not indented at all; if <indent> is true, each line is indented to better show the nesting of statements.

If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_code()' (`set_verb_code()') raises `E_PERM'.  If the programmer is not, in fact. a programmer, then `E_PERM' is raised.

For `set_verb_code()', the result is a list of strings, the error messages generated by the MOO-code compiler during processing of <code>.  If the list is non-empty, then `set_verb_code()' did not install <code>; the program associated with the verb in question is unchanged.

Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Your current object is now #269.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
-------------------------------- finished ---------------------------------
Verb added [12] (11).
Verb added [13] (12).
(You probably meant `@rename _:__d_proxied_method to __d_proxied_methods'.)
Verb name changed.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
ADD_PROPERTY()
==============

Syntax:  add_property (obj <object>, str <prop-name>, <value>, list <info>) => none

Defines a new property on the given <object>, inherited by all of its descendants; the property is named <prop-name>, its initial value is <value>, and its owner and initial permission bits are given by <info> in the same format as is returned by `property_info()'.  If <object> is not valid or <info> does not specify a valid owner and well-formed permission bits or <object> or its ancestors or descendants already defines a property named <prop-name>, then `E_INVARG' is raised.  If the programmer does not have write permission on <object> or if the owner specified by <info> is not the programmer and the programmer is not a wizard, then `E_PERM' is raised.

-----
PROPERTY_INFO()
===============

Syntax:  property_info (obj <object>, str <prop-name>)              => list
     set_property_info (obj <object>, str <prop-name>, list <info>) => none

These two functions get and set (respectively) the owner and permission bits for the property named <prop-name> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> has no non-built-in property named <prop-name>, then `E_PROPNF' is raised.  If the programmer does not have read (write) permission on the property in question, then `property_info()' (`set_property_info()') raises `E_PERM'.  Property info has the following form:

    {<owner>, <perms> [, <new-name>]}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', and `c', and <new-name> is a string; <new-name> is never part of the value returned by `property_info()', but it may optionally be given as part of the value provided to `set_property_info()'.  This list is the kind of value returned by `property_info()' and expected as the third argument to `set_property_info()'; the latter function raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or, when <new-name> is given, if <prop-name> is not defined directly on <object> or <new-name> names an existing property defined on <object> or any of its ancestors or descendants.

Error programming Delegator:__d_add_delegate[1](0).
Line 21:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#269:__d_proxied_methods ()" name: "MOO verb: #269:__d_proxied_methods ()" type: moo-code content*: "" _data-tag: 1595950689201
#$#: 1595950689201
stormagnet goes north.
You follow stormagnet.
The East Foyer
A corrider running east. A bank of double doors lead south, while to the north are three sets of double doors. At its far end, the corridor turns.  
stormagnet is here.
stormagnet opens the doors to the third northern room.
stormagnet leaves for the third northern room.
You follow stormagnet.
The Drawing Room Doorway
You see nothing special.
stormagnet is here.
stormagnet opens the doors to the north.
stormagnet goes north.
You follow stormagnet.
The Red Drawing Room
You see nothing special.
stormagnet is here.
stormagnet opens the doors to the east.
stormagnet goes east.
You follow stormagnet.
The Blue Drawing Room
You see nothing special.
stormagnet is here.
stormagnet opens the doors to the east.
stormagnet goes east.
You follow stormagnet.
The Solarium
You see nothing special.
stormagnet is here.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sun Apr 28 17:05:51 2013 PDT by Crag (#243).
#269:"__d_add_delegate" this none this
// :__d_add_delegate(delegate)
//   => raises errors on failure, otherwise returns id of delegate
// Add delegate to this. Delegate should implement $interface.delegate.
// Adds delegate:__d_methods() and delegate:__d_properties() to this.
// TODO: check permissions
// TODO: maybe break this method into multiple sub-methods
// TODO: Should we check with other delegates to see if they will clash?
{delegate} = args;
if (!$interface.delegate:implemented_by(delegate))
  return 0;
endif
methods = delegate:__d_methods();
properties = delegate:__d_properties();
for m in (methods)
  if (m in verbs(this))
    return 0;
  endif
endfor
id = this.__d_id_max = this.__d_id_max + 1;
this.__d_delegates = {@this.__d_delegates, delegate};
this.__d_delegates = {@this.__d_delegates, id};
for m in (methods)
  this:__d_add_proxied_method(m);
endfor
for p in (properties)
  {name, value, info} = p;
  name = "__d_" + tostr(id) + "_" + name;
  add_property(this, name, value, info);
endfor
stormagnet leaves for the west1.
You follow stormagnet.
The Blue Drawing Room
You see nothing special.
stormagnet is here.
stormagnet goes east.
You follow stormagnet.
The Solarium
You see nothing special.
stormagnet is here.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
=> {3, 4}
Verb #269:__d_dispatch_message [6] {this none this} removed.
-----
CALLERS()
=========

Syntax:  callers ([<include-line-numbers>])   => list

Returns information on each of the verbs and built-in functions currently waiting to resume execution in the current task.  When one verb or function calls another verb or function, execution of the caller is temporarily suspended, pending the called verb or function returning a value.  At any given time, there could be several such pending verbs and functions: the one that called the currently executing verb, the verb or function that called that one, and so on.  The result of `callers()' is a list, each element of which gives information about one pending verb or function in the following format:

    {<this>, <verb-name>, <programmer>, <verb-loc>, <player>, <line-number>}

For verbs, <this> is the initial value of the variable `this' in that verb, <verb-name> is the name used to invoke that verb, <programmer> is the player with whose permissions that verb is running, <verb-loc> is the object on which that verb is defined, <player> is the initial value of the variable `player' in that verb, and <line-number> indicates which line of the verb's code is executing.  The <line-number> element is included only if the <include-line-numbers> argument was provided and true.

For functions, <this>, <programmer>, and <verb-loc> are all `#-1', <verb-name> is the name of the function, and <line-number> is an index used internally to determine the current state of the built-in function.  The simplest correct test for a built-in function entry is

    (VERB-LOC == #-1  &&  PROGRAMMER == #-1  &&  VERB-NAME != "")

The first element of the list returned by `callers()' gives information on the verb that called the currently-executing verb, the second element describes the verb that called that one, and so on.  The last element of the list describes the first verb called in this task.

=> {{#-1, "eval", #-1, #-1, #243}, {#243, "eval_cmd_string", #243, #52, #243}, {#243, "eval", #243, #52, #243}}
=> #-1 <$nothing>
=> #243 (Crag)
0 errors.
Verb programmed.
stormagnet . o O ( n:(pulls) %dd into %nld." )
stormagnet has reconnected.
stormagnet leaves for the first western room.
You follow stormagnet.
The Blue Drawing Room
You see nothing special.
stormagnet is here.
stormagnet goes west.
You follow stormagnet.
The Red Drawing Room
You see nothing special.
stormagnet is here.
stormagnet goes south.
You follow stormagnet.
The Drawing Room Doorway
You see nothing special.
stormagnet is here.
stormagnet goes south.
You follow stormagnet.
The East Foyer
A corrider running east. A bank of double doors lead south, while to the north are three sets of double doors. At its far end, the corridor turns.  
stormagnet is here.
stormagnet goes west.
You follow stormagnet.
The East Hall
A long and echoing gallery lying to the east of Great Hall. To the north and south, sweeping marble staircases spiral up the corner towers. To the west, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium. A broad marble archway opens onto a corridor to the east. Towards the southern end of the Hall, a small flight of stone steps lead up to a door, halfway up the wall.

stormagnet is here.
stormagnet goes north.
You follow stormagnet.
The Northeast Tower
You see nothing special.
stormagnet is here.
stormagnet goes west.
You follow stormagnet.
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaise longues sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
stormagnet is here.
stormagnet goes north.
You follow stormagnet.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  The tracery windows are carved into the northern wall.
You see Wind-Up Duck and a How $staff will notice people rummaging here.
stormagnet is here.
stormagnet goes south.
You follow stormagnet.
The Great Hall
What was once a medieval hall is now a long and echoing gallery. To the east and west, sweeping marble staircases spiral up the corner towers. To the south, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium.  A series of pillars run the length of the Great Hall.  Some chaise longues sit under the windows.  A pair of demi-lune tables bracket the chaise longues.
stormagnet is here.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sun Apr 28 18:25:38 2013 PDT by Crag (#243).
#269:"__d_proxied_methods" this none this
// This method proxies for delegates. Their methods are added as aliases for this one.
// When a call comes in, all delegates are given a chance to respond to the message.
// TODO: figure out correct permissions stuff
match = this:__d_match_message(verb, args, callers());
return match[1]:(match[2])(@match[3..$]);
#269:"__d_match_message" ()
That verb has not been programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#269:__d_proxied_methods this none this" name: "MOO verb: #269:__d_proxied_methods this none this" type: moo-code content*: "" _data-tag: 1846411770220
#$#* 1846411770220 content: // This method proxies for delegates. Their methods are added as aliases for this one.
#$#* 1846411770220 content: // When a call comes in, all delegates are given a chance to respond to the message.
#$#* 1846411770220 content: // TODO: figure out correct permissions stuff
#$#* 1846411770220 content: match = this:__d_match_message(verb, args, callers());
#$#* 1846411770220 content: return match[1]:(match[2])(@match[3..$]);
#$#: 1846411770220
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
.__d_delegates           Crag (#243)           r c    {}
.__d_delegate_ids        Crag (#243)           r c    {}
.__d_id_max              Crag (#243)           r c    0
-------------------------------- finished ---------------------------------
Your current object is now #270.
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
RAISE()
=======

Syntax:  raise (<code> [, str <message> [, <value>]])   => none

Raises <code> as an error in the same way as other MOO expressions, statements, and functions do.  <Message>, which defaults to the value of `tostr(<code>)', and <value>, which defaults to zero, are made available to any `try'-`except' statements that catch the error.  If the error is not caught, then <message> will appear on the first line of the traceback printed to the user.

=> "#1"
0 errors.
Verb programmed.
Your current object is now #269.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb #269:__d_match_message [3] {this none this} removed.
Verb #269:__d_template_command [5] {this none this} removed.
Verb #269:__d_template_method [5] {this none this} removed.
#269:"__d_add_proxied_method" ()
That verb has not been programmed.
That is not a valid command.
That is not a valid command.
Verb added [10] (9).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#269:__d_add_proxied_method ()" name: "MOO verb: #269:__d_add_proxied_method ()" type: moo-code content*: "" _data-tag: 393237183221
#$#: 393237183221
Last modified Sun Apr 28 17:05:51 2013 PDT by Crag (#243).
#269:"__d_add_delegate" this none this
// :__d_add_delegate(delegate)
//   => raises errors on failure, otherwise returns id of delegate
// Add delegate to this. Delegate should implement $interface.delegate.
// Adds delegate:__d_methods() and delegate:__d_properties() to this.
// TODO: check permissions
// TODO: maybe break this method into multiple sub-methods
// TODO: Should we check with other delegates to see if they will clash?
{delegate} = args;
if (!$interface.delegate:implemented_by(delegate))
  return 0;
endif
methods = delegate:__d_methods();
properties = delegate:__d_properties();
for m in (methods)
  if (m in verbs(this))
    return 0;
  endif
endfor
id = this.__d_id_max = this.__d_id_max + 1;
this.__d_delegates = {@this.__d_delegates, delegate};
this.__d_delegates = {@this.__d_delegates, id};
for m in (methods)
  this:__d_add_proxied_method(m);
endfor
for p in (properties)
  {name, value, info} = p;
  name = "__d_" + tostr(id) + "_" + name;
  add_property(this, name, value, info);
endfor
-----
VERB_INFO()
===========

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

-----
VERB_INFO()
===========

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_method    Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sun Apr 28 17:05:51 2013 PDT by Crag (#243).
#269:"__d_add_delegate" this none this
// :__d_add_delegate(delegate)
//   => raises errors on failure, otherwise returns id of delegate
// Add delegate to this. Delegate should implement $interface.delegate.
// Adds delegate:__d_methods() and delegate:__d_properties() to this.
// TODO: check permissions
// TODO: maybe break this method into multiple sub-methods
// TODO: Should we check with other delegates to see if they will clash?
{delegate} = args;
if (!$interface.delegate:implemented_by(delegate))
  return 0;
endif
methods = delegate:__d_methods();
properties = delegate:__d_properties();
for m in (methods)
  if (m in verbs(this))
    return 0;
  endif
endfor
id = this.__d_id_max = this.__d_id_max + 1;
this.__d_delegates = {@this.__d_delegates, delegate};
this.__d_delegates = {@this.__d_delegates, id};
for m in (methods)
  this:__d_add_proxied_method(m);
endfor
for p in (properties)
  {name, value, info} = p;
  name = "__d_" + tostr(id) + "_" + name;
  add_property(this, name, value, info);
endfor
=> {#243, "rxd", "__d_proxied_methods"}
-----
INDEX()
=======

Syntax:  index (str <str1>, str <str2> [, <case-matters>])   => int
        rindex (str <str1>, str <str2> [, <case-matters>])   => int

The function `index()' (`rindex()') returns the index of the first character of the first (last) occurrence of <str2> in <str1>, or zero if <str2> does not occur in <str1> at all.  By default the search for an occurrence of <str2> is done while ignoring the upper/lower case distinction.  If <case-matters> is provided and true, then case is treated as significant in all comparisons.

    index("foobar", "o")        =>   2
    rindex("foobar", "o")       =>   3
    index("foobar", "x")        =>   0
    index("foobar", "oba")      =>   3
    index("Foobar", "foo", 1)   =>   0

-----
ERRORS
======

The complete list of error codes:

    E_NONE         No error
    E_TYPE         Type mismatch
    E_DIV          Division by zero
    E_PERM         Permission denied
    E_PROPNF       Property not found
    E_VERBNF       Verb not found
    E_VARNF        Variable not found
    E_INVIND       Invalid indirection
    E_RECMOVE      Recursive move
    E_MAXREC       Too many verb calls
    E_RANGE        Range error
    E_ARGS         Incorrect number of arguments
    E_NACC         Move refused by destination
    E_INVARG       Invalid argument
    E_QUOTA        Resource limit exceeded
    E_FLOAT        Floating-point arithmetic error

-----
SET_VERB_INFO()
===============

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

0 errors.
Verb programmed.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_method    Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#269:"__d_get_prop" ()
That verb has not been programmed.
Last modified Sun Apr 28 17:05:51 2013 PDT by Crag (#243).
#269:"__d_add_delegate" this none this
// :__d_add_delegate(delegate)
//   => raises errors on failure, otherwise returns id of delegate
// Add delegate to this. Delegate should implement $interface.delegate.
// Adds delegate:__d_methods() and delegate:__d_properties() to this.
// TODO: check permissions
// TODO: maybe break this method into multiple sub-methods
// TODO: Should we check with other delegates to see if they will clash?
{delegate} = args;
if (!$interface.delegate:implemented_by(delegate))
  return 0;
endif
methods = delegate:__d_methods();
properties = delegate:__d_properties();
for m in (methods)
  if (m in verbs(this))
    return 0;
  endif
endfor
id = this.__d_id_max = this.__d_id_max + 1;
this.__d_delegates = {@this.__d_delegates, delegate};
this.__d_delegates = {@this.__d_delegates, id};
for m in (methods)
  this:__d_add_proxied_method(m);
endfor
for p in (properties)
  {name, value, info} = p;
  name = "__d_" + tostr(id) + "_" + name;
  add_property(this, name, value, info);
endfor
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_method    Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#269:__d_get_prop ()" name: "MOO verb: #269:__d_get_prop ()" type: moo-code content*: "" _data-tag: 780317746222
#$#: 780317746222
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#269:__d_set_prop ()" name: "MOO verb: #269:__d_set_prop ()" type: moo-code content*: "" _data-tag: 34300700223
#$#: 34300700223
Last modified Mon Apr 29 03:41:22 2013 PDT by Crag (#243).
#269:"__d_get_prop" this none this
// :__d_get_prop(id, name) => value || E_PROPNF
return this.("__d_" + tostr(id) + "_" + name);
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#269:__d_set_prop this none this" name: "MOO verb: #269:__d_set_prop this none this" type: moo-code content*: "" _data-tag: 279085460224
#$#* 279085460224 content: // :__d_set_prop(id, name, value) => old_value || E_PROPNF
#$#* 279085460224 content: {id, name, value} = args;
#$#* 279085460224 content: pname = "__d_" + tostr(id) + "_" + name;
#$#* 279085460224 content: old_value = this.(pname);
#$#* 279085460224 content: this.(pname) = value;
#$#* 279085460224 content: return old_value;
#$#: 279085460224
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#269:__d_get_prop this none this" name: "MOO verb: #269:__d_get_prop this none this" type: moo-code content*: "" _data-tag: 1818381549225
#$#* 1818381549225 content: // :__d_get_prop(id, name) => value || E_PROPNF
#$#* 1818381549225 content: return this.("__d_" + tostr(id) + "_" + name);
#$#: 1818381549225
0 errors.
Verb programmed.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_method    Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Mon Apr 29 03:42:58 2013 PDT by Crag (#243).
#269:"__d_set_prop" this none this
// :__d_set_prop(id, name, value) => old_value || E_PROPNF
{id, name, value} = args;
pname = "__d_" + tostr(id) + "_" + name;
old_value = this.(pname);
this.(pname) = value;
return old_value;
That is not a valid command.
Category  Command            Used for
--------  -------            --------
edit      @edit-options      the editors
mail      @mail-options      the mail system
who       @who-options       the @who command
misc      @misc-options      assorted preferences
client    @client-options    client capabilities
parse     @parse-options     command parsing
building  @building-options  options for building
list      @list-options      the @list command
display   @display-options   the @display command
eval      @eval-options      the eval command
--------  -------            --------
Current list options:

-parentheses        Parenthesize expressions in listings only as needed.
+nonumbers          Omit line numbers.
+//-comments        Display comment lines with //
-args-assignment    Suppress assignment of args; do named-arg extraction
+args-assignment    Show assignment of args; no named-arg extraction
Last modified Mon Apr 29 03:42:58 2013 PDT by Crag (#243).
#269:"__d_set_prop" this none this
// :__d_set_prop(id, name, value) => old_value || E_PROPNF
{id, name, value} = args;
pname = "__d_" + tostr(id) + "_" + name;
old_value = this.(pname);
this.(pname) = value;
return old_value;
-----
@LIST-OPTIONS
=============

Syntax:  @list-option
         @list-option <option>

Synonym:  @listoption

The list options customize the behavior of the @list command to your particular taste.  The first form of this command displays all of your display options.  The second form displays just that one option, one of the flags listed below.

The remaining forms of this command are for setting your list options:

         @list-option +<flag>
         @list-option -<flag>
         @list-option !<flag>           (equivalent to -<flag>)

These respectively set and reset the specified flag

-parentheses       Parenthesize expressions in listings only as needed.
+parentheses       Fully parenthesize expressions in listings.
-nonumbers         Include line numbers.
+nonumbers         Omit line numbers.
-//_comments       Don't mangle comments in verb code
+//_comments       Display comment lines with //
-args_assignment   Suppress assignment of args; do named-arg extraction
+args_assignment   Show assignment of args; no named-arg extraction

The option `numbers' is recognized as being the negation of `nonumbers'.

-args-assignment    Suppress assignment of args; do named-arg extraction
-----
@PROGRAM
========

Syntax:  @program <object>:<verb-name>
         @program <object>:<verb-name> <dobj> <preposition> <iobj>
         @program <object>:<verb-name> (<named args>)
         @program# <object>:<verb-number>

Changes the MOO program associated with the named verb on the named object.

If you provide <dobj> <preposition> and <iobj> as in the second form of this command, then it is the first verb with matching direct object, preposition and indirect object specifiers that is the one getting the new program.  This is useful if you have several verbs matching the same name.

In the third form of the command, the verb changed will be the first `this none this' verb, provided its named arguments match those currently set for that verb.

In the fourth form of the command, the verb is specified by number; 1 programs the first verb, 2 programs the second verb, etc...  This is useful if you have inaccessibly-named verbs (e.g., the 3rd verb on an object is named "*" and you want to change the code on the 4th).

Typing the @program command always puts the server into a line-reading mode, in which each line you type is saved away without any action unless said line is one of the following:

  .
  @abort
  .<text>

A period on a line by itself ends the line-reading mode and continues with the command, in this case, the saved lines are considered as a program, checked for syntax errors and, if no errors are found, installed as the new program for the specified verb.  

@abort causes the command to terminate immediately with no change to any verb's program.  .<text> enters <text> literally as one of the lines to be saved, which is used for when, e.g., you want to enter the line `.' or the line `@abort'.

Note that this command *always* enters the line-reading mode, even if the indicated verb is not found.  In this case, lines of text are still read but they are ignored.  After any @program command, you always need to type a period or `@abort' to get back into the normal command-reading mode.

-----
@LIST
=====

Usage:  @list <object>:<verb>
              [with|without parentheses|numbers]
              [<dobj> <prep> <iobj>] | [(<named args>)]
              [all]
              [ranges]
        @list# <object>:<verb-number>
              [with|without parentheses|numbers] [all] [ranges]

Prints out the code for the MOO program associated with the named verb on the named object.  

Normally, the code is shown with each line numbered and with only those parentheses that are necessary to show the meaning of the program.  You can e.g., specify `without numbers' to have the numbers omitted or `with parentheses' to include all parentheses or even `with parentheses without numbers' to do both.

Type `@list $room:@move' to see the code for the `@move' command, or even `@list $prog:@list' to see the code implementing @list itself...

Giving an args (dobj/prep/iobj) specification indicates that verbs whose verb_args do not matching that specification are to be ignored.

The `@list#' form of the command is available for specifying a verb by number, in case you have an object with inaccessible verbs (e.g,. say the 3rd verb is named "*" and you want to view the 4th).  For example

    @list# object:2

lists the second verb on `object'.

Specifying `all', indicates that all verbs on <object> or its ancestors matching the given name (and args specification, if given) should be listed.

One may also specify one or more ranges of the form <number>..<number> to indicate that only particular subranges of the lines of the verb code should be listed.

These may combined in any order, e.g.,

  @list frobule:burfle this in front of any without numbers all

which would be useful if `frobule' had more than one `burfle' verb and we are only interested in those that have `this' `in front of' `any' as its respective dobj/prep/iobj specifiers, and we want to see ALL such verbs on frobule or its ancestors.

Object #243 does not define that verb, but its ancestor #52 does.
Last modified Fri Jul 28 13:26:18 2000 PDT by Xeric (#999) (on Waterpoint).
#52:"@list*#" any any any
// @list <obj>:<verb> [<dobj> <prep> <iobj>] [with(out) parens|numbers] [ranges] [all]
set_task_perms(player);
bynumber = verb == "@list#";
pflag = this:list_option("parentheses");
nflag = !this:list_option("nonumbers");
do_args_flag = !this:list_option("args_assignment");
aflag = 0;
argspec = {};
range = {};
spec = args ? $code_utils:parse_verbref(args[1]) | E_INVARG;
args = spec ? listdelete(args, 1) | E_INVARG;
while (args)
  if (args[1] && (index("without", args[1]) == 1 || args[1] == "wo"))
    // ...w,wi,wit,with => 1; wo,witho,withou,without => 0...
    fval = !index(args[1], "o");
    if (length(args) < 2)
      player:notify(tostr(fval ? "With" | "Without", " what?"));
      args = E_INVARG;
    elseif (index("parentheses", args[2]) == 1)
      pflag = fval;
      args[1..2] = {};
    elseif (index("numbers", args[2]) == 1)
      nflag = fval;
      args[1..2] = {};
    else
      player:notify(tostr(fval ? "With" | "Without", " WHAT?"));
      args = E_INVARG;
    endif
  elseif (index("all", args[1]) == 1)
    if (bynumber)
      player:notify("Don't use `all' with @list#.");
      args = E_INVARG;
    else
      aflag = 1;
      args[1..1] = {};
    endif
  elseif (index("0123456789", args[1][1]) || index(args[1], "..") == 1)
    if (E_INVARG == (s = $seq_utils:from_string(args[1])))
      player:notify(tostr("Garbled range:  ", args[1]));
      args = E_INVARG;
    else
      range = $seq_utils:union(range, s);
      args = listdelete(args, 1);
    endif
  elseif (bynumber)
    player:notify("Don't give args with @list#.");
    args = E_INVARG;
  elseif (argspec)
    // ... second argspec?  Not likely ...
    player:notify(tostr(args[1], " unexpected."));
    args = E_INVARG;
  elseif (typeof(pas = $code_utils:parse_argspec(@args)) == LIST)
    argspec = pas[1][1..3];
    argspec[2] = $code_utils:full_prep(argspec[2]) || argspec[2];
    args = pas[2];
  else
    // ... argspec is bogus ...
    player:notify(tostr(pas));
    args = E_INVARG;
  endif
endwhile
if (args == E_INVARG)
  if (bynumber)
    player:notify(tostr("Usage:  ", verb, " <object>:<verb> [with|without parentheses|numbers] [ranges]"));
  else
    player:notify(tostr("Usage:  ", verb, " <object>:<verb> [<dobj> <prep> <iobj>] [with|without parentheses|numbers] [all] [ranges]"));
  endif
  return;
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
  return;
endif
shown_one = 0;
what = object;
vloc = 0;
while (1)
  // ... find the next verb...
  if (bynumber)
    vloc = $code_utils:tonum(spec[2]);
    if (vloc == E_TYPE)
      player:notify("Verb number expected.");
      return;
    elseif (vloc < 1 || `vloc > length(verbs(what)) ! E_PERM => 0')
      player:notify("Verb number out of range.");
      return;
    endif
  else
    while ((vloc = $code_utils:find_verb_named_1_based(what, spec[2], vloc + 1)) ? argspec && `verb_args(what, vloc) != argspec ! E_PERM => 1' | valid(what = parent(what)))
    endwhile
  endif
  if (!vloc)
    if (!shown_one)
      player:notify(tostr("That object does not define that verb", argspec ? " with those args." | "."));
    endif
    return;
  endif
  if (shown_one)
    player:notify("");
  elseif (!aflag && what != object)
    player:notify(tostr("Object ", object, " does not define that verb", argspec ? " with those args" | "", ", but its ancestor ", what, " does."));
  endif
  shown_one = 1;
  try
    code = verb_code(what, vloc, pflag);
  except e (ANY)
    player:notify(tostr("Verb ", vloc, " on ", what, " -- ", e[2]));
    if (aflag)
      continue;
    else
      return;
    endif
  endtry
  info = verb_info(what, vloc);
  vargs = verb_args(what, vloc);
  if (lastmodify = $metadata_item($verb_metadata(what, vloc), "Last-Modify"))
    {m_when, ?m_name = m_who:dname(), m_who, ?m_moo = $network.moo_name} = lastmodify[2];
    modify_string = tostr("Last modified ", ctime(m_when), " by ", m_name, " (", m_who, ")", m_moo == $network.moo_name ? "" | " (on " + m_moo + ")", ".");
  else
    modify_string = "";
  endif
  if (index(vargs[2], "/"))
    vargs[2] = tostr("(", vargs[2], ")");
  endif
  if (vargs == {"this", "none", "this"} && (do_args_flag && (named = $code_utils:named_args_from_code(code))))
    vargstr = tostr("(", $code_utils:named_args_list(named), ")");
    firstarg = length($code_utils:split_verb_code(code)[1]) + 1;
    lastarg = firstarg + length(named[1]) - 1 + (named[2] ? 1 | 0);
  else
    vargstr = $string_utils:from_list(vargs, " ");
    firstarg = lastarg = 0;
  endif
  if (modify_string)
    player:notify(modify_string);
  endif
  player:notify(tostr(what, ":", $string_utils:print(info[3]), " ", vargstr));
  code = this:verbcode_internal_to_external(code);
  lineseq = $seq_utils:range(1, length(code));
  range && (lineseq = $seq_utils:intersection(range, lineseq));
  if (code == {})
    player:notify("That verb has not been programmed.");
  elseif (!lineseq)
    player:notify("No lines in that range.");
  else
    for k in [1..length(lineseq) / 2]
      for i in [lineseq[2 * k - 1]..lineseq[2 * k] - 1]
        if (range || i < firstarg || i > lastarg)
          if (nflag)
            player:notify(tostr(" "[1..i < 10], i, ":  ", code[i]));
          else
            player:notify(code[i]);
          endif
        endif
        $command_utils:suspend_if_needed(0);
      endfor
    endfor
  endif
  if (!aflag)
    return;
  endif
endwhile
return;
code utilities (#53) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #53:eval_d                   Core-Wizard (#184)   rxd    this none this
   #53:1                        Core-Wizard (#184)   rx     this none this
   #53:tonum                    unknown hacker (#35) rxd    this none this
   #53:toobj                    unknown hacker (#35) rxd    this none this
   #53:toerr                    unknown hacker (#35) rxd    this none this
   #53:error_name               unknown hacker (#35) rxd    this none this
   #53:show_object              Core-Wizard (#184)   rx     this none this
   #53:show_property            Core-Wizard (#184)   rx     this none this
   #53:show_verbdef             Core-Wizard (#184)   rxd    this none this
   #53:explain_verb_syntax      Core-Wizard (#184)   rxd    this none this
   #53:"verb_p*erms verb_permi*ssions" Core-Wizard (#184) rxd this none this
   #53:verb_loc*ation           unknown hacker (#35) rxd    this none this
   #53:verb_documentation       Core-Wizard (#184)   rxd    this none this
   #53:set_verb_documentation   Core-Wizard (#184)   rxd    this none this
   #53:parse_propref            Core-Wizard (#184)   rxd    this none this
   #53:parse_verbref            Core-Wizard (#184)   rxd    this none this
   #53:parse_argspec            unknown hacker (#35) rxd    this none this
   #53:prepositions             unknown hacker (#35) rxd    this none this
   #53:short_prep               unknown hacker (#35) rxd    this none this
   #53:full_prep                unknown hacker (#35) rxd    this none this
   #53:get_prep                 unknown hacker (#35) rxd    this none this
   #53:_fix_preps               unknown hacker (#35) rx     this at/to this
   #53:"find_verb_named find_verb_named_0_based" Core-Wizard (#184) rx this none this
   #53:"find_last_verb_named find_last_verb_named_0_based" Core-Wizard (#184) rx this none this
   #53:"find_callable_verb_named find_callable_verb_named_0_based" Core-Wizard (#184) rx this none this
   #53:verbname_match(new)      unknown hacker (#35) rxd    this none this
   #53:find_verbs_containing    Core-Wizard (#184)   rxd    this none this
   #53:_find_verbs_containing   Core-Wizard (#184)   rx     this none this
   #53:find_verbs_matching      Core-Wizard (#184)   rxd    this none this
   #53:_find_verbs_matching     Core-Wizard (#184)   rx     this none this
   #53:_grep_verb_code          Core-Wizard (#184)   rxd    this none this
   #53:_egrep_verb_code         Core-Wizard (#184)   rxd    this none this
   #53:_parse_audit_args        unknown hacker (#35) rxd    this none this
   #53:help_db_list             Core-Wizard (#184)   rx     this none this
   #53:help_db_search           unknown hacker (#35) rx     this none this
   #53:corify_object            unknown hacker (#35) rx     this none this
   #53:substitute               Core-Wizard (#184)   rxd    this none this
   #53:inside_quotes            Core-Wizard (#184)   rxd    this none this
   #53:verb_or_property         Core-Wizard (#184)   rx     this none this
   #53:task_valid               Core-Wizard (#184)   rx     this none this
   #53:task_owner               Core-Wizard (#184)   rxd    this none this
   #53:argstr                   Core-Wizard (#184)   rxd    this none this
   #53:verbname_match           unknown hacker (#35) rxd    this none this
   #53:show_who_listing         Core-Wizard (#184)   rx     this none this
   #53:_egrep_verb_code_all     Core-Wizard (#184)   rxd    this none this
   #53:_grep_verb_code_all      Core-Wizard (#184)   rxd    this none this
   #53:standard_set_property    Core-Wizard (#184)   r d    this none this
   #53:verb_usage               Core-Wizard (#184)   rx     this none this
   #53:connected_players        unknown hacker (#35) rxd    this none this
   #53:players                  unknown hacker (#35) rxd    this none this
   #53:safe_eval                unknown hacker (#35) rxd    this none this
   #53:verb_frame               unknown hacker (#35) rxd    this none this
   #53:verb_all_frames          unknown hacker (#35) rxd    this none this
   #53:parse_named_args         unknown hacker (#35) rxd    this none this
   #53:split_verb_code          unknown hacker (#35) rxd    this none this
   #53:named_args_to_usage      unknown hacker (#35) rxd    this none this
   #53:commentify               unknown hacker (#35) rxd    this none this
   #53:uncommentify             Core-Wizard (#184)   rxd    this none this
   #53:named_args_list          unknown hacker (#35) rxd    this none this
   #53:named_args_from_code     unknown hacker (#35) rxd    this none this
   #53:named_args_to_code       unknown hacker (#35) rxd    this none this
   #53:gensym                   unknown hacker (#35) rxd    this none this
   #53:"verbs verbs_as_nobody"  Core-Wizard (#184)   rxd    this none this
   #53:rename_property          Core-Wizard (#184)   rxd    this none this
   #53:format_traceback         unknown hacker (#35) rxd    this none this
   #53:_format_traceback_frame  unknown hacker (#35) rxd    this none this
   #53:find_verb_named_1_based  Core-Wizard (#184)   rxd    this none this
   #53:find_last_verb_named_1_based Core-Wizard (#184) rxd  this none this
   #53:find_callable_verb_named_1_based Core-Wizard (#184) rxd this none this
   #53:callers_before_pass      unknown hacker (#35) rxd    this none this
   #53:frame_before_pass        unknown hacker (#35) rx     this none this
   #53:caller_before_pass       unknown hacker (#35) rx     this none this
   #53:caller_perms_before_pass unknown hacker (#35) rx     this none this
   #53:disassemble_code         unknown hacker (#35) rxd    this none this
   #53:check_syntax             unknown hacker (#35) rxd    this none this
   #53:init_for_core            Core-Wizard (#184)   rxd    this none this
   #53:_verb_code_temporary     unknown hacker (#35)        this none this
-------------------------------- finished ---------------------------------
-----
GENERAL INFORMATION ON $CODE_UTILS[1]
=====================================

parse_propref("foo.bar")  => {"foo","bar"} (or 0 if arg. isn't a property ref.)
parse_verbref("foo:bar")  => {"foo","bar"} (or 0 if arg. isn't a verb ref.)
parse_argspec("any","in","front","of","this","baz"...)
                          => {{"any", "in front of", "this"},{"baz"...}} 
                                           (or string if args don't parse)

tonum(string)           => number (or E_TYPE if string is not a number)
toobj(string)           => object (or E_TYPE if string is not an object)
toerr(number or string) => error value (or 1 if out of range or unrecognized)
error_name(error value) => name of error (e.g., error_name(E_PERM) => "E_PERM")

verb_perms()    => the current task_perms (as set by set_task_perms()).
verb_location() => the object where the current verb is defined.
verb_documentation([object,verbname]) => documentation at beginning of
           verb code, if any -- default is the calling verb

check_syntax(lines) => what set_verb_code() would return for the source in lines
disassemble_code(lines) => {1, disassemble() results} or {0, set_verb_code() results}

   Preposition routines

prepositions()     => full list of prepostions
full_prep ("in")   => "in/inside/into"
short_prep("into") => "in"
short_prep("in/inside/into") => "in"
get_prep  ("off", "of", "the", "table") => {"off of", "the", "table"}

   Verb routines

verbname_match (fullname,name) => can `name' be used to call `fullname'
find_verb_named          (object,name[,n]) => verb number or -1 if not found
find_callable_verb_named (object,name[,n]) => verb number or -1 if not found
find_verbs_containing (pattern[,object|objlist])

verbs(object) => (partial) list of verbs on the object

   Verbs that do the actual dirty work for @show:

show_object  (object)
show_property(object,propname)
show_verbdef (object,verbname)

   Dirty work for explain_syntax

explain_verb_syntax(thisname,verbname,@verbargs)

   A random but useful verb

verb_or_property(object,name[,@args]) => result of verb or property call,
                                         or E_PROPNF

   Player manipulation:
connected_players()   =>   returns all actual players connected
players()             =>   returns all actual players

   Regular Expressions for parsing code
no_open_quotes_regexp => a regexp that matches a moo-code line with all strings properly closed

stormagnet goes west.
You follow stormagnet.
The Northwest Tower
You see nothing special.
stormagnet is here.
stormagnet goes south.
You follow stormagnet.
The West Hall
A long and echoing gallery lying to the west of Great Hall. To the north and south, sweeping marble staircases spiral up the corner towers. To the east, glass french doors alternate with elaborate tracery windows, opening out onto the Atrium. A broad marble archway opens onto a corridor to the west.
stormagnet is here.
stormagnet goes west.
You follow stormagnet.
The West Foyer
A long corrider running west, with a turn leading away to the south. Two sets of double doors bracket the northern wall, while three sets of double doors are spaced out evenly along the southern side. At the far end of the foyer, a final pair of double doors lead east.
stormagnet is here.
stormagnet leaves for the first northern room.
You follow stormagnet.
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  Across the room, some settee are drawn up in a semi-circle around a tea table.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the doors to the foyer.
stormagnet is here.
stormagnet picks up the settee.
stormagnet drops some settee.
stormagnet opens the left cabinet.
stormagnet closes the left cabinet.
stormagnet drops an armchair.
stormagnet drops a front parlour fireplace.
stormagnet drops a mirror.
stormagnet puts the tile in the hearth.
stormagnet puts the hearth in the front parlour fireplace.
stormagnet puts the pier glass in the front parlour fireplace.
The mirror disappears suddenly for parts unknown, moved by stormagnet.
stormagnet removes a pier glass from the front parlour fireplace.
stormagnet drops a pier glass.
stormagnet says, "ffffffffffff"
stormagnet says, "gaaaaaaaaa flipping whhhhhhhyyyyyy"
stormagnet stabs $mirror
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of generic thing (#5).
  #565:look                     stormagnet (#246)    r d    none in/inside/into this
-------------------------------- finished ---------------------------------
The mirror(#565) has 1 kid.
pier glass (#567)
Last modified Mon Apr 29 20:01:14 2013 PDT by stormagnet (#246).
#565:"look" none (in/inside/into) this
player:tell($string_utils:pronoun_sub(this.reflection_msg, $you));
player:location():announce_all_but({player}, $string_utils:pronoun_sub(this.oreflection_msg));
Verb name changed.
#1:"description" this none this
// Always return a list.
// (I've been wanting to do this for a long time.)
if (desc = this.description)
  if (typeof(desc) == LIST)
    return desc;
  else
    return {desc};
  endif
else
  return {};
endif
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of generic thing (#5).
-------------------------------- finished ---------------------------------
mirror (#565)   generic thing (#5)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
    #1:description              unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
The verb :look_self is on   Crag(#243)--generic player(#6)   Front Parlour(#398)--generic room(#3)   front parlour floor(#513)--root class(#1)   front parlour ceiling(#515)--generic containing object(#145)   oriental rug(#516)--root class(#1)   tea table(#506)--generic containing object(#145)   walls(#519)--generic containing object(#145)   bureau a gradin(#543)--generic containing object(#145)   desk chair(#548)--root class(#1)   sideboard(#549)--generic containing object(#145)   stormagnet(#246)--generic player(#6)   settee(#517)--root class(#1)   armchair(#505)--root class(#1)   front parlour fireplace(#507)--generic containing object(#145)   pier glass(#567)--root class(#1)   Group Utilities(#248)--root class(#1)   MCP parent(#251)--root class(#1)   Parsing objects(#252)--root class(#1)   Text generation objects(#253)--root class(#1)   Abstract class(#254)--root class(#1)   Generic Nesting Decoration(#265)--generic containing object(#145)   Delegator(#269)--root class(#1)   Delegate(#270)--root class(#1)   New Generic Room(#271)--root class(#1)   Room Exit Delegate(#279)--root class(#1)   Generic Input Handler(#509)--root class(#1)   Generic Command Handler(#510)--root class(#1)   Beaker's Commands(#511)--root class(#1)   Generic Command(#531)--root class(#1)   Generic English Command(#532)--root class(#1)   Grouping Command(#533)--root class(#1)   microphone(#282)--root class(#1)   Cardgame Feature(#558)--Generic Feature Object(#65)   Interface(#561)--root class(#1)   Class(#562)--root class(#1)   Stage-Talk Feature(#67)--Generic Feature Object(#65)   Thinking Feature(#68)--Generic Feature Object(#65)   login watcher mark 2(#83)--Generic Feature Object(#65)
Generic Nesting Decoration (#265)   generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
    #1:look_self                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
#1:"look_self" this none this
desc = this:description(@args);
if (desc)
  player:tell_lines(desc);
else
  player:tell("You see nothing special.");
endif
Last modified Mon Apr 29 20:01:14 2013 PDT by stormagnet (#246).
#565:"look(stormagnet)" none (in/inside/into) this
player:tell($string_utils:pronoun_sub(this.reflection_msg, $you));
player:location():announce_all_but({player}, $string_utils:pronoun_sub(this.oreflection_msg));
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of generic thing (#5).
  #565:look(stormagnet)         stormagnet (#246)    r d    none in/inside/into this
-------------------------------- finished ---------------------------------
Verb added [2] (1).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#565:description ()" name: "MOO verb: #565:description ()" type: moo-code content*: "" _data-tag: 283926825232
#$#: 283926825232
0 errors.
Verb programmed.
Verb added [3] (2).
That object does not define that verb.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#565:reflection ()" name: "MOO verb: #565:reflection ()" type: moo-code content*: "" _data-tag: 1681286791233
#$#: 1681286791233
@integrate_room $mirror isn't set.
@integrate_player $mirror isn't set.
@integrate_container $mirror isn't set.
@drop_failed $mirror is "You can't seem to drop %td here."
@drop_succeeded $mirror is "You drop %td."
@odrop_failed $mirror is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded $mirror is "%n:(drops) %ti."
@otake_succeeded $mirror is "%n:(picks) up %td."
@otake_failed $mirror isn't set.
@take_succeeded $mirror is "You take %td."
@take_failed $mirror is "You can't pick up %td."
@reflection $mirror is "%Nd %n:(see) %%tLc reflected back."
@oreflection $mirror is "%Nd %n:(gazes) into %td."
0 errors.
Verb programmed.
#565:description (this == #567), line 1:  Type mismatch
... called from #1:look_self (this == #567), line 1
... called from #3:l*ook (this == #398), line 13
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#565:description this none this" name: "MOO verb: #565:description this none this" type: moo-code content*: "" _data-tag: 1116710891234
#$#* 1116710891234 content: return {@pass(@args), @this:reflection()};
#$#: 1116710891234
0 errors.
Verb programmed.
An enormous gilt-framed mirror stretches the width of the mantle, and reaches all the way up to the picture rail above.
You see %tLc reflected back.
You set the "reflection" message of the mirror (#565).
You set the "reflection" message of the mirror (#565).
An enormous gilt-framed mirror stretches the width of the mantle, and reaches all the way up to the picture rail above.
You see %tLc reflected back.
Generic See-through Portal (#540) [ readable ]
  Child of generic door (#121).
  #540:initialize               Crag (#243)          rxd    this none this
  #540:notice_chparent          Crag (#243)          rxd    this none this
  #540:init_portal              Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Object #540 does not define that verb, but its ancestor #121 does.
#121:"description" this none this
desc = pass(@args);
what = this;
if (desc)
  line = desc[length(desc)];
  if (index(line, this:name()))
    what = this:gender_obj();
  endif
endif
msg = this:((this.open ? "opened" | "closed") + "_msg")(player, what);
if (!msg)
  msg = {};
endif
return {@desc, @typeof(msg) == LIST ? msg | {msg}};
@integrate_room $portal is "The %ti to %td %t:(is) %tx{open 0}."
@integrate_player $portal isn't set.
@integrate_container $portal isn't set.
@nogo $portal isn't set.
@onogo $portal isn't set.
@arrive $portal isn't set.
@oarrive $portal isn't set.
@oleave $portal isn't set.
@leave $portal isn't set.
@nothing $portal is "nothing"
@no_one $portal is "no one"
@through $portal is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $portal is "%Nd %n:(opens) the %ti to %td."
@close $portal is "%Nd %n:(closes) the %ti to %td."
@opened $portal is "%Ti to %td %t:(is) open."
@closed $portal is "%Ti to %td %t:(is) closed."
@locked $portal is "%Ti to %td %t:(is) locked."
@opens $portal is "%Ti to %td %t:(opens) from the other side."
@closes $portal is "%Ti %td %t:(closes) from the other side."
@unlocked $portal is "%Ti %td %t:(is) unlocked."
@lock $portal is "%Nd %n:(locks) the %ti to %td."
@unlock $portal is "%Nd %n:(unlocks) the %ti to %td."
@locks $portal is "You hear the click of the %ti to %td being locked from the other side."
@unlocks $portal is "You hear the click of the %ti to %td being unlocked from the other side."
@knock $portal is "%Nd %n:(knocks) on the %ti to %td."
@knocks $portal is "Someone knocks on the %ti to %td."
@no_key $portal is "You don't have the key for the %ti to %td."
@self_closes $portal is "%Ti to %td %t:(closes)."
@pull $portal is "%Ni %n:(reaches) through the %ti to %td and %n:(pulls) %dd into %nld."
You set the "through" message of the Generic See-through Portal (#540).
stormagnet drops a pier glass.
stormagnet has reconnected.

Object #565 does not define that verb, but its ancestor #121 does.
#121:"description" this none this
desc = pass(@args);
what = this;
if (desc)
  line = desc[length(desc)];
  if (index(line, this:name()))
    what = this:gender_obj();
  endif
endif
msg = this:((this.open ? "opened" | "closed") + "_msg")(player, what);
if (!msg)
  msg = {};
endif
return {@desc, @typeof(msg) == LIST ? msg | {msg}};
Object #179 does not define that verb, but its ancestor #121 does.
#121:"description" this none this
desc = pass(@args);
what = this;
if (desc)
  line = desc[length(desc)];
  if (index(line, this:name()))
    what = this:gender_obj();
  endif
endif
msg = this:((this.open ? "opened" | "closed") + "_msg")(player, what);
if (!msg)
  msg = {};
endif
return {@desc, @typeof(msg) == LIST ? msg | {msg}};
That object does not define that verb.
Object #179 does not define that verb, but its ancestor #121 does.
#121:"opens_msg closes_msg locks_msg unlocks_msg knocks_msg opened_msg closed_msg locked_msg unlocked_msg no_key_msg" this none this
return $string_utils:pronoun_sub(@{this.(verb) || $door.(verb), @args});
stormagnet (#246) contains a Generic Wind-Up Toy (#260), a leather couch (#245), a butler's key (#276), a generic bot (#289), a mantle (#563), a left urn (#569), a right urn (#570), and a mirror_hand (#571).
Object #571 does not define that verb, but its ancestor #121 does.
#121:"description" this none this
desc = pass(@args);
what = this;
if (desc)
  line = desc[length(desc)];
  if (index(line, this:name()))
    what = this:gender_obj();
  endif
endif
msg = this:((this.open ? "opened" | "closed") + "_msg")(player, what);
if (!msg)
  msg = {};
endif
return {@desc, @typeof(msg) == LIST ? msg | {msg}};
mirror_hand (#571)   mirror (#565)   Generic See-through Portal (#540)   generic door (#121)   generic exit (#7)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
@integrate_room #571 is ""
@integrate_player #571 isn't set.
@integrate_container #571 isn't set.
@nogo #571 isn't set.
@onogo #571 isn't set.
@arrive #571 isn't set.
@oarrive #571 isn't set.
@oleave #571 isn't set.
@leave #571 isn't set.
@nothing #571 is "nothing"
@no_one #571 is "no one"
@through #571 is "In %td, you see %n.(description)."
@open #571 is ""
@close #571 is ""
@opened #571 is ""
@closed #571 is ""
@locked #571 is "%Td %t:(is) locked."
@opens #571 is ""
@closes #571 is ""
@unlocked #571 is "%Td %t:(is) unlocked."
@lock #571 is "%Nd %n:(locks) the %ti to %td."
@unlock #571 is "%Nd %n:(unlocks) the %ti to %td."
@locks #571 is ""
@unlocks #571 is ""
@knock #571 is ""
@knocks #571 is ""
@no_key #571 is "You don't have the key for %td."
@self_closes #571 is ""
@pull #571 is "%Ni %n:(reaches) through the %ti to %td and %n:(pulls) %dd into %nld."
@reflection #571 is "%Nd %n:(see) tlc reflected back."
@oreflection #571 is "%Nd %n:(gazes) into %td."
-----
TWO-LETTER-QR
=============

This help text is a quick reference for pronoun_sub format strings.  For explanation, see `help two-letter'[1].

General format:   %<object specifier><information specifier>

Object Specifiers
  %t - this           %d - the dobj     %l - the player location
  %n - the player     %i - the iobj
  Append `l' to refer to that object's location, or `L' for the outermost.
  Append `c' for the contents.
  %x<object specifier>{foo arg1 arg2 ...} is an object specifier meaning
  "call :obj_foo on the specified object, with the given arguments."

Information Specifiers (capitalizable)
  n - the object's name         ("Susan",   "duck",    "king and queen")
  d - definite-article          ("Susan",   "the duck","the king and queen")
  i - indefinite-article        ("Susan",   "a duck",  "a king and queen")
  o  - the objective pronoun    ("her",     "him",     "them")
  p  - possessive adjective     ("her",     "his",     "their")
  q  - possessive pronoun       ("hers",    "his",     "theirs")
  r  - reflexive pronoun        ("herself", "himself", "themselves")
  s  - subjective pronoun       ("she",     "he,       "they")
  'i - indefinite possessive    ("a duck's")
  'd - definite possessive      ("the duck's")
  'n - possessive title         ("duck's")
  #  - the object's number 
  <object specifier>x{foo arg1 arg2 ...} is an information specifier
  meaning "call :sub_foo on the object, with the given arguments."

Verbs, Nouns, Properties (capitalizable)
  :(foos) - conjugate the verb `to foo'
  '(foo)  - pluralize the noun `foo' if necessary
  .(foo)  - the object's `foo' property

Other Substitutions
  %${a,d,i,p} - the {arg,dobj,iobj,prep}str 

a small hand mirror
In the mirror_hand, you see a small hand mirror.
Object #571 does not define that verb, but its ancestor #121 does.
#121:"description" this none this
desc = pass(@args);
what = this;
if (desc)
  line = desc[length(desc)];
  if (index(line, this:name()))
    what = this:gender_obj();
  endif
endif
msg = this:((this.open ? "opened" | "closed") + "_msg")(player, what);
if (!msg)
  msg = {};
endif
return {@desc, @typeof(msg) == LIST ? msg | {msg}};
@integrate_room #571 is ""
@integrate_player #571 isn't set.
@integrate_container #571 isn't set.
@nogo #571 isn't set.
@onogo #571 isn't set.
@arrive #571 isn't set.
@oarrive #571 isn't set.
@oleave #571 isn't set.
@leave #571 isn't set.
@nothing #571 is "nothing"
@no_one #571 is "no one"
@through #571 is "In %td, you see %n.(description)."
@open #571 is ""
@close #571 is ""
@opened #571 is ""
@closed #571 is ""
@locked #571 is "%Td %t:(is) locked."
@opens #571 is ""
@closes #571 is ""
@unlocked #571 is "%Td %t:(is) unlocked."
@lock #571 is "%Nd %n:(locks) the %ti to %td."
@unlock #571 is "%Nd %n:(unlocks) the %ti to %td."
@locks #571 is ""
@unlocks #571 is ""
@knock #571 is ""
@knocks #571 is ""
@no_key #571 is "You don't have the key for %td."
@self_closes #571 is ""
@pull #571 is "%Ni %n:(reaches) through the %ti to %td and %n:(pulls) %dd into %nld."
@reflection #571 is "%Nd %n:(see) tlc reflected back."
@oreflection #571 is "%Nd %n:(gazes) into %td."
You set the "through" message of the mirror_hand (#571).
You set the "through" message of the mirror_hand (#571).
A small hand mirror.
In the mirror_hand, you see mirror_hand.
You set the "through" message of the mirror_hand (#571).
Object #571 does not define that verb, but its ancestor #121 does.
#121:"knock_msg open_msg close_msg lock_msg unlock_msg self_closes_msg" this none this
return this.(verb) || $door.(verb);
Object #571 does not define that verb, but its ancestor #121 does.
#121:"opens_msg closes_msg locks_msg unlocks_msg knocks_msg opened_msg closed_msg locked_msg unlocked_msg no_key_msg" this none this
return $string_utils:pronoun_sub(@{this.(verb) || $door.(verb), @args});
Searching for verbs through $exit containing the string "through $exit" ...


Total: 0 verbs.
Searching for verbs through $portal containing the string "through $portal" ...


Total: 0 verbs.
Searching for verbs through $door containing the string "through $door" ...


Total: 0 verbs.
-----
`HELP GREP' AMBIGUOUS
=====================

Sorry, the topic `grep' is ambiguous.  I don't know which of the following topics you mean:

`help @grep'[1]         `help @grepcore'[2]     

-----
@GREP
=====

Syntax:  @grep <string> in <object>
         @grep <string> in {<objectlist>}

         @egrep <regexp> in <object>
         @egrep <regexp> in {<objectlist>}

These are named for the corresponding unix utilities.

@grep searches the given object(s) for verbs whose verbcode contains the given string as a substring of one of its lines.

@egrep searches the given object(s) for verbs whose verbcode contains a substring matching the given regular expression (see `help regular-expressions'[1]).


For wizards, the following forms are also available for doing full-db searches

         @grep  <pattern>
         @egrep <pattern>
         @grep  <pattern> from [#]<n>
         @egrep <pattern> from [#]<n>

the first two search all objects in the database while the last two search the range [#<n>..max_object()]

See also:  @grepcore, @who-calls.

That is not a valid command.
Searching for verbs through in $door containing the string "through in $door" ...


Total: 0 verbs.
Searching for verbs through in $exit containing the string "through in $exit" ...


Total: 0 verbs.
mirror_hand (#571)   mirror (#565)   Generic See-through Portal (#540)   generic door (#121)   generic exit (#7)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
  #121:description              unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Searching for core verbs containing the string "through_msg" ...

#7:description [+d Core-Wizard (#184)]:  if (typeof(through = this:through_msg(this)) == LIST)
#7:through_msg [+d Core-Wizard (#184)]:  "Copied from generic exit (#7):through_msg by Erik (#74) Fri Jun 28 17:56:06 1996 EDT";

Total: 2 verbs.
#7:"description" this none this
// 'description (...)', etc. - Return messages for the transparent exit.
text = pass(@args);
result = {};
for item in (text)
  result = {@result, this:substitute(item)};
endfor
if (typeof(through = this:through_msg(this)) == LIST)
  result = {@result, @through};
elseif (through)
  result = {@result, through};
endif
return result;
Last modified Tue Jan 16 13:37:26 2001 PST by Xplat (#4014) (on Waterpoint).
#7:"through_msg" this none this
// 'description (...)', etc. - Return messages for the transparent exit.
// 
// If the destination is .dark, we return null.  This may be the wrong thing.
if (`this.dest.dark ! E_INVIND => 0')
  return {};
endif
text = $string_utils:pronoun_sub(this.(verb), args[1]);
if (typeof(text) == STR)
  return this:substitute(text);
elseif (typeof(text) == LIST)
  // The list must be a list of strings. This is not checked.
  result = {};
  for item in (text)
    result = {@result, this:substitute(item)};
  endfor
  return result;
else
  return text;
endif
// Copied from generic exit (#7):through_msg by Erik (#74) Fri Jun 28 17:56:06 1996 EDT
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#7:through_msg this none this" name: "MOO verb: #7:through_msg this none this" type: moo-code content*: "" _data-tag: 350049138236
#$#* 350049138236 content: // 'description (...)', etc. - Return messages for the transparent exit.
#$#* 350049138236 content: // 
#$#* 350049138236 content: // If the destination is .dark, we return null.  This may be the wrong thing.
#$#* 350049138236 content: if (`this.dest.dark ! E_INVIND => 0')
#$#* 350049138236 content:   return {};
#$#* 350049138236 content: endif
#$#* 350049138236 content: text = $string_utils:pronoun_sub(this.(verb), args[1]);
#$#* 350049138236 content: if (typeof(text) == STR)
#$#* 350049138236 content:   return this:substitute(text);
#$#* 350049138236 content: elseif (typeof(text) == LIST)
#$#* 350049138236 content:   // The list must be a list of strings. This is not checked.
#$#* 350049138236 content:   result = {};
#$#* 350049138236 content:   for item in (text)
#$#* 350049138236 content:     result = {@result, this:substitute(item)};
#$#* 350049138236 content:   endfor
#$#* 350049138236 content:   return result;
#$#* 350049138236 content: else
#$#* 350049138236 content:   return text;
#$#* 350049138236 content: endif
#$#* 350049138236 content: // Copied from generic exit (#7):through_msg by Erik (#74) Fri Jun 28 17:56:06 1996 EDT
#$#: 350049138236
0 errors.
Verb programmed.
A small hand mirror.
In the mirror_hand, you see An anachronistic cliche barbarian. He may wish to axe you a question..
A delicate flower.
She is awake and looks alert.
Carrying:
 a Generic Wind-Up Toy                   a mantle
 a leather couch                         a left urn
 a butler's key                          a right urn
 a generic bot                           a fuel
mirror_hand (#571) [ readable ]
  Owned by stormagnet (#246).
  Child of mirror (#565).
  Location stormagnet (#246).
-------------------------------- finished ---------------------------------
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#571:description ()" name: "MOO verb: #571:description ()" type: moo-code content*: "" _data-tag: 697450180237
#$#: 697450180237
#7:"description" this none this
// 'description (...)', etc. - Return messages for the transparent exit.
text = pass(@args);
result = {};
for item in (text)
  result = {@result, this:substitute(item)};
endfor
if (typeof(through = this:through_msg(this)) == LIST)
  result = {@result, @through};
elseif (through)
  result = {@result, through};
endif
return result;
mirror_hand (#571)   mirror (#565)   Generic See-through Portal (#540)   generic door (#121)   generic exit (#7)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
Parent changed.
#7:"substitute" (text)
// 'substitute (<string>)' - Do %-substitutions on the given string.
if (index(text, "%"))
  text = $string_utils:substitute(text, {{"%%", "%"}, {"%w", this:dest_who()}, {"%c", this:dest_contents()}, {"%l", this:dest_description()}}, 1);
endif
return text;
Error programming mirror_hand:description[1](0).
Line 9:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
That is not a valid command.
-----
`HELP MESSAGE' AMBIGUOUS
========================

Sorry, the topic `message' is ambiguous.  I don't know which of the following topics you mean:

`help message-sequences'[1]                     `help messages'[2]
`help @messages'[3]     

-----
MESSAGES
========

Most objects have messages that are printed when a player succeeds or fails in manipulating the object in some way.  Of course, the kinds of messages printed are specific to the kinds of manipulations and those, in turn, are specific to the kind of object.  Regardless of the kind of object, though, there is a uniform means for listing the kinds of messages that can be set and then for setting them.

The '@messages' command prints out all of the messages you can set on any object you own.  Type `help @messages'[1] for details.

To set a particular message on one of your objects use a command with this form:

        @<message-name> <object> is "<message>"

where '<message-name>' is the name of the message being set, <object> is the name or number of the object on which you want to set that message, and <message> is the actual text.

For example, consider the 'leave' message on an exit; it is printed to a player when they successfully use the exit to leave a room.  To set the 'leave' message on the exit 'north' from the current room, use the command

        @leave north is "You wander in a northerly way out of the room."

[Note to programmers: This class of commands automatically applies to any property whose name ends in '_msg'.  Thus, in the example above, the command is setting the 'leave_msg' property of the named exit.  You can get such a command to work on new kinds of objects simply by giving the appropriate properties names that end in '_msg'.  Additionally, in many cases the _msg property is accompanied by a _msg verb, which defaultly returns the named property, but which is available to be customized in more complex ways than allowed by simple string substitution.  You should check for the particular property you're considering whether the verb form exists (typically with @list).]

The following help topics describe the uses of the various messages available on standard kinds of objects:

container-messages[2]
      the messages on objects that can contain other objects
exit-messages[3]
      the messages on exit objects
thing-messages[4]
      the messages on objects that can be taken and dropped

;verbs(#4) => {"@quota", "@create", "@recycle", "@recreate", "@dig", "@auditDB", "@count", "@countDB", "@sort-owned*-objects", "@add-owned", "@verify-owned", "@unlock", "@lock", "@newmess*age", "@unmess*age", "_messagify", "@kids", "@contents", "@par*ents", "@location*s", "_create", "_recycle", "@audit", "@building-o*ptions @buildingo*ptions", "set_building_option", "building_option", "options_packages", "@recycle!", "@move", "@measure", "@grant", "@set*property"}
-----
@NEWMESSAGE
===========

Usage:  @newmessage <message-name> [<message>] [on <object>]

Add a message property to an object (default is player), and optionally set its value.  For use by non-programmers, who aren't allowed to add properties generally.

To undo the effects of this, use @unmessage.

Usage:  @newmessage <message-name> [<message>] [on <object>]
Usage:  @newmessage <message-name> [<message>] [on <object>]
Object #243 does not define that verb, but its ancestor #4 does.
Last modified Wed Jan 10 10:40:53 2001 PST by Xplat (#4014) (on Waterpoint).
#4:"@newmess*age" any any any
// Usage:  @message <message-name> [<message>] [on <object>]
// Add a message property to an object (default is player), and optionally
// set its value.  For use by non-programmers, who aren't allowed to add
// properties generally.
// To undo the effects of this, use @unmessage.
set_task_perms(player);
dobjwords = $string_utils:words(dobjstr);
if (!dobjwords || index(dobjwords[1], "."))
  player:notify(tostr("Usage:  ", verb, " <message-name> [<message>] [on <object>]"));
  return;
endif
if (!iobjstr)
  object = player;
elseif ($command_utils:object_match_failed(object = player:my_match_object(iobjstr), iobjstr))
  return;
endif
name = this:_messagify(dobjwords[1]);
value = player:parse_message(dobjstr[length(dobjwords[1]) + 2..length(dobjstr)]);
nickname = "@" + name[1..length(name) - 4];
try
  add_property(object, name, value, {player, "rc"});
except (E_INVARG)
  if ($object_utils:has_property(object, name))
    // object already has property
    player:notify(tostr(object:dnamec(), " already has a ", nickname, " message."));
  elseif (olist = $object_utils:descendants_with_property_suspended(object, name))
    player:notify(tostr("The following descendents of ", object:dname(), " have the ", nickname, " message defined:"));
    player:notify("  " + $string_utils:from_list(olist, " "));
  else
    player:notify(tostr("Unable to add ", nickname, " message to ", object:dname(), ": ", E_INVARG));
  endif
  return;
except e (ANY)
  player:notify(e[2]);
  return;
endtry
player:notify(tostr(nickname, " on ", object:dname(), " is now \"", player:unparse_message(object.(name)), "\"."));
@integrate_room #571 isn't set.
@integrate_player #571 isn't set.
@integrate_container #571 isn't set.
Property added with value "".
#1:"integrate_room_msg integrate_container_msg" this none this
// If this.(verb) is not set, return this:integrate_msg(@args).
// If this.(verb) is not an alist, pronoun_sub it.
// If this.location has an entry, pronoun sub it.
// If $nowhere (#-1) has an entry, pronoun sub it.
if (typeof(alist = this.(verb)) == LIST && typeof(alist[1]) == LIST)
  if (assoc = $list_utils:assoc(this.location, alist) || $list_utils:assoc($nowhere, alist))
    msg = assoc[2];
  endif
else
  msg = alist;
endif
return $string_utils:pronoun_sub(msg, @args);
#571:through_msg code set.
@integrate_room #571 isn't set.
@integrate_player #571 isn't set.
@integrate_container #571 isn't set.
@through #571 isn't set.
#571:description, line 5:  Property not found
... called from #1:look_self (this == #571), line 1
... called from #3:l*ook (this == #398), line 13
(End of traceback)
Last modified Tue Apr 30 18:21:56 2013 PDT by Crag (#243).
#571:"description" this none this
self = pass(@args);
if (typeof(self) == STR)
  self = {self};
endif
this.reflection = player:description();
reflection = this:reflection_msg();
if (typeof(reflection) == STR)
  reflection = {reflection};
endif
return {@self, @reflection};
Property added with value 0.
#571:description, line 6:  Verb not found
... called from #1:look_self (this == #571), line 1
... called from #3:l*ook (this == #398), line 13
(End of traceback)
mirror_hand (#571) [ readable ]
  Owned by stormagnet (#246).
  Child of generic event dispatching object (#110).
  Location stormagnet (#246).
  #571:description              Crag (#243)          rxd    this none this
  #571:through_msg              unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Your current object is now a mirror_hand (#571).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#571:description this none this" name: "MOO verb: #571:description this none this" type: moo-code content*: "" _data-tag: 622545290239
#$#* 622545290239 content: self = pass(@args);
#$#* 622545290239 content: if (typeof(self) == STR)
#$#* 622545290239 content:   self = {self};
#$#* 622545290239 content: endif
#$#* 622545290239 content: this.reflection = player:description();
#$#* 622545290239 content: reflection = this:reflection_msg();
#$#* 622545290239 content: if (typeof(reflection) == STR)
#$#* 622545290239 content:   reflection = {reflection};
#$#* 622545290239 content: endif
#$#* 622545290239 content: return {@self, @reflection};
#$#: 622545290239
0 errors.
Verb programmed.
A small hand mirror.

You set the "through" message of the mirror_hand (#571).
A small hand mirror.
Mirror_hand reflects: {list}
=> "Mirror_hand reflects: {list}"
That object does not define that verb.
That object does not define that verb.
Last modified Tue Apr 30 18:24:16 2013 PDT by Crag (#243).
#571:"through_msg" this none this
// If this.(verb) is not set, return this:integrate_msg(@args).
// If this.(verb) is not an alist, pronoun_sub it.
// If this.location has an entry, pronoun sub it.
// If $nowhere (#-1) has an entry, pronoun sub it.
if (typeof(alist = this.(verb)) == LIST && typeof(alist[1]) == LIST)
  if (assoc = $list_utils:assoc(this.location, alist) || $list_utils:assoc($nowhere, alist))
    msg = assoc[2];
  endif
else
  msg = alist;
endif
return $string_utils:pronoun_sub(msg, @args);
// Copied from root class (#1):integrate_room_msg by Crag (#243) Tue Apr 30 18:24:16 2013 PDT
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#571:description this none this" name: "MOO verb: #571:description this none this" type: moo-code content*: "" _data-tag: 1544362562240
#$#* 1544362562240 content: self = pass(@args);
#$#* 1544362562240 content: if (typeof(self) == STR)
#$#* 1544362562240 content:   self = {self};
#$#* 1544362562240 content: endif
#$#* 1544362562240 content: this.reflection = player:description();
#$#* 1544362562240 content: reflection = this:through_msg();
#$#* 1544362562240 content: if (typeof(reflection) == STR)
#$#* 1544362562240 content:   reflection = {reflection};
#$#* 1544362562240 content: endif
#$#* 1544362562240 content: return {@self, @reflection};
#$#: 1544362562240
=> {"An anachronistic cliche barbarian. He may wish to axe you a question."}
-----
GENERAL INFORMATION ON $STRING_UTILS[1]
=======================================

For a complete description of a given verb, do `help $string_utils:verbname'[2]

    Conversion routines:

:char_list    (string)                               => {"a", "b", "c"}
:to_list      (string)                               => {"a", "foo", "bear"}
 (see also :explode, below)

:from_list    (list [,sep])                          => "foo1foo2foo3"
:english_list (str-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
:title_list*c (obj-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
                                                  or => "Foo1, foo2, and foo3"

:[i|d]name[c]_and_number                             => "foo (#123)"
:[i|d]name[c]_list (obj-list, name-args)             => english list of names
                                                        in appropriate style
:[i|d]name[c]_and_number_list(obj-list, name-args)   => same, plus " (#123)"
:names_of     (obj-list)  => "foo1 (#123)   foo2 (#456)   foo3 (#789)"

:to_value       (string)                             => {1, value}
                                                  or => {0, error message}
:prefix_to_value(string)                             => {rest-of-string, value}
                                                  or => {0, error message}
:end_expression (string)                             => index of expression

:from_value[_suspended] (value [,quoteflag [,maxlistdepth]])
                                                     => "{foo1, foo2, foo3}"
:print[_suspended] (value)                           => "{foo1, foo2, foo3}"
:print_truncated   (value, length, suffix)           => "{foo1, fo.."
:print_with_names  (value)                           => "{foo1, foo2 (#123)}"

:english_number(42 [,zero])  => "forty-two"
:english_ordinal(42)         => "forty-second"
:ordinal(42)                 => "42nd"
:group_number(42135 [,sep])  => "42,135"
:from_seconds (num)          => "an hour" or "3 days" or "15 seconds"

:glob_to_regexp("foo*b?r")   => "^foo.*b.r$"
:xglob_to_regexp("f*ba[rz]") => "^f.*ba[rz]$"

    Type checking:

:is_numeric   (string) => return true if string is composed entirely of digits

    String Matching:

:match_string(string, pattern, options) => * wildcard matching
:find_prefix(prefix, string-list)       => list index of element starting
                                           with prefix
:match_stringlist(string, string-list)  => index/$ambiguous_match/$failed_match
:index_delimited(string,target[, case]) => index of delimited string occurrence
:index_all(string, target[, delimited]) => all occurrences of target in string
:next_index(str1, str2, prev[, case])   => index, after index `prev'

    Object Matching (see also $command_utils):

:literal_object(string)                        => object match independent
                                                  of location
:match        (string, [obj-list, prop-name]+) => matching object
:match_player (string-list[,me-object])        => list of matching players
:match_object (string, location)               => default object match
:match_player_or_object(@string-list)          => matching object or player
:match_room   (string)                         => matching room object

    Parsing:

:explode (string,char) -- string => list of words delimited by char
 (see also :to_list, above)
:words   (string)      -- string => list of words (as with command line parser)
:word_start (string)   -- string => list of start-end pairs.
:first_word (string)   -- string => {first word, rest of string} or {}

:parse_command(cmd_line[, player]) -- string => parsed command info

    Pretty printing:

:space         (n/string[,filler])     => n spaces
:left          (string,width[,filler]) => left justified string in field 
:right         (string,width[,filler]) => right justified string in field
:center/re     (string,width[,filler]) => centered string in field
:columnize/se[_suspended](list,n[,width])
                                       => list of strings in n columns
:columnize/se_no_truncate(list,n[,linelen])
                                       => same, but will not truncate items
:columnize/se_with_headers(headers, fields) => columnize, plus headers

    Substitutions

:substitute (string, subst_list [,case])  -- general substitutions.
:substitute_delimited(...)                -- same, but with word boundaries.
:pronoun_sub (string/list[,who[,thing[,location]]])
                                          -- pronoun substitutions.
:pronoun_sub_secure (string[,who[,thing[,location]]],default)
                                          -- substitute and check for names.
:pronoun_quote (string/list/subst_list)   -- quoting for pronoun substitutions.
:regexp_quote(string)                     -- quoting for regexps.

    Miscellaneous string munging:

:trim         (string)       => string with outside whitespace removed.
:triml        (string)       => string with leading whitespace removed.
:trimr        (string)       => string with trailing whitespace removed.
:strip_chars  (string,chars) => string with all chars in `chars' removed.
:strip_all_but(string,chars) => string with all chars not in `chars' removed.
:capitalize/se(string)       => string with first letter capitalized.
:uppercase/lowercase(string) => string with all letters upper or lowercase.
:reverse      (string)       => string, backwards.

:common(string1, string2)    => length of longest common prefix.
:is_uppercase (string)       => true iff no lowercase letters in string
:is_lowercase (string)       => true iff no uppercase letters in string
:nonblank     (string)       => true iff any non-whitespace characters

:connection_hostname(string) => hostname part of connection identifier.

    Conversions to and from common string formats:

:character_to_ascii(char)    => integer ASCII rep of char
:character_to_hex_ascii(char) => two-digit hexadecimal string ASCII rep of char
:ascii_to_character(num)     => character represented in ASCII by num
:hex_ascii_to_character(hex) => ASCII character represented by two-character hexadecimal string hex

    A few useful properties:

alphabet                    => "abcdefghijklmnopqrstuvwxyz"
tab                         => a single tab character

0 errors.
Verb programmed.
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian. He may wish to axe you a question.
stormagnet puts the right urn in the mantle.
stormagnet puts the left urn in the mantle.
mirror_hand (#571) [ readable ]
  Owned by stormagnet (#246).
  Child of generic event dispatching object (#110).
  Location stormagnet (#246).
  #571:description              Crag (#243)          rxd    this none this
  #571:through_msg              unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "str:#243.description" name: Crag.description type: string content*: "" _data-tag: 641210132242
#$#* 641210132242 content: An anachronistic cliche barbarian. He may wish to axe you a question.
#$#: 641210132242
Set description property of Crag (#243).
An anachronistic cliche barbarian. 
He may wish to axe you a question.

He may also wish to test descriptions with blank lines in them.
He is awake and looks alert.
Carrying:
 some Group Utilities                    a Generic Input Handler
 a MCP parent                            a Generic Command Handler
 a Parsing objects                       a Beaker's Commands
 a Text generation objects               a Generic Command
 an Abstract class                       a Generic English Command
 a Generic Nesting Decoration            a Grouping Command
 a Delegator                             a microphone
 a Delegate                              a Cardgame Feature
 a New Generic Room                      the Interface
 a Room Exit Delegate                    the Class
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.
-----
TWO-LETTER
==========

This help text describes the format of pronoun-substitution messages.  Other help texts on pronoun_substitution include:

pronouns[1]
      An overview.
pronoun-substitution[2]
      How to call pronoun_sub and how it works.
pronoun-example[3]
      A detailed example.
two-letter-qr[4]
      A quick reference guide to the format string.
pronoun-style[5]
      Dunno yet.

Pronoun-substitution messages are entered as strings, but are usually converted to an arcane list format before they're used.  This document is about the format of the string entry; the list format may be discussed elsewhere.

The information passed to :pronoun_sub() can have subsitution specifiers in it that are replaced by values that depend on the context.  The string that results after all the substitutions are made is returned.

In the format string that :pronoun_sub() parses, a `%' indicates that a substition should take place.  The characters after it specify the type of substition.  Take a look at this string:

  "%Td %t:(looks) at %dd oddly."

It has three substitutions to be made in it:  `%Td', `%t:(looks)', and `%dd'.

In most cases, a substition consists of three elements:

  o  The % sign, indicating that a substitution should be made.
  o  A symbol indicating the object that should be considered.
  o  A symbol indicating what about that object to substitute.


The Object Specifier
====================

The object specifier is the letter that follows the % sign.  Consider the string:

    "%Td %t:(looks) at %dd oddly."
 

In `%Td' and in `%t:', the object specifer is `t'.  In `%dd', the object specifer is `d'.

The possible letters and the objects that they correspond to include:

  t - represents the thing where the verb calling :pronoun_sub() is stored
  n - represents the player that started the command
  d - represents the direct object of the initial command
  i - represents the indirect object of the initial command
  l - represents the location of the player

As an example, If Munchkin typed this command:

  put duck in pond
 

and the duck had this as a @put_in_water message:

  "%Nd %n:(puts) %td in %id."
 

Then:

  %Nd would get the `d' information on Munchkin and capitalize it.

  %n:(puts) would conjugate `puts' according to Munchkin's gender.

  %td would get the `d' information from the duck.

  %id would get the `d' information from the pond.


The Information Specifier
=========================

The character following the object specifier is the information specifier.  It specifies what sort of information to get about the object.  It can be any of these characters:

  n - the object's name        ("Susan",   "duck",    "king and queen")
  d - definite-article         ("Susan",   "the duck","the king and queen")
  i - indefinite-article       ("Susan",   "a duck",  "a king and queen")
  o - the objective pronoun    ("her",     "him",     "them")
  p - possessive adjective     ("her",     "his",     "their")
  q - possessive pronoun       ("hers",    "his",     "theirs")
  r - reflexive pronoun        ("herself", "himself", "themselves")
  s - subjective pronoun       ("she",     "he,       "they")

Sometimes, several characters follow the object specifier:

  'i  - indefinite possessive  ("a duck's")
  'd  - definite possessive    ("the duck's")
  'n  - possessive name        ("duck's")

In using any of these, you can capitalize the object specifier to have the phrase capitalize--for example, `%Nd' might become "The duck".  If you capitalize both the object specifier and the information specifier (`%ND'), you'll get all caps--"THE DUCK".

Information Specifiers for Verb Conjugation
===========================================

You often want to insert a verb into a sentence, but the conjugation depends on the context that it's used in.  Give this as the information specifer in order to have pronoun_sub conjugate a verb:

  :(foos) - conjugate the verb `to foo'

For example:
  "%ns %n:(runs)"

will result in "he runs", "she runs", or "they run", depending on the gender of the player who called the verb.

If you capitalize the verb, the result will be capitalized:

  "%ns %n:(Runs)"
  => "he Runs"


Information Specifiers for Pluralizing Nouns
============================================

If you want to make a noun singular or plural depending on context, you can give the noun as an information specifier, and it will be pluralized if the object you specified is plural.  This is the format of the information specification:

  '(noun)
 

For example, this string:
  "%nD %n:(shakes) %d'd %d'(hand)."

may result in either:
  "Munchkin shakes Susan's hand."
or
  "Munchkin shakes the king and queen's hands."

Again, capitalizing the noun will result in a capitalized substitution.


Information Specifiers for Object Data
======================================

You can also obtain information about the actual object by using these information specifiers.

  #      - the object's number 
  .(foo) - the object's "foo" property

For example:
  %t.(mood)
would return the string in the object's `mood' property.

If the proprety doesn't exist, the string `Property not found' will be returned.

If you capitalize the property name, the resulting string will be capitalized.


Information Specifiers for Odd Cases
====================================

A list of arguments enclosed in curly brackets (see `help pronoun-literals'[6]) can be used as an information specifier, e.g.:

  %n{u}
 

which produces the same result as `%NN'.  The arguments will be passed directly to :name() during substitution.  Some forms of name, such as the 'in' name, can only be obtained in this manner.  See `help #1:name'[7] for more information.


Random Choice
=============

To add a little variety to oft-used messages, you can specify that one of several messages be chosen at random each time a message is used.  For example:

  %Nd %(%n:(dives) gracefully|%n:(bellyflops) clumsily) into the water.
 

The section in parentheses will be broken up into phrases at the vertical bars (|) and only one of these phrases, chosen at random, will be displayed.  This also works whenever an information specifier contains something enclosed in parentheses:

  %Nd %n:(dives|plunges) gracefully into the water.
 

When used with $you:say_action (see `help $you:say_action') the same alternatives will be used for everyone.  Vertical bars may be included literally by preceding them with a percent sign.
 
Object Locations and Contents
=============================

Sometimes you want information about an object's location.  This can be retrieved by appending an `l' to the object specifier.  For example:

  %tln - Get the `thing' this code is on, find out where it's located, and then get the name of that location. 

This can be done to every kind of object specifier: %tl, %nl, %il, %dl, and %ll.

Moreover, `L' and `c' may be used in the same fashion, to refer to the object's outermost location (usually a room) and its visible contents, respectively.

Object Callbacks
================

The letter `x' can be used in two ways to call back to an object for specialized information.

Firstly, it can be used as an object specifier, followed by another object specifier and some data in curly brackets, thusly:

  %xn{foo arg1 arg2 ...}d

The data in curly brackets is changed into a list, in the way specified in the next section.  Then, during substitution, the substitution mechanism will call the verb `:obj_foo(arg1, arg2, ...)' on the object(s) specified by `%n' to obtain some objects to get the `d' information of.

Secondly, it can be used as an information specifier, like this:

  %nx{foo arg1 arg2 ...}

This case is similar to the above, only the verb called is `:sub_foo' and the mechanism expects text rather than objects.  The returned text is inserted literally for single objects, and turned into an English-style list otherwise.

Other Substitutions
===================

In addition to the format of %(object specifier)(information specifier), you can also use these substitutions:

  %% - A percent sign.   That is:  %
 
  %$a - the argstr to the verb that called :pronoun_sub().
  %$d - the dobjstr to the verb that called :pronoun_sub().
  %$i - the iobjstr to the verb that called :pronoun_sub().
  %$p - the prepstr to the verb that called :pronoun_sub().
 
  %{information} 
 

%{information} allows one to insert an arbitrary list into the data structure used for pronoun substitution.  The format in which the list is specified is discussed in `help pronoun-literals'[8]; how it is interpreted is beyond the scope of this document.

Errata
======

If the information following the % isn't a valid substitution string, the % will remain a %.  This is a clue that the format string needs some work.

A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.
A delicate flower.  stormagnet is wearing a daisy in her buttonhole.
She is awake and looks alert.
Carrying:
 a Generic Wind-Up Toy                   a mantle
 a leather couch                         a mirror_hand
 a butler's key                          a fuel
 a generic bot                           
Your current object is now sm, stormagnet (#246).
=> {"A delicate flower."}
Searching for verbs in sm containing the string "description" ...


Total: 0 verbs.
Searching for verbs in $player containing the string "description" ...

#6:confunc [+d Core-Wizard (#184)]:  if (is_clear_property(this, "description"))
#6:look_self [+d Core-Wizard (#184)]:  desc = this:description(integrate);
#6:@desc*ribe [+d Core-Wizard (#184)]:  "Usage:  @describe <object> as <description>";
#6:@ex*amine [+d Core-Wizard (#184)]:  desc = what:description();
#6:idle_suffix [+d Core-Wizard (#184)]:  "Returns the string used in the description in a room, i.e. (dozing).";
#6:@edit*# [+d Core-Wizard (#184)]:  "+ If only an object is specified, we will call that object's :default_editing verb passing it dobjstr. This is expected to return a pair {editor, what-to-edit} of values. Thus, when we are editing a note object, we will pass 'Note' and we will get back {$note_editor, 'Note.text'}. The default for other objects, defined on $root_class, is {$note_editor, 'object.description'}.";
#6:brief [+d Core-Wizard (#184)]:  "return whether or not the player wants brief descriptions or not.";
#6:@desc*ribe [+d Core-Wizard (#184)]:    if ($object_utils:has_callable_verb(dobj, "editing_for_description"))

Total: 8 verbs.
#6:"look_self" this none this
integrate = {};
dontintegrate = {};
if (visible = this:visible_of(this.contents))
  for i in (visible)
    if (this:ok_to_integrate(i))
      integrate = {@integrate, i};
    else
      dontintegrate = {@dontintegrate, i};
    endif
  endfor
endif
desc = this:description(integrate);
if (desc)
  player:tell_lines(desc);
else
  player:Tell("You see nothing special.");
endif
player:tell(this:desc_idle_msg());
if (dontintegrate)
  this:tell_contents(dontintegrate);
endif
Verb added [243] (242).
#6:integrated_desc code set.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#6:integrated_desc this none this" name: "MOO verb: #6:integrated_desc this none this" type: moo-code content*: "" _data-tag: 271849712243
#$#* 271849712243 content: integrate = {};
#$#* 271849712243 content: dontintegrate = {};
#$#* 271849712243 content: if (visible = this:visible_of(this.contents))
#$#* 271849712243 content:   for i in (visible)
#$#* 271849712243 content:     if (this:ok_to_integrate(i))
#$#* 271849712243 content:       integrate = {@integrate, i};
#$#* 271849712243 content:     else
#$#* 271849712243 content:       dontintegrate = {@dontintegrate, i};
#$#* 271849712243 content:     endif
#$#* 271849712243 content:   endfor
#$#* 271849712243 content: endif
#$#* 271849712243 content: desc = this:description(integrate);
#$#* 271849712243 content: if (desc)
#$#* 271849712243 content:   player:tell_lines(desc);
#$#* 271849712243 content: else
#$#* 271849712243 content:   player:Tell("You see nothing special.");
#$#* 271849712243 content: endif
#$#* 271849712243 content: player:tell(this:desc_idle_msg());
#$#* 271849712243 content: if (dontintegrate)
#$#* 271849712243 content:   this:tell_contents(dontintegrate);
#$#* 271849712243 content: endif
#$#* 271849712243 content: // Copied from generic player (#6):look_self by Crag (#243) Tue Apr 30 18:41:18 2013 PDT
#$#: 271849712243
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#6:look_self this none this" name: "MOO verb: #6:look_self this none this" type: moo-code content*: "" _data-tag: 1872626998244
#$#* 1872626998244 content: integrate = {};
#$#* 1872626998244 content: dontintegrate = {};
#$#* 1872626998244 content: if (visible = this:visible_of(this.contents))
#$#* 1872626998244 content:   for i in (visible)
#$#* 1872626998244 content:     if (this:ok_to_integrate(i))
#$#* 1872626998244 content:       integrate = {@integrate, i};
#$#* 1872626998244 content:     else
#$#* 1872626998244 content:       dontintegrate = {@dontintegrate, i};
#$#* 1872626998244 content:     endif
#$#* 1872626998244 content:   endfor
#$#* 1872626998244 content: endif
#$#* 1872626998244 content: desc = this:description(integrate);
#$#* 1872626998244 content: if (desc)
#$#* 1872626998244 content:   player:tell_lines(desc);
#$#* 1872626998244 content: else
#$#* 1872626998244 content:   player:Tell("You see nothing special.");
#$#* 1872626998244 content: endif
#$#* 1872626998244 content: player:tell(this:desc_idle_msg());
#$#* 1872626998244 content: if (dontintegrate)
#$#* 1872626998244 content:   this:tell_contents(dontintegrate);
#$#* 1872626998244 content: endif
#$#: 1872626998244
0 errors.
Verb programmed.
#6:look_self (this == #243), line 1:  Variable not found
... called from #3:l*ook (this == #398), line 13
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#6:look_self this none this" name: "MOO verb: #6:look_self this none this" type: moo-code content*: "" _data-tag: 999269192245
#$#* 999269192245 content: {desc, dontintegrate} = this:description(integrate);
#$#* 999269192245 content: if (desc)
#$#* 999269192245 content:   player:tell_lines(desc);
#$#* 999269192245 content: else
#$#* 999269192245 content:   player:Tell("You see nothing special.");
#$#* 999269192245 content: endif
#$#* 999269192245 content: player:tell(this:desc_idle_msg());
#$#* 999269192245 content: if (dontintegrate)
#$#* 999269192245 content:   this:tell_contents(dontintegrate);
#$#* 999269192245 content: endif
#$#: 999269192245
0 errors.
Verb programmed.
An anachronistic cliche barbarian. 
He may wish to axe you a question.

He may also wish to test descriptions with blank lines in them.
He is awake and looks alert.
Carrying:
 some Group Utilities                    a Generic Input Handler
 a MCP parent                            a Generic Command Handler
 a Parsing objects                       a Beaker's Commands
 a Text generation objects               a Generic Command
 an Abstract class                       a Generic English Command
 a Generic Nesting Decoration            a Grouping Command
 a Delegator                             a microphone
 a Delegate                              a Cardgame Feature
 a New Generic Room                      the Interface
 a Room Exit Delegate                    the Class
A delicate flower.  stormagnet is wearing a daisy in her buttonhole.
She is awake, but has been staring off into space for 6 minutes.
Carrying:
 a Generic Wind-Up Toy                   a mantle
 a leather couch                         a mirror_hand
 a butler's key                          some fuel
 a generic bot                           
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.
Carrying:
 some Group Utilities                    a Generic Input Handler
 a MCP parent                            a Generic Command Handler
 a Parsing objects                       a Beaker's Commands
 a Text generation objects               a Generic Command
 an Abstract class                       a Generic English Command
 a Generic Nesting Decoration            a Grouping Command
 a Delegator                             a microphone
 a Delegate                              a Cardgame Feature
 a New Generic Room                      the Interface
 a Room Exit Delegate                    the Class
You set the "integrate_player" message of the microphone (#282).
An anachronistic cliche barbarian. 
He may wish to axe you a question.

He may also wish to test descriptions with blank lines in them.  he carries the microphone with a bit of a swagger.
He is awake and looks alert.
Carrying:
 some Group Utilities                    a Generic Input Handler
 a MCP parent                            a Generic Command Handler
 a Parsing objects                       a Beaker's Commands
 a Text generation objects               a Generic Command
 an Abstract class                       a Generic English Command
 a Generic Nesting Decoration            a Grouping Command
 a Delegator                             a Cardgame Feature
 a Delegate                              the Interface
 a New Generic Room                      the Class
 a Room Exit Delegate                    
You set the "integrate_player" message of the microphone (#282).
An anachronistic cliche barbarian. 
He may wish to axe you a question.

He may also wish to test descriptions with blank lines in them.  He carries the microphone with a bit of a swagger.
He is awake and looks alert.
Carrying:
 some Group Utilities                    a Generic Input Handler
 a MCP parent                            a Generic Command Handler
 a Parsing objects                       a Beaker's Commands
 a Text generation objects               a Generic Command
 an Abstract class                       a Generic English Command
 a Generic Nesting Decoration            a Grouping Command
 a Delegator                             a Cardgame Feature
 a Delegate                              the Interface
 a New Generic Room                      the Class
 a Room Exit Delegate                    
You set the "integrate_player" message of the microphone (#282).
An anachronistic cliche barbarian. 
He may wish to axe you a question.

He may also wish to test descriptions with blank lines in them.  He carries a microphone with a bit of a swagger.
He is awake and looks alert.
Carrying:
 some Group Utilities                    a Generic Input Handler
 a MCP parent                            a Generic Command Handler
 a Parsing objects                       a Beaker's Commands
 a Text generation objects               a Generic Command
 an Abstract class                       a Generic English Command
 a Generic Nesting Decoration            a Grouping Command
 a Delegator                             a Cardgame Feature
 a Delegate                              the Interface
 a New Generic Room                      the Class
 a Room Exit Delegate                    
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.
Your current object is sm, stormagnet (#246).
Your current object is now a mirror_hand (#571).
mirror_hand (#571) [ readable ]
  Owned by stormagnet (#246).
  Child of generic event dispatching object (#110).
  Location stormagnet (#246).
  #571:description              Crag (#243)          rxd    this none this
  #571:through_msg              unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Tue Apr 30 18:42:13 2013 PDT by Crag (#243).
#6:"integrated_desc" this none this
integrate = {};
dontintegrate = {};
if (visible = this:visible_of(this.contents))
  for i in (visible)
    if (this:ok_to_integrate(i))
      integrate = {@integrate, i};
    else
      dontintegrate = {@dontintegrate, i};
    endif
  endfor
endif
desc = this:description(integrate);
return {desc, dontintegrate};
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#571:description this none this" name: "MOO verb: #571:description this none this" type: moo-code content*: "" _data-tag: 1447055491246
#$#* 1447055491246 content: self = pass(@args);
#$#* 1447055491246 content: if (typeof(self) == STR)
#$#* 1447055491246 content:   self = {self};
#$#* 1447055491246 content: endif
#$#* 1447055491246 content: this.reflection = player:description();
#$#* 1447055491246 content: if (typeof(this.reflection) == LIST)
#$#* 1447055491246 content:   this.reflection = $string_utils:from_list(this.reflection, "  ");
#$#* 1447055491246 content: endif
#$#* 1447055491246 content: reflection = this:through_msg();
#$#* 1447055491246 content: if (typeof(reflection) == STR)
#$#* 1447055491246 content:   reflection = {reflection};
#$#* 1447055491246 content: endif
#$#* 1447055491246 content: return {@self, @reflection};
#$#: 1447055491246
0 errors.
Verb programmed.
An anachronistic cliche barbarian. 
He may wish to axe you a question.

He may also wish to test descriptions with blank lines in them.  He carries a microphone with a bit of a swagger.
He is awake and looks alert.
Carrying:
 some Group Utilities                    a Generic Input Handler
 a MCP parent                            a Generic Command Handler
 a Parsing objects                       a Beaker's Commands
 a Text generation objects               a Generic Command
 an Abstract class                       a Generic English Command
 a Generic Nesting Decoration            a Grouping Command
 a Delegator                             a Cardgame Feature
 a Delegate                              the Interface
 a New Generic Room                      the Class
 a Room Exit Delegate                    
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#571:description this none this" name: "MOO verb: #571:description this none this" type: moo-code content*: "" _data-tag: 636487690247
#$#* 636487690247 content: self = pass(@args);
#$#* 636487690247 content: if (typeof(self) == STR)
#$#* 636487690247 content:   self = {self};
#$#* 636487690247 content: endif
#$#* 636487690247 content: this.reflection = player:description()[1];
#$#* 636487690247 content: if (typeof(this.reflection) == LIST)
#$#* 636487690247 content:   this.reflection = $string_utils:from_list(this.reflection, "  ");
#$#* 636487690247 content: endif
#$#* 636487690247 content: reflection = this:through_msg();
#$#* 636487690247 content: if (typeof(reflection) == STR)
#$#* 636487690247 content:   reflection = {reflection};
#$#* 636487690247 content: endif
#$#* 636487690247 content: return {@self, @reflection};
#$#: 636487690247
0 errors.
Verb programmed.
=> "A delicate flower."
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian. 
=> "An anachronistic cliche barbarian. "
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#571:description this none this" name: "MOO verb: #571:description this none this" type: moo-code content*: "" _data-tag: 1821407427248
#$#* 1821407427248 content: self = pass(@args);
#$#* 1821407427248 content: if (typeof(self) == STR)
#$#* 1821407427248 content:   self = {self};
#$#* 1821407427248 content: endif
#$#* 1821407427248 content: this.reflection = player:description()[1];
#$#* 1821407427248 content: if (typeof(this.reflection) == LIST)
#$#* 1821407427248 content:   this.reflection = $string_utils:from_list(this.reflection, "  ");
#$#* 1821407427248 content: endif
#$#* 1821407427248 content: reflection = this:through_msg();
#$#* 1821407427248 content: if (typeof(reflection) == STR)
#$#* 1821407427248 content:   reflection = {reflection};
#$#* 1821407427248 content: endif
#$#* 1821407427248 content: return {@self, @reflection};
#$#: 1821407427248
0 errors.
Verb programmed.
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian. 
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#571:description this none this" name: "MOO verb: #571:description this none this" type: moo-code content*: "" _data-tag: 962593976249
#$#* 962593976249 content: self = pass(@args);
#$#* 962593976249 content: if (typeof(self) == STR)
#$#* 962593976249 content:   self = {self};
#$#* 962593976249 content: endif
#$#* 962593976249 content: // The mirror you see
#$#* 962593976249 content: // Has a memory
#$#* 962593976249 content: //   ... special feature?
#$#* 962593976249 content: this.reflection = player:description()[1];
#$#* 962593976249 content: if (typeof(this.reflection) == LIST)
#$#* 962593976249 content:   this.reflection = $string_utils:from_list(this.reflection, "  ");
#$#* 962593976249 content: endif
#$#* 962593976249 content: reflection = this:through_msg();
#$#* 962593976249 content: if (typeof(reflection) == STR)
#$#* 962593976249 content:   reflection = {reflection};
#$#* 962593976249 content: endif
#$#* 962593976249 content: return {@self, @reflection};
#$#: 962593976249
0 errors.
Verb programmed.
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.  He carries a microphone with a bit of a swagger.
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of Generic Virtual Reality Object (#291).
  Location generic room (#3).
    #5:"get take"               Core-Wizard (#184)   rxd    this none none
    #5:"d*rop throw chuck"      Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Object #398 does not define that verb, but its ancestor #3 does.
#3:"l*ook" any any any
if (dobjstr == "" && !prepstr)
  this:look_self();
elseif ($code_utils:short_prep(prepstr) != "in" && prepstr != "on")
  if (!dobjstr && prepstr == "at")
    dobjstr = iobjstr;
    iobjstr = "";
  else
    dobjstr = dobjstr + (prepstr && (dobjstr && " ") + prepstr);
    dobjstr = dobjstr + (iobjstr && (dobjstr && " ") + iobjstr);
  endif
  dobj = this:match_object(dobjstr);
  if (!$command_utils:object_match_failed(dobj, dobjstr))
    dobj:look_self();
  endif
elseif (!iobjstr)
  player:tell(verb, " ", prepstr, " what?");
else
  iobj = this:match_object(iobjstr);
  if (!$command_utils:object_match_failed(iobj, iobjstr))
    iobj:look_in(dobjstr);
  endif
endif
"_:look_self" is not the name of any player.
    #1:look_self                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
#1:"look_self" this none this
desc = this:description(@args);
if (desc)
  player:tell_lines(desc);
else
  player:tell("You see nothing special.");
endif
Verb added [3] (2).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#571:look_self ()" name: "MOO verb: #571:look_self ()" type: moo-code content*: "" _data-tag: 109362297250
#$#: 109362297250
@integrate_room _ isn't set.
@integrate_player _ isn't set.
@integrate_container _ isn't set.
@through _ is "%Tn reflects: %t.(reflection)"
=> #565 (mirror)
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of Generic See-through Portal (#540).
-------------------------------- finished ---------------------------------
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of Generic See-through Portal (#540).
.reflection_msg          stormagnet (#246)     r c    {#69, "do", {"name", "player", {"dc"}}, " ", {"verb", "player", "see"}, " tlc reflected back."}
.oreflection_msg         stormagnet (#246)     r c    {#69, "do", {"name", "player", {"dc"}}, " ", {"verb", "player", "gazes"}, " into ", {"name", "thing", {"d"}}, "."}
-------------------------------- finished ---------------------------------
@integrate_room $mirror is ""
@integrate_player $mirror isn't set.
@integrate_container $mirror isn't set.
@nogo $mirror isn't set.
@onogo $mirror isn't set.
@arrive $mirror isn't set.
@oarrive $mirror isn't set.
@oleave $mirror isn't set.
@leave $mirror isn't set.
@nothing $mirror is "nothing"
@no_one $mirror is "no one"
@through $mirror is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $mirror is ""
@close $mirror is ""
@opened $mirror is ""
@closed $mirror is ""
@locked $mirror is "%Td %t:(is) locked."
@opens $mirror is ""
@closes $mirror is ""
@unlocked $mirror is "%Td %t:(is) unlocked."
@lock $mirror is "%Nd %n:(locks) the %ti to %td."
@unlock $mirror is "%Nd %n:(unlocks) the %ti to %td."
@locks $mirror is ""
@unlocks $mirror is ""
@knock $mirror is ""
@knocks $mirror is ""
@no_key $mirror is "You don't have the key for %td."
@self_closes $mirror is ""
@pull $mirror is "%Ni %n:(reaches) through the %ti to %td and %n:(pulls) %dd into %nld."
@reflection $mirror is "%Nd %n:(see) tlc reflected back."
@oreflection $mirror is "%Nd %n:(gazes) into %td."
0 errors.
Verb programmed.
@gaze on the mirror_hand is now "".
You set the "gaze" message of the mirror_hand (#571).
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.  He carries a microphone with a bit of a swagger.
#571:look_self, line 2:  Verb not found
... called from #3:l*ook (this == #398), line 13
(End of traceback)
Last modified Tue Apr 30 18:52:17 2013 PDT by Crag (#243).
#571:"look_self" this none this
pass(@args);
player:location():announce_all_but(player, this:gaze_msg());
#-1:Input to EVAL, line 4:  Verb not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
mirror_hand (#571) [ readable ]
  Owned by stormagnet (#246).
  Child of generic event dispatching object (#110).
  Location stormagnet (#246).
  #571:description              Crag (#243)          rxd    this none this
  #571:through_msg              unknown hacker (#35) rxd    this none this
  #571:look_self                Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
mirror_hand (#571) [ readable ]
  Owned by stormagnet (#246).
  Child of generic event dispatching object (#110).
  Location stormagnet (#246).
.through_msg             stormagnet (#246)     r c    {#69, "do", {"name", "thing", {"c"}}, " reflects: ", {"property", "thing", "reflection", 0}}
.reflection              stormagnet (#246)     r c    "An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.  He carries a microphone with a bit of a swagger."
.gaze_msg                stormagnet (#246)     r c    {#69, "do", {"name", "player", {"c"}}, " ", {"verb", "player", "gazes"}, " into ", {"name", "thing", {"i"}}, "."}
-------------------------------- finished ---------------------------------
Alias gaze_msg added to verb mirror_hand(#571):through_msg
Verbname is now mirror_hand(#571):"through_msg gaze_msg"
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.  He carries a microphone with a bit of a swagger.
#3:announce_all_but (this == #398), line 3:  Type mismatch
... called from #571:look_self, line 2
... called from #3:l*ook (this == #398), line 13
(End of traceback)
0 errors.
Verb programmed.
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.  He carries a microphone with a bit of a swagger.
Your current object is now $mirror, a mirror (#565).
@integrate_room $mirror is ""
@integrate_player $mirror isn't set.
@integrate_container $mirror isn't set.
@nogo $mirror isn't set.
@onogo $mirror isn't set.
@arrive $mirror isn't set.
@oarrive $mirror isn't set.
@oleave $mirror isn't set.
@leave $mirror isn't set.
@nothing $mirror is "nothing"
@no_one $mirror is "no one"
@through $mirror is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open $mirror is ""
@close $mirror is ""
@opened $mirror is ""
@closed $mirror is ""
@locked $mirror is "%Td %t:(is) locked."
@opens $mirror is ""
@closes $mirror is ""
@unlocked $mirror is "%Td %t:(is) unlocked."
@lock $mirror is "%Nd %n:(locks) the %ti to %td."
@unlock $mirror is "%Nd %n:(unlocks) the %ti to %td."
@locks $mirror is ""
@unlocks $mirror is ""
@knock $mirror is ""
@knocks $mirror is ""
@no_key $mirror is "You don't have the key for %td."
@self_closes $mirror is ""
@pull $mirror is "%Ni %n:(reaches) through the %ti to %td and %n:(pulls) %dd into %nld."
@reflection $mirror is "%Nd %n:(see) tlc reflected back."
@oreflection $mirror is "%Nd %n:(gazes) into %td."
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of Generic See-through Portal (#540).
.reflection_msg          stormagnet (#246)     r c    {#69, "do", {"name", "player", {"dc"}}, " ", {"verb", "player", "see"}, " tlc reflected back."}
.oreflection_msg         stormagnet (#246)     r c    {#69, "do", {"name", "player", {"dc"}}, " ", {"verb", "player", "gazes"}, " into ", {"name", "thing", {"d"}}, "."}
-------------------------------- finished ---------------------------------
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of Generic See-through Portal (#540).
-------------------------------- finished ---------------------------------
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of Generic See-through Portal (#540).
.reflection_msg          stormagnet (#246)     r c    {#69, "do", {"name", "p..
.oreflection_msg         stormagnet (#246)     r c    {#69, "do", {"name", "p..
 help_text               stormagnet (#246)     r c    {"Usage of $portal:", "..
,open_msg                stormagnet (#246)     r c    {#69, "do"}
,close_msg               stormagnet (#246)     r c    {#69, "do"}
,open                    unknown hack (#35)    r      1
,opened_msg              stormagnet (#246)     r c    {#69, "do"}
,closed_msg              stormagnet (#246)     r c    {#69, "do"}
 automatic               unknown hack (#35)    r      1
,locked_msg              stormagnet (#246)     r c    {#69, "do", {"name", "t..
 other_side              unknown hack (#35)    r      #-1
,opens_msg               stormagnet (#246)     r c    {#69, "do"}
,closes_msg              stormagnet (#246)     r c    {#69, "do"}
,user_key                unknown hack (#35)    r      #-1
,unlocked_msg            stormagnet (#246)     r c    {#69, "do", {"name", "t..
 lock_msg                stormagnet (#246)     r c    {#69, "do", {"name", "p..
 unlock_msg              stormagnet (#246)     r c    {#69, "do", {"name", "p..
,locked                  unknown hack (#35)    r      1
,locks_msg               stormagnet (#246)     r c    {#69, "do"}
,unlocks_msg             stormagnet (#246)     r c    {#69, "do"}
,knock_msg               stormagnet (#246)     r c    {#69, "do"}
,knocks_msg              stormagnet (#246)     r c    {#69, "do"}
,opaque                  unknown hack (#35)    r      0
 help                    stormagnet (#246)     r c    {"Usage of $portal:", "..
,no_key_msg              stormagnet (#246)     r c    {#69, "do", "You don't ..
 close_delay             unknown hack (#35)    r      -1
 closing_task            unknown hack (#35)    r      0
,self_closes_msg         stormagnet (#246)     r c    {#69, "do"}
 pull_msg                stormagnet (#246)     r c    {#69, "do", {"name", "p..
 obvious                 stormagnet (#246)     r c    1
,source                  stormagnet (#246)     r c    #-1
,dest                    stormagnet (#246)     r c    #398
 nogo_msg                stormagnet (#246)     r c    0
 onogo_msg               stormagnet (#246)     r c    0
 arrive_msg              stormagnet (#246)     r c    0
 oarrive_msg             stormagnet (#246)     r c    0
 oleave_msg              stormagnet (#246)     r c    0
 leave_msg               stormagnet (#246)     r c    0
 nothing_msg             stormagnet (#246)     r c    "nothing"
 no_one_msg              stormagnet (#246)     r c    {#69, "do", "no one"}
 prefix_name             stormagnet (#246)     r c    1
 through_msg             stormagnet (#246)     r c    {#69, "do", {"name", {"..
 walking_cost            unknown hack (#35)    r      1
 dependents              Core-Wizard (#184)    r      {}
,key                     stormagnet (#246)       c    0
,aliases                 stormagnet (#246)     r c    {"mirror"}
,description             stormagnet (#246)     r c    "An ordinary, medium-si..
,visible                 unknown hack (#35)    r      0
,integrate_room_msg      stormagnet (#246)     r c    {#69, "do"}
 integrate_player_msg    stormagnet (#246)     r c    ""
 integrate_container_msg stormagnet (#246)     r c    ""
,unique                  stormagnet (#246)     r c    0
 proper                  stormagnet (#246)     r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {641, 1367290048}
,core_names              stormagnet (#246)     r c    {}
-------------------------------- finished ---------------------------------
mirror (#565)   Generic See-through Portal (#540)   generic door (#121)   generic exit (#7)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
Parent changed.
The mirror(#565) has 1 kid.
pier glass (#567)
#576 does not exist.
Objects owned by stormagnet (from #0 to #573):
  9K #246 stormagnet                 [Front Parlour]
  5K #260 Generic Wind-Up Toy        [stormagnet]
  2K #261 Wind-Up Duck              *[North Vestibule]
  2K #266 tracery windows            *North Vestibule->Northern Entrance
  1K #267 Northern Entrance         
  1K #268 north                      *North Vestibule->Northern Entrance
  1K #259 generic rug                [Nowhere]
  1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling           *[generic room]
 <1K #273 timbered ceiling          *[North Vestibule]
  2K #274 chaise longue             *[North Vestibule]
  2K #275 butler's desk             *[North Vestibule]
 <1K #276 butler's key               [stormagnet]
  1K #277 demi-lune table           *[North Vestibule]
  1K #278 silver salver              [demi-lune table]
  1K #284 calling cards              [silver salver]
  1K #285 chandelier                 [timbered ceiling]
  2K #286 porter's chair            *[North Vestibule]
  1K #287 Great Hall                
 <1K #288 south                      *North Vestibule->Great Hall
 <1K #289 generic bot                [stormagnet]
  2K #249 tracery windows            Northern Entrance->*North Vestibule
  1K #292 Northeast Tower           
 <1K #293 east                       Great Hall->Northeast Tower
  1K #294 Northwest Tower           
 <1K #295 west                       Great Hall->Northwest Tower
  1K #296 East Hall                 
 <1K #297 south                      Northeast Tower->East Hall
  1K #298 Atrium                    
 <1K #300 north                      East Hall->Northeast Tower
 <1K #301 west                       Northeast Tower->Great Hall
  1K #302 Atrium                    
  1K #303 south                      Great Hall->Atrium
  1K #304 West Hall                 
 <1K #305 south                      Northwest Tower->West Hall
 <1K #306 north                      West Hall->Northwest Tower
 <1K #307 east                       West Hall->Atrium
 <1K #308 east                       Northwest Tower->Great Hall
 <1K #309 north                      Great Hall->*North Vestibule
  1K #310 East Foyer                
 <1K #311 east                       East Hall->East Foyer
 <1K #299 west                       East Hall->Atrium
  1K #312 Southeast Tower           
 <1K #313 south                      East Hall->Southeast Tower
 <1K #314 north                      Southeast Tower->East Hall
  1K #315 South Hall                
 <1K #316 west                       Southeast Tower->South Hall
 <1K #317 north                      South Hall->Atrium
  1K #318 South Vestibule           
 <1K #319 south                      South Hall->South Vestibule
 <1K #320 east                       South Hall->Southeast Tower
  1K #321 Southwest Tower           
 <1K #322 west                       South Hall->Southwest Tower
  1K #323 Muscician's Gallery       
  1K #324 steps                      East Hall->Muscician's Gallery
 <1K #325 north                      Atrium->Great Hall
 <1K #326 south                      Atrium->South Hall
 <1K #327 east                       Atrium->East Hall
 <1K #328 west                       Atrium->West Hall
 <1K #329 west                       East Foyer->East Hall
  1K #330 Ballroom                  
  1K #331 south                      East Foyer->Ballroom
  1K #332 Smoking Room Doorway      
  1K #333 first northern room        East Foyer->Smoking Room Doorwa
  1K #334 Dining Room Doorway       
  1K #335 second northern room       East Foyer->Dining Room Doorway
  1K #336 Drawing Room Doorway      
  1K #337 third northern room        East Foyer->Drawing Room Doorwa
  1K #338 Side Foyer                
  1K #339 turn corner                East Foyer->Side Foyer
 <1K #340 north                      Side Foyer->East Foyer
  1K #341 down                       Muscician's Gallery->East Hall
 <1K #342 north                      Southwest Tower->West Hall
 <1K #343 east                       Southwest Tower->South Hall
 <1K #344 north                      South Vestibule->South Hall
  1K #345 north                      Ballroom->East Foyer
  1K #346 Refreshment Room          
  1K #347 first southern room        Ballroom->Refreshment Room
  1K #348 Card Room                 
  1K #349 second southern room       Ballroom->Card Room
  1K #350 Smoking Room              
  1K #351 south                      Card Room->Smoking Room
  1K #352 north                      Card Room->Ballroom
  1K #353 East Servant's Passage    
  1K #354 east                       Card Room->East Servant's Pass
  1K #355 north                      Smoking Room->Card Room
  1K #356 north                      Refreshment Room->Ballroom
  1K #357 Fainting Room             
  1K #358 south                      Refreshment Room->Fainting Room
  1K #359 north                      Fainting Room->Refreshment Room
  1K #360 south                      Smoking Room Doorwa->East Foyer
  1K #361 Smoking Room              
  1K #362 north                      Smoking Room Doorwa->Smoking Room
  1K #363 south                      Smoking Room->Smoking Room Doorwa
  1K #364 Dining Room               
  1K #365 east                       Smoking Room->Dining Room
  1K #366 west                       Dining Room->Smoking Room
  1K #367 south                      Dining Room->Dining Room Doorway
  1K #368 Red Drawing Room          
  1K #369 east                       Dining Room->Red Drawing Room
  1K #370 north                      Dining Room Doorway->Dining Room
  1K #371 south                      Dining Room Doorway->East Foyer
  1K #372 west                       Red Drawing Room->Dining Room
  1K #373 south                      Red Drawing Room->Drawing Room Doorwa
  1K #374 Blue Drawing Room         
  1K #375 east                       Red Drawing Room->Blue Drawing Room
  1K #376 north                      Drawing Room Doorwa->Red Drawing Room
  1K #377 south                      Drawing Room Doorwa->East Foyer
  1K #378 west                       Blue Drawing Room->Red Drawing Room
  1K #379 Solarium                  
  1K #380 east                       Blue Drawing Room->Solarium
  1K #381 Morning Room              
  1K #382 south                      Blue Drawing Room->Morning Room
  1K #383 north                      Morning Room->Blue Drawing Room
  1K #384 east                       Morning Room->Solarium
  1K #385 Breakfast Room            
  1K #386 south                      Morning Room->Breakfast Room
  1K #387 north                      Breakfast Room->Morning Room
  1K #388 east                       Breakfast Room->Solarium
  1K #389 first western room         Solarium->Blue Drawing Room
  1K #390 second western room        Solarium->Morning Room
  1K #391 third western room         Solarium->Breakfast Room
  1K #392 fourth western room        Solarium->Breakfast Room
  1K #393 West Foyer                
 <1K #394 west                       West Hall->West Foyer
 <1K #395 east                       West Foyer->West Hall
  1K #396 South Foyer               
 <1K #397 south                      West Foyer->South Foyer
  1K #398 Front Parlour             
  1K #399 first northern room        West Foyer->Front Parlour
  1K #400 Music Room                
  1K #401 second northern room       West Foyer->Music Room
  1K #402 Green Drawing Room        
  1K #403 third northern room        West Foyer->Green Drawing Room
  1K #404 Lower Library Doorway     
  1K #405 first southern room        West Foyer->Lower Library Doorw
  1K #406 Billiard Room Doorway     
  1K #407 second southern room       West Foyer->Billiard Room Doorw
  1K #408 south                      Front Parlour->West Foyer
  9K #409 west                       Front Parlour->Music Room
  1K #410 south                      Music Room->West Foyer
  1K #411 east                       Music Room->Front Parlour
  1K #412 west                       Music Room->Green Drawing Room
  1K #413 south                      Green Drawing Room->West Foyer
  1K #414 east                       Green Drawing Room->Music Room
  1K #415 Conservatory              
  1K #416 west                       Green Drawing Room->Conservatory
  1K #418 northeast                  Conservatory->Green Drawing Room
  1K #417 southeast                  Conservatory->West Foyer
  1K #419 Lower Library             
  1K #420 south                      Lower Library Doorw->Lower Library
  1K #421 north                      Lower Library Doorw->West Foyer
  1K #422 West Servant's Passage    
  1K #423 west                       Lower Library Doorw->West Servant's Pass
  1K #424 north                      Lower Library->Lower Library Doorw
  1K #425 east                       West Servant's Pass->Lower Library Doorw
  1K #426 west                       West Servant's Pass->Billiard Room Doorw
  1K #427 north                      Billiard Room Doorw->West Foyer
  1K #428 Billiard Room             
  1K #429 south                      Billiard Room Doorw->Billiard Room
  1K #430 east                       Billiard Room Doorw->West Servant's Pass
  1K #431 Billiard Room Servant's P 
  1K #432 west                       Billiard Room Doorw->Billiard Room Serva
  1K #433 north                      Billiard Room->Billiard Room Doorw
  1K #434 Back Parlour              
  1K #435 south                      Billiard Room->Back Parlour
  1K #436 north                      Back Parlour->Billiard Room
  1K #437 Back Parlour Doorway      
  1K #438 west                       Back Parlour->Back Parlour Doorwa
  1K #439 north                      Back Parlour Doorwa->Billiard Room Serva
  1K #440 east                       Back Parlour Doorwa->Back Parlour
  1K #441 west                       Back Parlour Doorwa->South Foyer
  1K #442 Back Parlour Servant's Pa 
  1K #443 south                      Back Parlour Doorwa->Back Parlour Servan
  1K #444 north                      Back Parlour Servan->Back Parlour Doorwa
  1K #446 White Drawing Room Doorwa 
  1K #447 south                      Back Parlour Servan->White Drawing Room 
  1K #449 White Drawing Room        
  1K #450 east                       White Drawing Room ->White Drawing Room
  1K #451 west                       White Drawing Room ->South Foyer
  1K #452 Back Scullery Servant's P 
  1K #453 south                      White Drawing Room ->Back Scullery Serva
  1K #454 north                      White Drawing Room ->Back Parlour Servan
  1K #455 west                       White Drawing Room->White Drawing Room 
  1K #456 north                      Back Scullery Serva->White Drawing Room 
  1K #457 Back Scullery             
  1K #458 east                       Back Scullery Serva->Back Scullery
  1K #459 south                      Billiard Room Serva->Back Parlour Doorwa
  1K #460 east                       Billiard Room Serva->Billiard Room Doorw
  1K #461 west                       Back Scullery->South Foyer
  1K #462 Winter Hall               
 <1K #463 south                      South Foyer->Winter Hall
 <1K #464 northeast                  South Foyer->West Foyer
  1K #465 Dining Room Servant's Pas 
  1K #466 west                       Dining Room Doorway->Dining Room Servant
  1K #467 Drawing Room Servant's Pa 
  1K #468 east                       Dining Room Doorway->Drawing Room Servan
  1K #469 east                       Dining Room Servant->Dining Room Doorway
  1K #470 west                       Dining Room Servant->Smoking Room Doorwa
  1K #471 east                       Smoking Room Doorwa->Dining Room Servant
  1K #472 west                       Drawing Room Servan->Dining Room Doorway
  1K #473 east                       Drawing Room Servan->Drawing Room Doorwa
  1K #474 west                       Drawing Room Doorwa->Drawing Room Servan
  1K #475 east                       Drawing Room Doorwa->East Servant's Pass
  1K #476 west                       East Servant's Pass->Card Room
  1K #477 north                      East Servant's Pass->Drawing Room Doorwa
 <1K #478 north                      Winter Hall->South Foyer
  1K #479 first eastern room         South Foyer->Back Parlour Doorwa
  1K #480 second eastern room        South Foyer->White Drawing Room 
  1K #481 Water Closet              
  1K #482 third eastern room         South Foyer->Water Closet
  1K #483 fourth eastern room        South Foyer->Back Scullery
  1K #484 first western room         South Foyer->Conservatory
  1K #485 Summer Hall               
  1K #486 second western room        South Foyer->Summer Hall
  1K #487 Theater                   
  1K #488 third western room         South Foyer->Theater
  1K #489 Backstage                 
  1K #490 fourth western room        South Foyer->Backstage
 <1K #491 east                       Backstage->South Foyer
  1K #492 Stage                     
  1K #493 north                      Backstage->Stage
  1K #494 south                      Stage->Backstage
 <1K #495 down                       Stage->Theater
 <1K #496 up                         Theater->Stage
  1K #497 east                       Theater->South Foyer
  1K #498 east                       Summer Hall->South Foyer
  8K #499 chaise longue              [Nowhere]
  1K #500 chair                      [Nowhere]
  1K #501 bed                        [Nowhere]
 <1K #506 tea table                  [Front Parlour]
  2K #512 floor                      [Nowhere]
  1K #513 front parlour floor        [Front Parlour]
 <1K #515 front parlour ceiling      [Front Parlour]
 <1K #514 brass chandelier           [front parlour ceiling]
 <1K #516 oriental rug               [Front Parlour]
  4K #502 settee                     [Nowhere]
  2K #517 settee                     [Front Parlour]
  1K #518 walls                      [Nowhere]
 <1K #519 walls                      [Front Parlour]
 <1K #520 acanthus leaves            [walls]
  2K #521 picture_rail               [Nowhere]
 <1K #522 frieze                     [walls]
  1K #523 cornice                    [walls]
  1K #524 picture rail               [walls]
  2K #525 painting                   [Nowhere]
  1K #526 floor                      [Great Hall]
 <1K #527 walls                      [Great Hall]
  1K #528 basalt block               [walls]
  2K #529 pillar                     [Nowhere]
  1K #530 pillars                    [Great Hall]
  3K #534 chaise longue              [Great Hall]
  1K #535 demi-lune tables           [Great Hall]
  1K #536 vase                       [Nowhere]
 <1K #537 crystal vases              [demi-lune tables]
  3K #538 flower                     [Nowhere]
  2K #539 bouquet                    [Nowhere]
  3K #541 desk                       [Nowhere]
  2K #542 drawer                     [Nowhere]
  1K #543 bureau a gradin            [Front Parlour]
  1K #544 bottom drawer              [bureau a gradin]
  1K #545 left drawer                [bureau a gradin]
  1K #546 middle drawer              [bureau a gradin]
  1K #547 right drawer               [bureau a gradin]
  1K #548 desk chair                 [Front Parlour]
  1K #549 sideboard                  [Front Parlour]
  1K #550 left cabinet               [sideboard]
  1K #551 right cabinet              [sideboard]
  1K #552 top drawer                 [sideboard]
  1K #553 middle drawer              [sideboard]
  1K #554 bottom drawer              [sideboard]
  1K #555 vaulted ceiling            [Great Hall]
  1K #556 engraving                  [vaulted ceiling]
  1K #508 fireplace                  [Nowhere]
  8K #557 door_secret                <invalid>-><invalid>
  1K #559 west                       Water Closet->South Foyer
  1K #245 leather couch              [stormagnet]
  2K #262 detailed painting         *[North Vestibule]
  1K #263 bridge                     [detailed painting]
  1K #282 microphone                *[Crag]
  7K #503 portal_unopenable          <invalid>-><invalid>
 10K #258 $portal_unclosable         <invalid>-><invalid>
 <1K #507 front parlour fireplace    [Front Parlour]
  1K #505 armchair                   [Front Parlour]
 <1K #563 mantle                     [stormagnet]
 <1K #564 hearth                     [front parlour fireplace]
 <1K #565 mirror                     [Nowhere]
 <1K #566 tile                       [hearth]
 <1K #568 urn                        [Nowhere]
 <1K #569 left urn                   [mantle]
 <1K #570 right urn                  [mantle]
  1K #567 pier glass                 [Front Parlour]
  1K #571 mirror_hand                [stormagnet]
 <1K #572 fuel                       [stormagnet]
 <1K #573 daisy                      [stormagnet]
-- 295 objects.  Total bytes: 472,854.----------------------------------------
Your current object is now #571.
mirror_hand (#571) [ readable ]
  Owned by stormagnet (#246).
  Child of generic event dispatching object (#110).
  Location stormagnet (#246).
  #571:description              Crag (#243)          rxd    this none this
  #571:"through_msg gaze_msg"   unknown hacker (#35) rxd    this none this
  #571:look_self                Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Tue Apr 30 18:48:19 2013 PDT by Crag (#243).
#571:"description" this none this
self = pass(@args);
if (typeof(self) == STR)
  self = {self};
endif
// The mirror you see
// Has a memory
//   ... special feature?
this.reflection = player:integrated_desc()[1];
if (typeof(this.reflection) == LIST)
  this.reflection = $string_utils:from_list(this.reflection, "  ");
endif
reflection = this:through_msg();
if (typeof(reflection) == STR)
  reflection = {reflection};
endif
return {@self, @reflection};
Verb added [4] (3).
Now programming mirror_hand:target[4](3).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#571:description this none this" name: "MOO verb: #571:description this none this" type: moo-code content*: "" _data-tag: 1321388234251
#$#* 1321388234251 content: self = pass(@args);
#$#* 1321388234251 content: if (typeof(self) == STR)
#$#* 1321388234251 content:   self = {self};
#$#* 1321388234251 content: endif
#$#* 1321388234251 content: // The mirror you see
#$#* 1321388234251 content: // Has a memory
#$#* 1321388234251 content: //   ... special feature?
#$#* 1321388234251 content: this.reflection = player:integrated_desc()[1];
#$#* 1321388234251 content: if (typeof(this.reflection) == LIST)
#$#* 1321388234251 content:   this.reflection = $string_utils:from_list(this.reflection, "  ");
#$#* 1321388234251 content: endif
#$#* 1321388234251 content: reflection = this:through_msg();
#$#* 1321388234251 content: if (typeof(reflection) == STR)
#$#* 1321388234251 content:   reflection = {reflection};
#$#* 1321388234251 content: endif
#$#* 1321388234251 content: return {@self, @reflection};
#$#: 1321388234251
0 errors.
Verb programmed.
A small hand mirror.
Mirror_hand reflects: An anachronistic cliche barbarian.   He may wish to axe you a question.    He may also wish to test descriptions with blank lines in them.  He carries a microphone with a bit of a swagger.
Your current object is now $mirror (#565).
Parent changed.
Verb added [1] (0).
Now programming mirror:target[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
An ordinary, medium-sized mirror, with a plain birchwood frame.
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of Interface (#561).
  #565:target                   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
mirror_hand (#571) [ readable ]
  Owned by stormagnet (#246).
  Child of generic event dispatching object (#110).
  Location stormagnet (#246).
  #571:description              Crag (#243)          rxd    this none this
  #571:"through_msg gaze_msg"   unknown hacker (#35) rxd    this none this
  #571:look_self                Crag (#243)          rxd    this none this
  #571:target                   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
@integrate_room _ is ""
@integrate_player _ isn't set.
@integrate_container _ isn't set.
@reflection _ is "%Nd %n:(see) tlc reflected back."
@oreflection _ is "%Nd %n:(gazes) into %td."
@integrate_room #571 isn't set.
@integrate_player #571 isn't set.
@integrate_container #571 isn't set.
@through #571 is "%Tn reflects: %t.(reflection)"
@gaze #571 is "%Nn %n:(gazes) into %ti."
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
mirror (#565)   Interface (#561)   Blank Root (#560)   root class (#1)
The mirror(#565) has 1 kid.
pier glass (#567)
Parent changed.
#571:description (this == #565), line 8:  Verb not found
... called from #1:look_self (this == #565), line 1
... called from #571:look_self (this == #565), line 1
... called from #3:l*ook (this == #398), line 13
(End of traceback)
Object #565 does not define that verb, but its ancestor #571 does.
Last modified Tue Apr 30 18:58:24 2013 PDT by Crag (#243).
#571:"description" this none this
self = pass(@args);
if (typeof(self) == STR)
  self = {self};
endif
// The mirror you see
// Has a memory
//   ... special feature?
this.reflection = this:target():integrated_desc()[1];
if (typeof(this.reflection) == LIST)
  this.reflection = $string_utils:from_list(this.reflection, "  ");
endif
reflection = this:through_msg();
if (typeof(reflection) == STR)
  reflection = {reflection};
endif
return {@self, @reflection};
Last modified Thu Jul 19 07:52:28 2001 PDT by Xplat (#4014) (on Waterpoint).
#3:"description" this none this
// If there's more than one paragraph of description, then add integration messages to the end as a separate paragraph(s).
// If there are more than one paragraph of integration messages, add them as separate paragraphs to the end of the description.
// Otherwise, append the integration message to the end of the description paragraph.
desc = pass(@args);
if (!this.integrate_paragraphs)
  integrate = $integration_utils:integrate(args, "integrate_room_msg");
  integrate_sep = $string_utils:pronoun_sub(this.integrate_sep_msg);
  if (integrate)
    if ((sep_is_list = typeof(integrate_sep) == LIST) || !integrate_sep || length(desc) > 1 || length(integrate) > 1)
      if (sep_is_list)
        desc = {@desc, @integrate_sep, @integrate};
      else
        desc = {@desc, @integrate};
      endif
    else
      if (desc)
        desc = {desc[1] + integrate_sep + integrate[1]};
      else
        desc = integrate;
      endif
    endif
  endif
  return desc;
else
  if (!desc)
    desc = {""};
  endif
  explicit = $list_utils:flatten(integrate = this.integrate_paragraphs);
  integrate_objects = {@this:contents(), @this:exits()};
  for i in [1..length(integrate)]
    ni = {};
    for elt in (integrate[i])
      if (elt in integrate_objects || typeof(elt) in {LIST, STR})
        ni = {@ni, elt};
      endif
    endfor
    integrate[i] = ni;
  endfor
  // integrate[i] = $set_utils:intersection(integrate[i], $set_utils:union(this:contents(), this:exits()));
  if (misc = $set_utils:diff($list_utils:flatten(args), explicit))
    integrate[l = length(integrate)] = {@integrate[l], @misc};
  endif
  if (length(desc) == 1)
    integrate[1] = {@desc, @integrate[1]};
  else
    integrate[1] = {desc[$], @integrate[1]};
    for i in [1..length(desc) - 1]
      integrate = {{desc[$ - i]}, @integrate};
    endfor
  endif
  return $integration_utils:integrate(integrate, "integrate_room_msg");
endif
Verb added [69] (68).
#$#dns-org-mud-moo-simpleedit-content 579044058 reference: "#3:integrated_description ()" name: "MOO verb: #3:integrated_description ()" type: moo-code content*: "" _data-tag: 1979826668252
#$#: 1979826668252
Error programming generic room:integrated_description[69](68).
Line 1:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
#571:description (this == #565), line 8:  Verb not found
... called from #1:look_self (this == #565), line 1
... called from #571:look_self (this == #565), line 1
... called from #3:l*ook (this == #398), line 13
(End of traceback)
Object #565 does not define that verb, but its ancestor #571 does.
Last modified Tue Apr 30 18:58:24 2013 PDT by Crag (#243).
#571:"description" this none this
self = pass(@args);
if (typeof(self) == STR)
  self = {self};
endif
// The mirror you see
// Has a memory
//   ... special feature?
this.reflection = this:target():integrated_desc()[1];
if (typeof(this.reflection) == LIST)
  this.reflection = $string_utils:from_list(this.reflection, "  ");
endif
reflection = this:through_msg();
if (typeof(reflection) == STR)
  reflection = {reflection};
endif
return {@self, @reflection};
@integrate_room _ is ""
@integrate_player _ isn't set.
@integrate_container _ isn't set.
@through _ is "%Tn reflects: %t.(reflection)"
@gaze _ is "%Nn %n:(gazes) into %ti."
@reflection _ is "%Nd %n:(see) tlc reflected back."
@oreflection _ is "%Nd %n:(gazes) into %td."
=> #398 (Front Parlour)
#-1:Input to EVAL, line 4:  Verb not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
mirror (#565) [ readable ]
  Owned by stormagnet (#246).
  Child of mirror_hand (#571).
  #565:target                   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
    #3:confunc                  unknown hacker (#35) rxd    this none this
    #3:disfunc                  unknown hacker (#35) rxd    this none this
    #3:say                      unknown hacker (#35) rxd    any any any
    #3:emote                    unknown hacker (#35) rxd    any any any
    #3:announce                 unknown hacker (#35) rxd    this none this
    #3:"match_exit match_entrance" unknown hacker (#35) rxd this none this
    #3:add_exit                 Core-Wizard (#184)   rxd    this none this
    #3:tell_contents            unknown hacker (#35) rxd    this none this
    #3:@exits                   unknown hacker (#35) rxd    any none none
    #3:add_entrance             Core-Wizard (#184)   rxd    this none this
    #3:bless_for_entry          Core-Wizard (#184)   rxd    this none this
    #3:@entrances               Core-Wizard (#184)   r d    none none none
    #3:go                       Core-Wizard (#184)   rxd    any none none
    #3:l*ook                    unknown hacker (#35) rxd    any any any
    #3:announce_all             unknown hacker (#35) rxd    this none this
    #3:announce_all_but         unknown hacker (#35) rxd    this none this
    #3:enterfunc                Core-Wizard (#184)   rxd    this none this
    #3:remove_exit              Core-Wizard (#184)   rxd    this none this
    #3:remove_entrance          Core-Wizard (#184)   rxd    this none this
    #3:"@add-exit @addexit"     Core-Wizard (#184)   r d    any none none
    #3:"@add-entrance @addentrance" Core-Wizard (#184) r d  any none none
    #3:recycle                  Core-Wizard (#184)   rxd    this none this
    #3:"e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down" unknown hacker (#35) rxd none none none
    #3:@eject                   Core-Wizard (#184)   r d    any none none
    #3:"ejection_msg oejection_msg victim_ejection_msg" unknown hacker (#35) rxd this none this
    #3:accept_for_abode         unknown hacker (#35) rxd    this none this
    #3:@resident*s              Core-Wizard (#184)   r d    any none none
    #3:@remove-exit             Core-Wizard (#184)   r d    any none none
    #3:@remove-entrance         Core-Wizard (#184)   r d    any none none
    #3:moveto                   Core-Wizard (#184)   rxd    this none this
    #3:who_location_msg         unknown hacker (#35) rxd    this none this
    #3:"exits entrances"        Core-Wizard (#184)   rxd    this none this
    #3:obvious_exits            unknown hacker (#35) rxd    this none this
    #3:here_huh                 Core-Wizard (#184)   rxd    this none this
    #3:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #3:examine_commands_ok      unknown hacker (#35) rxd    this none this
    #3:examine_key              Core-Wizard (#184)   rxd    this none this
    #3:examine_contents         unknown hacker (#35) rxd    this none this
    #3:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #3:look_self                unknown hacker (#35) rxd    this none this
    #3:description              unknown hacker (#35) rxd    this none this
    #3:where_am_i               unknown hacker (#35) rxd    this none this
    #3:"housekeeper_msg housekeeper_deposit_msg" unknown hacker (#35) rxd this none this
    #3:look_in                  unknown hacker (#35) rxd    this none this
    #3:namec_for_look_self      unknown hacker (#35) rxd    this none this
    #3:set_integrate_unknown_objects unknown hacker (#35) rx this none this
    #3:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
    #3:reconfunc                unknown hacker (#35) rxd    this none this
    #3:sit                      unknown hacker (#35) rxd    none none none
    #3:stand                    unknown hacker (#35) r d    none none none
    #3:topic_msg                unknown hacker (#35) rxd    this none this
    #3:topic                    unknown hacker (#35) r d    any any any
    #3:set_topic_sign           topic-owner (#181)   rxd    this none this
    #3:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #3:match_type_object        unknown hacker (#35) rxd    this none this
    #3:party_location           unknown hacker (#35) rxd    this none this
    #3:init_for_core            Core-Wizard (#184)   rxd    this none this
    #3:acceptable               Core-Wizard (#184)   rxd    this none this
    #3:is_public_location       Core-Wizard (#184)   rxd    this none this
    #3:objects_for_match        unknown hacker (#35) rxd    this none this
    #3:set_walking_cost         unknown hacker (#35) rxd    this none this
    #3:walking_cost             unknown hacker (#35) rxd    this none this
    #3:"can_add_exit can_add_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_remove_exit can_remove_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_read_exits can_read_entrances" Core-Wizard (#184) rxd this none this
    #3:terrain_delay            unknown hacker (#35) rxd    this none this
    #3:set_terrain_delay        unknown hacker (#35) rx     this none this
    #3:"walk_failed_source walk_failed_dest" unknown hacker (#35) rxd this none this
    #3:integrated_description   Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb name changed.
An ordinary, medium-sized mirror, with a plain birchwood frame.
Mirror reflects: A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.
You say, "To turn off ^S, put this in your .bashrc:"
Crag | stty ^s none
You say, "no that's not right.."
Crag | stty stop ""
