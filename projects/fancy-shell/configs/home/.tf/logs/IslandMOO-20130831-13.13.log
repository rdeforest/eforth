Welcome to IslandMOO

Have a pleasant visit.
*** Connected ***
#$#mcp version: 2.1 to: 2.1
The Music Room
You see nothing special.
Last connected Sat Aug 17 13:09:55 2013 PDT from localhost
#$#mcp-negotiate-can 1519688711 package: mcp-negotiate min-version: 1.0 max-version: 2.0
#$#mcp-negotiate-can 1519688711 package: mcp-cord min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-can 1519688711 package: dns-org-mud-moo-simpleedit min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-end 1519688711
Objects owned by Crag (from #0 to #577):
 12K #243 Crag                      *[Music Room]
  1K #244 generic group              [Nowhere]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Nowhere]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Nowhere]
 <1K #252 Parsing objects            [Nowhere]
 <1K #253 Text generation objects    [Nowhere]
 <1K #254 Abstract class             [Nowhere]
  4K #255 Generic Pilable Thing      [Nowhere]
 <1K #264 adventure party           *[bridge]
  2K #265 Generic Nesting Decoratio  [Nowhere]
  7K #269 Delegator                  [Nowhere]
  1K #270 Delegate                   [Nowhere]
 <1K #271 New Generic Room           [Nowhere]
  1K #279 Room Exit Delegate         [Nowhere]
  3K #280 Generic Table              [Nowhere]
  3K #290 How $staff will notice pe *[butler's desk]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
  1K #509 Generic Input Handler      [Nowhere]
  1K #510 Generic Command Handler    [Nowhere]
 <1K #511 Beaker's Commands          [Nowhere]
  1K #531 Generic Command            [Nowhere]
 <1K #532 Generic English Command    [Nowhere]
 <1K #533 Grouping Command           [Nowhere]
 14K #540 Generic See-through Porta  <invalid>-><invalid>
 26K #558 Cardgame Feature           [Nowhere]
 <1K #560 Blank Root                 [Nowhere]
 <1K #561 Interface                  [Nowhere]
 <1K #562 Class                      [Nowhere]
 <1K #247 Delegation Utilities       [Nowhere]
  6K #574 Clock                     *[Front Parlour]
  2K #504 Source control strategy    [Nowhere]
-- 35 objects.  Total bytes: 115,312.-----------------------------------------
A generic group materializes out of thin air, moved by Crag.
Moved.
generic group (#244) [ readable ]
  Child of Abstract class (#254).
  Location Music Room (#400).
-------------------------------- finished ---------------------------------
generic group (#244) [ readable ]
  Child of Abstract class (#254).
  Location Music Room (#400).
-------------------------------- finished ---------------------------------
Abstract class (#254) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of Generic Virtual Reality Object (#291).
  Location generic room (#3).
    #5:"get take"               Core-Wizard (#184)   rxd    this none none
    #5:"d*rop throw chuck"      Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Parent changed.
The Abstract class(#254) has 17 kids.
Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Generic Option Package (#60)   Generic Feature Object (#65)   generic admin group (#163)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   Generic BigList Resident (#75)   generic property farm (#206)   Generic Pronoun_sub Translator (#73)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)
Your current object is now a generic group (#244).
Last modified Sat Apr 20 14:20:55 2013 PDT by Crag (#243).
#1:"location" this none this
return this.location:location_for_caller();
Last modified Sat Apr 20 14:20:34 2013 PDT by Crag (#243).
#1:"location_for_caller" this none this
// We're assuming the caller is actually in this. If not, why are they calling? The point is that group objects which want their contents to not know they're contained can override this.
return this;
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#1:location_for_caller this none this" name: "MOO verb: #1:location_for_caller this none this" type: moo-code content*: "" _data-tag: 2027148982287
#$#* 2027148982287 content: // We're assuming the caller is actually in this. If not, why are they calling? The point is that group objects which want their contents to not know they're contained can override this.
#$#* 2027148982287 content: return this;
#$#: 2027148982287
0 errors.
Verb programmed.
@integrate_room _ isn't set.
@integrate_player _ isn't set.
@integrate_container _ isn't set.
@drop_failed _ is "You can't seem to drop %td here."
@drop_succeeded _ is "You drop %td."
@odrop_failed _ is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded _ is "%n:(drops) %ti."
@otake_succeeded _ is "%n:(picks) up %td."
@otake_failed _ isn't set.
@take_succeeded _ is "You take %td."
@take_failed _ is "You can't pick up %td."
The Music Room
You see nothing special.
You see a generic group here.
Usage:  @grepcore <pattern>
Searching for core verbs containing the string ":description" ...

#4:@room-info [+d Crag (#243)]:    desc = toliteral(e:description());
#21:get_topic [+d unknown hacker (#35)]:  if (topic == "$" + topic[2..length(topic) - 5] + "utils" && (valid(#0.(w = strsub(topic[2..length(topic)], "-", "_"))) && (uhelp = #0.(w):description())))
#21:topic_text [+d Core-Wizard (#184)]:    return uobj:description();
#6:@ex*amine [+d Core-Wizard (#184)]:  desc = what:description();
#6:integrated_desc [+d Crag (#243)]:  desc = this:description(integrate);
#41:look_self [+d Core-Wizard (#184)]:  d = this:description();
#42:look_self [+d unknown hacker (#35)]:  player:tell_lines(this:description());
#42:acceptable [+d unknown hacker (#35)]:  return $object_utils:isa(what, $mail_recipient) && this:check_names(what) && what:description() != parent(what):description();
#141:news_display_seq_full [+d Core-Wizard (#184)]:  player:tell_lines({"", this:description()[1], ""});
#9:deliver_to [+d Core-Wizard (#184)]:    hdesc = $jtext:make_vgroup(this:description());
#7:dest_description [+d Core-Wizard (#184)]:    desc = dest:description();
#3:look_self [+d unknown hacker (#35)]:    desc = this:description(integrate);
#3:integrated_desc [+d Crag (#243)]:  return {this:description(), {}};
#1:look_self [+d unknown hacker (#35)]:  desc = this:description(@args);
#1:examine_desc [+d unknown hacker (#35)]:  return this:description() || {"(No description set.)"};
#56:look_self [+d unknown hacker (#35)]:  player:tell_lines(this:description());
#63:look_self [+d housekeeper (#63)]:  player:tell_lines(this:description());
#65:look_self [+d unknown hacker (#35)]:  desc = this:description();
#163:description [+d unknown hacker (#35)]:      desc = {@desc, "", @sub:description(1)};
#163:help_text [+d unknown hacker (#35)]:  return this:description(@args);
#8:look_self [+d unknown hacker (#35)]:    desc = this:description(@args);
#175:description [+d Core-Wizard (#184)]:  "Usage:  :description()";
#203:pack_description [+d Core-Wizard (#184)]:  this:pack_lines(this:description());
#193:help_text [+d Core-Wizard (#184)]:  return this:description();
#151:look_self [+d unknown hacker (#35)]:  desc = this:description(@args);
#90:send_to [-d Core-Wizard (#184)]:  for line in (it:description())

Total: 26 verbs.
The verb :take is on   Crag(#243)--generic player(#6)   generic group(#244)--generic thing(#5)   Cardgame Feature(#558)
Object #243 does not define that verb, but its ancestor #6 does.
#6:"get take" this none none
player:tell("This is not a pick-up joint!");
this:tell(player:dnamec(), " tried to pick you up!");
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
    #3:confunc                  unknown hacker (#35) rxd    this none this
    #3:disfunc                  unknown hacker (#35) rxd    this none this
    #3:say                      unknown hacker (#35) rxd    any any any
    #3:emote                    unknown hacker (#35) rxd    any any any
    #3:announce                 unknown hacker (#35) rxd    this none this
    #3:"match_exit match_entrance" unknown hacker (#35) rxd this none this
    #3:add_exit                 Core-Wizard (#184)   rxd    this none this
    #3:tell_contents            unknown hacker (#35) rxd    this none this
    #3:@exits                   unknown hacker (#35) rxd    any none none
    #3:add_entrance             Core-Wizard (#184)   rxd    this none this
    #3:bless_for_entry          Core-Wizard (#184)   rxd    this none this
    #3:@entrances               Core-Wizard (#184)   r d    none none none
    #3:go                       Core-Wizard (#184)   rxd    any none none
    #3:l*ook                    unknown hacker (#35) rxd    any any any
    #3:announce_all             unknown hacker (#35) rxd    this none this
    #3:announce_all_but         unknown hacker (#35) rxd    this none this
    #3:enterfunc                Core-Wizard (#184)   rxd    this none this
    #3:remove_exit              Core-Wizard (#184)   rxd    this none this
    #3:remove_entrance          Core-Wizard (#184)   rxd    this none this
    #3:"@add-exit @addexit"     Core-Wizard (#184)   r d    any none none
    #3:"@add-entrance @addentrance" Core-Wizard (#184) r d  any none none
    #3:recycle                  Core-Wizard (#184)   rxd    this none this
    #3:"e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down" unknown hacker (#35) rxd none none none
    #3:@eject                   Core-Wizard (#184)   r d    any none none
    #3:"ejection_msg oejection_msg victim_ejection_msg" unknown hacker (#35) rxd this none this
    #3:accept_for_abode         unknown hacker (#35) rxd    this none this
    #3:@resident*s              Core-Wizard (#184)   r d    any none none
    #3:@remove-exit             Core-Wizard (#184)   r d    any none none
    #3:@remove-entrance         Core-Wizard (#184)   r d    any none none
    #3:moveto                   Core-Wizard (#184)   rxd    this none this
    #3:who_location_msg         unknown hacker (#35) rxd    this none this
    #3:"exits entrances"        Core-Wizard (#184)   rxd    this none this
    #3:obvious_exits            unknown hacker (#35) rxd    this none this
    #3:here_huh                 Core-Wizard (#184)   rxd    this none this
    #3:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #3:examine_commands_ok      unknown hacker (#35) rxd    this none this
    #3:examine_key              Core-Wizard (#184)   rxd    this none this
    #3:examine_contents         unknown hacker (#35) rxd    this none this
    #3:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #3:look_self                unknown hacker (#35) rxd    this none this
    #3:description              unknown hacker (#35) rxd    this none this
    #3:where_am_i               unknown hacker (#35) rxd    this none this
    #3:"housekeeper_msg housekeeper_deposit_msg" unknown hacker (#35) rxd this none this
    #3:look_in                  unknown hacker (#35) rxd    this none this
    #3:namec_for_look_self      unknown hacker (#35) rxd    this none this
    #3:set_integrate_unknown_objects unknown hacker (#35) rx this none this
    #3:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
    #3:reconfunc                unknown hacker (#35) rxd    this none this
    #3:sit                      unknown hacker (#35) rxd    none none none
    #3:stand                    unknown hacker (#35) r d    none none none
    #3:topic_msg                unknown hacker (#35) rxd    this none this
    #3:topic                    unknown hacker (#35) r d    any any any
    #3:set_topic_sign           topic-owner (#181)   rxd    this none this
    #3:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #3:match_type_object        unknown hacker (#35) rxd    this none this
    #3:party_location           unknown hacker (#35) rxd    this none this
    #3:init_for_core            Core-Wizard (#184)   rxd    this none this
    #3:acceptable               Core-Wizard (#184)   rxd    this none this
    #3:is_public_location       Core-Wizard (#184)   rxd    this none this
    #3:objects_for_match        unknown hacker (#35) rxd    this none this
    #3:set_walking_cost         unknown hacker (#35) rxd    this none this
    #3:walking_cost             unknown hacker (#35) rxd    this none this
    #3:"can_add_exit can_add_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_remove_exit can_remove_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_read_exits can_read_entrances" Core-Wizard (#184) rxd this none this
    #3:terrain_delay            unknown hacker (#35) rxd    this none this
    #3:set_terrain_delay        unknown hacker (#35) rx     this none this
    #3:"walk_failed_source walk_failed_dest" unknown hacker (#35) rxd this none this
    #3:integrated_desc          Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
;verbs(#3) => {"confunc", "disfunc", "say", "emote", "announce", "match_exit match_entrance", "add_exit", "tell_contents", "@exits", "add_entrance", "bless_for_entry", "@entrances", "go", "l*ook", "announce_all", "announce_all_but", "enterfunc", "remove_exit", "remove_entrance", "@add-exit @addexit", "@add-entrance @addentrance", "recycle", "e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down", "@eject", "ejection_msg oejection_msg victim_ejection_msg", "accept_for_abode", "@resident*s", "@remove-exit", "@remove-entrance", "moveto", "who_location_msg", "exits entrances", "obvious_exits", "here_huh", "room_announce*_all_but", "examine_commands_ok", "examine_key", "examine_contents", "ok_to_integrate", "look_self", "description", "where_am_i", "housekeeper_msg housekeeper_deposit_msg", "look_in", "namec_for_look_self", "set_integrate_unknown_objects", "dependents dependents_event_*", "reconfunc", "sit", "stand", "topic_msg", "topic", "set_topic_sign", "event_really_disconnected", "match_type_object", "party_location", "init_for_core", "acceptable", "is_public_location", "objects_for_match", "set_walking_cost", "walking_cost", "can_add_exit can_add_entrance", "can_remove_exit can_remove_entrance", "can_read_exits can_read_entrances", "terrain_delay", "set_terrain_delay", "walk_failed_source walk_failed_dest", "integrated_desc"}
=> {#243, #244}
You are empty-handed.
Objects owned by Crag (from #0 to #577):
 12K #243 Crag                      *[Music Room]
  1K #244 generic group             *[Music Room]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Nowhere]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Nowhere]
 <1K #252 Parsing objects            [Nowhere]
 <1K #253 Text generation objects    [Nowhere]
 <1K #254 Abstract class             [Nowhere]
  4K #255 Generic Pilable Thing      [Nowhere]
 <1K #264 adventure party           *[bridge]
  2K #265 Generic Nesting Decoratio  [Nowhere]
  7K #269 Delegator                  [Nowhere]
  1K #270 Delegate                   [Nowhere]
 <1K #271 New Generic Room           [Nowhere]
  1K #279 Room Exit Delegate         [Nowhere]
  3K #280 Generic Table              [Nowhere]
  3K #290 How $staff will notice pe *[butler's desk]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
  1K #509 Generic Input Handler      [Nowhere]
  1K #510 Generic Command Handler    [Nowhere]
 <1K #511 Beaker's Commands          [Nowhere]
  1K #531 Generic Command            [Nowhere]
 <1K #532 Generic English Command    [Nowhere]
 <1K #533 Grouping Command           [Nowhere]
 14K #540 Generic See-through Porta  <invalid>-><invalid>
 26K #558 Cardgame Feature           [Nowhere]
 <1K #560 Blank Root                 [Nowhere]
 <1K #561 Interface                  [Nowhere]
 <1K #562 Class                      [Nowhere]
 <1K #247 Delegation Utilities       [Nowhere]
  6K #574 Clock                     *[Front Parlour]
  2K #504 Source control strategy    [Nowhere]
-- 35 objects.  Total bytes: 115,312.-----------------------------------------
You now have contents test with object number #578 and parent generic note (#9).
The created object is now your current object.
You see no "note" here.
You drop the contents test.
=> {#243, #244, #578}
The Abstract class(#254) has 17 kids.
Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Generic Option Package (#60)   Generic Feature Object (#65)   generic admin group (#163)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   Generic BigList Resident (#75)   generic property farm (#206)   Generic Pronoun_sub Translator (#73)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)
Crag (#243)   generic wizard (#51)   generic programmer (#52)   generic builder (#4)   generic player (#6)   generic containing object (#145)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
generic builder (#4) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic player (#6).
  Location generic room (#3).
    #4:@quota                   Core-Wizard (#184)   r d    any none none
    #4:@create                  Core-Wizard (#184)   r d    any any any
    #4:@recycle                 Core-Wizard (#184)   r d    any none none
    #4:@recreate                Core-Wizard (#184)   r d    any as any
    #4:@dig                     Core-Wizard (#184)   r d    any any any
    #4:@auditDB                 Core-Wizard (#184)   r d    any any any
    #4:@count                   Core-Wizard (#184)   r d    any none none
    #4:@countDB                 Core-Wizard (#184)   r d    any none none
    #4:@sort-owned*-objects     Core-Wizard (#184)   r d    none none none
    #4:@add-owned               Core-Wizard (#184)   r d    any none none
    #4:@verify-owned            Core-Wizard (#184)   r d    none none none
    #4:@unlock                  Core-Wizard (#184)   r d    any none none
    #4:@lock                    Core-Wizard (#184)   r d    any with/using any
    #4:@newmess*age             Core-Wizard (#184)   r d    any any any
    #4:@unmess*age              Core-Wizard (#184)   r d    any any any
    #4:_messagify               Core-Wizard (#184)   rxd    this none this
    #4:@kids                    Core-Wizard (#184)   rxd    any none none
    #4:@contents                Core-Wizard (#184)   r d    any none none
    #4:@par*ents                Core-Wizard (#184)   r d    any none none
    #4:@location*s              Core-Wizard (#184)   r d    any none none
    #4:_create                  Core-Wizard (#184)   rxd    this none this
    #4:_recycle                 Core-Wizard (#184)   rxd    this none this
    #4:@audit                   Core-Wizard (#184)   r d    any any any
    #4:"@building-o*ptions @buildingo*ptions" Core-Wizard (#184) r d any any any
    #4:set_building_option      Core-Wizard (#184)   rxd    this none this
    #4:building_option          Core-Wizard (#184)   rxd    this none this
    #4:options_packages         unknown hacker (#35) rxd    this none this
    #4:@recycle!                Core-Wizard (#184)   r d    any none none
    #4:@move                    Core-Wizard (#184)   rxd    any at/to any
    #4:@measure                 Core-Wizard (#184)   r d    any any any
    #4:@grant                   Core-Wizard (#184)   r d    any at/to any
    #4:@set*property            Core-Wizard (#184)   r d    any at/to any
    #4:@room-info               Crag (#243)          r d    none none none
-------------------------------- finished ---------------------------------
dir  exit?  obj   name   desc
---  -----  ---   ----   ----
s    yes    #410  south  {"The doors are closed."}
e    yes    #411  east   {"In the Front Parlour, you see an oriental r...
w    yes    #412  west   {"The doors are closed."}
u                        no match
d                        no match
n                        no match
---  -----  ---   ----   ----
The verb :@kids is on   Crag(#243)--generic builder(#4)
#243:@kids code set.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#243:@kids any none none" name: "MOO verb: #243:@kids any none none" type: moo-code content*: "" _data-tag: 836949453288
#$#* 836949453288 content: // '@kids <obj>' - List the children of an object. This is handy for seeing whether anybody's actually using your carefully-wrought public objects.
#$#* 836949453288 content: thing = player:my_match_object(dobjstr);
#$#* 836949453288 content: if (!$command_utils:object_match_failed(thing, dobjstr))
#$#* 836949453288 content:   kids = children(thing);
#$#* 836949453288 content:   if (kids)
#$#* 836949453288 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
#$#* 836949453288 content:     player:notify(tostr($string_utils:names_of(kids)));
#$#* 836949453288 content:   else
#$#* 836949453288 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
#$#* 836949453288 content:   endif
#$#* 836949453288 content: endif
#$#* 836949453288 content: // Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
#$#: 836949453288
-----
VERB_INFO()
===========

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

#-1:Input to EVAL, line 4:  Incorrect number of arguments
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
`HELP VERB' AMBIGUOUS
=====================

Sorry, the topic `verb' is ambiguous.  I don't know which of the following topics you mean:

`help @verb'[1]         `help verb_args()'[2]   `help verb_code()'[3]
`help verb_info()'[4]   `help verbs()'[5]       

-----
VERBS()
=======

Syntax:  verbs (obj <object>)   => list

Returns a list of the names of the verbs defined directly on the given <object>, not inherited from its parent.  If <object> is not valid, then `E_INVARG' is raised.  If the programmer does not have read permission on <object>, then `E_PERM' is raised.

=> {"core_objects", "@dumpkids", "find_all_commands", "@kids"}
Line 1:  Unknown built-in function: props
1 error.
=> {"debug"}
Object #243 does not define that verb, but its ancestor #4 does.
Last modified Sat Aug 17 15:17:33 2013 PDT by Crag (#243).
#4:"@room-info" none none none
// Display info about here which is relevant to building:
//   exits
//   directions not described (n, s, e, w, u, d, extra exits)
// 
// init
here = this:location();
info = {};
dirs = {"u", "d", "e", "w", "n", "s"};
headers = {"dir", "exit?", "obj", "name", "desc"};
// 
// permissions
if (!$perm_utils:controls(player, here))
  return player:tell("You don't control this location.");
endif
// 
// gather info
for e in (here:exits())
  match = "";
  for d in (dirs)
    if (here:match_exit(d) == e)
      match = d;
      dirs = setremove(dirs, d);
    endif
  endfor
  desc = toliteral(e:description());
  if (length(desc) > 48)
    desc = desc[1..45] + "...";
  elseif (!desc)
    desc = "(no description)";
  endif
  info = {@info, {match, "yes", toliteral(e), e:name(), desc}};
endfor
// 
for d in (dirs)
  matched = here:match_object(d);
  if (valid(matched))
    desc = toliteral(matched:description());
    if (length(desc) > 48)
      desc = desc[1..45] + "...";
    elseif (!desc)
      desc = "(no description)";
    endif
    info = {@info, {d, "no", toliteral(matched), matched:name(), desc}};
  else
    info = {@info, {d, "", "", "", "no match"}};
  endif
endfor
// 
// display info
player:tell_lines($string_utils:columnize_with_headers(headers, info));
Error programming Crag:@kids[4](3).
Line 18:  Unknown built-in function: prop_info
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
0 errors.
Verb programmed.
The root class(#1) has 24 kids.
#243:@kids, line 15:  Variable not found
(End of traceback)
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#243:@kids any none none" name: "MOO verb: #243:@kids any none none" type: moo-code content*: "" _data-tag: 141542380289
#$#* 141542380289 content: // '@kids <obj>' - List the children of an object. This is handy for seeing
#$#* 141542380289 content: // whether anybody's actually using your carefully-wrought public objects.
#$#* 141542380289 content: thing = player:my_match_object(dobjstr);
#$#* 141542380289 content: if (!$command_utils:object_match_failed(thing, dobjstr))
#$#* 141542380289 content:   kids = children(thing);
#$#* 141542380289 content:   if (kids)
#$#* 141542380289 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
#$#* 141542380289 content:     header = {"name", "dbref", "#kids", "#verbs", "#props"};
#$#* 141542380289 content:     for kid in (kids)
#$#* 141542380289 content:       name = kid:dnamec();
#$#* 141542380289 content:       number = tostr(kid);
#$#* 141542380289 content:       children = tostr(length(children(kid)));
#$#* 141542380289 content:       methods = tostr(length(verbs(kid)));
#$#* 141542380289 content:       props = tostr(length(properties(kid)));
#$#* 141542380289 content:       info = {@info, {name, number, children, methods, props}};
#$#* 141542380289 content:     endfor
#$#* 141542380289 content:     player:tell_lines($string_utils:columnize_with_headers(headers, info));
#$#* 141542380289 content:   else
#$#* 141542380289 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
#$#* 141542380289 content:   endif
#$#* 141542380289 content: endif
#$#* 141542380289 content: // Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
#$#: 141542380289
0 errors.
Verb programmed.
The root class(#1) has 24 kids.
#243:@kids, line 18:  Variable not found
(End of traceback)
0 errors.
Verb programmed.
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Achievement       #445   1      1       1
The Generic Input Handler     #509   1      1       0
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
----                          -----  -----  ------  ------
-----
GENERAL INFORMATION ON $LIST_UTILS[1]
=====================================

append            (list,list,..) => result of concatenating the given lists
flatten           (list of lists)=> list of all non-list elements
reverse           (list)         => reversed list
remove_duplicates (list)         => list with all duplicates removed
compress          (list)         => list with consecutive duplicates removed
setremove_all     (list,elt)     => list with all occurrences of elt removed
find_insert       (sortedlist,e) => index of first element > e in sortedlist
sort              (list[,keys])  => sorted list

make              (n[,e])        => list of n copies of e
range             (m,n)          => {m,m+1,...,n}

arrayset   (list,val,i[,j,k...]) => array modified so that list[i][j][k]==val

-- Mapping functions (take a list and do something to each element):

map_prop ({o...},prop)              => list of o.(prop)            for all o
map_verb ({o...},verb[,args)        => list of o:(verb)(@args)     for all o
map_arg  ([n,]obj,verb,{a...},args) => list of obj:(verb)(a,@args) for all a

-- Association list functions --

An association list (alist) is a list of pairs (2-element lists), though the following functions have been generalized for lists of n-tuples (n-element lists).  In each case i defaults to 1.

make_alist      (lists[,pad]) => alist from list of parallel lists
assoc        (targ,alist[,i]) => 1st tuple in alist whose i-th element is targ
iassoc       (targ,alist[,i]) => index of same.
assoc_prefix (targ,alist[,i]) => ... whose i-th element has targ as a prefix
iassoc_prefix(targ,alist[,i]) => index of same.
slice             (alist[,i]) => list of i-th elements
sort_alist        (alist[,i]) => alist sorted on i-th elements.

  #243:@kids                    Core-Wizard (#184)   rxd    any none none
-------------------------------- finished ---------------------------------
"@kids"?  <object>:<verb>  expected.
-----
`HELP PREPSTR' NOT FOUND
========================

Sorry, but no help is available on `prepstr'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
@ARGS
=====

Syntax:  @args  <object>:<verb-name> <dobj> [<prep> [<iobj>]]
         @args  <object>:<verb-name> (<named args>)
         @args# <object>:<verb-number> <dobj> [<prep> [<iobj>]]
         @args# <object>:<verb-number> (<named args>)

Changes the direct object, preposition, and/or indirect object specifiers for the named verb on the named object.  Any specifiers not provided on the command line are not changed.  The direct and indirect object specifiers (<dobj> and <iobj>) must be either 'none', 'this', or 'any'.  The preposition specifier (<prep>) must be either 'none', 'any', or one of the prepositional phrases listed in `help prepositions'[1].

-----
PREPOSITIONS
============

The complete list of prepositions recognized by the command-line parser:

    with/using
    at/to
    in front of
    in/inside/into
    on top of/on/onto/upon
    out of/from inside/from
    over
    through
    under/underneath/beneath
    behind
    beside
    for/about
    is
    as
    off/off of

-----
INDEX()
=======

Syntax:  index (str <str1>, str <str2> [, <case-matters>])   => int
        rindex (str <str1>, str <str2> [, <case-matters>])   => int

The function `index()' (`rindex()') returns the index of the first character of the first (last) occurrence of <str2> in <str1>, or zero if <str2> does not occur in <str1> at all.  By default the search for an occurrence of <str2> is done while ignoring the upper/lower case distinction.  If <case-matters> is provided and true, then case is treated as significant in all comparisons.

    index("foobar", "o")        =>   2
    rindex("foobar", "o")       =>   3
    index("foobar", "x")        =>   0
    index("foobar", "oba")      =>   3
    index("Foobar", "foo", 1)   =>   0

=> "oo"
-----
`HELP TRIM' NOT FOUND
=====================

Sorry, but no help is available on `trim'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
GENERAL INFORMATION ON $STRING_UTILS[1]
=======================================

For a complete description of a given verb, do `help $string_utils:verbname'[2]

    Conversion routines:

:char_list    (string)                               => {"a", "b", "c"}
:to_list      (string)                               => {"a", "foo", "bear"}
 (see also :explode, below)

:from_list    (list [,sep])                          => "foo1foo2foo3"
:english_list (str-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
:title_list*c (obj-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
                                                  or => "Foo1, foo2, and foo3"

:[i|d]name[c]_and_number                             => "foo (#123)"
:[i|d]name[c]_list (obj-list, name-args)             => english list of names
                                                        in appropriate style
:[i|d]name[c]_and_number_list(obj-list, name-args)   => same, plus " (#123)"
:names_of     (obj-list)  => "foo1 (#123)   foo2 (#456)   foo3 (#789)"

:to_value       (string)                             => {1, value}
                                                  or => {0, error message}
:prefix_to_value(string)                             => {rest-of-string, value}
                                                  or => {0, error message}
:end_expression (string)                             => index of expression

:from_value[_suspended] (value [,quoteflag [,maxlistdepth]])
                                                     => "{foo1, foo2, foo3}"
:print[_suspended] (value)                           => "{foo1, foo2, foo3}"
:print_truncated   (value, length, suffix)           => "{foo1, fo.."
:print_with_names  (value)                           => "{foo1, foo2 (#123)}"

:english_number(42 [,zero])  => "forty-two"
:english_ordinal(42)         => "forty-second"
:ordinal(42)                 => "42nd"
:group_number(42135 [,sep])  => "42,135"
:from_seconds (num)          => "an hour" or "3 days" or "15 seconds"

:glob_to_regexp("foo*b?r")   => "^foo.*b.r$"
:xglob_to_regexp("f*ba[rz]") => "^f.*ba[rz]$"

    Type checking:

:is_numeric   (string) => return true if string is composed entirely of digits

    String Matching:

:match_string(string, pattern, options) => * wildcard matching
:find_prefix(prefix, string-list)       => list index of element starting
                                           with prefix
:match_stringlist(string, string-list)  => index/$ambiguous_match/$failed_match
:index_delimited(string,target[, case]) => index of delimited string occurrence
:index_all(string, target[, delimited]) => all occurrences of target in string
:next_index(str1, str2, prev[, case])   => index, after index `prev'

    Object Matching (see also $command_utils):

:literal_object(string)                        => object match independent
                                                  of location
:match        (string, [obj-list, prop-name]+) => matching object
:match_player (string-list[,me-object])        => list of matching players
:match_object (string, location)               => default object match
:match_player_or_object(@string-list)          => matching object or player
:match_room   (string)                         => matching room object

    Parsing:

:explode (string,char) -- string => list of words delimited by char
 (see also :to_list, above)
:words   (string)      -- string => list of words (as with command line parser)
:word_start (string)   -- string => list of start-end pairs.
:first_word (string)   -- string => {first word, rest of string} or {}

:parse_command(cmd_line[, player]) -- string => parsed command info

    Pretty printing:

:space         (n/string[,filler])     => n spaces
:left          (string,width[,filler]) => left justified string in field 
:right         (string,width[,filler]) => right justified string in field
:center/re     (string,width[,filler]) => centered string in field
:columnize/se[_suspended](list,n[,width])
                                       => list of strings in n columns
:columnize/se_no_truncate(list,n[,linelen])
                                       => same, but will not truncate items
:columnize/se_with_headers(headers, fields) => columnize, plus headers

    Substitutions

:substitute (string, subst_list [,case])  -- general substitutions.
:substitute_delimited(...)                -- same, but with word boundaries.
:pronoun_sub (string/list[,who[,thing[,location]]])
                                          -- pronoun substitutions.
:pronoun_sub_secure (string[,who[,thing[,location]]],default)
                                          -- substitute and check for names.
:pronoun_quote (string/list/subst_list)   -- quoting for pronoun substitutions.
:regexp_quote(string)                     -- quoting for regexps.

    Miscellaneous string munging:

:trim         (string)       => string with outside whitespace removed.
:triml        (string)       => string with leading whitespace removed.
:trimr        (string)       => string with trailing whitespace removed.
:strip_chars  (string,chars) => string with all chars in `chars' removed.
:strip_all_but(string,chars) => string with all chars not in `chars' removed.
:capitalize/se(string)       => string with first letter capitalized.
:uppercase/lowercase(string) => string with all letters upper or lowercase.
:reverse      (string)       => string, backwards.

:common(string1, string2)    => length of longest common prefix.
:is_uppercase (string)       => true iff no lowercase letters in string
:is_lowercase (string)       => true iff no uppercase letters in string
:nonblank     (string)       => true iff any non-whitespace characters

:connection_hostname(string) => hostname part of connection identifier.

    Conversions to and from common string formats:

:character_to_ascii(char)    => integer ASCII rep of char
:character_to_hex_ascii(char) => two-digit hexadecimal string ASCII rep of char
:ascii_to_character(num)     => character represented in ASCII by num
:hex_ascii_to_character(hex) => ASCII character represented by two-character hexadecimal string hex

    A few useful properties:

alphabet                    => "abcdefghijklmnopqrstuvwxyz"
tab                         => a single tab character

=> "oobar"
-----
GENERAL INFORMATION ON $LIST_UTILS[1]
=====================================

append            (list,list,..) => result of concatenating the given lists
flatten           (list of lists)=> list of all non-list elements
reverse           (list)         => reversed list
remove_duplicates (list)         => list with all duplicates removed
compress          (list)         => list with consecutive duplicates removed
setremove_all     (list,elt)     => list with all occurrences of elt removed
find_insert       (sortedlist,e) => index of first element > e in sortedlist
sort              (list[,keys])  => sorted list

make              (n[,e])        => list of n copies of e
range             (m,n)          => {m,m+1,...,n}

arrayset   (list,val,i[,j,k...]) => array modified so that list[i][j][k]==val

-- Mapping functions (take a list and do something to each element):

map_prop ({o...},prop)              => list of o.(prop)            for all o
map_verb ({o...},verb[,args)        => list of o:(verb)(@args)     for all o
map_arg  ([n,]obj,verb,{a...},args) => list of obj:(verb)(a,@args) for all a

-- Association list functions --

An association list (alist) is a list of pairs (2-element lists), though the following functions have been generalized for lists of n-tuples (n-element lists).  In each case i defaults to 1.

make_alist      (lists[,pad]) => alist from list of parallel lists
assoc        (targ,alist[,i]) => 1st tuple in alist whose i-th element is targ
iassoc       (targ,alist[,i]) => index of same.
assoc_prefix (targ,alist[,i]) => ... whose i-th element has targ as a prefix
iassoc_prefix(targ,alist[,i]) => index of same.
slice             (alist[,i]) => list of i-th elements
sort_alist        (alist[,i]) => alist sorted on i-th elements.

0 errors.
Verb programmed.
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The administration            #170   0      12      0
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Input Handler     #509   1      1       0
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
The Guest Log                 #12    0      4       1
The Error Generator           #66    0      18      1
The startup handler           #189   0      8       1
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Generic Achievement       #445   1      1       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The server options            #188   0      1       20
The link dispatcher tag       #123   0      2       3
The checkpointer              #175   0      9       5
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The syslog                    #183   0      8       9
The http                      #87    0      18      9
----                          -----  -----  ------  ------
0 errors.
Verb programmed.
You must give the name of some object.
The root class(#1) has 24 kids.
#243:@kids, line 32:  Variable not found
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#243:@kids any none none" name: "MOO verb: #243:@kids any none none" type: moo-code content*: "" _data-tag: 703519983290
#$#* 703519983290 content: // '@kids <obj>' - List the children of an object. This is handy for seeing
#$#* 703519983290 content: // whether anybody's actually using your carefully-wrought public objects.
#$#* 703519983290 content: // Also: '@kids <obj> by name | dbref | kids | verbs | props'
#$#* 703519983290 content: // Sorts output by specified column. Without specification order is same as
#$#* 703519983290 content: // children() function.
#$#* 703519983290 content: has_sort = index(argstr, " by ");
#$#* 703519983290 content: if (has_sort)
#$#* 703519983290 content:   objstr = argstr[1..has_sort];
#$#* 703519983290 content:   sort = $string_utils:trim(argstr[has_sort + 4..$]);
#$#* 703519983290 content:   which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
#$#* 703519983290 content:   if (!which_order)
#$#* 703519983290 content:     player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
#$#* 703519983290 content:   endif
#$#* 703519983290 content: else
#$#* 703519983290 content:   objstr = argstr;
#$#* 703519983290 content: endif
#$#* 703519983290 content: thing = player:my_match_object(objstr);
#$#* 703519983290 content: if (!$command_utils:object_match_failed(thing, dobjstr))
#$#* 703519983290 content:   kids = children(thing);
#$#* 703519983290 content:   if (kids)
#$#* 703519983290 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
#$#* 703519983290 content:     header = {"name", "dbref", "#kids", "#verbs", "#props"};
#$#* 703519983290 content:     info = {};
#$#* 703519983290 content:     for kid in (kids)
#$#* 703519983290 content:       name = kid:dnamec();
#$#* 703519983290 content:       number = tostr(kid);
#$#* 703519983290 content:       children = length(children(kid));
#$#* 703519983290 content:       methods = tostr(length(verbs(kid)));
#$#* 703519983290 content:       props = tostr(length(properties(kid)));
#$#* 703519983290 content:       info = {@info, {name, number, children, methods, props}};
#$#* 703519983290 content:     endfor
#$#* 703519983290 content:     if (which_order)
#$#* 703519983290 content:       info = $list_utils:sort_alist(info, which_order);
#$#* 703519983290 content:     endif
#$#* 703519983290 content:     player:tell_lines($string_utils:columnize_with_headers(header, info));
#$#* 703519983290 content:   else
#$#* 703519983290 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
#$#* 703519983290 content:   endif
#$#* 703519983290 content: endif
#$#* 703519983290 content: // Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
#$#: 703519983290
0 errors.
Verb programmed.
The root class(#1) has 24 kids.
#18:columnize_with_headers columnise_with_headers, line 14:  Type mismatch
... called from #243:@kids, line 36
(End of traceback)
-----
UTILITIES
=========

The core database has a number of objects serving as libraries of useful verbs.
More detailed information can be obtained for (some of) these, via `help $whatever_utils'

$building_utils -- 
$code_utils     -- parsing and manipulating verb code
$command_utils  -- reporting matching errors to the player
$gender_utils   -- managing gendered objects
$list_utils     -- list manipulation
$set_utils      -- set manipulation
$lock_utils     -- key expression manipulation
$match_utils    -- 
$object_utils   -- object information 
                  (inheritance/location hierarchy, verb/property lists)
$perm_utils     -- permissions
$string_utils   -- string manipulation
$time_utils     -- time (numeric and verbal) manipulation
$trig_utils     -- trigonometric and other numerical utilities

=> "tostr"
Error programming Crag:@kids[4](3).
Line 36:  syntax error
1 error(s).
Verb not programmed.
-----
FOR
===

The following kinds of statements exist in the MOO programming language:

Null
====

        ;

The null statement does nothing.

Expressions
===========

        expression ;

The expression statement evaluates the expression and then discards the value.

Conditional
===========

        IF ( expression ) statements ENDIF
        IF ( expression ) statements ELSE statements ENDIF
        IF ( expression )
          statements
        ELSEIF ( expression )
          statements
        ...
        ELSE
          statements
        ENDIF

The conditional statement evaluates each expression in turn and executes the statements associated with the first one to return a true value; the ELSE statements are executed if none of the expressions returns a true value.  There can be any number of ELSEIF clauses and the ELSE part is optional.  See `help truth'[1] for the definition of 'true value'.

List iteration
==============

        FOR name IN ( expression ) statements ENDFOR

The list iteration statement first evaluates the expression, which must return a list.  It then executes the statements once for each element of that list, each time with the named variable having the value of the corresponding list element.

Numeric iteration
=================

        FOR name IN [ expression .. expression ] statements ENDFOR

The numeric iteration statement first evaluates the two expressions, both of which must return numbers; call those numbers N1 and N2, respectively.  The statements are then executed once for each integer I such that N1 <= I <= N2, in increasing order; each time, the named variable has the corresponding value of I.

Indefinite iteration
====================

        WHILE ( expression ) statements ENDWHILE

The indefinite iteration statement repeatedly evaluates the expression and, each time it returns a true value, executes the statements.  The loop stops the first time that the expression returns a false value.  The definitions of 'true' and 'false' values is in `help truth'[2].

Return
======

        RETURN ;
        RETURN expression ;

The return statement evalautes the expression, if any, and returns the resulting value (or 0 if there is no expression) to the verb that called the current one.  Execution of the current verb is immediately terminated.

Fork
====

        FORK ( expression ) statements ENDFORK
        FORK name ( expression ) statements ENDFORK

The fork statement first executes the expression, which must return a number; call that number N.  It then creates a new MOO task that will, after at least N seconds, execute the statements.  When the new task begins, all variables will have the values they had at the time the FORK statement was executed.  The task executing the FORK statement immediately continues execution.  If a variable name is given after the FORK keyword, then it is assigned the 'queue ID' of the newly-created task.  The value of this variable is visible both to the task executing the fork statement and to the statements in the newly-created task.  See `help tasks'[3] for more information about forked tasks.

Error programming Crag:@kids[4](3).
Line 37:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
You must give the name of some object.
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Achievement       #445   1      1       1
The Generic Input Handler     #509   1      1       0
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
----                          -----  -----  ------  ------
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Generic Achievement       #445   1      1       1
The Generic Input Handler     #509   1      1       0
The Generic Command           #531   1      1       0
The Parsing objects           #252   2      0       0
The Blank Root                #560   2      0       0
The Text generation objects   #253   5      0       0
The Address Root              #109   6      14      1
The MCP parent                #251   6      0       0
The Helpful Object            #250   7      1       0
The Tag Root                  #91    15     7       1
The Abstract class            #254   17     0       0
----                          -----  -----  ------  ------
The generic room(#3) has 60 kids.
name                                 dbref  #kids  #verbs  #props
----                                 -----  -----  ------  ------
The Generic Editor                   #46    3      67      21
The North Vestibule                  #70    0      4       0
The Northern Entrance                #267   0      0       0
The Great Hall                       #287   0      0       0
The Northeast Tower                  #292   0      0       0
The Northwest Tower                  #294   0      0       0
The East Hall                        #296   0      0       0
The Atrium                           #298   0      0       0
The Atrium                           #302   0      0       0
The West Hall                        #304   0      0       0
The East Foyer                       #310   0      0       0
The Southeast Tower                  #312   0      0       0
The South Hall                       #315   0      0       0
The South Vestibule                  #318   0      0       0
The Southwest Tower                  #321   0      0       0
The Muscician's Gallery              #323   0      0       0
The Ballroom                         #330   0      0       0
The Smoking Room Doorway             #332   0      0       0
The Dining Room Doorway              #334   0      0       0
The Drawing Room Doorway             #336   0      0       0
The Side Foyer                       #338   0      0       0
The Refreshment Room                 #346   0      0       0
The Card Room                        #348   0      0       0
The Smoking Room                     #350   0      0       0
The East Servant's Passage           #353   0      0       0
The Fainting Room                    #357   0      0       0
The Smoking Room                     #361   0      0       0
The Dining Room                      #364   0      0       0
The Red Drawing Room                 #368   0      0       0
The Blue Drawing Room                #374   0      0       0
The Solarium                         #379   0      0       0
The Morning Room                     #381   0      0       0
The Breakfast Room                   #385   0      0       0
The West Foyer                       #393   0      0       0
The South Foyer                      #396   0      0       0
The Front Parlour                    #398   0      0       0
The Music Room                       #400   0      0       0
The Green Drawing Room               #402   0      0       0
The Lower Library Doorway            #404   0      0       0
The Billiard Room Doorway            #406   0      0       0
The Conservatory                     #415   0      0       0
The Lower Library                    #419   0      0       0
The West Servant's Passage           #422   0      0       0
The Billiard Room                    #428   0      0       0
The Billiard Room Servant's Passage  #431   0      0       0
The Back Parlour                     #434   0      0       0
The Back Parlour Doorway             #437   0      0       0
The Back Parlour Servant's Passage   #442   0      0       0
The White Drawing Room Doorway       #446   0      0       0
The White Drawing Room               #449   0      0       0
The Back Scullery Servant's Passage  #452   0      0       0
The Back Scullery                    #457   0      0       0
The Winter Hall                      #462   0      0       0
The Dining Room Servant's Passage    #465   0      0       0
The Drawing Room Servant's Passage   #467   0      0       0
The Water Closet                     #481   0      0       0
The Theater                          #487   0      0       0
The Backstage                        #489   0      0       0
The Stage                            #492   0      0       0
The Summer Hall                      #485   0      0       0
----                                 -----  -----  ------  ------
The Abstract class(#254) has 17 kids.
name                                 dbref  #kids  #verbs  #props
----                                 -----  -----  ------  ------
Generic Help Database                #30    2      26      2
The New Generic Database             #79    4      30      7
The Generic Mail Recipient           #41    4      31      12
The Generic Option Package           #60    11     12      7
The Generic Feature Object           #65    6      16      5
The generic admin group              #163   5      25      7
The generic utilities                #146   24     0       1
The generic event handler            #133   0      6       1
Generic gender object                #64    5      4       18
The Generic BigList Resident         #75    0      7       4
The generic property farm            #206   5      7       1
The Generic Pronoun_sub Translator   #73    2      12      0
The generic name builder             #240   3      4       0
The generic source or sink           #196   2      3       2
The generic message dispatch object  #219   2      3       2
The generic listener                 #224   1      8       1
The generic daemon service handler   #210   0      12      2
----                                 -----  -----  ------  ------
The generic thing(#5) has 22 kids.
name                         dbref  #kids  #verbs  #props
----                         -----  -----  ------  ------
The generic note             #9     4      20      3
The generic sittable object  #80    1      14      5
The topic sign               #178   0      25      10
The Generic Pilable Thing    #255   0      3       4
The Generic Wind-Up Toy      #260   1      5       6
The butler's key             #276   0      0       0
The vase                     #281   0      0       0
The microphone               #282   0      1       0
The chandelier               #285   0      0       0
The generic bot              #289   0      0       0
The brass chandelier         #514   0      0       0
The acanthus leaves          #520   0      0       0
The frieze                   #522   0      0       0
The cornice                  #523   0      0       0
The basalt block             #528   0      0       0
The flower                   #538   1      1       2
The engraving                #556   0      0       0
The tile                     #566   0      0       0
The fuel                     #572   0      0       0
The cabriole legs            #576   0      0       0
The Clock                    #574   0      3       7
The generic group            #244   1      0       0
----                         -----  -----  ------  ------
Crag (#243)   generic wizard (#51)   generic programmer (#52)   generic builder (#4)   generic player (#6)   generic containing object (#145)   generic event dispatching object (#110)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
Verb name changed.
#4:@kids code set.
Last modified Sat Aug 31 13:59:14 2013 PDT by Crag (#243).
#4:"@kids" any none none
// '@kids <obj>' - List the children of an object. This is handy for seeing
// whether anybody's actually using your carefully-wrought public objects.
// Also: '@kids <obj> by name | dbref | kids | verbs | props'
// Sorts output by specified column. Without specification order is same as
// children() function.
has_sort = index(argstr, " by ");
which_order = 0;
if (has_sort)
  objstr = argstr[1..has_sort];
  sort = $string_utils:trim(argstr[has_sort + 4..$]);
  which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
  if (!which_order)
    player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
  endif
else
  objstr = argstr;
endif
thing = player:my_match_object(objstr);
if (!$command_utils:object_match_failed(thing, dobjstr))
  kids = children(thing);
  if (kids)
    player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
    header = {"name", "dbref", "#kids", "#verbs", "#props"};
    info = {};
    for kid in (kids)
      name = kid:dnamec();
      number = kid;
      children = length(children(kid));
      methods = length(verbs(kid));
      props = length(properties(kid));
      info = {@info, {name, number, children, methods, props}};
    endfor
    if (which_order)
      info = $list_utils:sort_alist(info, which_order);
    endif
    for idx in [1..length(info)]
      for column in [1..length(info[1])]
        info[idx][column] = tostr(info[idx][column]);
      endfor
    endfor
    player:tell_lines($string_utils:columnize_with_headers(header, info));
  else
    player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
  endif
endif
// Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
// Copied from Crag (#243):@kids by Crag (#243) Sat Aug 31 13:59:14 2013 PDT
Verb #243:@kids [4] {any none none} removed.
The verb :@parents is on   Crag(#243)--generic builder(#4)
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#243:@parents any none none" name: "MOO verb: #243:@parents any none none" type: moo-code content*: "" _data-tag: 1865027907291
#$#* 1865027907291 content: Crag (#243) does not define a :@parents verb.  The following code is from its ancestor, generic builder (#4).
#$#* 1865027907291 content: // '@parents <thing>' - List <thing> and its ancestors, all the way back to the Root Class (#1).
#$#* 1865027907291 content: set_task_perms(player);
#$#* 1865027907291 content: if (!dobjstr)
#$#* 1865027907291 content:   player:notify(tostr("Usage:  ", verb, " <object>"));
#$#* 1865027907291 content:   return;
#$#* 1865027907291 content: else
#$#* 1865027907291 content:   o = player:my_match_object(dobjstr);
#$#* 1865027907291 content: endif
#$#* 1865027907291 content: if (!$command_utils:object_match_failed(o, dobjstr))
#$#* 1865027907291 content:   player:notify($string_utils:names_of({o, @$object_utils:ancestors(o)}));
#$#* 1865027907291 content: endif
#$#: 1865027907291
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#4:@kids any none none" name: "MOO verb: #4:@kids any none none" type: moo-code content*: "" _data-tag: 2072258890292
#$#* 2072258890292 content: // '@kids <obj>' - List the children of an object. This is handy for seeing
#$#* 2072258890292 content: // whether anybody's actually using your carefully-wrought public objects.
#$#* 2072258890292 content: // Also: '@kids <obj> by name | dbref | kids | verbs | props'
#$#* 2072258890292 content: // Sorts output by specified column. Without specification order is same as
#$#* 2072258890292 content: // children() function.
#$#* 2072258890292 content: has_sort = index(argstr, " by ");
#$#* 2072258890292 content: which_order = 0;
#$#* 2072258890292 content: if (has_sort)
#$#* 2072258890292 content:   objstr = argstr[1..has_sort];
#$#* 2072258890292 content:   sort = $string_utils:trim(argstr[has_sort + 4..$]);
#$#* 2072258890292 content:   which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
#$#* 2072258890292 content:   if (!which_order)
#$#* 2072258890292 content:     player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
#$#* 2072258890292 content:   endif
#$#* 2072258890292 content: else
#$#* 2072258890292 content:   objstr = argstr;
#$#* 2072258890292 content: endif
#$#* 2072258890292 content: thing = player:my_match_object(objstr);
#$#* 2072258890292 content: if (!$command_utils:object_match_failed(thing, dobjstr))
#$#* 2072258890292 content:   kids = children(thing);
#$#* 2072258890292 content:   if (kids)
#$#* 2072258890292 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
#$#* 2072258890292 content:     header = {"name", "dbref", "#kids", "#verbs", "#props"};
#$#* 2072258890292 content:     info = {};
#$#* 2072258890292 content:     for kid in (kids)
#$#* 2072258890292 content:       name = kid:dnamec();
#$#* 2072258890292 content:       number = kid;
#$#* 2072258890292 content:       children = length(children(kid));
#$#* 2072258890292 content:       methods = length(verbs(kid));
#$#* 2072258890292 content:       props = length(properties(kid));
#$#* 2072258890292 content:       info = {@info, {name, number, children, methods, props}};
#$#* 2072258890292 content:     endfor
#$#* 2072258890292 content:     if (which_order)
#$#* 2072258890292 content:       info = $list_utils:sort_alist(info, which_order);
#$#* 2072258890292 content:     endif
#$#* 2072258890292 content:     for idx in [1..length(info)]
#$#* 2072258890292 content:       for column in [1..length(info[1])]
#$#* 2072258890292 content:         info[idx][column] = tostr(info[idx][column]);
#$#* 2072258890292 content:       endfor
#$#* 2072258890292 content:     endfor
#$#* 2072258890292 content:     player:tell_lines($string_utils:columnize_with_headers(header, info));
#$#* 2072258890292 content:   else
#$#* 2072258890292 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
#$#* 2072258890292 content:   endif
#$#* 2072258890292 content: endif
#$#* 2072258890292 content: // Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
#$#* 2072258890292 content: // Copied from Crag (#243):@kids by Crag (#243) Sat Aug 31 13:59:14 2013 PDT
#$#: 2072258890292
That object has no verb matching that name + args.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#4:@parents any none none" name: "MOO verb: #4:@parents any none none" type: moo-code content*: "" _data-tag: 532415362293
#$#* 532415362293 content: // '@parents <thing>' - List <thing> and its ancestors, all the way back to the Root Class (#1).
#$#* 532415362293 content: set_task_perms(player);
#$#* 532415362293 content: if (!dobjstr)
#$#* 532415362293 content:   player:notify(tostr("Usage:  ", verb, " <object>"));
#$#* 532415362293 content:   return;
#$#* 532415362293 content: else
#$#* 532415362293 content:   o = player:my_match_object(dobjstr);
#$#* 532415362293 content: endif
#$#* 532415362293 content: if (!$command_utils:object_match_failed(o, dobjstr))
#$#* 532415362293 content:   player:notify($string_utils:names_of({o, @$object_utils:ancestors(o)}));
#$#* 532415362293 content: endif
#$#: 532415362293
-----
SET_TASK_PERMS()
================

Syntax:  set_task_perms (obj <who>) => none

Changes the permissions with which the currently-executing verb is running to be those of <who>.  If the programmer is neither <who> nor a wizard, then `E_PERM' is raised.

*NOTE*:  This does not change the owner of the currently-running verb, only the permissions of this particular invocation.  It is used in verbs owned by wizards to make themselves run with lesser (usually non-wizard) permissions.

    #4:@par*ents                Core-Wizard (#184)   r d    any none none
-------------------------------- finished ---------------------------------
    #4:@kids                    Core-Wizard (#184)   rxd    any none none
-------------------------------- finished ---------------------------------
root class (#1)
That object does not define that verb.
That object does not define that verb.
#47:"ancestors" this none this
// Usage:  ancestors(object[, object...])
// Return a list of all ancestors of the object(s) in args, with no duplicates.
// If called with a single object, the result will be in order ascending up the inheritance hierarchy.  If called with multiple objects, it probably won't.
ret = {};
for o in (args)
  what = o;
  while (valid(what = parent(what)))
    ret = setadd(ret, what);
  endwhile
endfor
return ret;
generic thing (#5)   Generic Virtual Reality Object (#291)   Helpful Object (#250)   root class (#1)
=> #51 (generic wizard)
#4:"@par*ents" any none none
// '@parents <thing>' - List <thing> and its ancestors, all the way back to the Root Class (#1).
set_task_perms(player);
if (!dobjstr)
  player:notify(tostr("Usage:  ", verb, " <object>"));
  return;
else
  o = player:my_match_object(dobjstr);
endif
if (!$command_utils:object_match_failed(o, dobjstr))
  player:notify($string_utils:names_of({o, @$object_utils:ancestors(o)}));
endif
0 errors.
Verb programmed.
Crag(#243) has 9 ancestors.
name                                  dbref  #kids  #verbs  #props
----                                  -----  -----  ------  ------
Crag                                  #243   0      3       1
generic wizard                        #51    4      39      9
generic programmer                    #52    5      51      3
generic builder                       #4     1      34      2
generic player                        #6     6      243     88
The generic containing object         #145   3      14      1
The generic event dispatching object  #110   3      8       1
The Generic Virtual Reality Object    #291   2      0       0
The Helpful Object                    #250   7      1       0
The root class                        #1     24     92      15
----                                  -----  -----  ------  ------
You see no "me by props" here.
0 errors.
Verb programmed.
You see no "me by props" here.
0 errors.
Verb programmed.
You see no "me by props" here.
That object does not have a verb with that name.
@args #4:@parents any none none
"are" is not a valid direct object specifier.
"is" is not a valid direct object specifier.
-----
@ARGS
=====

Syntax:  @args  <object>:<verb-name> <dobj> [<prep> [<iobj>]]
         @args  <object>:<verb-name> (<named args>)
         @args# <object>:<verb-number> <dobj> [<prep> [<iobj>]]
         @args# <object>:<verb-number> (<named args>)

Changes the direct object, preposition, and/or indirect object specifiers for the named verb on the named object.  Any specifiers not provided on the command line are not changed.  The direct and indirect object specifiers (<dobj> and <iobj>) must be either 'none', 'this', or 'any'.  The preposition specifier (<prep>) must be either 'none', 'any', or one of the prepositional phrases listed in `help prepositions'[1].

Verb arguments changed.
Crag(#243) has 9 ancestors.
name                                  dbref  #kids  #verbs  #props
----                                  -----  -----  ------  ------
Crag                                  #243   0      3       1
generic wizard                        #51    4      39      9
generic programmer                    #52    5      51      3
generic builder                       #4     1      34      2
generic player                        #6     6      243     88
The generic containing object         #145   3      14      1
The generic event dispatching object  #110   3      8       1
The Generic Virtual Reality Object    #291   2      0       0
The Helpful Object                    #250   7      1       0
The root class                        #1     24     92      15
----                                  -----  -----  ------  ------
You see no "me by props" here.
0 errors.
Verb programmed.
The verb :@parents is on   Crag(#243)--generic builder(#4)
generic builder (#4) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic player (#6).
  Location generic room (#3).
    #4:@quota                   Core-Wizard (#184)   r d    any none none
    #4:@create                  Core-Wizard (#184)   r d    any any any
    #4:@recycle                 Core-Wizard (#184)   r d    any none none
    #4:@recreate                Core-Wizard (#184)   r d    any as any
    #4:@dig                     Core-Wizard (#184)   r d    any any any
    #4:@auditDB                 Core-Wizard (#184)   r d    any any any
    #4:@count                   Core-Wizard (#184)   r d    any none none
    #4:@countDB                 Core-Wizard (#184)   r d    any none none
    #4:@sort-owned*-objects     Core-Wizard (#184)   r d    none none none
    #4:@add-owned               Core-Wizard (#184)   r d    any none none
    #4:@verify-owned            Core-Wizard (#184)   r d    none none none
    #4:@unlock                  Core-Wizard (#184)   r d    any none none
    #4:@lock                    Core-Wizard (#184)   r d    any with/using any
    #4:@newmess*age             Core-Wizard (#184)   r d    any any any
    #4:@unmess*age              Core-Wizard (#184)   r d    any any any
    #4:_messagify               Core-Wizard (#184)   rxd    this none this
    #4:@kids(old)               Core-Wizard (#184)   rxd    any none none
    #4:@contents                Core-Wizard (#184)   r d    any none none
    #4:@par*ents                Core-Wizard (#184)   r d    any any any
    #4:@location*s              Core-Wizard (#184)   r d    any none none
    #4:_create                  Core-Wizard (#184)   rxd    this none this
    #4:_recycle                 Core-Wizard (#184)   rxd    this none this
    #4:@audit                   Core-Wizard (#184)   r d    any any any
    #4:"@building-o*ptions @buildingo*ptions" Core-Wizard (#184) r d any any any
    #4:set_building_option      Core-Wizard (#184)   rxd    this none this
    #4:building_option          Core-Wizard (#184)   rxd    this none this
    #4:options_packages         unknown hacker (#35) rxd    this none this
    #4:@recycle!                Core-Wizard (#184)   r d    any none none
    #4:@move                    Core-Wizard (#184)   rxd    any at/to any
    #4:@measure                 Core-Wizard (#184)   r d    any any any
    #4:@grant                   Core-Wizard (#184)   r d    any at/to any
    #4:@set*property            Core-Wizard (#184)   r d    any at/to any
    #4:@room-info               Crag (#243)          r d    none none none
    #4:@kids                    Core-Wizard (#184)   rxd    any none none
-------------------------------- finished ---------------------------------
    #4:@par*ents                Core-Wizard (#184)   r d    any any any
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
You see no "me by props" here.
The verb :@parents is on   Crag(#243)--generic builder(#4)
    #4:@kids                    Core-Wizard (#184)   rxd    any none none
-------------------------------- finished ---------------------------------
    #4:@par*ents                Core-Wizard (#184)   r d    any any any
-------------------------------- finished ---------------------------------
Verb permissions set to "rdx".
You see no "me by props" here.
DEBUG: Verb did match after all
DEBUG: will maybe sort by 
generic builder(#4) has 1 kid.
name                dbref  #kids  #verbs  #props
----                -----  -----  ------  ------
generic programmer  #52    5      51      3
----                -----  -----  ------  ------
Verb arguments changed.
The verb :@parents is on   Crag(#243)--generic builder(#4)
You see no "me by props" here.
generic builder(#4) has 6 ancestors.
name                                  dbref  #kids  #verbs  #props
----                                  -----  -----  ------  ------
The Generic Virtual Reality Object    #291   2      0       0
The Helpful Object                    #250   7      1       0
The generic containing object         #145   3      14      1
The generic event dispatching object  #110   3      8       1
generic builder                       #4     1      34      2
The root class                        #1     24     92      15
generic player                        #6     6      243     88
----                                  -----  -----  ------  ------
generic player (#6) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
  Location generic room (#3).
    #6:init_for_core            Core-Wizard (#184)   rxd    this none this
    #6:confunc                  Core-Wizard (#184)   rxd    this none this
    #6:disfunc                  Core-Wizard (#184)   rxd    this none this
    #6:initialize               Core-Wizard (#184)   rxd    this none this
    #6:recycle                  Core-Wizard (#184)   rxd    this none this
    #6:my_huh                   Core-Wizard (#184)   rxd    this none this
    #6:last_huh                 Core-Wizard (#184)   rxd    this none this
    #6:my_match_object          Core-Wizard (#184)   rxd    this none this
    #6:tell_contents            Core-Wizard (#184)   rxd    this none this
    #6:notify                   Core-Wizard (#184)   rxd    this none this
    #6:notify_lines             Core-Wizard (#184)   rxd    this none this
    #6:linesplit                Core-Wizard (#184)   rxd    this none this
    #6:linelen                  unknown hacker (#35) rxd    this none this
    #6:@more                    Core-Wizard (#184)   r d    any none none
    #6:@wrap                    unknown hacker (#35) r d    none any none
    #6:@linelen*gth             unknown hacker (#35) r d    any none none
    #6:@pagelen*gth             Core-Wizard (#184)   r d    any none none
    #6:tell                     Core-Wizard (#184)   rxd    this none this
    #6:gag_p                    Core-Wizard (#184)   rxd    this none this
    #6:"set_gaglist set_gaglist_noisy" Core-Wizard (#184) rxd this none this
    #6:@gag                     Core-Wizard (#184)   r d    any any any
    #6:"@listgag @gaglist @gagged" Core-Wizard (#184) rxd   none none none
    #6:@ungag                   Core-Wizard (#184)   rxd    any none none
    #6:whodunnit                Core-Wizard (#184)   rxd    this none this
    #6:@paranoid                Core-Wizard (#184)   r d    any any any
    #6:@sw*eep                  Core-Wizard (#184)   r d    none none none
    #6:wh*isper                 Core-Wizard (#184)   rxd    any at/to this
    #6:receive_page             Core-Wizard (#184)   rxd    this none this
    #6:"page_origin_msg page_echo_msg page_absent_msg" unknown hacker (#35) rxd this none this
    #6:"i inv*entory"           Core-Wizard (#184)   r d    none none none
    #6:look_self                Core-Wizard (#184)   rxd    this none this
    #6:home                     Core-Wizard (#184)   r d    none none none
    #6:@sethome                 Core-Wizard (#184)   r d    none none none
    #6:"get take"               Core-Wizard (#184)   rxd    this none none
    #6:@eject                   Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:"where*is @where*is"     Core-Wizard (#184)   rxd    any any any
    #6:@wizards                 Core-Wizard (#184)   rxd    any none none
    #6:"mail_forward mail_notify" Core-Wizard (#184) rxd    this none this
    #6:receive_message          Core-Wizard (#184)   rxd    this none this
    #6:display_message          Core-Wizard (#184)   rxd    this none this
    #6:"parse_message_seq from_msg_seq %from_msg_seq to_msg_seq %to_msg_seq subject_msg_seq body_msg_seq display_seq_headers display_seq_full messages_in_seq list_rmm new_message_num length_num_le length_date_le length_date_gt length_all_msgs exists_num_eq rm_message_seq undo_rmm expunge_rmm renumber" Core-Wizard (#184) rxd this none this
    #6:msg_summary_line         unknown hacker (#35) rxd    this none this
    #6:msg_text                 Core-Wizard (#184)   rxd    this none this
    #6:notify_mail              Core-Wizard (#184)   rxd    this none this
    #6:current_message          Core-Wizard (#184)   rxd    this none this
    #6:get_current_message      Core-Wizard (#184)   rxd    this none this
    #6:set_current_message      Core-Wizard (#184)   rxd    this none this
    #6:make_current_message     Core-Wizard (#184)   rxd    this none this
    #6:kill_current_message     Core-Wizard (#184)   rxd    this none this
    #6:current_folder           Core-Wizard (#184)   rxd    this none this
    #6:set_current_folder       Core-Wizard (#184)   rxd    this none this
    #6:parse_folder_spec        Core-Wizard (#184)   rxd    this none this
    #6:parse_mailread_cmd       Core-Wizard (#184)   rxd    this none this
    #6:@mail                    Core-Wizard (#184)   rxd    any any any
    #6:"@read @peek"            Core-Wizard (#184)   rxd    any any any
    #6:"@next @prev"            Core-Wizard (#184)   r d    any any any
    #6:@rmm*ail                 Core-Wizard (#184)   r d    any any any
    #6:@renumber                Core-Wizard (#184)   r d    any none none
    #6:@unrmm*ail               Core-Wizard (#184)   r d    any any any
    #6:@send                    Core-Wizard (#184)   rxd    any any any
    #6:"@answer @repl*y"        Core-Wizard (#184)   r d    any any any
    #6:@forward                 Core-Wizard (#184)   rxd    any any any
    #6:@gripe                   Core-Wizard (#184)   r d    any any any
    #6:"@typo @bug @suggest*ion @idea @comment" Core-Wizard (#184) r d any any any
    #6:"@skip @unsub*scribe"    Core-Wizard (#184)   r d    any any any
    #6:@subscribe               Core-Wizard (#184)   r d    any any any
    #6:mail_catch_up            Core-Wizard (#184)   rxd    this none this
    #6:"@rn check_mail_lists @subscribed" Core-Wizard (#184) rx none none none
    #6:mail_option              Core-Wizard (#184)   rxd    this none this
    #6:edit_option              Core-Wizard (#184)   rxd    this none this
    #6:"set_mail_option set_edit_option set_misc_option set_client_option set_who_option set_parse_option" Core-Wizard (#184) rxd this none this
    #6:"@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @misco*ptions @misc-o*ptions @cliento*ptions @client-o*ptions @whoo*ptions @who-o*ptions @parseo*ptions @parse-o*ptions" Core-Wizard (#184) r d any any any
    #6:set_name                 Core-Wizard (#184)   rxd    this none this
    #6:set_aliases              Core-Wizard (#184)   rxd    this none this
    #6:@rename*#                Core-Wizard (#184)   r d    any at/to any
    #6:"@add-alias*# @addalias*# @add_alias*#" Core-Wizard (#184) r d any at/to any
    #6:"@rmalias*# @rm-alias*#" Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:@desc*ribe               Core-Wizard (#184)   r d    any as any
    #6:@mess*ages               Core-Wizard (#184)   r d    any none none
    #6:@notedit                 unknown hacker (#35) r d    any none none
    #6:@password                Core-Wizard (#184)   r d    any any any
    #6:@last-c*onnection        Core-Wizard (#184)   rxd    any none none
    #6:"set_gender set_gender_name set_gender_obj" Core-Wizard (#184) rxd this none this
    #6:@gender                  Core-Wizard (#184)   r d    any none none
    #6:@ex*amine                Core-Wizard (#184)   rxd    any none none
    #6:ex*amine                 Core-Wizard (#184)   r d    any none none
    #6:add_feature              unknown hacker (#35) rx     this none this
    #6:remove_feature           unknown hacker (#35) rxd    this none this
    #6:"@add-feature @addfeature" Core-Wizard (#184) r d    any none none
    #6:"@remove-feature @rmfeature @rm-feature" Core-Wizard (#184) r d any none none
    #6:@features                Core-Wizard (#184)   rxd    any for/about any
    #6:@features                Core-Wizard (#184)   r d    any none none
    #6:@memory                  unknown hacker (#35) r d    none none none
    #6:@version                 unknown hacker (#35) r d    none none none
    #6:@uptime                  unknown hacker (#35) r d    none none none
    #6:"@quit quit"             Core-Wizard (#184)   r d    none none none
    #6:QUIT-IN-ALL-CAPS         Core-Wizard (#184)   r d    none none none
    #6:notify(new)              Core-Wizard (#184)   r d    this none this
    #6:examine_commands_ok      Core-Wizard (#184)   rxd    this none this
    #6:is_listening             Core-Wizard (#184)   rxd    this none this
    #6:"@quicksend @qsend"      Core-Wizard (#184)   r d    any any any
    #6:!*                       unknown hacker (#35) r d    any any any
    #6:'*                       unknown hacker (#35) r      any any any
    #6:"@pronoun_sub @pronoun-sub" Core-Wizard (#184) r d   none with/using any
    #6:"@set-note-string @set-note-text @set-note-value" Core-Wizard (#184) r d any none none
    #6:description              unknown hacker (#35) rxd    this none this
    #6:@nn                      Core-Wizard (#184)   r d    none none none
    #6:mu*rmur                  Core-Wizard (#184)   r d    any any any
    #6:look_in                  Core-Wizard (#184)   rxd    this none this
    #6:@option*s                Core-Wizard (#184)   r d    any any any
    #6:options_packages         Core-Wizard (#184)   rxd    this none this
    #6:options_command          Core-Wizard (#184)   rxd    this none this
    #6:contribute_partial       Core-Wizard (#184)   rxd    this none this
    #6:contribute_reset         Core-Wizard (#184)   rxd    this none this
    #6:contribute_link          Core-Wizard (#184)   rxd    this none this
    #6:receive_vbox             unknown hacker (#35) rxd    this none this
    #6:contribute_title         Core-Wizard (#184)   rxd    this none this
    #6:moveto                   Core-Wizard (#184)   rxd    this none this
    #6:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #6:visible_of               unknown hacker (#35) rxd    this none this
    #6:@set-jtext-form          Core-Wizard (#184)   r d    any none none
    #6:idle_suffix              Core-Wizard (#184)   rxd    this none this
    #6:modname_v                Core-Wizard (#184)   rxd    this none this
    #6:@edit*#                  Core-Wizard (#184)   r d    any any any
    #6:set_focus_object         Core-Wizard (#184)   rxd    this none this
    #6:email_address            Core-Wizard (#184)   rxd    this none this
    #6:"misc_option client_option who_option parse_option" Core-Wizard (#184) rxd this none this
    #6:"@forward-me @forwardme" Core-Wizard (#184)   r d    any any any
    #6:ownership_quota          Core-Wizard (#184)   rxd    this none this
    #6:contribute_newline       Core-Wizard (#184)   rxd    this none this
    #6:"set_current_object set_current_object_stack set_authentication_key" Core-Wizard (#184) rxd this none this
    #6:client_notify            Core-Wizard (#184)   rxd    this none this
    #6:brief                    Core-Wizard (#184)   rxd    this none this
    #6:picknew                  unknown hacker (#35) r d    any none none
    #6:"walk go"                unknown hacker (#35) rxd    none at/to any
    #6:_find_path               Core-Wizard (#184)   rxd    this none this
    #6:join                     Core-Wizard (#184)   rxd    any none none
    #6:pick                     unknown hacker (#35) rxd    any on top of/on/onto/upon this
    #6:pop                      unknown hacker (#35) rxd    none on top of/on/onto/upon this
    #6:match_command            unknown hacker (#35) rxd    this none this
    #6:my_match_room            Core-Wizard (#184)   rxd    this none this
    #6:features                 Core-Wizard (#184)   rxd    this none this
    #6:receive_document         Core-Wizard (#184)   rxd    this none this
    #6:"@co @currentobject @current-object" Core-Wizard (#184) r d any none none
    #6:parse_current_object     unknown hacker (#35) rxd    this none this
    #6:@pusho*bject             Core-Wizard (#184)   r d    any none none
    #6:@popo*object             Core-Wizard (#184)   r d    none none none
    #6:@swapo*bject             Core-Wizard (#184)   r d    none none none
    #6:jdetails                 Core-Wizard (#184)   r d    any none none
    #6:@@sendmail               Core-Wizard (#184)   r d    any any any
    #6:fol*low                  unknown hacker (#35) r d    this none none
    #6:unfol*low                unknown hacker (#35) r d    any any any
    #6:followers                unknown hacker (#35) r d    any any any
    #6:following                unknown hacker (#35) r d    none none none
    #6:my_match_player          Core-Wizard (#184)   rxd    this none this
    #6:news                     Core-Wizard (#184)   r d    any none none
    #6:"@helpme @911"           Core-Wizard (#184)   r d    any any any
    #6:"@admin*istrators @admins" Core-Wizard (#184) rxd    any none none
    #6:"parse_message unparse_message" Core-Wizard (#184) rxd this none this
    #6:@url                     Core-Wizard (#184)   r d    any any any
    #6:@read-all-new*-mail      Core-Wizard (#184)   rxd    any none none
    #6:send_self_netmail        Core-Wizard (#184)   rxd    this none this
    #6:@add-help-db             Core-Wizard (#184)   r d    any none none
    #6:@rm-help-db              Core-Wizard (#184)   r d    any none none
    #6:@unsubscribed            Core-Wizard (#184)   r d    none none none
    #6:reconfunc                Core-Wizard (#184)   rxd    this none this
    #6:@resend                  Core-Wizard (#184)   r d    any any any
    #6:"help ?*"                Core-Wizard (#184)   rxd    any any any
    #6:match_help_object        unknown hacker (#35) rxd    this none this
    #6:@aliases                 Core-Wizard (#184)   r d    any none none
    #6:contribute_newline_maybe Core-Wizard (#184)   rxd    this none this
    #6:contribute_hr            Core-Wizard (#184)   rxd    this none this
    #6:set_last_player_paged    Core-Wizard (#184)   rxd    this none this
    #6:visible                  unknown hacker (#35) rxd    this none this
    #6:set_number               unknown hacker (#35) rxd    this none this
    #6:you                      unknown hacker (#35) rxd    this none this
    #6:page                     Core-Wizard (#184)   rxd    any any any
    #6:is_idle                  Core-Wizard (#184)   rxd    none none none
    #6:start_dozing             Core-Wizard (#184)   rxd    this none this
    #6:start_idling             Core-Wizard (#184)   rxd    this none this
    #6:"idle reidle"            Core-Wizard (#184)   rxd    any any any
    #6:idle_msg                 Core-Wizard (#184)   rxd    this none this
    #6:dozing_msg               Core-Wizard (#184)   rxd    this none this
    #6:start_doing              unknown hacker (#35) rxd    this none this
    #6:doing_msg                Core-Wizard (#184)   rxd    this none this
    #6:"doing undoing"          Core-Wizard (#184)   r d    any any any
    #6:@who                     Core-Wizard (#184)   rxd    any any any
    #6:debug_if_player          Core-Wizard (#184)   rxd    this none this
    #6:match_type_object        Core-Wizard (#184)   rxd    this none this
    #6:dependents_event_really_disconnected Core-Wizard (#184) rxd this none this
    #6:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:maybe_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:modname_c                unknown hacker (#35) rxd    this none this
    #6:@desc*ribe               Core-Wizard (#184)   r d    any none none
    #6:@netforw*ard             Core-Wizard (#184)   r d    any any any
    #6:@register                Core-Wizard (#184)   r d    any as any
    #6:"@register @email-address" Core-Wizard (#184) r      any none none
    #6:more_string              Core-Wizard (#184)   rxd    this none this
    #6:desc_idle_msg            Core-Wizard (#184)   rxd    this none this
    #6:nominate_for_core        Core-Wizard (#184)   rxd    this none this
    #6:sit                      Core-Wizard (#184)   r d    none with/using this
    #6:acceptable               Core-Wizard (#184)   rxd    this none this
    #6:@shout                   Core-Wizard (#184)   r d    any any any
    #6:set_home                 unknown hacker (#35) rx     this none this
    #6:anyconfunc               Core-Wizard (#184)   rxd    this none this
    #6:@ch*eck-full             Core-Wizard (#184)   r d    any any any
    #6:"@add-handler @addhandler" Core-Wizard (#184) r d    any none none
    #6:handlers                 Core-Wizard (#184)   rxd    this none this
    #6:"@remove-handler @rmhandler @rm-handler" Core-Wizard (#184) r d any none none
    #6:@handlers                Core-Wizard (#184)   rx     any for/about any
    #6:@handlers                Core-Wizard (#184)   r      any none none
    #6:total_connect_times      Core-Wizard (#184)   rxd    this none this
    #6:_set_mail_task           Core-Wizard (#184)   rxd    this none this
    #6:add_handler              unknown hacker (#35) rxd    this none this
    #6:remove_handler           unknown hacker (#35) rxd    this none this
    #6:"set_walking_dest set_walking_task" unknown hacker (#35) rx this none this
    #6:move_by_exits            unknown hacker (#35) rxd    this none this
    #6:walking_step             unknown hacker (#35) rxd    this none this
    #6:begin_walking            unknown hacker (#35) rxd    this none this
    #6:end_walking              unknown hacker (#35) rxd    this none this
    #6:"walkto walkto_blocking" unknown hacker (#35) rxd    this none this
    #6:find_path                unknown hacker (#35) rxd    this none this
    #6:stop                     unknown hacker (#35) r d    none none none
    #6:timestamp_string         Core-Wizard (#184)   rxd    this none this
    #6:@age                     Core-Wizard (#184)   r d    any none none
    #6:+*                       Core-Wizard (#184)   rxd    any any any
    #6:lose                     unknown hacker (#35) rxd    any any any
    #6:display_current_object   Core-Wizard (#184)   rxd    this none this
    #6:current_object_string    Core-Wizard (#184)   rxd    this none this
    #6:edit_set_note_value      Core-Wizard (#184)   rxd    this none this
    #6:edit_sendmail            Core-Wizard (#184)   rxd    this none this
    #6:absent_for_page          unknown hacker (#35) rxd    this none this
    #6:send_forwarded_moomail   Core-Wizard (#184)   rxd    this none this
    #6:walking_delay            unknown hacker (#35) rxd    this none this
    #6:walk_failed              Core-Wizard (#184)   rxd    this none this
    #6:my_walk_failed           Core-Wizard (#184)   rxd    this none this
    #6:dwim_objects             Core-Wizard (#184)   rxd    this none this
    #6:"@room*# @rooms*#"       unknown hacker (#35) rxd    any any any
    #6:set_timezone             unknown hacker (#35) rxd    this none this
    #6:ctime                    unknown hacker (#35) rxd    this none this
    #6:time_sub                 unknown hacker (#35) rxd    this none this
    #6:@lastlog                 unknown hacker (#35) rxd    any none none
    #6:integrated_desc          Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
UTILITIES
=========

The core database has a number of objects serving as libraries of useful verbs.
More detailed information can be obtained for (some of) these, via `help $whatever_utils'

$building_utils -- 
$code_utils     -- parsing and manipulating verb code
$command_utils  -- reporting matching errors to the player
$gender_utils   -- managing gendered objects
$list_utils     -- list manipulation
$set_utils      -- set manipulation
$lock_utils     -- key expression manipulation
$match_utils    -- 
$object_utils   -- object information 
                  (inheritance/location hierarchy, verb/property lists)
$perm_utils     -- permissions
$string_utils   -- string manipulation
$time_utils     -- time (numeric and verbal) manipulation
$trig_utils     -- trigonometric and other numerical utilities

-----
GENERAL INFORMATION ON $COMMAND_UTILS[1]
========================================

$command_utils is the repository for verbs that are of general usefulness to authors of all sorts of commands.

Detecting and Handling Failures in Matching
-------------------------------------------
:object_match_failed(match_result, name)
    Test whether or not a :match_object() call failed and print messages if so.
:player_match_failed(match_result, name)
    Test whether or not a :match_player() call failed and print messages if so.
:player_match_result(match_results, names)
    ...similar to :player_match_failed, but does a whole list at once.
:room_match_failed(match_result, name)
    Test whether or not a :match_room() call failed and print messages if so.

Reading Input from the Player
-----------------------------
:read()         -- Read one line of input from the player and return it.
:yes_or_no([prompt])
                -- Prompt for and read a `yes' or `no' answer.
:read_lines()   -- Read zero or more lines of input from the player.
:dump_lines(lines) 
                -- Return list of lines quoted so that feeding them to 
                   :read_lines() will reproduce the original lines.

Utilities for Suspending
------------------------
:running_out_of_time()
                -- Return true if we're low on ticks or seconds.
:suspend_if_needed(time)
                -- Suspend (and return true) if we're running out of time.

Client Support for Lengthy Commands
-----------------------------------
:suspend(args)  -- Handle PREFIX and SUFFIX for clients in long commands.

-----
`HELP $MATCH_UTILS' NOT FOUND
=============================

Sorry, but no help is available on `$match_utils'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

You see no "$match_utils" here.
-----
UTILITIES
=========

The core database has a number of objects serving as libraries of useful verbs.
More detailed information can be obtained for (some of) these, via `help $whatever_utils'

$building_utils -- 
$code_utils     -- parsing and manipulating verb code
$command_utils  -- reporting matching errors to the player
$gender_utils   -- managing gendered objects
$list_utils     -- list manipulation
$set_utils      -- set manipulation
$lock_utils     -- key expression manipulation
$match_utils    -- 
$object_utils   -- object information 
                  (inheritance/location hierarchy, verb/property lists)
$perm_utils     -- permissions
$string_utils   -- string manipulation
$time_utils     -- time (numeric and verbal) manipulation
$trig_utils     -- trigonometric and other numerical utilities

-----
`HELP $MATCH_UTILS' NOT FOUND
=============================

Sorry, but no help is available on `$match_utils'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
DEBUG: Verb did match after all
DEBUG: will maybe sort by 
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Generic Achievement       #445   1      1       1
The Generic Input Handler     #509   1      1       0
The Generic Command           #531   1      1       0
The Parsing objects           #252   2      0       0
The Blank Root                #560   2      0       0
The Text generation objects   #253   5      0       0
The Address Root              #109   6      14      1
The MCP parent                #251   6      0       0
The Helpful Object            #250   7      1       0
The Tag Root                  #91    15     7       1
The Abstract class            #254   17     0       0
----                          -----  -----  ------  ------
DEBUG: Verb did match after all
DEBUG: won't sort
The Abstract class(#254) has 17 kids.
name                                 dbref  #kids  #verbs  #props
----                                 -----  -----  ------  ------
Generic Help Database                #30    2      26      2
The New Generic Database             #79    4      30      7
The Generic Mail Recipient           #41    4      31      12
The Generic Option Package           #60    11     12      7
The Generic Feature Object           #65    6      16      5
The generic admin group              #163   5      25      7
The generic utilities                #146   24     0       1
The generic event handler            #133   0      6       1
Generic gender object                #64    5      4       18
The Generic BigList Resident         #75    0      7       4
The generic property farm            #206   5      7       1
The Generic Pronoun_sub Translator   #73    2      12      0
The generic name builder             #240   3      4       0
The generic source or sink           #196   2      3       2
The generic message dispatch object  #219   2      3       2
The generic listener                 #224   1      8       1
The generic daemon service handler   #210   0      12      2
----                                 -----  -----  ------  ------
DEBUG: Verb did match after all
DEBUG: won't sort
The generic utilities(#146) has 24 kids.
name                            dbref  #kids  #verbs  #props
----                            -----  -----  ------  ------
The Generic BigList Utilities   #13    0      24      3
The wizard utilities            #24    0      27      4
The math utilities              #26    0      35      5
The set utilities               #27    0      7       0
The sequence utilities          #32    0      17      0
Gender utilities                #38    0      8       1
The time utilities              #39    0      20      16
The object utilities            #47    0      29      0
The lock utilities              #48    0      12      4
The list utilities              #49    0      40      0
The command utilities           #50    0      17      1
The code utilities              #53    0      77      13
The permissions utilities       #130   0      5       0
The building utilities          #19    0      9       0
The string utilities            #18    0      89      7
The English Utilities           #72    0      26      16
The integration utils           #74    0      6       0
The Name Utilities              #177   0      8       2
The Parsing Utilities           #117   0      3       1
The walking utils               #182   0      11      0
The room matching utilities     #190   0      28      5
The Generic Quota Utils Parent  #88    2      8       7
The Group Utilities             #248   0      1       0
The Delegation Utilities        #247   0      0       0
----                            -----  -----  ------  ------
-----
GENERAL INFORMATION ON $OBJECT_UTILS[1]
=======================================

These routines are useful for finding out information about individual objects.

Examining everything an object has defined on it:
  all_verbs          (object) => like it says
  all_properties     (object) => likewise
  findable_properties(object) => tests to see if caller can "find" them
  owned_properties   (object[, owner]) => tests for ownership

Investigating inheritance:
  ancestors(object[,object...]) => all ancestors
  descendants      (object)     => all descendants
  ordered_descendants(object)   => descendants, in a different order
  leaves           (object)     => descendants with no children
  branches         (object)     => descendants with children 
  isa        (object,class) => true iff object is a descendant of class (or ==)

Considering containment:
  contains      (obj1, obj2) => Does obj1 contain obj2 (nested)?
  all_contents      (object) => return all the (nested) contents of object

Verifying verbs and properties:
  has_property(object,pname) => false/true   according as object.(pname) exists
  has_verb    (object,vname) => false/{#obj} according as object:(vname) exists
  has_callable_verb          => same, but verb must be callable from a program
  match_verb  (object,vname) => false/{location, newvname}
                               (identify location and usable name of verb)
Suspending:
  Many of the above verbs have ..._suspended versions to assist with very large object hierarchies.  The following exist:
   descendants_suspended              
   branches_suspended                 
   leaves_suspended                   
   all_properties_suspended           
   descendants_with_property_suspended

DEBUG: Verb did match after all
DEBUG: won't sort
The generic utilities(#146) has 24 kids.
name                            dbref  #kids  #verbs  #props
----                            -----  -----  ------  ------
The Generic BigList Utilities   #13    0      24      3
The wizard utilities            #24    0      27      4
The math utilities              #26    0      35      5
The set utilities               #27    0      7       0
The sequence utilities          #32    0      17      0
Gender utilities                #38    0      8       1
The time utilities              #39    0      20      16
The object utilities            #47    0      29      0
The lock utilities              #48    0      12      4
The list utilities              #49    0      40      0
The command utilities           #50    0      17      1
The code utilities              #53    0      77      13
The permissions utilities       #130   0      5       0
The building utilities          #19    0      9       0
The string utilities            #18    0      89      7
The English Utilities           #72    0      26      16
The integration utils           #74    0      6       0
The Name Utilities              #177   0      8       2
The Parsing Utilities           #117   0      3       1
The walking utils               #182   0      11      0
The room matching utilities     #190   0      28      5
The Generic Quota Utils Parent  #88    2      8       7
The Group Utilities             #248   0      1       0
The Delegation Utilities        #247   0      0       0
----                            -----  -----  ------  ------
Parsing Utilities (#117) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
-------------------------------- finished ---------------------------------
Parsing Utilities (#117) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
  #117:parse_object_args        unknown hacker (#35) rx     this none this
  #117:init_for_core            Core-Wizard (#184)   rx     this none this
  #117:nominate_for_core        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
The verb :last_huh is on   Crag(#243)--generic player(#6)
That object does not define that verb.
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Mon Aug 26 10:10:51 2002 PDT by Xplat (#4014) (on Waterpoint).
#6:"last_huh" this none this
// :last_huh(verb, args) final attempt to parse a command...
// WIZARDLY
set_task_perms(caller_perms());
{verb, args} = args;
if (!(caller in {this, $command_utils}))
  raise(E_PERM);
elseif (verb[1] == "@" && prepstr == "is")
  // ... set or show _msg property ...
  set_task_perms(player);
  $last_huh:(verb)(@args);
elseif (verb[1] != "@" && `verb_info($last_huh, verb) ! E_VERBNF')
  // should $last_huh go first or not?  if not we break `drop' (you drop non-$things into a container!) but if so we break auto-intuiting `take ball [from box]'.  for now I'd like to be able to drop things, sooooo
  $last_huh:(verb)(@args);
elseif (verb[length(verb)] == ",")
  // directed speech ala Infocom
  if (!valid(stage = $feature:match_type_object("stage")))
    return 0;
  endif
  call = "`" + verb[1..length(verb) - 1];
  call = strsub(call, ",", " ");
  stage:(call)(argstr);
elseif (this:parse_option("guess_object"))
  // given a command like `remove frob', which hasn't matched for frob as `this', try to match it for frob as `any' by choosing an intuitive `from this'.
  preps = prepstr ? {"any", $code_utils:full_prep(prepstr)} | (iobjstr ? {"none"} | {});
  for o in (this:dwim_objects())
    for where in ($object_utils:match_verbs_named(o, verb) || {})
      if (!`spec = verb_args(where[1], where[2]) ! E_PERM')
        continue;
      elseif (spec[2] == "none" && spec[3] != "none")
      elseif (preps && !(spec[2] in preps))
      elseif (spec[1] == "this" && !dobjstr)
        dobj = o;
        dobjstr = o.name;
        prepstr = prepstr || (spec[2] == "any" ? "in" | $code_utils:short_prep(spec[2]));
        this:parse_option("report") && this:notify("[" + dobj:dname() + "]");
        if (typeof(where[2]) != STR)
          force_input(this, x = $string_utils:from_words({verb, dobj, @prepstr ? {prepstr, iobjstr} | {}}), 1);
        else
          o:(verb)(@args);
        endif
        return 1;
      elseif (spec[1] == "none" && dobjstr)
      elseif (dobjstr || preps || spec[1] == "none" && spec[3] == "this" && !iobjstr)
        iobj = o;
        iobjstr = o.name;
        prepstr = prepstr || (spec[2] == "any" ? "in" | $code_utils:short_prep(spec[2]));
        this:parse_option("report") && this:notify(tostr("[", prepstr ? prepstr + " " | "", iobj:dname(), "]"));
        if (typeof(where[2]) != STR)
          force_input(this, x = $string_utils:from_words({verb, dobjstr, prepstr, iobj}), 1);
        else
          o:(verb)(@args);
        endif
        return 1;
      endif
    endfor
    if (ticks_left() < 10000)
      break o;
    endif
  endfor
  return 0;
else
  return 0;
endif
return 1;
// Copied from Ben's DWIM Player Class (#500):last_huh by James (#316) Wed Dec 27 18:02:38 2000 EST
DEBUG: Verb did match after all
DEBUG: will maybe sort by 
You see no "me " here.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#4:@kids any none none" name: "MOO verb: #4:@kids any none none" type: moo-code content*: "" _data-tag: 273533808294
#$#* 273533808294 content: // '@kids <obj>' - List the children of an object. This is handy for seeing
#$#* 273533808294 content: // whether anybody's actually using your carefully-wrought public objects.
#$#* 273533808294 content: // Also: '@kids <obj> by name | dbref | kids | verbs | props'
#$#* 273533808294 content: // Sorts output by specified column. Without specification order is same as
#$#* 273533808294 content: // children() function.
#$#* 273533808294 content: player:notify("DEBUG: Verb did match after all");
#$#* 273533808294 content: has_sort = index(argstr, " by ");
#$#* 273533808294 content: which_order = 0;
#$#* 273533808294 content: if (has_sort)
#$#* 273533808294 content:   objstr = argstr[1..has_sort];
#$#* 273533808294 content:   sort = $string_utils:trim(argstr[has_sort + 4..$]);
#$#* 273533808294 content:   player:notify("DEBUG: will maybe sort by ", sort);
#$#* 273533808294 content:   which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
#$#* 273533808294 content:   if (!which_order)
#$#* 273533808294 content:     player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
#$#* 273533808294 content:   endif
#$#* 273533808294 content: else
#$#* 273533808294 content:   player:notify("DEBUG: won't sort");
#$#* 273533808294 content:   objstr = argstr;
#$#* 273533808294 content: endif
#$#* 273533808294 content: thing = player:my_match_object(objstr);
#$#* 273533808294 content: if (!$command_utils:object_match_failed(thing, objstr))
#$#* 273533808294 content:   kids = children(thing);
#$#* 273533808294 content:   if (kids)
#$#* 273533808294 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
#$#* 273533808294 content:     header = {"name", "dbref", "#kids", "#verbs", "#props"};
#$#* 273533808294 content:     info = {};
#$#* 273533808294 content:     for kid in (kids)
#$#* 273533808294 content:       name = kid:dnamec();
#$#* 273533808294 content:       number = kid;
#$#* 273533808294 content:       children = length(children(kid));
#$#* 273533808294 content:       methods = length(verbs(kid));
#$#* 273533808294 content:       props = length(properties(kid));
#$#* 273533808294 content:       info = {@info, {name, number, children, methods, props}};
#$#* 273533808294 content:     endfor
#$#* 273533808294 content:     if (which_order)
#$#* 273533808294 content:       info = $list_utils:sort_alist(info, which_order);
#$#* 273533808294 content:     endif
#$#* 273533808294 content:     for idx in [1..length(info)]
#$#* 273533808294 content:       for column in [1..length(info[1])]
#$#* 273533808294 content:         info[idx][column] = tostr(info[idx][column]);
#$#* 273533808294 content:       endfor
#$#* 273533808294 content:     endfor
#$#* 273533808294 content:     player:tell_lines($string_utils:columnize_with_headers(header, info));
#$#* 273533808294 content:   else
#$#* 273533808294 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
#$#* 273533808294 content:   endif
#$#* 273533808294 content: endif
#$#* 273533808294 content: // Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
#$#* 273533808294 content: // Copied from Crag (#243):@kids by Crag (#243) Sat Aug 31 13:59:14 2013 PDT
#$#: 273533808294
0 errors.
Verb programmed.
DEBUG: won't sort
generic builder(#4) has 1 kid.
name                dbref  #kids  #verbs  #props
----                -----  -----  ------  ------
generic programmer  #52    5      51      3
----                -----  -----  ------  ------
generic builder(#4) has 1 kid.
name                dbref  #kids  #verbs  #props
----                -----  -----  ------  ------
generic programmer  #52    5      51      3
----                -----  -----  ------  ------
DEBUG: won't sort
Crag(#243) has no kids.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#4:@kids any none none" name: "MOO verb: #4:@kids any none none" type: moo-code content*: "" _data-tag: 246493543295
#$#* 246493543295 content: // '@kids <obj>' - List the children of an object. This is handy for seeing
#$#* 246493543295 content: // whether anybody's actually using your carefully-wrought public objects.
#$#* 246493543295 content: // Also: '@kids <obj> by name | dbref | kids | verbs | props'
#$#* 246493543295 content: // Sorts output by specified column. Without specification order is same as
#$#* 246493543295 content: // children() function.
#$#* 246493543295 content: has_sort = index(argstr, " by ");
#$#* 246493543295 content: which_order = 0;
#$#* 246493543295 content: if (has_sort)
#$#* 246493543295 content:   objstr = argstr[1..has_sort];
#$#* 246493543295 content:   sort = $string_utils:trim(argstr[has_sort + 4..$]);
#$#* 246493543295 content:   which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
#$#* 246493543295 content:   if (!which_order)
#$#* 246493543295 content:     player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
#$#* 246493543295 content:   endif
#$#* 246493543295 content: else
#$#* 246493543295 content:   player:notify("DEBUG: won't sort");
#$#* 246493543295 content:   objstr = argstr;
#$#* 246493543295 content: endif
#$#* 246493543295 content: thing = player:my_match_object(objstr);
#$#* 246493543295 content: if (!$command_utils:object_match_failed(thing, objstr))
#$#* 246493543295 content:   kids = children(thing);
#$#* 246493543295 content:   if (kids)
#$#* 246493543295 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
#$#* 246493543295 content:     header = {"name", "dbref", "#kids", "#verbs", "#props"};
#$#* 246493543295 content:     info = {};
#$#* 246493543295 content:     for kid in (kids)
#$#* 246493543295 content:       name = kid:dnamec();
#$#* 246493543295 content:       number = kid;
#$#* 246493543295 content:       children = length(children(kid));
#$#* 246493543295 content:       methods = length(verbs(kid));
#$#* 246493543295 content:       props = length(properties(kid));
#$#* 246493543295 content:       info = {@info, {name, number, children, methods, props}};
#$#* 246493543295 content:     endfor
#$#* 246493543295 content:     if (which_order)
#$#* 246493543295 content:       info = $list_utils:sort_alist(info, which_order);
#$#* 246493543295 content:     endif
#$#* 246493543295 content:     for idx in [1..length(info)]
#$#* 246493543295 content:       for column in [1..length(info[1])]
#$#* 246493543295 content:         info[idx][column] = tostr(info[idx][column]);
#$#* 246493543295 content:       endfor
#$#* 246493543295 content:     endfor
#$#* 246493543295 content:     player:tell_lines($string_utils:columnize_with_headers(header, info));
#$#* 246493543295 content:   else
#$#* 246493543295 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
#$#* 246493543295 content:   endif
#$#* 246493543295 content: endif
#$#* 246493543295 content: // Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
#$#* 246493543295 content: // Copied from Crag (#243):@kids by Crag (#243) Sat Aug 31 13:59:14 2013 PDT
#$#: 246493543295
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#4:@parents any none none" name: "MOO verb: #4:@parents any none none" type: moo-code content*: "" _data-tag: 95310725296
#$#* 95310725296 content: // '@parents <thing>' - List <thing> and its ancestors, all the way back to the Root Class (#1).
#$#* 95310725296 content: // '@parents <thing> by 
#$#* 95310725296 content: has_sort = index(argstr, " by ");
#$#* 95310725296 content: which_order = 0;
#$#* 95310725296 content: if (has_sort)
#$#* 95310725296 content:   objstr = argstr[1..has_sort];
#$#* 95310725296 content:   sort = $string_utils:trim(argstr[has_sort + 4..$]);
#$#* 95310725296 content:   which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
#$#* 95310725296 content:   if (!which_order)
#$#* 95310725296 content:     player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
#$#* 95310725296 content:   endif
#$#* 95310725296 content: else
#$#* 95310725296 content:   objstr = argstr;
#$#* 95310725296 content: endif
#$#* 95310725296 content: thing = player:my_match_object(objstr);
#$#* 95310725296 content: if (!$command_utils:object_match_failed(thing, dobjstr))
#$#* 95310725296 content:   ancestors = {thing, @$object_utils:ancestors(thing)};
#$#* 95310725296 content:   player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(ancestors) - 1, " ancestor", length(ancestors) == 1 ? "" | "s", "."));
#$#* 95310725296 content:   header = {"name", "dbref", "#kids", "#verbs", "#props"};
#$#* 95310725296 content:   info = {};
#$#* 95310725296 content:   for parent in (ancestors)
#$#* 95310725296 content:     name = parent:dnamec();
#$#* 95310725296 content:     number = parent;
#$#* 95310725296 content:     parents = length(children(parent));
#$#* 95310725296 content:     methods = length(verbs(parent));
#$#* 95310725296 content:     props = length(properties(parent));
#$#* 95310725296 content:     info = {@info, {name, number, parents, methods, props}};
#$#* 95310725296 content:   endfor
#$#* 95310725296 content:   if (which_order)
#$#* 95310725296 content:     info = $list_utils:sort_alist(info, which_order);
#$#* 95310725296 content:   endif
#$#* 95310725296 content:   for idx in [1..length(info)]
#$#* 95310725296 content:     for column in [1..length(info[1])]
#$#* 95310725296 content:       info[idx][column] = tostr(info[idx][column]);
#$#* 95310725296 content:     endfor
#$#* 95310725296 content:   endfor
#$#* 95310725296 content:   player:tell_lines($string_utils:columnize_with_headers(header, info));
#$#* 95310725296 content: endif
#$#: 95310725296
-----
$COMMAND_UTILS:OBJECT_MATCH_FAILED
==================================

Usage: object_match_failed(object, string)

Prints a message if string does not match object.  Generally used after object is derived from a :match_object(string).

0 errors.
Verb programmed.
DEBUG: verb matched
You see no "me by props" here.
0 errors.
Verb programmed.
#6:notify (this == #243), line 71:  Incorrect number of arguments
... called from #4:@par*ents (this == #243), line 12
(End of traceback)
0 errors.
Verb programmed.
#6:notify (this == #243), line 71:  Incorrect number of arguments
... called from #4:@par*ents (this == #243), line 12
(End of traceback)
0 errors.
Verb programmed.
DEBUG: sort me  by props
You see no "me by props" here.
0 errors.
Verb programmed.
DEBUG: sort me by props
Crag(#243) has 9 ancestors.
name                                  dbref  #kids  #verbs  #props
----                                  -----  -----  ------  ------
The Generic Virtual Reality Object    #291   2      0       0
The Helpful Object                    #250   7      1       0
Crag                                  #243   0      3       1
The generic containing object         #145   3      14      1
The generic event dispatching object  #110   3      8       1
generic builder                       #4     1      34      2
generic programmer                    #52    5      51      3
generic wizard                        #51    4      39      9
The root class                        #1     24     92      15
generic player                        #6     6      243     88
----                                  -----  -----  ------  ------
0 errors.
Verb programmed.
The sort order you provided (whatever) was unrecognized. Output not sorted.
Crag(#243) has 9 ancestors.
name                                  dbref  #kids  #verbs  #props
----                                  -----  -----  ------  ------
Crag                                  #243   0      3       1
generic wizard                        #51    4      39      9
generic programmer                    #52    5      51      3
generic builder                       #4     1      34      2
generic player                        #6     6      243     88
The generic containing object         #145   3      14      1
The generic event dispatching object  #110   3      8       1
The Generic Virtual Reality Object    #291   2      0       0
The Helpful Object                    #250   7      1       0
The root class                        #1     24     92      15
----                                  -----  -----  ------  ------
generic player (#6) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
  Location generic room (#3).
.features                unknown hack (#35)    r      {#67, #68}
.previous_connection     Core-Wizard (#184)           0
.mail_lists              Core-Wizard (#184)    r c    {}
.email_address           Core-Wizard (#184)           ""
.last_disconnect_time    Core-Wizard (#184)    r      0
.help                    Core-Wizard (#184)    r c    {#173, #100, #235, #238..
.linetask                unknown hack (#35)    r      {0, 0}
.linesleft               unknown hack (#35)    r      0
.linebuffer              unknown hack (#35)           {}
.pagelen                 unknown hack (#35)    r      0
._mail_task              Core-Wizard (#184)    r c    0
.owned_objects           Quota (#185)          r      {}
.linelen                 unknown hack (#35)    r      -79
.current_folder          Core-Wizard (#184)      c    1
.all_connect_places      Core-Wizard (#184)           {}
.last_connect_place      Core-Wizard (#184)           "?"
.dict                    Core-Wizard (#184)    r c    {}
.messages_going          Core-Wizard (#184)      c    {}
.responsible             Core-Wizard (#184)      c    {}
.lines                   Core-Wizard (#184)      c    20
.page_absent_msg         Core-Wizard (#184)    r c    {#69, "do", {"dname", "..
.page_origin_msg         Core-Wizard (#184)    r c    ""
.page_echo_msg           Core-Wizard (#184)    r c    0
.mail_notify             Core-Wizard (#184)    r c    {}
.mail_forward            Core-Wizard (#184)    r c    {}
.edit_options            Core-Wizard (#184)    r c    {}
.mail_options            Core-Wizard (#184)    r c    {}
.current_message         Core-Wizard (#184)      c    {0, 0}
.messages                Core-Wizard (#184)      c    {}
.last_connect_time       Core-Wizard (#184)    r      0
.ownership_quota         Quota (#185)                 0
.gender                  Core-Wizard (#184)    r c    #158
.home                    unknown hack (#35)    r      #70
.password                Core-Wizard (#184)           "impossible password to..
.gaglist                 Core-Wizard (#184)    r c    {}
.paranoid                Core-Wizard (#184)    r c    0
.spoof_attribution_msg   Core-Wizard (#184)    r c    "     --"
.pronoun_sub_style       Core-Wizard (#184)    r c    #78
.last_player_paged       unknown hack (#35)    r      "Everyman"
.contributed_line        Core-Wizard (#184)    r      ""
.contributed_links       Core-Wizard (#184)    r      {}
.followers               unknown hack (#35)    r      {}
.followable              unknown hack (#35)    r      1
.integrate_sep_msg       Core-Wizard (#184)    r c    "  "
.integration_enabled     Core-Wizard (#184)    r c    1
.jtext_form              Core-Wizard (#184)    r      "linemode"
.focus_object            Core-Wizard (#184)    r      #-1
.misc_options            Core-Wizard (#184)    r c    {{"fstamp", "[ $o:$M $p..
.authentication_key      Core-Wizard (#184)           0
.client_options          Core-Wizard (#184)    r c    {}
.link_shepherd           unknown hack (#35)    r      #-1
.walking_task            unknown hack (#35)    r      0
.temp_brief              Core-Wizard (#184)    r c    0
.jaddress_stack          unknown hack (#35)    r      {}
.total_started           Core-Wizard (#184)           0
.total_connect_time      Core-Wizard (#184)           0
.started_keeping_total   Core-Wizard (#184)           0
.current_object          Core-Wizard (#184)    r      {#0, "#0"}
.current_object_stack    Core-Wizard (#184)    r      {}
.following               unknown hack (#35)    r      {}
.walk_randomness         Core-Wizard (#184)    r      {1, 8}
.client_features         Core-Wizard (#184)    r c    {}
.client_authkey          Core-Wizard (#184)    r c    ""
.client_disfuncs         Core-Wizard (#184)    r c    {}
.client_debug            Core-Wizard (#184)    r c    0
.remote_emote_prefix_msg Core-Wizard (#184)    r c    {#69, "do", "(from ", {..
.who_options             Core-Wizard (#184)    r      {{"columns", {"name", "..
.last_entrance_time      Core-Wizard (#184)    r      768064450
.dozing_msg              Core-Wizard (#184)    r c    {#69, "do", "idling"}
.idle_start_time         Core-Wizard (#184)    r c    0
.idle_msg                Core-Wizard (#184)    r c    {#69, "do", "real life ..
.idle_string             Core-Wizard (#184)    r c    ""
.dozing_string           Core-Wizard (#184)    r c    ""
.doing_string            unknown hack (#35)    r      ""
.doing_msg               Core-Wizard (#184)    r      {#69, "do"}
.disconnect_task         Core-Wizard (#184)    r      0
.last_password_time      Core-Wizard (#184)           0
.last_timestamp          Core-Wizard (#184)    r      830677321
.size_quota              Quota (#185)                 {0, 0, 0, 0}
.shout_msg               Core-Wizard (#184)    r c    {#69, "do", {"name", "p..
.contributed_document    Core-Wizard (#184)           E_NONE
.walking_dest            unknown hack (#35)    r      #-1
.use_do_command          Core-Wizard (#184)    r c    0
.first_connect_time      Core-Wizard (#184)    r      2147483647
.out_of_band_session     unknown hack (#35)    r      #-1
.parse_options           Core-Wizard (#184)    r c    {"guess_object", "repor..
.timezone                unknown hack (#35)    r      #39
.queued_task_limit       Core-Wizard (#184)    r      -1
-------------------------------- finished ---------------------------------
The verb :show is on   contents test(#578)--generic note(#9)
The verb :show-history is nowhere to be found.
Searching for core verbs containing the string "show-history" ...


Total: 0 verbs.
Searching for core verbs containing the string "show" ...

#4:@building-o*ptions @buildingo*ptions [+d Core-Wizard (#184)]:    player:notify_lines({"Current " + what + " options:", "", @option_pkg:show(this.(options), option_pkg.names)});
#10:w*ho @w*ho [+d Core-Wizard (#184)]:      notify(player, tostr("(Showing only the ", max, " most active users, of ", l, "...)"));
#31:description [+d Core-Wizard (#184)]:    if (this.show_site)
#31:do_boot [+d Core-Wizard (#184)]:    if (this.show_site)
#31:connection_name [+d Core-Wizard (#184)]:  elseif (this.show_site && this.known_player == $nobody)
#6:last_huh [+d Core-Wizard (#184)]:    "... set or show _msg property ...";
#6:@wizards [+d Core-Wizard (#184)]:    $code_utils:show_who_listing($db_group:all_members());
#6:@mail [+d Core-Wizard (#184)]:  "@mail <msg-sequence> on <recipient> --- shows mail on mailing list or player.";
#6:@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @misco*ptions @misc-o*ptions @cliento*ptions @client-o*ptions @whoo*ptions @who-o*ptions @parseo*ptions @parse-o*ptions [+d Core-Wizard (#184)]:    player:notify_lines({"Current " + what + " options:", "", @option_pkg:show(this.(options), option_pkg.names)});
#6:@option*s [+d Core-Wizard (#184)]:  "Get information about \"preferences\".  The first form lists the categories available, the second lists the options associated with a given category, the fourth lists the options from all categories, and the fourth either shows or sets the value of a given option.";
#6:options_command [+d Core-Wizard (#184)]:  "With no extra-args, show options in <category> (a string).";
#6:receive_document [+d Core-Wizard (#184)]:  show_urls = this:client_option("urls");
#6:following [+d unknown hacker (#35)]:  "\"following\" will show you who you are currently following, should they be in the room, or happen to come into the room.";
#6:@admin*istrators @admins [+d Core-Wizard (#184)]:    $code_utils:show_who_listing(admin_group:all_members());
#6:@who [+d Core-Wizard (#184)]:    $who_utils:show_who_listing(plyrs);
#6:@room*# @rooms*# [+d unknown hacker (#35)]:  "Parse a room expression and show you the matches, as documented elsewhere (see `help $room_matching_utils').";
#42:msg_summary_line [+d unknown hacker (#35)]:    "...show year...";
#52:@list*# [+d Core-Wizard (#184)]:  shown_one = 0;
#52:@s*how [+d Core-Wizard (#184)]:      return $code_utils:show_property(object, spec[2]);
#52:@dump(new) [-d Core-Wizard (#184)]:  "   noprops    -- don't show properties.";
#52:@displayo*ptions @display-o*ptions @listo*ptions @list-o*ptions @evalo*ptions @eval-o*ptions [+d Core-Wizard (#184)]:    player:notify_lines({"Current " + what + " options:", "", @option_pkg:show(this.(options), option_pkg.names)});
#52:@mailverb @mailme-verb @rubber-chicken [+d Core-Wizard (#184)]:  "If the second argument is \"script\", the mail message takes the form of a script with @verb and @program commands.  If it is not specified, the message contains information as displayed by @show object:verb.";
#52:@jdump [-d Core-Wizard (#184)]:  "   noprops -- don't show properties.";
#52:@dump [-d Core-Wizard (#184)]:  "   noprops -- don't show properties.";
#53:show_who_listing [-d Core-Wizard (#184)]:  ":show_who_listing_idle(players[,more_players[,player to tell]])";
#9:show [+d Core-Wizard (#184)]:  "player:tell(\"Unfortunately, due to a security bug, showing of notes does not work.  Please tell \", iobj:dname(), \" to read \", this:name(), \".\");";
#9:do_read [+d Core-Wizard (#184)]:    showto = args[1];
#3:look_self [+d unknown hacker (#35)]:      this.topic_sign:show_topic();
#1:obvious_verbs hidden_verbs help_verbs [+d Core-Wizard (#184)]:  "Verbs are returned as {location, full_verb_name, args} or just full_verb_name.  full_verb name is what shows up in verb_info(object, verb)[3], for example \"dr*op th*row\".";
#59:show [+d unknown hacker (#35)]:  "Copied from Mail Options (#63):show by Rog (#145) Tue Apr 16 01:48:20 1996 EDT";
#60:show [+d unknown hacker (#35)]:  ":show(options,name or list of names)";
#83:@login-o*ptions @Logino*ptions [+d unknown hacker (#35)]:    player:tell_lines({"Current login options:", "", @option_pkg:show(this:get_login_options(player), option_pkg.names)});
#83:@login [+d unknown hacker (#35)]:  "@login on and @login off do the obvious.  If `all' is specified, sets the login watcher to show all login announcements, even those for people not in your interesting list.  If `interesting' is specified, sets the login watcher to show only login announcements for people in your interesting list.";
#83:@wwho [+d Core-Wizard (#184)]:    $who_utils:show_who_listing(interesting, {}, player);
#89:show_who_listing [-d Core-Wizard (#184)]:  ":show_who_listing(players, [[, moreplayers], spam])";
#89:show_order [+d unknown hacker (#35)]:  "Copied from Mail Options (#63):show_@mail by Doug (#107) Sun Jun  5 17:30:32 1994 EDT";
#89:show_ascending [+d unknown hacker (#35)]:  "Copied from Mail Options (#63):show_@mail by Doug (#107) Sun Jun  5 17:30:32 1994 EDT";
#136:show_ticks [+d unknown hacker (#35)]:  "Copied from Mail Options (#63):show_manymsgs by Doug (#107) Sun Jun  5 17:27:05 1994 EDT";
#136:show_env [+d unknown hacker (#35)]:  "Copied from Mail Options (#63):show_@mail by Doug (#107) Sun Jun  5 17:30:32 1994 EDT";
#136:show_subs [+d unknown hacker (#35)]:  "Copied from Mail Options (#63):show_@mail by Doug (#107) Sun Jun  5 17:30:32 1994 EDT";
#178:help_verbs [+d Core-Wizard (#184)]:  "Verbs are returned as {location, full_verb_name, args} or just full_verb_name.  full_verb name is what shows up in verb_info(object, verb)[3], for example \"dr*op th*row\".";
#203:display_dependencies [+d Core-Wizard (#184)]:  "Show the table of dependencies remaining in the module.";
#169:@showhelp [-d Core-Wizard (#184)]:  "Usage:  @showhelp <db>.[<topic>]";
#76:show_idle [+d unknown hacker (#35)]:    return {0, {"Always show messages."}};

Total: 44 verbs.
-----
@GREPCORE
=========

Syntax:  @grepcore <pattern>
         @who-calls <verbname>

@grepcore pattern is @grep pattern in {all core objects}.  Core objects are computed for you by #0:core_objects().

@who-calls greps for the verbname + "(", hoping to catch it as a verb call.  Currently @who-calls does not allow you to restrict the search as @grep does.  (Volunteers?)

Recycling Center (#55) [ readable ]
  Owned by unknown hacker (#35).
  Child of Helpful Object (#250).
   #55:_recreate                Core-Wizard (#184)   rxd    this none this
   #55:_recycle                 Core-Wizard (#184)   rxd    this none this
   #55:_create                  Core-Wizard (#184)   rx     this none this
   #55:addhist                  Core-Wizard (#184)   rxd    this none this
   #55:show*-history            Core-Wizard (#184)   rx     this none none
   #55:request                  Core-Wizard (#184)   r d    any out of/from inside/from this
   #55:setup_toad               Core-Wizard (#184)   rx     this none this
   #55:add_orphan               unknown hacker (#35) rxd    this none this
   #55:remove_orphan            unknown hacker (#35) rxd    this none this
   #55:valid                    Core-Wizard (#184)   rxd    this none this
   #55:init_for_core            Core-Wizard (#184)   rxd    this none this
   #55:accept                   Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
-----
#55:SHOW-HISTORY
================

(No documentation.)

#55:"show*-history" this none none
if ($perm_utils:controls(valid(caller_perms()) ? caller_perms() | player, this))
  for x in (this.history)
    pname = valid(x[1]) ? x[1]:name() | "A recycled player";
    oname = valid(x[2]) ? x[2]:name() | "recycled";
    player:notify(tostr(pname, " (", x[1], ") recycled ", x[2], " (now ", oname, ")"));
  endfor
else
  player:notify("Sorry.");
endif
The verb :@verbs is on   Crag(#243)--generic programmer(#52)
;verbs(#1) => {"initialize", "recycle", "set_name", "name", "titlec namec", "set_aliases", "match", "match_object", "set_description", "description", "look_self", "notify", "tell", "tell_lines", "accept", "moveto", "eject", "is_unlocked_for", "huh", "set_message", "do_examine", "examine_key", "examine_names", "examine_desc", "examine_contents", "examine_verbs", "init_for_core", "contents objects_for_match", "examine_verb_ok", "is_listening", "obvious_verbs hidden_verbs help_verbs", "examine_owner", "announce*_all_but", "visible", "integrate_room_msg integrate_container_msg", "dname*c iname*c", "where_am_i where_are_you", "integrate_in", "name_for_look_self namec_for_look_self", "look_in", "integrate_player_msg", "default_editing", "title", "name_for_tell_contents namec_for_tell_contents", "tell_lines_suspended", "is_hidden_verb", "verb_sub noun_sub adj_sub", "exitfunc", "editing_for", "event_*", "name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number", "add_handler", "_add_handler", "remove_handler", "handlers_event_*", "ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu", "gender gender_name", "set_number set_visible set_integrate_in", "number", "is_plural are_plural plural", "gender_obj", "you", "modname_d", "modname_i", "modname_c", "modname_p", "base_name", "nominate_for_core", "help_text", "modname_u", "modname_titleize", "empty_message", "empty_message_integrate_room empty_message_integrate_container", "modname_in", "acceptable", "modname_v", "modname_#", "modname_l", "get_messages", "get_message", "set_proper set_unique", "call_from_self_*", "name_for", "name_mentioned", "namebuilder_i namebuilder_d", "verb_sub_for noun_sub_for", "ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for", "match_type_object", "clear_for_rebuild", "location", "location_for_caller", "core_names"}
=> {"initialize", "recycle", "set_name", "name", "titlec namec", "set_aliases", "match", "match_object", "set_description", "description", "look_self", "notify", "tell", "tell_lines", "accept", "moveto", "eject", "is_unlocked_for", "huh", "set_message", "do_examine", "examine_key", "examine_names", "examine_desc", "examine_contents", "examine_verbs", "init_for_core", "contents objects_for_match", "examine_verb_ok", "is_listening", "obvious_verbs hidden_verbs help_verbs", "examine_owner", "announce*_all_but", "visible", "integrate_room_msg integrate_container_msg", "dname*c iname*c", "where_am_i where_are_you", "integrate_in", "name_for_look_self namec_for_look_self", "look_in", "integrate_player_msg", "default_editing", "title", "name_for_tell_contents namec_for_tell_contents", "tell_lines_suspended", "is_hidden_verb", "verb_sub noun_sub adj_sub", "exitfunc", "editing_for", "event_*", "name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number", "add_handler", "_add_handler", "remove_handler", "handlers_event_*", "ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu", "gender gender_name", "set_number set_visible set_integrate_in", "number", "is_plural are_plural plural", "gender_obj", "you", "modname_d", "modname_i", "modname_c", "modname_p", "base_name", "nominate_for_core", "help_text", "modname_u", "modname_titleize", "empty_message", "empty_message_integrate_room empty_message_integrate_container", "modname_in", "acceptable", "modname_v", "modname_#", "modname_l", "get_messages", "get_message", "set_proper set_unique", "call_from_self_*", "name_for", "name_mentioned", "namebuilder_i namebuilder_d", "verb_sub_for noun_sub_for", "ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for", "match_type_object", "clear_for_rebuild", "location", "location_for_caller", "core_names"}
Object #243 does not define that verb, but its ancestor #52 does.
#52:"@verbs" any none none
// Definition from Lambda:#33337
set_task_perms(player);
if (!dobjstr)
  if (verb[7] != "(" && verb[length(verb)] != ")")
    player:tell("Usage:  @verbs <object>");
    return;
  else
    dobjstr = verb[8..length(verb) - 1];
  endif
endif
thing = player:my_match_object(dobjstr);
if (!$command_utils:object_match_failed(thing, dobjstr))
  verbs = $code_utils:verbs(thing);
  player:tell(";verbs(", thing, ") => ", $string_utils:from_value(verbs, 1, -1));
endif
Object #243 does not define that verb, but its ancestor #4 does.
Last modified Sat Aug 31 14:27:22 2013 PDT by Crag (#243).
#4:"@kids" any none none
// '@kids <obj>' - List the children of an object. This is handy for seeing
// whether anybody's actually using your carefully-wrought public objects.
// Also: '@kids <obj> by name | dbref | kids | verbs | props'
// Sorts output by specified column. Without specification order is same as
// children() function.
has_sort = index(argstr, " by ");
which_order = 0;
if (has_sort)
  objstr = argstr[1..has_sort];
  sort = $string_utils:trim(argstr[has_sort + 4..$]);
  which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
  if (!which_order)
    player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
  endif
else
  objstr = argstr;
endif
thing = player:my_match_object(objstr);
if (!$command_utils:object_match_failed(thing, objstr))
  kids = children(thing);
  if (kids)
    player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
    header = {"name", "dbref", "#kids", "#verbs", "#props"};
    info = {};
    for kid in (kids)
      name = kid:dnamec();
      number = kid;
      children = length(children(kid));
      methods = length(verbs(kid));
      props = length(properties(kid));
      info = {@info, {name, number, children, methods, props}};
    endfor
    if (which_order)
      info = $list_utils:sort_alist(info, which_order);
    endif
    for idx in [1..length(info)]
      for column in [1..length(info[1])]
        info[idx][column] = tostr(info[idx][column]);
      endfor
    endfor
    player:tell_lines($string_utils:columnize_with_headers(header, info));
  else
    player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
  endif
endif
// Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
// Copied from Crag (#243):@kids by Crag (#243) Sat Aug 31 13:59:14 2013 PDT
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#243:@kids any none none" name: "MOO verb: #243:@kids any none none" type: moo-code content*: "" _data-tag: 696478403297
#$#* 696478403297 content: Crag (#243) does not define a :@kids verb.  The following code is from its ancestor, generic builder (#4).
#$#* 696478403297 content: // '@kids <obj>' - List the children of an object. This is handy for seeing
#$#* 696478403297 content: // whether anybody's actually using your carefully-wrought public objects.
#$#* 696478403297 content: // Also: '@kids <obj> by name | dbref | kids | verbs | props'
#$#* 696478403297 content: // Sorts output by specified column. Without specification order is same as
#$#* 696478403297 content: // children() function.
#$#* 696478403297 content: has_sort = index(argstr, " by ");
#$#* 696478403297 content: which_order = 0;
#$#* 696478403297 content: if (has_sort)
#$#* 696478403297 content:   objstr = argstr[1..has_sort];
#$#* 696478403297 content:   sort = $string_utils:trim(argstr[has_sort + 4..$]);
#$#* 696478403297 content:   which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
#$#* 696478403297 content:   if (!which_order)
#$#* 696478403297 content:     player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
#$#* 696478403297 content:   endif
#$#* 696478403297 content: else
#$#* 696478403297 content:   objstr = argstr;
#$#* 696478403297 content: endif
#$#* 696478403297 content: thing = player:my_match_object(objstr);
#$#* 696478403297 content: if (!$command_utils:object_match_failed(thing, objstr))
#$#* 696478403297 content:   kids = children(thing);
#$#* 696478403297 content:   if (kids)
#$#* 696478403297 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
#$#* 696478403297 content:     header = {"name", "dbref", "#kids", "#verbs", "#props"};
#$#* 696478403297 content:     info = {};
#$#* 696478403297 content:     for kid in (kids)
#$#* 696478403297 content:       name = kid:dnamec();
#$#* 696478403297 content:       number = kid;
#$#* 696478403297 content:       children = length(children(kid));
#$#* 696478403297 content:       methods = length(verbs(kid));
#$#* 696478403297 content:       props = length(properties(kid));
#$#* 696478403297 content:       info = {@info, {name, number, children, methods, props}};
#$#* 696478403297 content:     endfor
#$#* 696478403297 content:     if (which_order)
#$#* 696478403297 content:       info = $list_utils:sort_alist(info, which_order);
#$#* 696478403297 content:     endif
#$#* 696478403297 content:     for idx in [1..length(info)]
#$#* 696478403297 content:       for column in [1..length(info[1])]
#$#* 696478403297 content:         info[idx][column] = tostr(info[idx][column]);
#$#* 696478403297 content:       endfor
#$#* 696478403297 content:     endfor
#$#* 696478403297 content:     player:tell_lines($string_utils:columnize_with_headers(header, info));
#$#* 696478403297 content:   else
#$#* 696478403297 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
#$#* 696478403297 content:   endif
#$#* 696478403297 content: endif
#$#* 696478403297 content: // Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
#$#* 696478403297 content: // Copied from Crag (#243):@kids by Crag (#243) Sat Aug 31 13:59:14 2013 PDT
#$#: 696478403297
That object has no verb matching that name + args.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#4:@kids any none none" name: "MOO verb: #4:@kids any none none" type: moo-code content*: "" _data-tag: 238338563298
#$#* 238338563298 content: // '@kids <obj>' - List the children of an object. This is handy for seeing
#$#* 238338563298 content: // whether anybody's actually using your carefully-wrought public objects.
#$#* 238338563298 content: // Also: '@kids <obj> by name | dbref | kids | verbs | props'
#$#* 238338563298 content: // Sorts output by specified column. Without specification order is same as
#$#* 238338563298 content: // children() function.
#$#* 238338563298 content: has_sort = index(argstr, " by ");
#$#* 238338563298 content: which_order = 0;
#$#* 238338563298 content: if (has_sort)
#$#* 238338563298 content:   objstr = argstr[1..has_sort];
#$#* 238338563298 content:   sort = $string_utils:trim(argstr[has_sort + 4..$]);
#$#* 238338563298 content:   which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
#$#* 238338563298 content:   if (!which_order)
#$#* 238338563298 content:     player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
#$#* 238338563298 content:   endif
#$#* 238338563298 content: else
#$#* 238338563298 content:   objstr = argstr;
#$#* 238338563298 content: endif
#$#* 238338563298 content: thing = player:my_match_object(objstr);
#$#* 238338563298 content: if (!$command_utils:object_match_failed(thing, objstr))
#$#* 238338563298 content:   kids = children(thing);
#$#* 238338563298 content:   if (kids)
#$#* 238338563298 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
#$#* 238338563298 content:     header = {"name", "dbref", "#kids", "#verbs", "#props"};
#$#* 238338563298 content:     info = {};
#$#* 238338563298 content:     for kid in (kids)
#$#* 238338563298 content:       name = kid:dnamec();
#$#* 238338563298 content:       number = kid;
#$#* 238338563298 content:       children = length(children(kid));
#$#* 238338563298 content:       methods = length(verbs(kid));
#$#* 238338563298 content:       props = length(properties(kid));
#$#* 238338563298 content:       info = {@info, {name, number, children, methods, props}};
#$#* 238338563298 content:     endfor
#$#* 238338563298 content:     if (which_order)
#$#* 238338563298 content:       info = $list_utils:sort_alist(info, which_order);
#$#* 238338563298 content:     endif
#$#* 238338563298 content:     for idx in [1..length(info)]
#$#* 238338563298 content:       for column in [1..length(info[1])]
#$#* 238338563298 content:         info[idx][column] = tostr(info[idx][column]);
#$#* 238338563298 content:       endfor
#$#* 238338563298 content:     endfor
#$#* 238338563298 content:     player:tell_lines($string_utils:columnize_with_headers(header, info));
#$#* 238338563298 content:   else
#$#* 238338563298 content:     player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
#$#* 238338563298 content:   endif
#$#* 238338563298 content: endif
#$#* 238338563298 content: // Copied from generic builder (#4):@kids by Crag (#243) Sat Aug 31 13:30:56 2013 PDT
#$#* 238338563298 content: // Copied from Crag (#243):@kids by Crag (#243) Sat Aug 31 13:59:14 2013 PDT
#$#: 238338563298
0 errors.
Verb programmed.
Object #243 does not define that verb, but its ancestor #4 does.
Last modified Sat Sep  7 14:09:54 2013 PDT by Crag (#243).
#4:"@kids" any none none
// '@kids <obj>' - List the children of an object. This is handy for seeing
// whether anybody's actually using your carefully-wrought public objects.
// Also: '@kids <obj> by name | dbref | kids | verbs | props'
// Sorts output by specified column. Without specification order is same as
// children() function.
has_sort = index(argstr, " by ");
which_order = 0;
if (has_sort)
  objstr = argstr[1..has_sort];
  sort = $string_utils:trim(argstr[has_sort + 4..$]);
  which_order = sort in {"name", "dbref", "kids", "verbs", "props"};
  if (!which_order)
    player:notify("The sort order you provided (", sort, ") was unrecognized. Output not sorted.");
  endif
else
  objstr = argstr;
endif
thing = player:my_match_object(objstr);
if (!$command_utils:object_match_failed(thing, objstr))
  kids = children(thing);
  if (kids)
    player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
    header = {"name", "dbref", "#kids", "#verbs", "#props"};
    info = {};
    for kid in (kids)
      name = kid:dnamec();
      number = kid;
      children = length(children(kid));
      methods = length(verbs(kid));
      props = length(properties(kid));
      info = {@info, {name, number, children, methods, props}};
    endfor
    if (which_order)
      info = $list_utils:sort_alist(info, which_order);
    endif
    for idx in [1..length(info)]
      for column in [1..length(info[1])]
        info[idx][column] = tostr(info[idx][column]);
      endfor
    endfor
    player:tell_lines($string_utils:columnize_with_headers(header, info));
  else
    player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
  endif
endif
The verb :@verbs is on   Crag(#243)--generic programmer(#52)
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#52:@verbs any none none" name: "MOO verb: #52:@verbs any none none" type: moo-code content*: "" _data-tag: 1926253870299
#$#* 1926253870299 content: // Definition from Lambda:#33337
#$#* 1926253870299 content: set_task_perms(player);
#$#* 1926253870299 content: if (!dobjstr)
#$#* 1926253870299 content:   if (verb[7] != "(" && verb[length(verb)] != ")")
#$#* 1926253870299 content:     player:tell("Usage:  @verbs <object>");
#$#* 1926253870299 content:     return;
#$#* 1926253870299 content:   else
#$#* 1926253870299 content:     dobjstr = verb[8..length(verb) - 1];
#$#* 1926253870299 content:   endif
#$#* 1926253870299 content: endif
#$#* 1926253870299 content: thing = player:my_match_object(dobjstr);
#$#* 1926253870299 content: if (!$command_utils:object_match_failed(thing, dobjstr))
#$#* 1926253870299 content:   verbs = $code_utils:verbs(thing);
#$#* 1926253870299 content:   player:tell(";verbs(", thing, ") => ", $string_utils:from_value(verbs, 1, -1));
#$#* 1926253870299 content: endif
#$#: 1926253870299
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location Music Room (#400).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
  #243:find_all_commands        Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location Music Room (#400).
.debug                   Crag (#243)           r c    0
-------------------------------- finished ---------------------------------
That is not a valid command.
That is not a valid command.
0 errors.
Verb programmed.
Objects owned by Crag (from #0 to #578):
 12K #243 Crag                      *[Music Room]
  1K #244 generic group             *[Music Room]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Nowhere]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Nowhere]
 <1K #252 Parsing objects            [Nowhere]
 <1K #253 Text generation objects    [Nowhere]
 <1K #254 Abstract class             [Nowhere]
  4K #255 Generic Pilable Thing      [Nowhere]
 <1K #264 adventure party           *[bridge]
  2K #265 Generic Nesting Decoratio  [Nowhere]
  7K #269 Delegator                  [Nowhere]
  1K #270 Delegate                   [Nowhere]
 <1K #271 New Generic Room           [Nowhere]
  1K #279 Room Exit Delegate         [Nowhere]
  3K #280 Generic Table              [Nowhere]
  3K #290 How $staff will notice pe *[butler's desk]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
  1K #509 Generic Input Handler      [Nowhere]
  1K #510 Generic Command Handler    [Nowhere]
 <1K #511 Beaker's Commands          [Nowhere]
  1K #531 Generic Command            [Nowhere]
 <1K #532 Generic English Command    [Nowhere]
 <1K #533 Grouping Command           [Nowhere]
 14K #540 Generic See-through Porta  <invalid>-><invalid>
 26K #558 Cardgame Feature           [Nowhere]
 <1K #560 Blank Root                 [Nowhere]
 <1K #561 Interface                  [Nowhere]
 <1K #562 Class                      [Nowhere]
 <1K #247 Delegation Utilities       [Nowhere]
  6K #574 Clock                     *[Front Parlour]
  2K #504 Source control strategy    [Nowhere]
 <1K #578 contents test             *[Music Room]
-- 36 objects.  Total bytes: 116,523.-----------------------------------------
Delegation Utilities (#247) [ readable ]
  Child of generic utilities (#146).
-------------------------------- finished ---------------------------------
Delegation Utilities (#247) [ readable ]
  Child of generic utilities (#146).
-------------------------------- finished ---------------------------------
Delegator (#269) [ readable ]
  Child of Class (#562).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_can_add_delegate     Crag (#243)          rxd    this none this
  #269:__d_add_properties       Crag (#243)          rxd    this none this
  #269:__d_add_proxies          Crag (#243)          rxd    this none this
  #269:__d_proxy_code           Crag (#243)          rxd    this none this
  #269:__d_remove_properties    Crag (#243)          rxd    this none this
  #269:__d_remove_proxies       Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
`HELP COMPILE' NOT FOUND
========================

Sorry, but no help is available on `compile'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP PROGRAM' AMBIGUOUS
========================

Sorry, the topic `program' is ambiguous.  I don't know which of the following topics you mean:

`help @program'[1]      `help @program#'[2]     `help @programmer'[3]
`help programmer-policy'[4]                     `help programming'[5]
`help Programming Group'[6]                     `help programming-policy'[7]

Object #243 does not define that verb, but its ancestor #52 does.
Last modified Fri Jul 28 13:26:18 2000 PDT by Xeric (#999) (on Waterpoint).
#52:"@list*#" any any any
// @list <obj>:<verb> [<dobj> <prep> <iobj>] [with(out) parens|numbers] [ranges] [all]
set_task_perms(player);
bynumber = verb == "@list#";
pflag = this:list_option("parentheses");
nflag = !this:list_option("nonumbers");
do_args_flag = !this:list_option("args_assignment");
aflag = 0;
argspec = {};
range = {};
spec = args ? $code_utils:parse_verbref(args[1]) | E_INVARG;
args = spec ? listdelete(args, 1) | E_INVARG;
while (args)
  if (args[1] && (index("without", args[1]) == 1 || args[1] == "wo"))
    // ...w,wi,wit,with => 1; wo,witho,withou,without => 0...
    fval = !index(args[1], "o");
    if (length(args) < 2)
      player:notify(tostr(fval ? "With" | "Without", " what?"));
      args = E_INVARG;
    elseif (index("parentheses", args[2]) == 1)
      pflag = fval;
      args[1..2] = {};
    elseif (index("numbers", args[2]) == 1)
      nflag = fval;
      args[1..2] = {};
    else
      player:notify(tostr(fval ? "With" | "Without", " WHAT?"));
      args = E_INVARG;
    endif
  elseif (index("all", args[1]) == 1)
    if (bynumber)
      player:notify("Don't use `all' with @list#.");
      args = E_INVARG;
    else
      aflag = 1;
      args[1..1] = {};
    endif
  elseif (index("0123456789", args[1][1]) || index(args[1], "..") == 1)
    if (E_INVARG == (s = $seq_utils:from_string(args[1])))
      player:notify(tostr("Garbled range:  ", args[1]));
      args = E_INVARG;
    else
      range = $seq_utils:union(range, s);
      args = listdelete(args, 1);
    endif
  elseif (bynumber)
    player:notify("Don't give args with @list#.");
    args = E_INVARG;
  elseif (argspec)
    // ... second argspec?  Not likely ...
    player:notify(tostr(args[1], " unexpected."));
    args = E_INVARG;
  elseif (typeof(pas = $code_utils:parse_argspec(@args)) == LIST)
    argspec = pas[1][1..3];
    argspec[2] = $code_utils:full_prep(argspec[2]) || argspec[2];
    args = pas[2];
  else
    // ... argspec is bogus ...
    player:notify(tostr(pas));
    args = E_INVARG;
  endif
endwhile
if (args == E_INVARG)
  if (bynumber)
    player:notify(tostr("Usage:  ", verb, " <object>:<verb> [with|without parentheses|numbers] [ranges]"));
  else
    player:notify(tostr("Usage:  ", verb, " <object>:<verb> [<dobj> <prep> <iobj>] [with|without parentheses|numbers] [all] [ranges]"));
  endif
  return;
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
  return;
endif
shown_one = 0;
what = object;
vloc = 0;
while (1)
  // ... find the next verb...
  if (bynumber)
    vloc = $code_utils:tonum(spec[2]);
    if (vloc == E_TYPE)
      player:notify("Verb number expected.");
      return;
    elseif (vloc < 1 || `vloc > length(verbs(what)) ! E_PERM => 0')
      player:notify("Verb number out of range.");
      return;
    endif
  else
    while ((vloc = $code_utils:find_verb_named_1_based(what, spec[2], vloc + 1)) ? argspec && `verb_args(what, vloc) != argspec ! E_PERM => 1' | valid(what = parent(what)))
    endwhile
  endif
  if (!vloc)
    if (!shown_one)
      player:notify(tostr("That object does not define that verb", argspec ? " with those args." | "."));
    endif
    return;
  endif
  if (shown_one)
    player:notify("");
  elseif (!aflag && what != object)
    player:notify(tostr("Object ", object, " does not define that verb", argspec ? " with those args" | "", ", but its ancestor ", what, " does."));
  endif
  shown_one = 1;
  try
    code = verb_code(what, vloc, pflag);
  except e (ANY)
    player:notify(tostr("Verb ", vloc, " on ", what, " -- ", e[2]));
    if (aflag)
      continue;
    else
      return;
    endif
  endtry
  info = verb_info(what, vloc);
  vargs = verb_args(what, vloc);
  if (lastmodify = $metadata_item($verb_metadata(what, vloc), "Last-Modify"))
    {m_when, ?m_name = m_who:dname(), m_who, ?m_moo = $network.moo_name} = lastmodify[2];
    modify_string = tostr("Last modified ", ctime(m_when), " by ", m_name, " (", m_who, ")", m_moo == $network.moo_name ? "" | " (on " + m_moo + ")", ".");
  else
    modify_string = "";
  endif
  if (index(vargs[2], "/"))
    vargs[2] = tostr("(", vargs[2], ")");
  endif
  if (vargs == {"this", "none", "this"} && (do_args_flag && (named = $code_utils:named_args_from_code(code))))
    vargstr = tostr("(", $code_utils:named_args_list(named), ")");
    firstarg = length($code_utils:split_verb_code(code)[1]) + 1;
    lastarg = firstarg + length(named[1]) - 1 + (named[2] ? 1 | 0);
  else
    vargstr = $string_utils:from_list(vargs, " ");
    firstarg = lastarg = 0;
  endif
  if (modify_string)
    player:notify(modify_string);
  endif
  player:notify(tostr(what, ":", $string_utils:print(info[3]), " ", vargstr));
  code = this:verbcode_internal_to_external(code);
  lineseq = $seq_utils:range(1, length(code));
  range && (lineseq = $seq_utils:intersection(range, lineseq));
  if (code == {})
    player:notify("That verb has not been programmed.");
  elseif (!lineseq)
    player:notify("No lines in that range.");
  else
    for k in [1..length(lineseq) / 2]
      for i in [lineseq[2 * k - 1]..lineseq[2 * k] - 1]
        if (range || i < firstarg || i > lastarg)
          if (nflag)
            player:notify(tostr(" "[1..i < 10], i, ":  ", code[i]));
          else
            player:notify(code[i]);
          endif
        endif
        $command_utils:suspend_if_needed(0);
      endfor
    endfor
  endif
  if (!aflag)
    return;
  endif
endwhile
return;
-----
VERB_CODE()
===========

Syntax:  verb_code (obj <object>, str <verb-desc> [, <fully-paren> [, <indent>]])   => list
     set_verb_code (obj <object>, str <verb-desc>, list <code>)   => list

These functions get and set (respectively) the MOO-code program associated with the verb as specified by <verb-desc> on <object>.  The program is represented as a list of strings, one for each line of the program; this is the kind of value returned by `verb_code()' and expected as the third argument to `set_verb_code()'.  For `verb_code()', the expressions in the returned code are usually written with the minimum-necessary parenthesization; if <full-paren> is true, then all expressions are fully parenthesized.  Also for `verb_code()', the lines in the returned code are usually not indented at all; if <indent> is true, each line is indented to better show the nesting of statements.

If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_code()' (`set_verb_code()') raises `E_PERM'.  If the programmer is not, in fact. a programmer, then `E_PERM' is raised.

For `set_verb_code()', the result is a list of strings, the error messages generated by the MOO-code compiler during processing of <code>.  If the list is non-empty, then `set_verb_code()' did not install <code>; the program associated with the verb in question is unchanged.

Delegator (#269) [ readable ]
  Child of Class (#562).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_can_add_delegate     Crag (#243)          rxd    this none this
  #269:__d_add_properties       Crag (#243)          rxd    this none this
  #269:__d_add_proxies          Crag (#243)          rxd    this none this
  #269:__d_proxy_code           Crag (#243)          rxd    this none this
  #269:__d_remove_properties    Crag (#243)          rxd    this none this
  #269:__d_remove_proxies       Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
    #1:core_names               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of Generic Virtual Reality Object (#291).
  Location generic room (#3).
    #5:"get take"               Core-Wizard (#184)   rxd    this none none
    #5:"d*rop throw chuck"      Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
generic note (#9) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic thing (#5).
  Location generic room (#3).
    #9:r*ead                    Core-Wizard (#184)   rxd    this none none
    #9:er*ase                   Core-Wizard (#184)   rxd    this none none
    #9:wr*ite                   Core-Wizard (#184)   rxd    any on top of/on/onto/upon this
    #9:"del*ete rem*ove"        Core-Wizard (#184)   r d    any out of/from inside/from this
    #9:encrypt                  Core-Wizard (#184)   r d    this with/using any
    #9:decrypt                  Core-Wizard (#184)   r d    this none none
    #9:"text get_text plaintext" Core-Wizard (#184)  rxd    this none this
    #9:is_readable_by           Core-Wizard (#184)   rxd    this none this
    #9:set_text                 Core-Wizard (#184)   rxd    this none this
    #9:is_writable_by           Core-Wizard (#184)   rxd    this none this
    #9:mailme                   Core-Wizard (#184)   r d    this none none
    #9:show                     Core-Wizard (#184)   r d    this at/to any
    #9:default_editing          Core-Wizard (#184)   rxd    this none this
    #9:deliver_to               Core-Wizard (#184)   rxd    this none this
    #9:read-new                 Core-Wizard (#184)   r d    this none none
    #9:description              Core-Wizard (#184)   rxd    this none this
    #9:match_type_object        Core-Wizard (#184)   rxd    this none this
    #9:nominate_for_core        Core-Wizard (#184)   rxd    this none this
    #9:do_read                  Core-Wizard (#184)   rxd    this none this
    #9:examine_key              Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
generic player (#6) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
  Location generic room (#3).
    #6:init_for_core            Core-Wizard (#184)   rxd    this none this
    #6:confunc                  Core-Wizard (#184)   rxd    this none this
    #6:disfunc                  Core-Wizard (#184)   rxd    this none this
    #6:initialize               Core-Wizard (#184)   rxd    this none this
    #6:recycle                  Core-Wizard (#184)   rxd    this none this
    #6:my_huh                   Core-Wizard (#184)   rxd    this none this
    #6:last_huh                 Core-Wizard (#184)   rxd    this none this
    #6:my_match_object          Core-Wizard (#184)   rxd    this none this
    #6:tell_contents            Core-Wizard (#184)   rxd    this none this
    #6:notify                   Core-Wizard (#184)   rxd    this none this
    #6:notify_lines             Core-Wizard (#184)   rxd    this none this
    #6:linesplit                Core-Wizard (#184)   rxd    this none this
    #6:linelen                  unknown hacker (#35) rxd    this none this
    #6:@more                    Core-Wizard (#184)   r d    any none none
    #6:@wrap                    unknown hacker (#35) r d    none any none
    #6:@linelen*gth             unknown hacker (#35) r d    any none none
    #6:@pagelen*gth             Core-Wizard (#184)   r d    any none none
    #6:tell                     Core-Wizard (#184)   rxd    this none this
    #6:gag_p                    Core-Wizard (#184)   rxd    this none this
    #6:"set_gaglist set_gaglist_noisy" Core-Wizard (#184) rxd this none this
    #6:@gag                     Core-Wizard (#184)   r d    any any any
    #6:"@listgag @gaglist @gagged" Core-Wizard (#184) rxd   none none none
    #6:@ungag                   Core-Wizard (#184)   rxd    any none none
    #6:whodunnit                Core-Wizard (#184)   rxd    this none this
    #6:@paranoid                Core-Wizard (#184)   r d    any any any
    #6:@sw*eep                  Core-Wizard (#184)   r d    none none none
    #6:wh*isper                 Core-Wizard (#184)   rxd    any at/to this
    #6:receive_page             Core-Wizard (#184)   rxd    this none this
    #6:"page_origin_msg page_echo_msg page_absent_msg" unknown hacker (#35) rxd this none this
    #6:"i inv*entory"           Core-Wizard (#184)   r d    none none none
    #6:look_self                Core-Wizard (#184)   rxd    this none this
    #6:home                     Core-Wizard (#184)   r d    none none none
    #6:@sethome                 Core-Wizard (#184)   r d    none none none
    #6:"get take"               Core-Wizard (#184)   rxd    this none none
    #6:@eject                   Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:"where*is @where*is"     Core-Wizard (#184)   rxd    any any any
    #6:@wizards                 Core-Wizard (#184)   rxd    any none none
    #6:"mail_forward mail_notify" Core-Wizard (#184) rxd    this none this
    #6:receive_message          Core-Wizard (#184)   rxd    this none this
    #6:display_message          Core-Wizard (#184)   rxd    this none this
    #6:"parse_message_seq from_msg_seq %from_msg_seq to_msg_seq %to_msg_seq subject_msg_seq body_msg_seq display_seq_headers display_seq_full messages_in_seq list_rmm new_message_num length_num_le length_date_le length_date_gt length_all_msgs exists_num_eq rm_message_seq undo_rmm expunge_rmm renumber" Core-Wizard (#184) rxd this none this
    #6:msg_summary_line         unknown hacker (#35) rxd    this none this
    #6:msg_text                 Core-Wizard (#184)   rxd    this none this
    #6:notify_mail              Core-Wizard (#184)   rxd    this none this
    #6:current_message          Core-Wizard (#184)   rxd    this none this
    #6:get_current_message      Core-Wizard (#184)   rxd    this none this
    #6:set_current_message      Core-Wizard (#184)   rxd    this none this
    #6:make_current_message     Core-Wizard (#184)   rxd    this none this
    #6:kill_current_message     Core-Wizard (#184)   rxd    this none this
    #6:current_folder           Core-Wizard (#184)   rxd    this none this
    #6:set_current_folder       Core-Wizard (#184)   rxd    this none this
    #6:parse_folder_spec        Core-Wizard (#184)   rxd    this none this
    #6:parse_mailread_cmd       Core-Wizard (#184)   rxd    this none this
    #6:@mail                    Core-Wizard (#184)   rxd    any any any
    #6:"@read @peek"            Core-Wizard (#184)   rxd    any any any
    #6:"@next @prev"            Core-Wizard (#184)   r d    any any any
    #6:@rmm*ail                 Core-Wizard (#184)   r d    any any any
    #6:@renumber                Core-Wizard (#184)   r d    any none none
    #6:@unrmm*ail               Core-Wizard (#184)   r d    any any any
    #6:@send                    Core-Wizard (#184)   rxd    any any any
    #6:"@answer @repl*y"        Core-Wizard (#184)   r d    any any any
    #6:@forward                 Core-Wizard (#184)   rxd    any any any
    #6:@gripe                   Core-Wizard (#184)   r d    any any any
    #6:"@typo @bug @suggest*ion @idea @comment" Core-Wizard (#184) r d any any any
    #6:"@skip @unsub*scribe"    Core-Wizard (#184)   r d    any any any
    #6:@subscribe               Core-Wizard (#184)   r d    any any any
    #6:mail_catch_up            Core-Wizard (#184)   rxd    this none this
    #6:"@rn check_mail_lists @subscribed" Core-Wizard (#184) rx none none none
    #6:mail_option              Core-Wizard (#184)   rxd    this none this
    #6:edit_option              Core-Wizard (#184)   rxd    this none this
    #6:"set_mail_option set_edit_option set_misc_option set_client_option set_who_option set_parse_option" Core-Wizard (#184) rxd this none this
    #6:"@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @misco*ptions @misc-o*ptions @cliento*ptions @client-o*ptions @whoo*ptions @who-o*ptions @parseo*ptions @parse-o*ptions" Core-Wizard (#184) r d any any any
    #6:set_name                 Core-Wizard (#184)   rxd    this none this
    #6:set_aliases              Core-Wizard (#184)   rxd    this none this
    #6:@rename*#                Core-Wizard (#184)   r d    any at/to any
    #6:"@add-alias*# @addalias*# @add_alias*#" Core-Wizard (#184) r d any at/to any
    #6:"@rmalias*# @rm-alias*#" Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:@desc*ribe               Core-Wizard (#184)   r d    any as any
    #6:@mess*ages               Core-Wizard (#184)   r d    any none none
    #6:@notedit                 unknown hacker (#35) r d    any none none
    #6:@password                Core-Wizard (#184)   r d    any any any
    #6:@last-c*onnection        Core-Wizard (#184)   rxd    any none none
    #6:"set_gender set_gender_name set_gender_obj" Core-Wizard (#184) rxd this none this
    #6:@gender                  Core-Wizard (#184)   r d    any none none
    #6:@ex*amine                Core-Wizard (#184)   rxd    any none none
    #6:ex*amine                 Core-Wizard (#184)   r d    any none none
    #6:add_feature              unknown hacker (#35) rx     this none this
    #6:remove_feature           unknown hacker (#35) rxd    this none this
    #6:"@add-feature @addfeature" Core-Wizard (#184) r d    any none none
    #6:"@remove-feature @rmfeature @rm-feature" Core-Wizard (#184) r d any none none
    #6:@features                Core-Wizard (#184)   rxd    any for/about any
    #6:@features                Core-Wizard (#184)   r d    any none none
    #6:@memory                  unknown hacker (#35) r d    none none none
    #6:@version                 unknown hacker (#35) r d    none none none
    #6:@uptime                  unknown hacker (#35) r d    none none none
    #6:"@quit quit"             Core-Wizard (#184)   r d    none none none
    #6:QUIT-IN-ALL-CAPS         Core-Wizard (#184)   r d    none none none
    #6:notify(new)              Core-Wizard (#184)   r d    this none this
    #6:examine_commands_ok      Core-Wizard (#184)   rxd    this none this
    #6:is_listening             Core-Wizard (#184)   rxd    this none this
    #6:"@quicksend @qsend"      Core-Wizard (#184)   r d    any any any
    #6:!*                       unknown hacker (#35) r d    any any any
    #6:'*                       unknown hacker (#35) r      any any any
    #6:"@pronoun_sub @pronoun-sub" Core-Wizard (#184) r d   none with/using any
    #6:"@set-note-string @set-note-text @set-note-value" Core-Wizard (#184) r d any none none
    #6:description              unknown hacker (#35) rxd    this none this
    #6:@nn                      Core-Wizard (#184)   r d    none none none
    #6:mu*rmur                  Core-Wizard (#184)   r d    any any any
    #6:look_in                  Core-Wizard (#184)   rxd    this none this
    #6:@option*s                Core-Wizard (#184)   r d    any any any
    #6:options_packages         Core-Wizard (#184)   rxd    this none this
    #6:options_command          Core-Wizard (#184)   rxd    this none this
    #6:contribute_partial       Core-Wizard (#184)   rxd    this none this
    #6:contribute_reset         Core-Wizard (#184)   rxd    this none this
    #6:contribute_link          Core-Wizard (#184)   rxd    this none this
    #6:receive_vbox             unknown hacker (#35) rxd    this none this
    #6:contribute_title         Core-Wizard (#184)   rxd    this none this
    #6:moveto                   Core-Wizard (#184)   rxd    this none this
    #6:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #6:visible_of               unknown hacker (#35) rxd    this none this
    #6:@set-jtext-form          Core-Wizard (#184)   r d    any none none
    #6:idle_suffix              Core-Wizard (#184)   rxd    this none this
    #6:modname_v                Core-Wizard (#184)   rxd    this none this
    #6:@edit*#                  Core-Wizard (#184)   r d    any any any
    #6:set_focus_object         Core-Wizard (#184)   rxd    this none this
    #6:email_address            Core-Wizard (#184)   rxd    this none this
    #6:"misc_option client_option who_option parse_option" Core-Wizard (#184) rxd this none this
    #6:"@forward-me @forwardme" Core-Wizard (#184)   r d    any any any
    #6:ownership_quota          Core-Wizard (#184)   rxd    this none this
    #6:contribute_newline       Core-Wizard (#184)   rxd    this none this
    #6:"set_current_object set_current_object_stack set_authentication_key" Core-Wizard (#184) rxd this none this
    #6:client_notify            Core-Wizard (#184)   rxd    this none this
    #6:brief                    Core-Wizard (#184)   rxd    this none this
    #6:picknew                  unknown hacker (#35) r d    any none none
    #6:"walk go"                unknown hacker (#35) rxd    none at/to any
    #6:_find_path               Core-Wizard (#184)   rxd    this none this
    #6:join                     Core-Wizard (#184)   rxd    any none none
    #6:pick                     unknown hacker (#35) rxd    any on top of/on/onto/upon this
    #6:pop                      unknown hacker (#35) rxd    none on top of/on/onto/upon this
    #6:match_command            unknown hacker (#35) rxd    this none this
    #6:my_match_room            Core-Wizard (#184)   rxd    this none this
    #6:features                 Core-Wizard (#184)   rxd    this none this
    #6:receive_document         Core-Wizard (#184)   rxd    this none this
    #6:"@co @currentobject @current-object" Core-Wizard (#184) r d any none none
    #6:parse_current_object     unknown hacker (#35) rxd    this none this
    #6:@pusho*bject             Core-Wizard (#184)   r d    any none none
    #6:@popo*object             Core-Wizard (#184)   r d    none none none
    #6:@swapo*bject             Core-Wizard (#184)   r d    none none none
    #6:jdetails                 Core-Wizard (#184)   r d    any none none
    #6:@@sendmail               Core-Wizard (#184)   r d    any any any
    #6:fol*low                  unknown hacker (#35) r d    this none none
    #6:unfol*low                unknown hacker (#35) r d    any any any
    #6:followers                unknown hacker (#35) r d    any any any
    #6:following                unknown hacker (#35) r d    none none none
    #6:my_match_player          Core-Wizard (#184)   rxd    this none this
    #6:news                     Core-Wizard (#184)   r d    any none none
    #6:"@helpme @911"           Core-Wizard (#184)   r d    any any any
    #6:"@admin*istrators @admins" Core-Wizard (#184) rxd    any none none
    #6:"parse_message unparse_message" Core-Wizard (#184) rxd this none this
    #6:@url                     Core-Wizard (#184)   r d    any any any
    #6:@read-all-new*-mail      Core-Wizard (#184)   rxd    any none none
    #6:send_self_netmail        Core-Wizard (#184)   rxd    this none this
    #6:@add-help-db             Core-Wizard (#184)   r d    any none none
    #6:@rm-help-db              Core-Wizard (#184)   r d    any none none
    #6:@unsubscribed            Core-Wizard (#184)   r d    none none none
    #6:reconfunc                Core-Wizard (#184)   rxd    this none this
    #6:@resend                  Core-Wizard (#184)   r d    any any any
    #6:"help ?*"                Core-Wizard (#184)   rxd    any any any
    #6:match_help_object        unknown hacker (#35) rxd    this none this
    #6:@aliases                 Core-Wizard (#184)   r d    any none none
    #6:contribute_newline_maybe Core-Wizard (#184)   rxd    this none this
    #6:contribute_hr            Core-Wizard (#184)   rxd    this none this
    #6:set_last_player_paged    Core-Wizard (#184)   rxd    this none this
    #6:visible                  unknown hacker (#35) rxd    this none this
    #6:set_number               unknown hacker (#35) rxd    this none this
    #6:you                      unknown hacker (#35) rxd    this none this
    #6:page                     Core-Wizard (#184)   rxd    any any any
    #6:is_idle                  Core-Wizard (#184)   rxd    none none none
    #6:start_dozing             Core-Wizard (#184)   rxd    this none this
    #6:start_idling             Core-Wizard (#184)   rxd    this none this
    #6:"idle reidle"            Core-Wizard (#184)   rxd    any any any
    #6:idle_msg                 Core-Wizard (#184)   rxd    this none this
    #6:dozing_msg               Core-Wizard (#184)   rxd    this none this
    #6:start_doing              unknown hacker (#35) rxd    this none this
    #6:doing_msg                Core-Wizard (#184)   rxd    this none this
    #6:"doing undoing"          Core-Wizard (#184)   r d    any any any
    #6:@who                     Core-Wizard (#184)   rxd    any any any
    #6:debug_if_player          Core-Wizard (#184)   rxd    this none this
    #6:match_type_object        Core-Wizard (#184)   rxd    this none this
    #6:dependents_event_really_disconnected Core-Wizard (#184) rxd this none this
    #6:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:maybe_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:modname_c                unknown hacker (#35) rxd    this none this
    #6:@desc*ribe               Core-Wizard (#184)   r d    any none none
    #6:@netforw*ard             Core-Wizard (#184)   r d    any any any
    #6:@register                Core-Wizard (#184)   r d    any as any
    #6:"@register @email-address" Core-Wizard (#184) r      any none none
    #6:more_string              Core-Wizard (#184)   rxd    this none this
    #6:desc_idle_msg            Core-Wizard (#184)   rxd    this none this
    #6:nominate_for_core        Core-Wizard (#184)   rxd    this none this
    #6:sit                      Core-Wizard (#184)   r d    none with/using this
    #6:acceptable               Core-Wizard (#184)   rxd    this none this
    #6:@shout                   Core-Wizard (#184)   r d    any any any
    #6:set_home                 unknown hacker (#35) rx     this none this
    #6:anyconfunc               Core-Wizard (#184)   rxd    this none this
    #6:@ch*eck-full             Core-Wizard (#184)   r d    any any any
    #6:"@add-handler @addhandler" Core-Wizard (#184) r d    any none none
    #6:handlers                 Core-Wizard (#184)   rxd    this none this
    #6:"@remove-handler @rmhandler @rm-handler" Core-Wizard (#184) r d any none none
    #6:@handlers                Core-Wizard (#184)   rx     any for/about any
    #6:@handlers                Core-Wizard (#184)   r      any none none
    #6:total_connect_times      Core-Wizard (#184)   rxd    this none this
    #6:_set_mail_task           Core-Wizard (#184)   rxd    this none this
    #6:add_handler              unknown hacker (#35) rxd    this none this
    #6:remove_handler           unknown hacker (#35) rxd    this none this
    #6:"set_walking_dest set_walking_task" unknown hacker (#35) rx this none this
    #6:move_by_exits            unknown hacker (#35) rxd    this none this
    #6:walking_step             unknown hacker (#35) rxd    this none this
    #6:begin_walking            unknown hacker (#35) rxd    this none this
    #6:end_walking              unknown hacker (#35) rxd    this none this
    #6:"walkto walkto_blocking" unknown hacker (#35) rxd    this none this
    #6:find_path                unknown hacker (#35) rxd    this none this
    #6:stop                     unknown hacker (#35) r d    none none none
    #6:timestamp_string         Core-Wizard (#184)   rxd    this none this
    #6:@age                     Core-Wizard (#184)   r d    any none none
    #6:+*                       Core-Wizard (#184)   rxd    any any any
    #6:lose                     unknown hacker (#35) rxd    any any any
    #6:display_current_object   Core-Wizard (#184)   rxd    this none this
    #6:current_object_string    Core-Wizard (#184)   rxd    this none this
    #6:edit_set_note_value      Core-Wizard (#184)   rxd    this none this
    #6:edit_sendmail            Core-Wizard (#184)   rxd    this none this
    #6:absent_for_page          unknown hacker (#35) rxd    this none this
    #6:send_forwarded_moomail   Core-Wizard (#184)   rxd    this none this
    #6:walking_delay            unknown hacker (#35) rxd    this none this
    #6:walk_failed              Core-Wizard (#184)   rxd    this none this
    #6:my_walk_failed           Core-Wizard (#184)   rxd    this none this
    #6:dwim_objects             Core-Wizard (#184)   rxd    this none this
    #6:"@room*# @rooms*#"       unknown hacker (#35) rxd    any any any
    #6:set_timezone             unknown hacker (#35) rxd    this none this
    #6:ctime                    unknown hacker (#35) rxd    this none this
    #6:time_sub                 unknown hacker (#35) rxd    this none this
    #6:@lastlog                 unknown hacker (#35) rxd    any none none
    #6:integrated_desc          Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
=> 243
generic player (#6) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
  Location generic room (#3).
    #6:init_for_core            Core-Wizard (#184)   rxd    this none this
    #6:confunc                  Core-Wizard (#184)   rxd    this none this
    #6:disfunc                  Core-Wizard (#184)   rxd    this none this
    #6:initialize               Core-Wizard (#184)   rxd    this none this
    #6:recycle                  Core-Wizard (#184)   rxd    this none this
    #6:my_huh                   Core-Wizard (#184)   rxd    this none this
    #6:last_huh                 Core-Wizard (#184)   rxd    this none this
    #6:my_match_object          Core-Wizard (#184)   rxd    this none this
    #6:tell_contents            Core-Wizard (#184)   rxd    this none this
    #6:notify                   Core-Wizard (#184)   rxd    this none this
    #6:notify_lines             Core-Wizard (#184)   rxd    this none this
    #6:linesplit                Core-Wizard (#184)   rxd    this none this
    #6:linelen                  unknown hacker (#35) rxd    this none this
    #6:@more                    Core-Wizard (#184)   r d    any none none
    #6:@wrap                    unknown hacker (#35) r d    none any none
    #6:@linelen*gth             unknown hacker (#35) r d    any none none
    #6:@pagelen*gth             Core-Wizard (#184)   r d    any none none
    #6:tell                     Core-Wizard (#184)   rxd    this none this
    #6:gag_p                    Core-Wizard (#184)   rxd    this none this
    #6:"set_gaglist set_gaglist_noisy" Core-Wizard (#184) rxd this none this
    #6:@gag                     Core-Wizard (#184)   r d    any any any
    #6:"@listgag @gaglist @gagged" Core-Wizard (#184) rxd   none none none
    #6:@ungag                   Core-Wizard (#184)   rxd    any none none
    #6:whodunnit                Core-Wizard (#184)   rxd    this none this
    #6:@paranoid                Core-Wizard (#184)   r d    any any any
    #6:@sw*eep                  Core-Wizard (#184)   r d    none none none
    #6:wh*isper                 Core-Wizard (#184)   rxd    any at/to this
    #6:receive_page             Core-Wizard (#184)   rxd    this none this
    #6:"page_origin_msg page_echo_msg page_absent_msg" unknown hacker (#35) rxd this none this
    #6:"i inv*entory"           Core-Wizard (#184)   r d    none none none
    #6:look_self                Core-Wizard (#184)   rxd    this none this
    #6:home                     Core-Wizard (#184)   r d    none none none
    #6:@sethome                 Core-Wizard (#184)   r d    none none none
    #6:"get take"               Core-Wizard (#184)   rxd    this none none
    #6:@eject                   Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:"where*is @where*is"     Core-Wizard (#184)   rxd    any any any
    #6:@wizards                 Core-Wizard (#184)   rxd    any none none
    #6:"mail_forward mail_notify" Core-Wizard (#184) rxd    this none this
    #6:receive_message          Core-Wizard (#184)   rxd    this none this
    #6:display_message          Core-Wizard (#184)   rxd    this none this
    #6:"parse_message_seq from_msg_seq %from_msg_seq to_msg_seq %to_msg_seq subject_msg_seq body_msg_seq display_seq_headers display_seq_full messages_in_seq list_rmm new_message_num length_num_le length_date_le length_date_gt length_all_msgs exists_num_eq rm_message_seq undo_rmm expunge_rmm renumber" Core-Wizard (#184) rxd this none this
    #6:msg_summary_line         unknown hacker (#35) rxd    this none this
    #6:msg_text                 Core-Wizard (#184)   rxd    this none this
    #6:notify_mail              Core-Wizard (#184)   rxd    this none this
    #6:current_message          Core-Wizard (#184)   rxd    this none this
    #6:get_current_message      Core-Wizard (#184)   rxd    this none this
    #6:set_current_message      Core-Wizard (#184)   rxd    this none this
    #6:make_current_message     Core-Wizard (#184)   rxd    this none this
    #6:kill_current_message     Core-Wizard (#184)   rxd    this none this
    #6:current_folder           Core-Wizard (#184)   rxd    this none this
    #6:set_current_folder       Core-Wizard (#184)   rxd    this none this
    #6:parse_folder_spec        Core-Wizard (#184)   rxd    this none this
    #6:parse_mailread_cmd       Core-Wizard (#184)   rxd    this none this
    #6:@mail                    Core-Wizard (#184)   rxd    any any any
    #6:"@read @peek"            Core-Wizard (#184)   rxd    any any any
    #6:"@next @prev"            Core-Wizard (#184)   r d    any any any
    #6:@rmm*ail                 Core-Wizard (#184)   r d    any any any
    #6:@renumber                Core-Wizard (#184)   r d    any none none
    #6:@unrmm*ail               Core-Wizard (#184)   r d    any any any
    #6:@send                    Core-Wizard (#184)   rxd    any any any
    #6:"@answer @repl*y"        Core-Wizard (#184)   r d    any any any
    #6:@forward                 Core-Wizard (#184)   rxd    any any any
    #6:@gripe                   Core-Wizard (#184)   r d    any any any
    #6:"@typo @bug @suggest*ion @idea @comment" Core-Wizard (#184) r d any any any
    #6:"@skip @unsub*scribe"    Core-Wizard (#184)   r d    any any any
    #6:@subscribe               Core-Wizard (#184)   r d    any any any
    #6:mail_catch_up            Core-Wizard (#184)   rxd    this none this
    #6:"@rn check_mail_lists @subscribed" Core-Wizard (#184) rx none none none
    #6:mail_option              Core-Wizard (#184)   rxd    this none this
    #6:edit_option              Core-Wizard (#184)   rxd    this none this
    #6:"set_mail_option set_edit_option set_misc_option set_client_option set_who_option set_parse_option" Core-Wizard (#184) rxd this none this
    #6:"@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @misco*ptions @misc-o*ptions @cliento*ptions @client-o*ptions @whoo*ptions @who-o*ptions @parseo*ptions @parse-o*ptions" Core-Wizard (#184) r d any any any
    #6:set_name                 Core-Wizard (#184)   rxd    this none this
    #6:set_aliases              Core-Wizard (#184)   rxd    this none this
    #6:@rename*#                Core-Wizard (#184)   r d    any at/to any
    #6:"@add-alias*# @addalias*# @add_alias*#" Core-Wizard (#184) r d any at/to any
    #6:"@rmalias*# @rm-alias*#" Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:@desc*ribe               Core-Wizard (#184)   r d    any as any
    #6:@mess*ages               Core-Wizard (#184)   r d    any none none
    #6:@notedit                 unknown hacker (#35) r d    any none none
    #6:@password                Core-Wizard (#184)   r d    any any any
    #6:@last-c*onnection        Core-Wizard (#184)   rxd    any none none
    #6:"set_gender set_gender_name set_gender_obj" Core-Wizard (#184) rxd this none this
    #6:@gender                  Core-Wizard (#184)   r d    any none none
    #6:@ex*amine                Core-Wizard (#184)   rxd    any none none
    #6:ex*amine                 Core-Wizard (#184)   r d    any none none
    #6:add_feature              unknown hacker (#35) rx     this none this
    #6:remove_feature           unknown hacker (#35) rxd    this none this
    #6:"@add-feature @addfeature" Core-Wizard (#184) r d    any none none
    #6:"@remove-feature @rmfeature @rm-feature" Core-Wizard (#184) r d any none none
    #6:@features                Core-Wizard (#184)   rxd    any for/about any
    #6:@features                Core-Wizard (#184)   r d    any none none
    #6:@memory                  unknown hacker (#35) r d    none none none
    #6:@version                 unknown hacker (#35) r d    none none none
    #6:@uptime                  unknown hacker (#35) r d    none none none
    #6:"@quit quit"             Core-Wizard (#184)   r d    none none none
    #6:QUIT-IN-ALL-CAPS         Core-Wizard (#184)   r d    none none none
    #6:notify(new)              Core-Wizard (#184)   r d    this none this
    #6:examine_commands_ok      Core-Wizard (#184)   rxd    this none this
    #6:is_listening             Core-Wizard (#184)   rxd    this none this
    #6:"@quicksend @qsend"      Core-Wizard (#184)   r d    any any any
    #6:!*                       unknown hacker (#35) r d    any any any
    #6:'*                       unknown hacker (#35) r      any any any
    #6:"@pronoun_sub @pronoun-sub" Core-Wizard (#184) r d   none with/using any
    #6:"@set-note-string @set-note-text @set-note-value" Core-Wizard (#184) r d any none none
    #6:description              unknown hacker (#35) rxd    this none this
    #6:@nn                      Core-Wizard (#184)   r d    none none none
    #6:mu*rmur                  Core-Wizard (#184)   r d    any any any
    #6:look_in                  Core-Wizard (#184)   rxd    this none this
    #6:@option*s                Core-Wizard (#184)   r d    any any any
    #6:options_packages         Core-Wizard (#184)   rxd    this none this
    #6:options_command          Core-Wizard (#184)   rxd    this none this
    #6:contribute_partial       Core-Wizard (#184)   rxd    this none this
    #6:contribute_reset         Core-Wizard (#184)   rxd    this none this
    #6:contribute_link          Core-Wizard (#184)   rxd    this none this
    #6:receive_vbox             unknown hacker (#35) rxd    this none this
    #6:contribute_title         Core-Wizard (#184)   rxd    this none this
    #6:moveto                   Core-Wizard (#184)   rxd    this none this
    #6:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #6:visible_of               unknown hacker (#35) rxd    this none this
    #6:@set-jtext-form          Core-Wizard (#184)   r d    any none none
    #6:idle_suffix              Core-Wizard (#184)   rxd    this none this
    #6:modname_v                Core-Wizard (#184)   rxd    this none this
    #6:@edit*#                  Core-Wizard (#184)   r d    any any any
    #6:set_focus_object         Core-Wizard (#184)   rxd    this none this
    #6:email_address            Core-Wizard (#184)   rxd    this none this
    #6:"misc_option client_option who_option parse_option" Core-Wizard (#184) rxd this none this
    #6:"@forward-me @forwardme" Core-Wizard (#184)   r d    any any any
    #6:ownership_quota          Core-Wizard (#184)   rxd    this none this
    #6:contribute_newline       Core-Wizard (#184)   rxd    this none this
    #6:"set_current_object set_current_object_stack set_authentication_key" Core-Wizard (#184) rxd this none this
    #6:client_notify            Core-Wizard (#184)   rxd    this none this
    #6:brief                    Core-Wizard (#184)   rxd    this none this
    #6:picknew                  unknown hacker (#35) r d    any none none
    #6:"walk go"                unknown hacker (#35) rxd    none at/to any
    #6:_find_path               Core-Wizard (#184)   rxd    this none this
    #6:join                     Core-Wizard (#184)   rxd    any none none
    #6:pick                     unknown hacker (#35) rxd    any on top of/on/onto/upon this
    #6:pop                      unknown hacker (#35) rxd    none on top of/on/onto/upon this
    #6:match_command            unknown hacker (#35) rxd    this none this
    #6:my_match_room            Core-Wizard (#184)   rxd    this none this
    #6:features                 Core-Wizard (#184)   rxd    this none this
    #6:receive_document         Core-Wizard (#184)   rxd    this none this
    #6:"@co @currentobject @current-object" Core-Wizard (#184) r d any none none
    #6:parse_current_object     unknown hacker (#35) rxd    this none this
    #6:@pusho*bject             Core-Wizard (#184)   r d    any none none
    #6:@popo*object             Core-Wizard (#184)   r d    none none none
    #6:@swapo*bject             Core-Wizard (#184)   r d    none none none
    #6:jdetails                 Core-Wizard (#184)   r d    any none none
    #6:@@sendmail               Core-Wizard (#184)   r d    any any any
    #6:fol*low                  unknown hacker (#35) r d    this none none
    #6:unfol*low                unknown hacker (#35) r d    any any any
    #6:followers                unknown hacker (#35) r d    any any any
    #6:following                unknown hacker (#35) r d    none none none
    #6:my_match_player          Core-Wizard (#184)   rxd    this none this
    #6:news                     Core-Wizard (#184)   r d    any none none
    #6:"@helpme @911"           Core-Wizard (#184)   r d    any any any
    #6:"@admin*istrators @admins" Core-Wizard (#184) rxd    any none none
    #6:"parse_message unparse_message" Core-Wizard (#184) rxd this none this
    #6:@url                     Core-Wizard (#184)   r d    any any any
    #6:@read-all-new*-mail      Core-Wizard (#184)   rxd    any none none
    #6:send_self_netmail        Core-Wizard (#184)   rxd    this none this
    #6:@add-help-db             Core-Wizard (#184)   r d    any none none
    #6:@rm-help-db              Core-Wizard (#184)   r d    any none none
    #6:@unsubscribed            Core-Wizard (#184)   r d    none none none
    #6:reconfunc                Core-Wizard (#184)   rxd    this none this
    #6:@resend                  Core-Wizard (#184)   r d    any any any
    #6:"help ?*"                Core-Wizard (#184)   rxd    any any any
    #6:match_help_object        unknown hacker (#35) rxd    this none this
    #6:@aliases                 Core-Wizard (#184)   r d    any none none
    #6:contribute_newline_maybe Core-Wizard (#184)   rxd    this none this
    #6:contribute_hr            Core-Wizard (#184)   rxd    this none this
    #6:set_last_player_paged    Core-Wizard (#184)   rxd    this none this
    #6:visible                  unknown hacker (#35) rxd    this none this
    #6:set_number               unknown hacker (#35) rxd    this none this
    #6:you                      unknown hacker (#35) rxd    this none this
    #6:page                     Core-Wizard (#184)   rxd    any any any
    #6:is_idle                  Core-Wizard (#184)   rxd    none none none
    #6:start_dozing             Core-Wizard (#184)   rxd    this none this
    #6:start_idling             Core-Wizard (#184)   rxd    this none this
    #6:"idle reidle"            Core-Wizard (#184)   rxd    any any any
    #6:idle_msg                 Core-Wizard (#184)   rxd    this none this
    #6:dozing_msg               Core-Wizard (#184)   rxd    this none this
    #6:start_doing              unknown hacker (#35) rxd    this none this
    #6:doing_msg                Core-Wizard (#184)   rxd    this none this
    #6:"doing undoing"          Core-Wizard (#184)   r d    any any any
    #6:@who                     Core-Wizard (#184)   rxd    any any any
    #6:debug_if_player          Core-Wizard (#184)   rxd    this none this
    #6:match_type_object        Core-Wizard (#184)   rxd    this none this
    #6:dependents_event_really_disconnected Core-Wizard (#184) rxd this none this
    #6:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:maybe_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:modname_c                unknown hacker (#35) rxd    this none this
    #6:@desc*ribe               Core-Wizard (#184)   r d    any none none
    #6:@netforw*ard             Core-Wizard (#184)   r d    any any any
    #6:@register                Core-Wizard (#184)   r d    any as any
    #6:"@register @email-address" Core-Wizard (#184) r      any none none
    #6:more_string              Core-Wizard (#184)   rxd    this none this
    #6:desc_idle_msg            Core-Wizard (#184)   rxd    this none this
    #6:nominate_for_core        Core-Wizard (#184)   rxd    this none this
    #6:sit                      Core-Wizard (#184)   r d    none with/using this
    #6:acceptable               Core-Wizard (#184)   rxd    this none this
    #6:@shout                   Core-Wizard (#184)   r d    any any any
    #6:set_home                 unknown hacker (#35) rx     this none this
    #6:anyconfunc               Core-Wizard (#184)   rxd    this none this
    #6:@ch*eck-full             Core-Wizard (#184)   r d    any any any
    #6:"@add-handler @addhandler" Core-Wizard (#184) r d    any none none
    #6:handlers                 Core-Wizard (#184)   rxd    this none this
    #6:"@remove-handler @rmhandler @rm-handler" Core-Wizard (#184) r d any none none
    #6:@handlers                Core-Wizard (#184)   rx     any for/about any
    #6:@handlers                Core-Wizard (#184)   r      any none none
    #6:total_connect_times      Core-Wizard (#184)   rxd    this none this
    #6:_set_mail_task           Core-Wizard (#184)   rxd    this none this
    #6:add_handler              unknown hacker (#35) rxd    this none this
    #6:remove_handler           unknown hacker (#35) rxd    this none this
    #6:"set_walking_dest set_walking_task" unknown hacker (#35) rx this none this
    #6:move_by_exits            unknown hacker (#35) rxd    this none this
    #6:walking_step             unknown hacker (#35) rxd    this none this
    #6:begin_walking            unknown hacker (#35) rxd    this none this
    #6:end_walking              unknown hacker (#35) rxd    this none this
    #6:"walkto walkto_blocking" unknown hacker (#35) rxd    this none this
    #6:find_path                unknown hacker (#35) rxd    this none this
    #6:stop                     unknown hacker (#35) r d    none none none
    #6:timestamp_string         Core-Wizard (#184)   rxd    this none this
    #6:@age                     Core-Wizard (#184)   r d    any none none
    #6:+*                       Core-Wizard (#184)   rxd    any any any
    #6:lose                     unknown hacker (#35) rxd    any any any
    #6:display_current_object   Core-Wizard (#184)   rxd    this none this
    #6:current_object_string    Core-Wizard (#184)   rxd    this none this
    #6:edit_set_note_value      Core-Wizard (#184)   rxd    this none this
    #6:edit_sendmail            Core-Wizard (#184)   rxd    this none this
    #6:absent_for_page          unknown hacker (#35) rxd    this none this
    #6:send_forwarded_moomail   Core-Wizard (#184)   rxd    this none this
    #6:walking_delay            unknown hacker (#35) rxd    this none this
    #6:walk_failed              Core-Wizard (#184)   rxd    this none this
    #6:my_walk_failed           Core-Wizard (#184)   rxd    this none this
    #6:dwim_objects             Core-Wizard (#184)   rxd    this none this
    #6:"@room*# @rooms*#"       unknown hacker (#35) rxd    any any any
    #6:set_timezone             unknown hacker (#35) rxd    this none this
    #6:ctime                    unknown hacker (#35) rxd    this none this
    #6:time_sub                 unknown hacker (#35) rxd    this none this
    #6:@lastlog                 unknown hacker (#35) rxd    any none none
    #6:integrated_desc          Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Achievement       #445   1      1       1
The Generic Input Handler     #509   1      1       0
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
----                          -----  -----  ------  ------
The Blank Root(#560) has 2 kids.
name           dbref  #kids  #verbs  #props
----           -----  -----  ------  ------
The Interface  #561   0      0       0
The Class      #562   2      1       1
----           -----  -----  ------  ------
The Abstract class(#254) has 17 kids.
name                                 dbref  #kids  #verbs  #props
----                                 -----  -----  ------  ------
Generic Help Database                #30    2      26      2
The New Generic Database             #79    4      30      7
The Generic Mail Recipient           #41    4      31      12
The Generic Option Package           #60    11     12      7
The Generic Feature Object           #65    6      16      5
The generic admin group              #163   5      25      7
The generic utilities                #146   24     0       1
The generic event handler            #133   0      6       1
Generic gender object                #64    5      4       18
The Generic BigList Resident         #75    0      7       4
The generic property farm            #206   5      7       1
The Generic Pronoun_sub Translator   #73    2      12      0
The generic name builder             #240   3      4       0
The generic source or sink           #196   2      3       2
The generic message dispatch object  #219   2      3       2
The generic listener                 #224   1      8       1
The generic daemon service handler   #210   0      12      2
----                                 -----  -----  ------  ------
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Achievement       #445   1      1       1
The Generic Input Handler     #509   1      1       0
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
----                          -----  -----  ------  ------
generic player(#6) has 5 ancestors.
name                                  dbref  #kids  #verbs  #props
----                                  -----  -----  ------  ------
generic player                        #6     6      243     88
The generic containing object         #145   3      14      1
The generic event dispatching object  #110   3      8       1
The Generic Virtual Reality Object    #291   2      0       0
The Helpful Object                    #250   7      1       0
The root class                        #1     24     92      15
----                                  -----  -----  ------  ------
The generic thing(#5) has 3 ancestors.
name                                dbref  #kids  #verbs  #props
----                                -----  -----  ------  ------
The generic thing                   #5     22     7       8
The Generic Virtual Reality Object  #291   2      0       0
The Helpful Object                  #250   7      1       0
The root class                      #1     24     92      15
----                                -----  -----  ------  ------
Helpful Object (#250) [ readable ]
  Child of root class (#1).
  #250:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sun Apr 14 23:53:11 2013 PDT by Crag (#243).
#250:"help_text" this none this
all_help = `this.help_text ! E_PROPNF' || {};
if (typeof(all_help) == STR)
  all_help = {all_help};
endif
helpless = {};
for vrb in (this:help_verbs(player))
  if (typeof(vrb) == LIST)
    vrb = vrb[2];
    if (space = index(vrb, " "))
      vrb = vrb[1..space - 1];
    endif
    vrb = strsub(vrb, "*", "");
  endif
  if (loc = $object_utils:has_verb(this, vrb))
    $command_utils:suspend_if_needed(0);
    help = $code_utils:verb_documentation(loc[1], vrb);
    if (help)
      msg = verb_info(loc[1], vrb)[3];
      underline = $string_utils:space(length(msg), "=");
      if (all_help)
        // all_help = {@all_help, "", tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {@all_help, "", msg, underline, "", @help};
      else
        // all_help = {tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {msg, underline, "", @help};
      endif
    else
      helpless = {@helpless, vrb};
    endif
  endif
endfor
if (helpless)
  if (all_help)
    all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
  else
    return {tostr("Sorry, but no help is avilable on ", name = this:name(), "(", this, ").", "  Try `examine ", name, "'.")};
  endif
endif
return all_help ? {@all_help, "", "----"} | {};
// Copied from generic thing (#5):help_text by Crag (#243) Sun Apr 14 23:53:11 2013 PDT
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
    #1:core_names               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#1:"tell" this none this
this:notify(tostr(@args));
Last modified Wed Jan 10 14:37:55 2001 PST by Xplat (#4014) (on Waterpoint).
#1:"notify" this none this
if (is_player(this))
  return notify(this, @args);
endif
return 1;
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
    #1:core_names               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Thu Aug 22 01:04:35 2002 PDT by Xeric (#999) (on Waterpoint).
#1:"default_editing" this none this
// this verb works with the new @edit syntax.
// it is passed the string which was used to call @edit, and it is expected to return an {editor object, string} pair.
// the default properties, at this writing, are: .text for $note objects, and .description for others.
// Should be called by player for permissions to work correctly.
if ($perm_utils:controls(caller.owner, this))
  return {$note_editor, {{this, "description"}, this.description}};
else
  return E_PERM;
endif
Last modified Fri Aug 31 15:19:30 2001 PDT by Xplat (#4014) (on Waterpoint).
#1:"where_am_i where_are_you" this none this
// Usage:  :where_are_you()
//         :where_am_i()
// 
// The :where_are_you verb returns a 'place' in which the object can be found.  For example, if you are standing on the beach, carrying a bag that contains a box that contains twelve eggs, each of those objects (you, the bag, the box, every one of the eggs) will return the beach.
// 
// The :where_am_i verb is used by an object to figure out how to answer :where_are_you.  When asked 'Where are you?', the bag in the above example asks its location (you) 'Where am I?'  You in turn ask your location (the beach) 'Where am I?'  The beach, being a $room and therefore presumably a place, returns itself.
return valid(this.location) ? this.location:where_am_i(@args) | this.location;
// Copied from Joe (#254):where_am_i Fri Aug 31 15:19:30 2001 PDT
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
    #1:core_names               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 01:06:32 2013 PDT by Crag (#243).
#1:"initialize" this none this
if (caller == this || $perm_utils:controls(caller_perms(), this))
  this.key = 0;
  $quota_utils.byte_based && $quota_utils.byte:object_size(this);
  owned = `this.owner.owned_objects ! E_INVIND, E_PROPNF';
  if (typeof(owned) == LIST)
    this.owner.owned_objects = setadd(owned, this);
  elseif (typeof(owned) == NUM)
    this.owner.owned_objects = owned + 1;
  endif
  if (parent(this) == $root_class)
    this.unique = 0;
  endif
  this.offered = #-1;
  this.core_names = {};
endif
=> #184 (Core-Wizard)
The verb :initialize is on   Crag(#243)--generic player(#6)   Music Room(#400)--generic event dispatching object(#110)   generic group(#244)--generic thing(#5)   contents test(#578)--generic thing(#5)   Stage-Talk Feature(#67)--Generic Feature Object(#65)   Thinking Feature(#68)--Generic Feature Object(#65)   login watcher mark 2(#83)--Generic Feature Object(#65)   Cardgame Feature(#558)--Generic Feature Object(#65)
Object #243 does not define that verb, but its ancestor #6 does.
#6:"initialize" this none this
if (caller == this || $perm_utils:controls(caller_perms(), this))
  this.help = 0;
  return pass(@args);
else
  return E_PERM;
endif
#5:"initialize" this none this
pass(@args);
if (parent(this) == $thing)
  this.unique = 0;
endif
Object #400 does not define that verb, but its ancestor #110 does.
#110:"initialize" this none this
this.dependents = {};
return pass(@args);
-----
`HELP @FIND' NOT FOUND
======================

Sorry, but no help is available on `@find'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Object #243 does not define that verb, but its ancestor #52 does.
Last modified Thu Jan  4 21:45:21 2001 PST by Xeric (#999) (on Waterpoint).
#52:"@find" any none none
// '@find #<object>', '@find <player>', '@find :<verb>' '@find .<property>' - Attempt to locate things. Verbs and properties are found on any object in the player's vicinity, and some other places.
if (!dobjstr)
  player:tell("Usage: '@find #<object>' or '@find <player>' or '@find :<verb>' or '@find .<property>'.");
  return;
endif
if (dobjstr[1] == ":")
  name = dobjstr[2..length(dobjstr)];
  this:find_verb(name);
  return;
elseif (dobjstr[1] == ".")
  name = dobjstr[2..length(dobjstr)];
  this:find_property(name);
  return;
elseif (dobjstr[1] == "#")
  target = toobj(dobjstr);
  if (!valid(target))
    player:tell(target, " does not exist.");
  endif
else
  target = this:my_match_player(dobjstr);
  $command_utils:player_match_result(target, dobjstr);
endif
if (valid(target))
  player:tell(target:name("dc#"), " ", target:verb_sub("is"), " ", valid(target.location) ? target.location:name("#i", {"in"}) | "nowhere (#-1)", ".");
endif
Object #243 does not define that verb, but its ancestor #52 does.
#52:"find_verb" (name)
// 'find_verb (<name>)' - Search for a verb with the given name. The objects searched are those returned by this:find_verbs_on(). The printing order relies on $list_utils:remove_duplicates to leave the *first* copy of each duplicated element in a list; for example, {1, 2, 1} -> {1, 2}, not to {2, 1}.
results = "";
objects = $list_utils:remove_duplicates(this:find_verbs_on());
for thing in (objects)
  if (valid(thing) && (mom = $object_utils:has_verb(thing, name)))
    results = results + "   " + thing:name() + "(" + tostr(thing) + ")";
    mom = mom[1];
    if (thing != mom)
      results = results + "--" + mom:name() + "(" + tostr(mom) + ")";
    endif
  endif
endfor
if (results)
  this:tell("The verb :", name, " is on", results);
else
  this:tell("The verb :", name, " is nowhere to be found.");
endif
;verbs(#1) => {"initialize", "recycle", "set_name", "name", "titlec namec", "set_aliases", "match", "match_object", "set_description", "description", "look_self", "notify", "tell", "tell_lines", "accept", "moveto", "eject", "is_unlocked_for", "huh", "set_message", "do_examine", "examine_key", "examine_names", "examine_desc", "examine_contents", "examine_verbs", "init_for_core", "contents objects_for_match", "examine_verb_ok", "is_listening", "obvious_verbs hidden_verbs help_verbs", "examine_owner", "announce*_all_but", "visible", "integrate_room_msg integrate_container_msg", "dname*c iname*c", "where_am_i where_are_you", "integrate_in", "name_for_look_self namec_for_look_self", "look_in", "integrate_player_msg", "default_editing", "title", "name_for_tell_contents namec_for_tell_contents", "tell_lines_suspended", "is_hidden_verb", "verb_sub noun_sub adj_sub", "exitfunc", "editing_for", "event_*", "name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number", "add_handler", "_add_handler", "remove_handler", "handlers_event_*", "ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu", "gender gender_name", "set_number set_visible set_integrate_in", "number", "is_plural are_plural plural", "gender_obj", "you", "modname_d", "modname_i", "modname_c", "modname_p", "base_name", "nominate_for_core", "help_text", "modname_u", "modname_titleize", "empty_message", "empty_message_integrate_room empty_message_integrate_container", "modname_in", "acceptable", "modname_v", "modname_#", "modname_l", "get_messages", "get_message", "set_proper set_unique", "call_from_self_*", "name_for", "name_mentioned", "namebuilder_i namebuilder_d", "verb_sub_for noun_sub_for", "ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for", "match_type_object", "clear_for_rebuild", "location", "location_for_caller", "core_names"}
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
    #1:core_names               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
`HELP OBJECT' AMBIGUOUS
=======================

Sorry, the topic `object' is ambiguous.  I don't know which of the following topics you mean:

`help object-matching'[1]                       `help object_bytes()'[2]
`help objective'[3]     

-----
PROGRAMMING
===========

MOO contains a rich programming language for the creation of interesting rooms, exits, and other objects.  Help is available on the following topics concerning programming in MOO:

language[1]
      a brief reference for the syntax and semantics of the MOO language
tasks[2]
      a brief description of MOO tasks and their resource limits

@property[3]
      adding a property to an object
@rmproperty[4]
      removing a property from an object

@verb[5]
      adding a verb to an object
@rmverb[6]
      removing a verb from an object
@args[7]
      changing the syntax of a verb
@copy[8]
      copying a verb from one object to another

@program[9]
      entering the program for a verb
@list[10]
      printing a listing of the program for a verb
@edit[11]
      editing verb code
eval[12]
      executing MOO statements and expressions without writing a verb

@show[13]
      looking at all the details of an object, a property, or a verb
@display[14]
      a different way to look at those details

@parents[15]
      listing the ancestors of an object
@kids[16]
      listing the children of an object
@chparent[17]
      changing the parent of an object

@contents[18]
      listing the contents of an object
@chmod[19]
      changing the permissions on an object, a property, or a verb
@rename[20]
      changing the name of a verb or object
@currentobject[21]
      specify an object to work with

-----
LANGUAGE
========

The MOO programming language is described in excruciating detail in the LambdaMOO Programmer's Manual, available for FTP from parcftp.xerox.com in the file pub/MOO/ProgrammersManual.txt.  The online help consists of a few quick reference guides here in the help system under the following topics:

statements[1]
      the syntax and semantics of the various kinds of MOO statements
expressions[2]
      the same for the various kinds of MOO expressions
functions[3]
      a list of the primitive functions available to MOO programs

Last modified Thu Jan 25 12:17:24 2001 PST by Xplat (#4014) (on Waterpoint).
#1:"match" (string)
whose = #-1;
who_str = "";
first = string[1..(space = index(string, " ")) - 1];
if (rindex(first, "'s") == length(first) - 1)
  whose = this:match(who_str = first[1..$ - 2]);
elseif (rindex(first, "s'") == length(first) - 1)
  whose = this:match(who_str = first[1..$ - 1]);
endif
// this:tell("who_str: ", who_str, " whose: ", whose);
if (valid(whose))
  result = whose:match(string[space + 1..$]);
else
  result = $failed_match;
endif
if (result == $failed_match)
  objects = this:objects_for_match();
  result = $string_utils:match_exact_or_all(string, objects, "name", objects, "aliases");
  result = result || {};
  if (first == "own")
    whose = this;
  endif
  more = {};
  if (length(result) != 1)
    more = $string_utils:match_all(string[space + 1..$], objects, "name", objects, "aliases") || {};
    if (valid(whose))
      for i in (more)
        if (`i.possessor ! E_PROPNF => i.owner' == whose)
          result = setadd(result, i);
        endif
      endfor
    endif
  endif
  // this:tell("more: ", toliteral(more));
  if (!result)
    if (!who_str)
      return $failed_match;
    endif
    folks = {};
    for i in (more)
      folks = setadd(folks, `i.possessor ! E_PROPNF => i.owner');
    endfor
    whose = $string_utils:match(who_str, folks, "name", folks, "aliases");
    if (!valid(whose))
      return whose;
    endif
    notfound = 1;
    for i in (more)
      if (`i.possessor ! E_PROPNF => i.owner' == whose)
        if (notfound)
          notfound = i;
        else
          return $ambiguous_match;
        endif
      endif
    endfor
    return notfound ? $failed_match | notfound;
    return $failed_match;
  elseif (length(result) == 1)
    return result[1];
  else
    return $ambiguous_match;
  endif
endif
return result;
// Copied from root class (#1):match by James (#316) Sun Jun 25 00:09:35 2000 EDT
// Copied from James (#316):match Thu Jan 25 15:17:24 2001 EST
#1:"match_object" this none this
// :match_object(string [,who])
args[2..1] = {this};
return $string_utils:match_object(@args);
#1:"huh" this none this
cp = caller_perms();
if (!valid(cp))
  if (cp == $nothing)
    cp = player;
  else
    $error:raise(E_PERM);
  endif
endif
set_task_perms(cp);
$command_utils:do_huh(verb, args);
Last modified Tue Feb 12 16:53:53 2002 PST by Xplat (#4014) (on Waterpoint (for core)).
#1:"init_for_core" this none this
if ($__core_init_phase)
  vnum = 1;
  coreverbs = {};
  while (vnum <= length(verbs(this)))
    $command_utils:suspend_if_needed(0);
    info = verb_info(this, vnum)[3];
    if (index(info, "(old)"))
      delete_verb(this, vnum);
    elseif (s = match(info, "^%(.+%)(core)$"))
      last_modify = $verb_metadata_item(this, vnum, "Last-Modify");
      set_verb_code(this, target = substitute("%1", s), verb_code(this, vnum));
      if (last_modify)
        last_modify = last_modify[2];
        last_modify[4] = last_modify[4] + " (for core)";
        $set_verb_metadata_item(this, target, "Last-Modify", last_modify);
      endif
      delete_verb(this, vnum);
    else
      meta = $verb_metadata(this, vnum);
      if ($metadata_item(meta, "Is-Local"))
        delete_verb(this, vnum);
      elseif ($metadata_item(meta, "Has-Local-Sections"))
        old = verb_code(this, vnum, 0, 0);
        new = {};
        comment_re = "^\"%([^\\\"]%|\\.%)*\";$";
        verbdoc = 1;
        local = 0;
        dist = 0;
        endofdocs = 1;
        for i in (old)
          if (verbdoc && match(i, comment_re))
            new = {@new, i};
            endofdocs = endofdocs + 1;
          elseif (local)
            if (i == "\"END LOCAL CODE\";")
              local = 0;
            endif
          elseif (dist)
            if (i == "\"END DIST CODE\";")
              dist = 0;
            elseif (match(i, comment_re))
              new = {@new, eval("return " + i)[2]};
            else
              raise(E_INVARG, tostr("unescaped dist code in ", this, ":\"", verb_info(this, vnum)[3], "\""));
            endif
          elseif (i == "\"BEGIN LOCAL CODE\";")
            local = 1;
            if (new && new[$] == "E_NONE" && length(new) == endofdocs)
              new[$..$] = {};
            endif
          elseif (i == "\"BEGIN DIST CODE\";")
            dist = 1;
            if (new && new[$] == "E_NONE" && length(new) == endofdocs)
              new[$..$] = {};
            endif
          else
            verbdoc = 0;
            new = {@new, i};
          endif
        endfor
        set_verb_code(this, vnum, new);
        $set_verb_metadata(this, vnum, $delete_metadata_item(meta, "Has-Local-Sections"));
        vnum = vnum + 1;
      else
        vnum = vnum + 1;
      endif
    endif
  endwhile
  if (this != $root_class)
    this.key = 0;
    this.offered = $nothing;
  endif
else
  return raise(E_PERM);
endif
#1:"is_hidden_verb" (index, who)
// is_hidden_verb(index, who)
// Is the (1-based) <index>th verb hidden from <who>?
if (!$object_utils:isa(caller, this))
  raise(E_PERM);
endif
info = verb_info(this, index);
vargs = verb_args(this, index);
return !index(info[2], "r") || vargs[2..3] == {"none", "this"} || match(info[3], "(.*)$");
Last modified Wed Jun 26 08:47:50 1996 PDT by Erik (#74) (on JHM).
#1:"editing_for" this none this
// editing_for(prop[, <who>])
// This is a fallback answer to `what editor should be used to edit `prop'?' if there's no :editing_for_<prop> verb.
// Returns {editor, prop}
// Second arg is used for permissions only if provided and called from this; otherwise, caller (which should be player) will be used.
{prop, ?who = caller} = args;
if (caller != this)
  who = caller;
endif
if ($object_utils:has_property(this, prop))
  if ($perm_utils:controls_prop(who, this, prop) || index(property_info(this, prop)[2], "r"))
    val = $object_utils:has_callable_verb(this, getter = "get_" + prop) ? this:(getter)() | this.(prop);
    if (typeof(val) in {LIST, STR})
      return {$note_editor, {{this, prop}, val}};
    else
      return {"Sorry... expecting a list-valued property.", tostr("Anyway, you don't need an editor to edit ", $string_utils:print(val), ".")};
    endif
    if (typeof(val) == LIST)
      if ($list_utils:check_type(val, STR))
        return {$note_editor, {{this, prop}, val}};
      else
        return {$note_editor, {{this, prop}, $note_editor:explode_list(0, val)}};
      endif
    elseif (typeof(val) == STR)
      return {$note_editor, {{this, prop}, val}};
    else
      return {"Sorry... expecting a list-valued property.", tostr("Anyway, you don't need an editor to edit ", $string_utils:print(val), ".")};
    endif
  else
    return E_PERM;
  endif
else
  return tostr(this:dname(), " has no `", prop, "' to edit.");
endif
#1:"add_handler" this none this
// Usage:  :add_handler(handler)
// 
// Add an event handler to this object.  Only this may add a handler to itself.
if (caller != this)
  $error:raise(E_PERM);
endif
if (length(args))
  return_value = $code_utils:verb_or_property(args[1], "handler_ok");
  if (return_value)
    this:_add_handler(args[1]);
  endif
  return return_value;
else
  return E_ARGS;
endif
// Copied from event dispatcher (#1751):add_handler by Doug (#444) Tue Apr 26 02:29:07 1994 EDT
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Achievement       #445   1      1       1
The Generic Input Handler     #509   1      1       0
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
----                          -----  -----  ------  ------
The Abstract class(#254) has 17 kids.
name                                 dbref  #kids  #verbs  #props
----                                 -----  -----  ------  ------
Generic Help Database                #30    2      26      2
The New Generic Database             #79    4      30      7
The Generic Mail Recipient           #41    4      31      12
The Generic Option Package           #60    11     12      7
The Generic Feature Object           #65    6      16      5
The generic admin group              #163   5      25      7
The generic utilities                #146   24     0       1
The generic event handler            #133   0      6       1
Generic gender object                #64    5      4       18
The Generic BigList Resident         #75    0      7       4
The generic property farm            #206   5      7       1
The Generic Pronoun_sub Translator   #73    2      12      0
The generic name builder             #240   3      4       0
The generic source or sink           #196   2      3       2
The generic message dispatch object  #219   2      3       2
The generic listener                 #224   1      8       1
The generic daemon service handler   #210   0      12      2
----                                 -----  -----  ------  ------
The string utilities(#18) has 3 ancestors.
name                   dbref  #kids  #verbs  #props
----                   -----  -----  ------  ------
The string utilities   #18    0      89      7
The generic utilities  #146   24     0       1
The Abstract class     #254   17     0       0
The root class         #1     24     92      15
----                   -----  -----  ------  ------
The generic utilities(#146) has 24 kids.
name                            dbref  #kids  #verbs  #props
----                            -----  -----  ------  ------
The Generic BigList Utilities   #13    0      24      3
The wizard utilities            #24    0      27      4
The math utilities              #26    0      35      5
The set utilities               #27    0      7       0
The sequence utilities          #32    0      17      0
Gender utilities                #38    0      8       1
The time utilities              #39    0      20      16
The object utilities            #47    0      29      0
The lock utilities              #48    0      12      4
The list utilities              #49    0      40      0
The command utilities           #50    0      17      1
The code utilities              #53    0      77      13
The permissions utilities       #130   0      5       0
The building utilities          #19    0      9       0
The string utilities            #18    0      89      7
The English Utilities           #72    0      26      16
The integration utils           #74    0      6       0
The Name Utilities              #177   0      8       2
The Parsing Utilities           #117   0      3       1
The walking utils               #182   0      11      0
The room matching utilities     #190   0      28      5
The Generic Quota Utils Parent  #88    2      8       7
The Group Utilities             #248   0      1       0
The Delegation Utilities        #247   0      0       0
----                            -----  -----  ------  ------
The generic utilities(#146) has 24 kids.
name                            dbref  #kids  #verbs  #props
----                            -----  -----  ------  ------
The Delegation Utilities        #247   0      0       0
The Group Utilities             #248   0      1       0
The Parsing Utilities           #117   0      3       1
The permissions utilities       #130   0      5       0
The integration utils           #74    0      6       0
The set utilities               #27    0      7       0
Gender utilities                #38    0      8       1
The Name Utilities              #177   0      8       2
The Generic Quota Utils Parent  #88    2      8       7
The building utilities          #19    0      9       0
The walking utils               #182   0      11      0
The lock utilities              #48    0      12      4
The sequence utilities          #32    0      17      0
The command utilities           #50    0      17      1
The time utilities              #39    0      20      16
The Generic BigList Utilities   #13    0      24      3
The English Utilities           #72    0      26      16
The wizard utilities            #24    0      27      4
The room matching utilities     #190   0      28      5
The object utilities            #47    0      29      0
The math utilities              #26    0      35      5
The list utilities              #49    0      40      0
The code utilities              #53    0      77      13
The string utilities            #18    0      89      7
----                            -----  -----  ------  ------
code utilities (#53) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #53:eval_d                   Core-Wizard (#184)   rxd    this none this
   #53:1                        Core-Wizard (#184)   rx     this none this
   #53:tonum                    unknown hacker (#35) rxd    this none this
   #53:toobj                    unknown hacker (#35) rxd    this none this
   #53:toerr                    unknown hacker (#35) rxd    this none this
   #53:error_name               unknown hacker (#35) rxd    this none this
   #53:show_object              Core-Wizard (#184)   rx     this none this
   #53:show_property            Core-Wizard (#184)   rx     this none this
   #53:show_verbdef             Core-Wizard (#184)   rxd    this none this
   #53:explain_verb_syntax      Core-Wizard (#184)   rxd    this none this
   #53:"verb_p*erms verb_permi*ssions" Core-Wizard (#184) rxd this none this
   #53:verb_loc*ation           unknown hacker (#35) rxd    this none this
   #53:verb_documentation       Core-Wizard (#184)   rxd    this none this
   #53:set_verb_documentation   Core-Wizard (#184)   rxd    this none this
   #53:parse_propref            Core-Wizard (#184)   rxd    this none this
   #53:parse_verbref            Core-Wizard (#184)   rxd    this none this
   #53:parse_argspec            unknown hacker (#35) rxd    this none this
   #53:prepositions             unknown hacker (#35) rxd    this none this
   #53:short_prep               unknown hacker (#35) rxd    this none this
   #53:full_prep                unknown hacker (#35) rxd    this none this
   #53:get_prep                 unknown hacker (#35) rxd    this none this
   #53:_fix_preps               unknown hacker (#35) rx     this at/to this
   #53:"find_verb_named find_verb_named_0_based" Core-Wizard (#184) rx this none this
   #53:"find_last_verb_named find_last_verb_named_0_based" Core-Wizard (#184) rx this none this
   #53:"find_callable_verb_named find_callable_verb_named_0_based" Core-Wizard (#184) rx this none this
   #53:verbname_match(new)      unknown hacker (#35) rxd    this none this
   #53:find_verbs_containing    Core-Wizard (#184)   rxd    this none this
   #53:_find_verbs_containing   Core-Wizard (#184)   rx     this none this
   #53:find_verbs_matching      Core-Wizard (#184)   rxd    this none this
   #53:_find_verbs_matching     Core-Wizard (#184)   rx     this none this
   #53:_grep_verb_code          Core-Wizard (#184)   rxd    this none this
   #53:_egrep_verb_code         Core-Wizard (#184)   rxd    this none this
   #53:_parse_audit_args        unknown hacker (#35) rxd    this none this
   #53:help_db_list             Core-Wizard (#184)   rx     this none this
   #53:help_db_search           unknown hacker (#35) rx     this none this
   #53:corify_object            unknown hacker (#35) rx     this none this
   #53:substitute               Core-Wizard (#184)   rxd    this none this
   #53:inside_quotes            Core-Wizard (#184)   rxd    this none this
   #53:verb_or_property         Core-Wizard (#184)   rx     this none this
   #53:task_valid               Core-Wizard (#184)   rx     this none this
   #53:task_owner               Core-Wizard (#184)   rxd    this none this
   #53:argstr                   Core-Wizard (#184)   rxd    this none this
   #53:verbname_match           unknown hacker (#35) rxd    this none this
   #53:show_who_listing         Core-Wizard (#184)   rx     this none this
   #53:_egrep_verb_code_all     Core-Wizard (#184)   rxd    this none this
   #53:_grep_verb_code_all      Core-Wizard (#184)   rxd    this none this
   #53:standard_set_property    Core-Wizard (#184)   r d    this none this
   #53:verb_usage               Core-Wizard (#184)   rx     this none this
   #53:connected_players        unknown hacker (#35) rxd    this none this
   #53:players                  unknown hacker (#35) rxd    this none this
   #53:safe_eval                unknown hacker (#35) rxd    this none this
   #53:verb_frame               unknown hacker (#35) rxd    this none this
   #53:verb_all_frames          unknown hacker (#35) rxd    this none this
   #53:parse_named_args         unknown hacker (#35) rxd    this none this
   #53:split_verb_code          unknown hacker (#35) rxd    this none this
   #53:named_args_to_usage      unknown hacker (#35) rxd    this none this
   #53:commentify               unknown hacker (#35) rxd    this none this
   #53:uncommentify             Core-Wizard (#184)   rxd    this none this
   #53:named_args_list          unknown hacker (#35) rxd    this none this
   #53:named_args_from_code     unknown hacker (#35) rxd    this none this
   #53:named_args_to_code       unknown hacker (#35) rxd    this none this
   #53:gensym                   unknown hacker (#35) rxd    this none this
   #53:"verbs verbs_as_nobody"  Core-Wizard (#184)   rxd    this none this
   #53:rename_property          Core-Wizard (#184)   rxd    this none this
   #53:format_traceback         unknown hacker (#35) rxd    this none this
   #53:_format_traceback_frame  unknown hacker (#35) rxd    this none this
   #53:find_verb_named_1_based  Core-Wizard (#184)   rxd    this none this
   #53:find_last_verb_named_1_based Core-Wizard (#184) rxd  this none this
   #53:find_callable_verb_named_1_based Core-Wizard (#184) rxd this none this
   #53:callers_before_pass      unknown hacker (#35) rxd    this none this
   #53:frame_before_pass        unknown hacker (#35) rx     this none this
   #53:caller_before_pass       unknown hacker (#35) rx     this none this
   #53:caller_perms_before_pass unknown hacker (#35) rx     this none this
   #53:disassemble_code         unknown hacker (#35) rxd    this none this
   #53:check_syntax             unknown hacker (#35) rxd    this none this
   #53:init_for_core            Core-Wizard (#184)   rxd    this none this
   #53:_verb_code_temporary     unknown hacker (#35)        this none this
-------------------------------- finished ---------------------------------
Usage:  @list <object>:<verb> [<dobj> <prep> <iobj>] [with|without parentheses|numbers] [all] [ranges]
Last modified Sat Apr 27 17:01:52 2013 PDT by Crag (#243).
#0:"do_command" this none this
// TODO: improve this snooping functionality
#243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
try
  return $object_utils:has_callable_verb(player, "receive_input") && player:receive_input(argstr, args);
except e (ANY)
  player:notify("There was an error in the new input parsing system:");
  player:tell_lines($string_utils:pretty_error(e));
  player:notify("Falling back to the old one.");
  return 0;
endtry
generic player(#6) has 6 kids.
name               dbref  #kids  #verbs  #props
----               -----  -----  ------  ------
generic builder    #4     1      34      2
Nobody             #36    0      6       1
J. Text            #176   0      1       0
topic-owner        #181   0      0       0
Quota              #185   0      1       0
The generic guest  #31    0      28      14
----               -----  -----  ------  ------
< Beaker has connected.  Total: 2 >
You open the doors to the south.
The West Foyer
The West Hall
The Northwest Tower
The Great Hall
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  The tracery windows are carved into the northern wall.
Beaker is here.
You have arrived.
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
  #256:receive_input            Crag (#243)          rxd    this none this
  #256:match_command            Crag (#243)          rxd    this none this
  #256:explain_ambiguous_command Crag (#243)         rxd    this none this
  #256:explain_unknown_command  Crag (#243)          rxd    this none this
  #256:invoke_command           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 17:16:04 2013 PDT by Crag (#243).
#256:"receive_input" this none this
{command_str, split_command_str} = args;
matches = this:match_command(command_str);
if (length(matches) < 1)
  this:explain_unknown_command(command_str);
elseif (length(matches) == 1)
  this:invoke_command(matches[1]);
else
  matches = $list_utils:sort_alist(matches);
  top_confidence = matches[-1][1];
  if (matches[-2][1] == top_confidence)
    best = {};
    for match in (matches)
      if (match[1] == top_confidence)
        best = {@best, match};
      endif
    endfor
    this:explain_ambiguous_command(command_str, matches, best);
  else
    this:invoke_command(matches[1]);
  endif
endif
return 1;
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#256:receive_input this none this" name: "MOO verb: #256:receive_input this none this" type: moo-code content*: "" _data-tag: 75960752300
#$#* 75960752300 content: {command_str, split_command_str} = args;
#$#* 75960752300 content: matches = this:match_command(command_str);
#$#* 75960752300 content: if (length(matches) < 1)
#$#* 75960752300 content:   this:explain_unknown_command(command_str);
#$#* 75960752300 content: elseif (length(matches) == 1)
#$#* 75960752300 content:   this:invoke_command(matches[1]);
#$#* 75960752300 content: else
#$#* 75960752300 content:   matches = $list_utils:sort_alist(matches);
#$#* 75960752300 content:   top_confidence = matches[-1][1];
#$#* 75960752300 content:   if (matches[-2][1] == top_confidence)
#$#* 75960752300 content:     best = {};
#$#* 75960752300 content:     for match in (matches)
#$#* 75960752300 content:       if (match[1] == top_confidence)
#$#* 75960752300 content:         best = {@best, match};
#$#* 75960752300 content:       endif
#$#* 75960752300 content:     endfor
#$#* 75960752300 content:     this:explain_ambiguous_command(command_str, matches, best);
#$#* 75960752300 content:   else
#$#* 75960752300 content:     this:invoke_command(matches[1]);
#$#* 75960752300 content:   endif
#$#* 75960752300 content: endif
#$#* 75960752300 content: return 1;
#$#: 75960752300
0 errors.
Verb programmed.
#256:"invoke_command" ()
That verb has not been programmed.
Beaker heads off to the Verb Editor.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#0:do_command this none this" name: "MOO verb: #0:do_command this none this" type: moo-code content*: "" _data-tag: 1481245814301
#$#* 1481245814301 content: // TODO: improve this snooping functionality
#$#* 1481245814301 content: #243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", argstr);
#$#* 1481245814301 content: try
#$#* 1481245814301 content:   return $object_utils:has_callable_verb(player, "receive_input") && player:receive_input(argstr, args);
#$#* 1481245814301 content: except e (ANY)
#$#* 1481245814301 content:   player:notify("There was an error in the new input parsing system:");
#$#* 1481245814301 content:   player:tell_lines($string_utils:pretty_error(e));
#$#* 1481245814301 content:   player:notify("Falling back to the old one.");
#$#* 1481245814301 content:   return 0;
#$#* 1481245814301 content: endtry
#$#: 1481245814301
0 errors.
Verb programmed.
=> 0
=> 1
do_command for Beaker (#256): "command           having     spaces     for    test"
do_command for Crag (#243): "l beaker"
You see no "beaker" here.
do_command for Crag (#243): "@who"
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           North Vestibule               0 seconds                         
Beaker         [editing verbs] North Vestib  35 seconds                        

Total: 2 people, both of whom have been active recently.
do_command for Beaker (#256): "l"
do_command for Beaker (#256): "quit"
< Beaker has disconnected.  Total: 1 >
< Beaker has connected.  Total: 2 >
do_command for Beaker (#256): "help"
do_command for Beaker (#256): "l"
do_command for Beaker (#256): "done"
Beaker comes back from the Verb Editor.
do_command for Crag (#243): ";me.debug=0"
=> 0
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
  #256:receive_input            Crag (#243)          rxd    this none this
  #256:match_command            Crag (#243)          rxd    this none this
  #256:explain_ambiguous_command Crag (#243)         rxd    this none this
  #256:explain_unknown_command  Crag (#243)          rxd    this none this
  #256:invoke_command           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 17:27:54 2013 PDT by Crag (#243).
#256:"match_command" this none this
{command_str} = args;
matches = {};
for d in (this:dictionaries())
  matches = $set_utils:union(matches, d:match_command(command_str));
endfor
return matches;
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
.dictionaries            Beaker (#256)         r c    {#511}
-------------------------------- finished ---------------------------------
=> #511 (Beaker's Commands)
Beaker's Commands (#511) [ readable ]
  Child of Generic Command Handler (#510).
-------------------------------- finished ---------------------------------
Verb added [1] (0).
Generic Command Handler (#510) [ readable ]
  Child of Generic Input Handler (#509).
  #510:match_command            Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb #511:match_command [1] {this none this} removed.
Last modified Sat Apr 27 17:29:32 2013 PDT by Crag (#243).
#510:"match_command" this none this
{command_str} = args;
matches = {};
for candidate in (this.commands)
  {cmd_obj, ?info = {}} = candidate;
  matched = cmd_obj:match_commands(command_str, info);
  if (matched)
    matches = $set_utils:union(matches, matched);
  endif
endfor
return matches;
Beaker's Commands (#511) [ readable ]
  Child of Generic Command Handler (#510).
.dictionaries            Crag (#243)           r c    {#511}
-------------------------------- finished ---------------------------------
Property removed.
Property #511.commands already exists.
 commands                Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
=> #511 (Beaker's Commands)
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Achievement       #445   1      1       1
The Generic Input Handler     #509   1      1       0
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
----                          -----  -----  ------  ------
The Abstract class(#254) has 17 kids.
name                                 dbref  #kids  #verbs  #props
----                                 -----  -----  ------  ------
Generic Help Database                #30    2      26      2
The New Generic Database             #79    4      30      7
The Generic Mail Recipient           #41    4      31      12
The Generic Option Package           #60    11     12      7
The Generic Feature Object           #65    6      16      5
The generic admin group              #163   5      25      7
The generic utilities                #146   24     0       1
The generic event handler            #133   0      6       1
Generic gender object                #64    5      4       18
The Generic BigList Resident         #75    0      7       4
The generic property farm            #206   5      7       1
The Generic Pronoun_sub Translator   #73    2      12      0
The generic name builder             #240   3      4       0
The generic source or sink           #196   2      3       2
The generic message dispatch object  #219   2      3       2
The generic listener                 #224   1      8       1
The generic daemon service handler   #210   0      12      2
----                                 -----  -----  ------  ------
=> #531 (Generic Command)
Generic Command (#531) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Generic Command (#531) [ readable ]
  Child of root class (#1).
  #531:match_command            Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 17:31:34 2013 PDT by Crag (#243).
#531:"match_command" this none this
// find all permutations of command types this object thinks it knows about
// :match_command(command_str) =>
//   {{confidence, handler, @parameters}, ...}
// the best match will be invoked as
//   handler:invoke(@parameters);
{command_str} = args;
return {};
The Generic Command(#531) has 1 kid.
name                         dbref  #kids  #verbs  #props
----                         -----  -----  ------  ------
The Generic English Command  #532   1      0       0
----                         -----  -----  ------  ------
The Generic English Command(#532) has 1 kid.
name                  dbref  #kids  #verbs  #props
----                  -----  -----  ------  ------
The Grouping Command  #533   0      0       0
----                  -----  -----  ------  ------
The Grouping Command(#533) has no kids.
Grouping Command (#533) [ readable ]
  Child of Generic English Command (#532).
-------------------------------- finished ---------------------------------
Grouping Command (#533) [ readable ]
  Child of Generic English Command (#532).
-------------------------------- finished ---------------------------------
Grouping Command (#533) [ readable ]
  Child of Generic English Command (#532).
-------------------------------- finished ---------------------------------
Generic English Command (#532) [ readable ]
  Child of Generic Command (#531).
-------------------------------- finished ---------------------------------
Generic English Command (#532) [ readable ]
  Child of Generic Command (#531).
-------------------------------- finished ---------------------------------
Last modified Sat Sep  7 17:46:10 2013 PDT by Crag (#243).
#0:"do_command" this none this
// vim: syntax=moo
// TODO: improve this snooping functionality
#243.debug && #243:tell("do_command for ", player:name_and_number(), ": ", toliteral(argstr));
try
  return $object_utils:has_callable_verb(player, "receive_input") && player:receive_input(argstr, args);
except e (ANY)
  player:notify("There was an error in the new input parsing system:");
  player:tell_lines($string_utils:pretty_error(e));
  player:notify("Falling back to the old parser.");
  return 0;
endtry
Last modified Sat Sep  7 17:43:44 2013 PDT by Crag (#243).
#256:"receive_input" this none this
{command_str, split_command_str} = args;
matches = this:match_command(command_str);
if (length(matches) < 1)
  return this:explain_unknown_command(command_str);
endif
if (length(matches) == 1)
  return this:invoke_command(matches[1]);
endif
matches = $list_utils:sort_alist(matches);
top_confidence = matches[-1][1];
if (matches[-2][1] == top_confidence)
  best = {};
  for match in (matches)
    if (match[1] == top_confidence)
      best = {@best, match};
    endif
  endfor
  this:explain_ambiguous_command(command_str, matches, best);
else
  this:invoke_command(matches[1]);
endif
return 1;
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#256:receive_input this none this" name: "MOO verb: #256:receive_input this none this" type: moo-code content*: "" _data-tag: 1311755157302
#$#* 1311755157302 content: {command_str, split_command_str} = args;
#$#* 1311755157302 content: matches = this:match_command(command_str);
#$#* 1311755157302 content: if (length(matches) < 1)
#$#* 1311755157302 content:   return this:explain_unknown_command(command_str);
#$#* 1311755157302 content: endif
#$#* 1311755157302 content: if (length(matches) == 1)
#$#* 1311755157302 content:   return this:invoke_command(matches[1]);
#$#* 1311755157302 content: endif
#$#* 1311755157302 content: matches = $list_utils:sort_alist(matches);
#$#* 1311755157302 content: top_confidence = matches[-1][1];
#$#* 1311755157302 content: if (matches[-2][1] == top_confidence)
#$#* 1311755157302 content:   best = {};
#$#* 1311755157302 content:   for match in (matches)
#$#* 1311755157302 content:     if (match[1] == top_confidence)
#$#* 1311755157302 content:       best = {@best, match};
#$#* 1311755157302 content:     endif
#$#* 1311755157302 content:   endfor
#$#* 1311755157302 content:   this:explain_ambiguous_command(command_str, matches, best);
#$#* 1311755157302 content: else
#$#* 1311755157302 content:   this:invoke_command(matches[1]);
#$#* 1311755157302 content: endif
#$#* 1311755157302 content: return 1;
#$#: 1311755157302
0 errors.
Verb programmed.
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
  #256:receive_input            Crag (#243)          rxd    this none this
  #256:match_command            Crag (#243)          rxd    this none this
  #256:explain_ambiguous_command Crag (#243)         rxd    this none this
  #256:explain_unknown_command  Crag (#243)          rxd    this none this
  #256:invoke_command           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 17:27:54 2013 PDT by Crag (#243).
#256:"match_command" this none this
{command_str} = args;
matches = {};
for d in (this:dictionaries())
  matches = $set_utils:union(matches, d:match_command(command_str));
endfor
return matches;
You see no "$dictionary" here.
You see no "$dict" here.
The Beaker's Commands(#511) has 3 ancestors.
name                         dbref  #kids  #verbs  #props
----                         -----  -----  ------  ------
The Beaker's Commands        #511   0      0       0
The Generic Command Handler  #510   1      1       1
The Generic Input Handler    #509   1      1       0
The root class               #1     24     92      15
----                         -----  -----  ------  ------
Generic Input Handler (#509) [ readable ]
  Child of root class (#1).
  #509:match_input              Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Generic Command Handler (#510) [ readable ]
  Child of Generic Input Handler (#509).
  #510:match_command            Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#509:"match_input" ()
That verb has not been programmed.
Parent changed.
The Generic Input Handler (#509) has 1 verb.  Sure you want to recycle it? [Enter `yes' or `no']
The Generic Input Handler (#509) recycled.
Last modified Sat Apr 27 17:29:32 2013 PDT by Crag (#243).
#510:"match_command" this none this
{command_str} = args;
matches = {};
for candidate in (this.commands)
  {cmd_obj, ?info = {}} = candidate;
  matched = cmd_obj:match_commands(command_str, info);
  if (matched)
    matches = $set_utils:union(matches, matched);
  endif
endfor
return matches;
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Achievement       #445   1      1       1
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
The Generic Command Handler   #510   1      1       1
----                          -----  -----  ------  ------
Generic Command (#531) [ readable ]
  Child of root class (#1).
  #531:match_command            Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 17:31:34 2013 PDT by Crag (#243).
#531:"match_command" this none this
// find all permutations of command types this object thinks it knows about
// :match_command(command_str) =>
//   {{confidence, handler, @parameters}, ...}
// the best match will be invoked as
//   handler:invoke(@parameters);
{command_str} = args;
return {};
Beaker (#256) [ (player) programmer ]
  Child of generic programmer (#52).
  Location North Vestibule (#70).
  #256:receive_input            Crag (#243)          rxd    this none this
  #256:match_command            Crag (#243)          rxd    this none this
  #256:explain_ambiguous_command Crag (#243)         rxd    this none this
  #256:explain_unknown_command  Crag (#243)          rxd    this none this
  #256:invoke_command           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Generic Command Handler (#510) [ readable ]
  Child of root class (#1).
  #510:match_command            Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Name of #510 changed to "Generic Dictionary", with aliases {"Generic Dictionary"}.
The Generic Dictionary(#510) has 1 kid.
name                   dbref  #kids  #verbs  #props
----                   -----  -----  ------  ------
The Beaker's Commands  #511   0      0       0
----                   -----  -----  ------  ------
Name of #511 changed to "Beaker's Dictionary", with aliases {"Beaker's Dictionary"}.
Beaker's Dictionary (#511) [ readable ]
  Child of Generic Dictionary (#510).
-------------------------------- finished ---------------------------------
Beaker's Dictionary (#511) [ readable ]
  Child of Generic Dictionary (#510).
 commands                Crag (#243)           r c    {}
,key                     Crag (#243)             c    0
,aliases                 Crag (#243)           r c    {"Beaker's Dictionary"}
 description             Crag (#243)           r c    {"Command handlers exte..
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Crag (#243)           r c    ""
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
 unique                  Crag (#243)           r c    1
 proper                  Crag (#243)           r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {689, 1378454400}
,core_names              Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Generic Dictionary (#510) [ readable ]
  Child of root class (#1).
  #510:match_command            Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "str:#510.description" name: "Generic Dictionary.description" type: string-list content*: "" _data-tag: 760184559303
#$#* 760184559303 content: Command handlers extend input handlers by adding command patterns.
#$#* 760184559303 content: 
#$#* 760184559303 content:   .commands => list of {"pattern", action_obj, ?details = {}}
#$#* 760184559303 content:     where @details is arbitrary data passed to action_obj:match_action
#$#* 760184559303 content: 
#$#: 760184559303
Set description property of the Generic Dictionary (#510).
Last modified Sat Apr 27 17:29:32 2013 PDT by Crag (#243).
#510:"match_command" this none this
{command_str} = args;
matches = {};
for candidate in (this.commands)
  {cmd_obj, ?info = {}} = candidate;
  matched = cmd_obj:match_commands(command_str, info);
  if (matched)
    matches = $set_utils:union(matches, matched);
  endif
endfor
return matches;
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
.debug                   Crag (#243)           r c    0
-------------------------------- finished ---------------------------------
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
  #243:find_all_commands        Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 19:43:52 2013 PDT by Crag (#243).
#243:"core_objects" this none this
// Find all objects with core names (like $local)
{?o = #0, ?pfx = "$", ?seen = {}} = args;
for o in ($object_utils:descendents(#1))
  o.core_names = {};
endfor
for p in (properties(o))
  v = o.(p);
  name = pfx + p;
  if (typeof(v) == OBJ && valid(v))
    player:tell(name + " => " + v:name_and_number());
    if (!(name in v.core_names))
      v.core_names = {@v.core_names, name};
    endif
    if (!(v in seen))
      this:core_objects(v, pfx + p + ".", {@seen, v});
    endif
  else
    player:tell(name + " => " + $string_utils:from_value(v));
  endif
endfor
=> {"$root", "$root_class"}
=> {}
=> {"builder", "login", "last_huh", "guest_log", "last_restart_time", "biglist", "big_mail_recipient", "limbo", "registration_db", "new_player_log", "verb_help", "core_help", "prog_help", "wiz_help", "shutdown_task", "wiz_utils", "site_db", "math_utils", "set_utils", "builtin_function_help", "new_prog_log", "generic_help", "guest", "seq_utils", "quota_log", "you", "hacker", "generic_db", "shutdown_message", "shutdown_time", "no_one", "player_db", "player_class", "gender_utils", "trig_utils", "time_utils", "editor_help", "mail_recipient", "mail_agent", "mail_editor", "note_editor", "verb_editor", "generic_editor", "object_utils", "lock_utils", "gripe_recipients", "dump_interval", "list_utils", "command_utils", "player", "wiz", "prog", "code_utils", "help", "nothing", "failed_match", "ambiguous_match", "perm_utils", "building_utils", "string_utils", "news", "note", "container", "thing", "exit", "room", "player_start", "root_class", "recycler", "garbage", "mail_options", "edit_options", "display_options", "generic_options", "maxint", "minint", "list_options", "error", "newt_log", "toad_log", "site_log", "housekeeper", "feature", "pronoun_sub", "they", "login_watcher", "english", "language", "integration_utils", "network", "country_db", "jtext", "feature_help", "jaddress", "misc_options", "client_options", "building_options", "it", "nobody", "furniture", "sittable", "I", "everything", "all", "nowhere", "admin_group", "steering_committee", "db_group", "unix_group", "community_group", "tech_group", "admin_mail_recipient", "registrar", "event_dispatcher", "prog_group", "openable_container", "containing_object", "utils", "biglist_utils", "english_utils", "boot_log", "help_editor", "object_help", "tester", "failed_help", "who_options", "who_utils", "event_handler", "eval_options", "he", "she", "e", "we", "plural_you", "either", "splat", "gender", "neuter", "egotistical", "plural", "royal", "male", "female", "Spivak", "second", "second_plural", "singular", "none", "topic", "builder_help", "name_utils", "guest_help", "parse_utils", "admin", "core_wizard", "first_wizard", "door", "ftp", "__core_init_phase", "quota_utils", "window", "server_options", "walking_utils", "maxfloat", "checkpointer", "startup", "syslog", "core_extraction_time", "generic_biglist_home", "http", "module", "property_farm", "modules", "smtp", "cord", "mcp", "parse_options", "ftp_client", "local", "building_group", "documentation_group", "first_restart_time", "room_matching_utils", "policy_help", "admin_help", "jhcore_help", "namebuilder_i", "namebuilder_d", "root", "delegator", "delegate", "ceiling", "nesting_decoration", "table", "bot", "vr_root", "achievement", "chaise", "chair", "bed", "input_handler", "command_handler", "floor", "rug", "settee", "walls", "picture_rail", "painting", "pillar", "command", "english_command", "vase", "flower", "bouquet", "portal", "desk", "drawer", "fireplace", "door_secret", "portal_unopenable", "mirror", "urn", "fuel", "mirror_hand"}
Verb added [4] (3).
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#243:audit_sys ()" name: "MOO verb: #243:audit_sys ()" type: moo-code content*: "" _data-tag: 1889235365304
#$#: 1889235365304
-----
`HELP SET_ADD' NOT FOUND
========================

Sorry, but no help is available on `set_add'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Line 1:  Unknown built-in function: set_add
1 error.
-----
GENERAL INFORMATION ON $SET_UTILS[1]
====================================

This object is useful for operations that treat lists as sets (i.e., without concern about order and assuming no duplication).

 union(set, set, ...)        => union
 intersection(set, set, ...) => intersection

 diff*erence(set 1, set 2, ..., set n)
        => result of removing all elements of sets 2..n from set 1.
 exclusive_or(set, set, set, ...)
        => all elements that are contained in exactly one of the sets

 equals(set, set, ...)
        => true if and only if all the sets are equal
 contains(set 1, set 2, ..., set n)
        => true if and only if all of sets 2..n are subsets of set 1

-----
FUNCTIONS
=========

There are many, many built-in functions available to MOO programmers.  The following list gives a brief summary of the arguments and purpose of each function; for more information, see the LambdaMOO Programmer's Manual.  

pass(arg, ...)              -- call same verb defined on this object's parent
raise(code[, msg[, value]]) -- raise code as an error

typeof(value)      -- determine the data type of value
 tostr(value, ...) -- concatenate values into a string
 tonum(value)      -- convert non-list value into a integer
 toint(value)      == tonum(value)
 tofloat(value)    -- convert non-list value into a float
 toobj(value)      -- convert non-list value into an object
floatstr(float, precision, scientific?)
                   -- convert float value to string
encode_binary(value, ...)      -- values to binary string
decode_binary(bstring[, full]) -- binary string to list of values

binary_hash(bstring) -- MD5 hash value of binary string
string_hash(string)  -- MD5 hash value of string
value_hash(value)    == string_hash(toliteral(value))

value_bytes(value)   --- number of bytes required to store value
object_bytes(object) --- number of bytes required to store object

eval(string)       -- parse and execute string as MOO code
toliteral(value)   -- convert value to a string that evaluates to it
call_function(func[, arg, ...]) == func([arg, ...])

function_info([func]) -- builtin function desc (or list of all of them)

length(list/string) -- returns the length of a string or list
listappend(list, value [, index]) -- adding an element at the end of a list
listinsert(list, value [, index]) -- adding an element at the head of a list
   listset(list, value, index)    -- updating a list at some index
listdelete(list, index)           -- removing an element from a list
    setadd(list, element) -- adding an element to a set represented as a list
 setremove(list, element) -- removing an element from such a set
is_member(element, list) -- case-sensitive version of (element IN list)
equal(v1,v2)             -- case-sensitive version of (v1 == v2)

min(n1, n2, ...) -- minimum of n1,n2,...
max(n1, n2, ...) -- maximum of n1,n2,...
random(n)        -- random integer between 1 and n inclusive
 time()          -- current time in seconds since midnight GMT, 1 Jan 70
ctime([time])    -- time (or current time) converted to a human-readable string

  abs(n) -- absolute value of n
floor(x) -- truncate x towards minus infinity
trunc(x) -- truncate x towards zero
 ceil(x) -- truncate x towards plus infinity
 sqrt(n) -- square root of n
  exp(x) -- e to the x
  log(x) -- natural log
log10(x) -- base 10 log
 sin(a),  cos(a),  tan(a)     -- circular trignometric functions
asin(y), acos(x), atan(x[,y]) -- inverse circular trignometric functions
 sinh(a), cosh(a), tanh(a)    -- hyperbolic trigonometric functions

 index(str1, str2 [, case-matters]) -- index of first str2 in str1
rindex(str1, str2 [, case-matters]) -- index of last  str2 in str1
strcmp(str1, str2) -- case-sensitive string comparison
strsub(subject, what, with [, case-matters]) -- substitution in a string
crypt(string [, salt]) -- one-way string encryption
 match(str1, str2 [, case-matters]) -- match first pattern str2 in str1
rmatch(str1, str2 [, case-matters]) -- match last  pattern str2 in str1
substitute(template, subs) -- perform substitutions on template

   valid(object)             -- testing whether an object exists
  create(parent [, owner(*)])-- creating a new MOO object
 recycle(object)             -- destroying a MOO object
    move(object, where)      -- altering the object-containment hierarchy
chparent(object, new-parent) -- altering the object-inheritance hierarchy
  parent(object)             -- object's parent   in the inheritance hierarchy
children(object)             -- object's children in the inheritance hierarchy
max_object()       -- the highest-numbered object in the MOO
renumber(obj)      -- changes an object's number to lowest available one (*)
reset_max_object() -- resets max_object() to the largest valid object (*)

     properties(object) -- a list of the properties defined on an object
   add_property(object, prop-name, value, info) -- add a new property
delete_property(object, prop-name)              -- remove a property
    property_info(object, prop-name)       -- {owner, perms} info on a property
set_property_info(object, prop-name, info) -- setting same
is_clear_property(object, prop-name) -- find out if a property is "clear"
   clear_property(object, prop-name) -- make a property "clear"

      verbs(object) -- a list of the verbs defined on an object
   add_verb(object, info, args)  -- add a verb to an object
delete_verb(object, verb-name)   -- remove a verb from an object
    verb_info(object, verb-name) -- {owner, perms, names} info for a verb defn.
    verb_args(object, verb-name) -- {dobj, prep, iobj} argument info for a verb
    verb_code(object, verb-name [, fully-paren [, indent]]) -- program listing
set_verb_info(object, verb-name, {owner, perms, names})
set_verb_args(object, verb-name, {dobj, prep, iobj})   
set_verb_code(object, verb-name, {line, line, ...})
  disassemble(object, verb-name) -- moo bytecode for verb

notify(conn, string[, noflush])      -- output string to connection
read([conn])                         -- read input line from connection (*)
flush_input(conn[, showmsg?])        -- flush pending input on connection (*)
force_input(conn, line[, at-front?]) -- insert line as pending input (*)

        is_player(object) -- testing whether or not object is a player
          players()       -- a list of all players, active or not
connected_players()       -- a list of all currently-connected players
     idle_seconds(player) -- seconds since given player typed anything
connected_seconds(player) -- seconds given player has been logged in
    boot_player(player)        -- disconnect player from the MOO immediately(*)
set_player_flag(player, value) -- set/clear player bit; boot player if clear(*)
connection_name(player)   -- a server-assigned name for player's connection
open_network_connection(@args) -- open a connection to another network site
connection_option(conn,option)           -- setting of option for connection
connection_options(conn)                 -- list of {option, value}
set_connection_option(conn,option,value) -- change setting of option
output_delimiters(player)      -- {prefix,suffix} set by PREFIX/SUFFIX cmds
buffered_output_length([conn]) -- number of bytes currently buffered on output

caller_perms()         -- the player whose permissions your caller was using
set_task_perms(player) -- changing permissions of the running task (*)
callers([lineno?])  -- stack: list of {obj, verb, owner, vloc, player[,line]}
task_stack(taskid[,lineno?]) -- callers() stack for suspended task

seconds_left() -- number of seconds left in the current task
ticks_left()   -- number of ticks   left in the current task
task_id()              -- id number for the currently-running task
suspend(secs)          -- suspend current task for a number of seconds
resume(taskid[,value]) -- resume the specified task
kill_task(taskid)      -- delete one of your tasks from the queue
queued_tasks()         -- list of {taskid,start,,,owner,obj,verb,line,this}
queue_info([player])   -- number of tasks for player or list of tasking players

server_version()   -- a string of three numbers "major.minor.release"
server_log(string) -- add a comment to the server log file (*)
listen(obj, point[, msgs?]) -- start listening, return canonicalized point (*)
unlisten(canonpoint)        -- stop listening at canonpoint (*)
listeners() -- list of {object, canonpoint, msgs?} listening points (*)
shutdown(msg)    -- print msg and kill the server (*)
dump_database()  -- what it says (*)
db_disk_size()   -- size in bytes of database disk file
memory_usage()   -- {{blocksize, nused, nfree}, ...}, the server's memory stats

(*) => as you might have expected, these usually require wizard permissions.

Error programming Crag:audit_sys[4](3).
Line 4:  Unknown built-in function: type
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
=> 0
Objects owned by Crag (from #0 to #579):
 12K #243 Crag                      *[North Vestibule]
  1K #244 generic group             *[Music Room]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Nowhere]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Nowhere]
 <1K #252 Parsing objects            [Nowhere]
 <1K #253 Text generation objects    [Nowhere]
 <1K #254 Abstract class             [Nowhere]
  4K #255 Generic Pilable Thing      [Nowhere]
 <1K #264 adventure party           *[bridge]
  2K #265 Generic Nesting Decoratio  [Nowhere]
  7K #269 Delegator                  [Nowhere]
  1K #270 Delegate                   [Nowhere]
 <1K #271 New Generic Room           [Nowhere]
  1K #279 Room Exit Delegate         [Nowhere]
  3K #280 Generic Table              [Nowhere]
  3K #290 How $staff will notice pe *[butler's desk]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
  1K #510 Generic Dictionary         [Nowhere]
 <1K #511 Beaker's Dictionary        [Nowhere]
  1K #531 Generic Command            [Nowhere]
 <1K #532 Generic English Command    [Nowhere]
 <1K #533 Grouping Command           [Nowhere]
 14K #540 Generic See-through Porta  <invalid>-><invalid>
 26K #558 Cardgame Feature           [Nowhere]
 <1K #560 Blank Root                 [Nowhere]
 <1K #561 Interface                  [Nowhere]
 <1K #562 Class                      [Nowhere]
 <1K #247 Delegation Utilities       [Nowhere]
  6K #574 Clock                     *[Front Parlour]
  2K #504 Source control strategy    [Nowhere]
 <1K #578 contents test             *[Music Room]
-- 35 objects.  Total bytes: 115,461.-----------------------------------------
Property added with value #510.
=> #510 (Generic Dictionary)
Property #0.command already exists.
=> #531 (Generic Command)
Generic English Command (#532) [ readable ]
  Child of Generic Command (#531).
-------------------------------- finished ---------------------------------
Generic English Command (#532) [ readable ]
  Child of Generic Command (#531).
-------------------------------- finished ---------------------------------
You see nothing special.
The Generic English Command(#532) has 1 kid.
name                  dbref  #kids  #verbs  #props
----                  -----  -----  ------  ------
The Grouping Command  #533   0      0       0
----                  -----  -----  ------  ------
Grouping Command (#533) [ readable ]
  Child of Generic English Command (#532).
-------------------------------- finished ---------------------------------
Grouping Command (#533) [ readable ]
  Child of Generic English Command (#532).
-------------------------------- finished ---------------------------------
You see nothing special.
The Grouping Command(#533) has 3 ancestors.
name                         dbref  #kids  #verbs  #props
----                         -----  -----  ------  ------
The Grouping Command         #533   0      0       0
The Generic English Command  #532   1      0       0
The Generic Command          #531   1      1       0
The root class               #1     24     92      15
----                         -----  -----  ------  ------
You now have Look Command with object number #509 and parent Generic English Command (#532).
The created object is now your current object.
Generic Command (#531) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Generic Command (#531) [ readable ]
  Child of root class (#1).
  #531:match_command            Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Apr 27 17:31:34 2013 PDT by Crag (#243).
#531:"match_command" this none this
// find all permutations of command types this object thinks it knows about
// :match_command(command_str) =>
//   {{confidence, handler, @parameters}, ...}
// the best match will be invoked as
//   handler:invoke(@parameters);
{command_str} = args;
return {};
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#531:match_command this none this" name: "MOO verb: #531:match_command this none this" type: moo-code content*: "" _data-tag: 1035857758305
#$#* 1035857758305 content: // find all permutations of command types this object thinks it knows about
#$#* 1035857758305 content: // :match_command(command_str) =>
#$#* 1035857758305 content: //   {{confidence, handler, @parameters}, ...}
#$#* 1035857758305 content: // the best match will be invoked as
#$#* 1035857758305 content: //   handler:invoke(@parameters);
#$#* 1035857758305 content: {command_str} = args;
#$#* 1035857758305 content: return {};
#$#: 1035857758305
0 errors.
Verb programmed.
=> #509 (Look Command)
Verb added [1] (0).
Warning:  Verb `match_command' already defined on that object.
Verb added [2] (1).
That object does not define that verb.
Verb #509:match_command [2] {this none this} removed.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#509:match_command ()" name: "MOO verb: #509:match_command ()" type: moo-code content*: "" _data-tag: 1999818066306
#$#: 1999818066306
-----
`HELP MATCH' AMBIGUOUS
======================

Sorry, the topic `match' is ambiguous.  I don't know which of the following topics you mean:

`help #1:match'[1]      `help match()'[2]       

-----
MATCH()
=======

Syntax:  match (str <subject>, str <pattern> [, <case-matters>])   => list
        rmatch (str <subject>, str <pattern> [, <case-matters>])   => list

The function `match()' (`rmatch()') searches for the first (last) occurrence of the regular expression <pattern> in the string <subject>.  If <pattern> is syntactically malformed, then `E_INVARG' is raised.  The process of matching can in some cases consume a great deal of memory in the server; should this memory consumption become excessive, then the matching process is aborted and `E_QUOTA' is raised.

If no match is found, the empty list is returned; otherwise, these functions return a list containing information about the match (see below).  By default, the search ignores upper-/lower-case distinctions.  If <case-matters> is provided and true, then case is treated as significant in all comparisons.

The list that `match()' (`rmatch()') returns contains the details about the match made.  The list is in the form:

    {<start>, <end>, <replacements>, <subject>}

where <start> is the index in <subject> of the beginning of the match, <end> is the index of the end of the match, <replacements> is a list described below, and <subject> is the same string that was given as the first argument to the `match()' or `rmatch()'.

The <replacements> list is always nine items long, each item itself being a list of two integers, the start and end indices in <string> matched by some parenthesized sub-pattern of <pattern>.  The first item in <replacements> carries the indices for the first parenthesized sub-pattern, the second item carries those for the second sub-pattern, and so on.  If there are fewer than nine parenthesized sub-patterns in <pattern>, or if some sub-pattern was not used in the match, then the corresponding item in <replacements> is the list {0, -1}.  See the discussion of `%)' in `help regular-expressions'[1], for more information on parenthesized sub-patterns.

    match("foo", "^f*o$")        =>  {}
    match("foo", "^fo*$")        =>  {1, 3, {{0, -1}, ...}, "foo"}
    match("foobar", "o*b")       =>  {2, 4, {{0, -1}, ...}, "foobar"}
    rmatch("foobar", "o*b")      =>  {4, 4, {{0, -1}, ...}, "foobar"}
    match("foobar", "f%(o*%)b")
            =>  {1, 4, {{2, 3}, {0, -1}, ...}, "foobar"}

See `help regular-expressions'[2] for information on the syntax and semantics of patterns.

-----
REGULAR-EXPRESSIONS
===================

Regular expression matching allows you to test whether a string fits into a specific syntactic shape.  You can also search a string for a substring that fits a pattern.

A regular expression describes a set of strings.  The simplest case is one that describes a particular string; for example, the string `foo' when regarded as a regular expression matches `foo' and nothing else.  Nontrivial regular expressions use certain special constructs so that they can match more than one string.  For example, the regular expression `foo%|bar' matches either the string `foo' or the string `bar'; the regular expression `c[ad]*r' matches any of the strings `cr', `car', `cdr', `caar', `cadddar' and all other such strings with any number of `a''s and `d''s.

Regular expressions have a syntax in which a few characters are special constructs and the rest are "ordinary".  An ordinary character is a simple regular expression that matches that character and nothing else.  The special characters are `$', `^', `.', `*', `+', `?', `[', `]' and `%'.  Any other character appearing in a regular expression is ordinary, unless a `%' precedes it.

For example, `f' is not a special character, so it is ordinary, and therefore `f' is a regular expression that matches the string `f' and no other string.  (It does *not*, for example, match the string `ff'.)  Likewise, `o' is a regular expression that matches only `o'.

Any two regular expressions A and B can be concatenated.  The result is a regular expression which matches a string if A matches some amount of the beginning of that string and B matches the rest of the string.

As a simple example, we can concatenate the regular expressions `f' and `o' to get the regular expression `fo', which matches only the string `fo'.  Still trivial.

The following are the characters and character sequences that have special meaning within regular expressions.  Any character not mentioned here is not special; it stands for exactly itself for the purposes of searching and matching.

`.'  is a special character that matches any single character.  Using
     concatenation, we can make regular expressions like `a.b', which matches
     any three-character string that begins with `a' and ends with `b'.

`*'  is not a construct by itself; it is a suffix that means that the preceding
     regular expression is to be repeated as many times as possible.  In `fo*',
     the `*' applies to the `o', so `fo*' matches `f' followed by any number of
     `o''s.

     The case of zero `o''s is allowed: `fo*' does match `f'.

     `*' always applies to the *smallest* possible preceding expression.  Thus,
     `fo*' has a repeating `o', not a repeating `fo'.

     The matcher processes a `*' construct by matching, immediately, as many
     repetitions as can be found.  Then it continues with the rest of the
     pattern.  If that fails, it backtracks, discarding some of the matches of
     the `*''d construct in case that makes it possible to match the rest of
     the pattern.  For example, matching `c[ad]*ar' against the string
     `caddaar', the `[ad]*' first matches `addaa', but this does not allow the
     next `a' in the pattern to match.  So the last of the matches of `[ad]' is
     undone and the following `a' is tried again.  Now it succeeds.

`+'  is like `*' except that at least one match for the preceding pattern is
     required for `+'.  Thus, `c[ad]+r' does not match `cr' but does match
     anything else that `c[ad]*r' would match.

`?'  is like `*' except that it allows either zero or one match for the
     preceding pattern.  Thus, `c[ad]?r' matches `cr' or `car' or `cdr', and
     nothing else.

`[ ... ]'
     `[' begins a "character set", which is terminated by a `]'.  In the
     simplest case, the characters between the two brackets form the set.
     Thus, `[ad]' matches either `a' or `d', and `[ad]*' matches any string of
     `a''s and `d''s (including the empty string), from which it follows that
     `c[ad]*r' matches `car', etc.

     Character ranges can also be included in a character set, by writing two
     characters with a `-' between them.  Thus, `[a-z]' matches any lower-case
     letter.  Ranges may be intermixed freely with individual characters, as in
     `[a-z$%.]', which matches any lower case letter or `$', `%' or period.

     Note that the usual special characters are not special any more inside a
     character set.  A completely different set of special characters exists
     inside character sets: `]', `-' and `^'.

     To include a `]' in a character set, you must make it the first character.
     For example, `[]a]' matches `]' or `a'.  To include a `-', you must use it
     in a context where it cannot possibly indicate a range: that is, as the
     first character, or immediately after a range.

`[^ ... ]'
     `[^' begins a "complement character set", which matches any character
     except the ones specified.  Thus, `[^a-z0-9A-Z]' matches all characters
     *except* letters and digits.

     `^' is not special in a character set unless it is the first character.
     The character following the `^' is treated as if it were first (it may be
     a `-' or a `]').

`^'  is a special character that matches the empty string -- but only if at the
     beginning of the string being matched.  Otherwise it fails to match
     anything.  Thus, `^foo' matches a `foo' which occurs at the beginning of
     the string.

`$'  is similar to `^' but matches only at the *end* of the string.  Thus,
     `xx*$' matches a string of one or more `x''s at the end of the string.

`%'  has two functions: it quotes the above special characters (including `%'),
     and it introduces additional special constructs.

     Because `%' quotes special characters, `%$' is a regular expression that
     matches only `$', and `%[' is a regular expression that matches only `[',
     and so on.

     For the most part, `%' followed by any character matches only that
     character.  However, there are several exceptions: characters that, when
     preceded by `%', are special constructs.  Such characters are always
     ordinary when encountered on their own.

     No new special characters will ever be defined.  All extensions to the
     regular expression syntax are made by defining new two-character
     constructs that begin with `%'.

`%|' specifies an alternative.  Two regular expressions A and B with `%|' in
     between form an expression that matches anything that either A or B will
     match.

     Thus, `foo%|bar' matches either `foo' or `bar' but no other string.

     `%|' applies to the largest possible surrounding expressions.  Only a
     surrounding `%( ... %)' grouping can limit the grouping power of `%|'.

     Full backtracking capability exists for when multiple `%|''s are used.

`%( ... %)'
     is a grouping construct that serves three purposes:

       1. To enclose a set of `%|' alternatives for other operations.  Thus,
          `%(foo%|bar%)x' matches either `foox' or `barx'.

       2. To enclose a complicated expression for a following `*', `+', or `?'
          to operate on.  Thus, `ba%(na%)*' matches `bananana', etc., with any
          number of `na''s, including none.

       3. To mark a matched substring for future reference.

     This last application is not a consequence of the idea of a parenthetical
     grouping; it is a separate feature that happens to be assigned as a second
     meaning to the same `%( ... %)' construct because there is no conflict in
     practice between the two meanings.  Here is an explanation of this
     feature:

`%DIGIT'
     After the end of a `%( ... %)' construct, the matcher remembers the
     beginning and end of the text matched by that construct.  Then, later on
     in the regular expression, you can use `%' followed by DIGIT to mean
     "match the same text matched by the DIGIT'th `%( ... %)' construct in the
     pattern."  The `%( ... %)' constructs are numbered in the order that their
     `%(''s appear in the pattern.

     The strings matching the first nine `%( ... %)' constructs appearing in a
     regular expression are assigned numbers 1 through 9 in order of their
     beginnings.  `%1' through `%9' may be used to refer to the text matched by
     the corresponding `%( ... %)' construct.

     For example, `%(.*%)%1' matches any string that is composed of two
     identical halves.  The `%(.*%)' matches the first half, which may be
     anything, but the `%1' that follows must match the same exact text.

`%b' matches the empty string, but only if it is at the beginning or end of a
     word.  Thus, `%bfoo%b' matches any occurrence of `foo' as a separate word.
     `%bball%(s%|%)%b' matches `ball' or `balls' as a separate word.

     For the purposes of this construct and the five that follow, a word is
     defined to be a sequence of letters and/or digits.

`%B' matches the empty string, provided it is *not* at the beginning or end of
     a word.

`%<' matches the empty string, but only if it is at the beginning of a word.

`%>' matches the empty string, but only if it is at the end of a word.

`%w' matches any word-constituent character (i.e., any letter or digit).

`%W' matches any character that is not a word constituent.

-----
MATCH()
=======

Syntax:  match (str <subject>, str <pattern> [, <case-matters>])   => list
        rmatch (str <subject>, str <pattern> [, <case-matters>])   => list

The function `match()' (`rmatch()') searches for the first (last) occurrence of the regular expression <pattern> in the string <subject>.  If <pattern> is syntactically malformed, then `E_INVARG' is raised.  The process of matching can in some cases consume a great deal of memory in the server; should this memory consumption become excessive, then the matching process is aborted and `E_QUOTA' is raised.

If no match is found, the empty list is returned; otherwise, these functions return a list containing information about the match (see below).  By default, the search ignores upper-/lower-case distinctions.  If <case-matters> is provided and true, then case is treated as significant in all comparisons.

The list that `match()' (`rmatch()') returns contains the details about the match made.  The list is in the form:

    {<start>, <end>, <replacements>, <subject>}

where <start> is the index in <subject> of the beginning of the match, <end> is the index of the end of the match, <replacements> is a list described below, and <subject> is the same string that was given as the first argument to the `match()' or `rmatch()'.

The <replacements> list is always nine items long, each item itself being a list of two integers, the start and end indices in <string> matched by some parenthesized sub-pattern of <pattern>.  The first item in <replacements> carries the indices for the first parenthesized sub-pattern, the second item carries those for the second sub-pattern, and so on.  If there are fewer than nine parenthesized sub-patterns in <pattern>, or if some sub-pattern was not used in the match, then the corresponding item in <replacements> is the list {0, -1}.  See the discussion of `%)' in `help regular-expressions'[1], for more information on parenthesized sub-patterns.

    match("foo", "^f*o$")        =>  {}
    match("foo", "^fo*$")        =>  {1, 3, {{0, -1}, ...}, "foo"}
    match("foobar", "o*b")       =>  {2, 4, {{0, -1}, ...}, "foobar"}
    rmatch("foobar", "o*b")      =>  {4, 4, {{0, -1}, ...}, "foobar"}
    match("foobar", "f%(o*%)b")
            =>  {1, 4, {{2, 3}, {0, -1}, ...}, "foobar"}

See `help regular-expressions'[2] for information on the syntax and semantics of patterns.

0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#509:match_command this none this" name: "MOO verb: #509:match_command this none this" type: moo-code content*: "" _data-tag: 1816572384307
#$#* 1816572384307 content: // Look commands;
#$#* 1816572384307 content: // "l(ook) [[preposition] subject]"
#$#* 1816572384307 content: {command_str} = args;
#$#* 1816572384307 content: str_match = match(command_str, "^l(ook)? *%(.*%)$");
#$#* 1816572384307 content: if (!str_match)
#$#* 1816572384307 content:   return {};
#$#* 1816572384307 content: endif
#$#* 1816572384307 content: rest = command_str[str_match[2][1][1]..-1];
#$#* 1816572384307 content: matches = {};
#$#* 1816572384307 content: for way_of_looking in (this:match_rest(rest))
#$#* 1816572384307 content: endfor
#$#* 1816572384307 content: return matches;
#$#: 1816572384307
Last modified Sat Sep  7 18:16:46 2013 PDT by Crag (#243).
#531:"match_command" this none this
// find all permutations of this command which could match the input string
// :match_command(command_str) =>
//   {{confidence, handler, @parameters}, ...}
// the best match will be invoked as
//   handler:invoke(@parameters);
{command_str} = args;
return {};
Generic Command (#531) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
You see no "$action" here.
Error programming Look Command:match_command[1](0).
Line 16:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
Look Command (#509) [ readable ]
  Child of Generic English Command (#532).
  Location Crag (#243).
  #509:match_command            Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb added [2] (1).
#$#dns-org-mud-moo-simpleedit-content 1519688711 reference: "#509:match_rest ()" name: "MOO verb: #509:match_rest ()" type: moo-code content*: "" _data-tag: 879927344308
#$#: 879927344308
Last modified Sat Sep  7 18:38:09 2013 PDT by Crag (#243).
#509:"match_command" this none this
// Look commands;
//   "l(ook) [[preposition] subject]"
{command_str} = args;
str_match = match(command_str, "^l(ook)? *%(.*%)$");
if (!str_match)
  return {};
endif
rest = command_str[str_match[2][1][1]..-1];
if (!rest)
  return {{10, $action.look}};
endif
matches = {};
for way_of_looking in (this:match_rest(rest))
  {confidence, prep, subject} = way_of_looking;
  matches = {@matches, {confidence, $action.look, {subject, prep}}};
endfor
return matches;
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Achievement       #445   1      1       1
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
The Generic Dictionary        #510   1      1       1
----                          -----  -----  ------  ------
You see no "$match_utils" here.
You see no "$matching_utils" here.
object utilities (#47) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #47:has_property             Core-Wizard (#184)   rxd    this none this
   #47:all_properties           Core-Wizard (#184)   rxd    this none this
   #47:has_verb                 Core-Wizard (#184)   rxd    this none this
   #47:has_callable_verb        Core-Wizard (#184)   rxd    this none this
   #47:all_verbs                Core-Wizard (#184)   rxd    this none this
   #47:match_verb               Core-Wizard (#184)   rxd    this none this
   #47:isa                      Core-Wizard (#184)   rxd    this none this
   #47:ancestors                Core-Wizard (#184)   rxd    this none this
   #47:"descendants descendents" Core-Wizard (#184)  rxd    this none this
   #47:"descendants_suspended descendents_suspended" Core-Wizard (#184) rxd this none this
   #47:ordered_descendants      Core-Wizard (#184)   rxd    this none this
   #47:branches                 unknown hacker (#35) rxd    this none this
   #47:branches_suspended       Core-Wizard (#184)   rxd    this none this
   #47:leaves                   unknown hacker (#35) rxd    this none this
   #47:leaves_suspended         Core-Wizard (#184)   rxd    this none this
   #47:contains                 Core-Wizard (#184)   rxd    this none this
   #47:all_contents             Core-Wizard (#184)   rxd    this none this
   #47:findable_properties      Core-Wizard (#184)   rxd    this none this
   #47:owned_properties         Core-Wizard (#184)   rxd    this none this
   #47:property_conflicts       Core-Wizard (#184)   rx     this none this
   #47:descendants_with_property_suspended Core-Wizard (#184) rx this none this
   #47:locations                Core-Wizard (#184)   rxd    this none this
   #47:"fertile_descendants fertile_descendents" Core-Wizard (#184) rxd this none this
   #47:all_properties_suspended Core-Wizard (#184)   rxd    this none this
   #47:match_verbs(new)         unknown hacker (#35) rx     this none this
   #47:connected                unknown hacker (#35) rxd    this none this
   #47:all_contents_bfs         unknown hacker (#35) rxd    this none this
   #47:match_verbs_named        Core-Wizard (#184)   rxd    this none this
   #47:check_for_legacy         unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
    #1:match                    unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Thu Jan 25 12:17:24 2001 PST by Xplat (#4014) (on Waterpoint).
#1:"match" (string)
whose = #-1;
who_str = "";
first = string[1..(space = index(string, " ")) - 1];
if (rindex(first, "'s") == length(first) - 1)
  whose = this:match(who_str = first[1..$ - 2]);
elseif (rindex(first, "s'") == length(first) - 1)
  whose = this:match(who_str = first[1..$ - 1]);
endif
// this:tell("who_str: ", who_str, " whose: ", whose);
if (valid(whose))
  result = whose:match(string[space + 1..$]);
else
  result = $failed_match;
endif
if (result == $failed_match)
  objects = this:objects_for_match();
  result = $string_utils:match_exact_or_all(string, objects, "name", objects, "aliases");
  result = result || {};
  if (first == "own")
    whose = this;
  endif
  more = {};
  if (length(result) != 1)
    more = $string_utils:match_all(string[space + 1..$], objects, "name", objects, "aliases") || {};
    if (valid(whose))
      for i in (more)
        if (`i.possessor ! E_PROPNF => i.owner' == whose)
          result = setadd(result, i);
        endif
      endfor
    endif
  endif
  // this:tell("more: ", toliteral(more));
  if (!result)
    if (!who_str)
      return $failed_match;
    endif
    folks = {};
    for i in (more)
      folks = setadd(folks, `i.possessor ! E_PROPNF => i.owner');
    endfor
    whose = $string_utils:match(who_str, folks, "name", folks, "aliases");
    if (!valid(whose))
      return whose;
    endif
    notfound = 1;
    for i in (more)
      if (`i.possessor ! E_PROPNF => i.owner' == whose)
        if (notfound)
          notfound = i;
        else
          return $ambiguous_match;
        endif
      endif
    endfor
    return notfound ? $failed_match | notfound;
    return $failed_match;
  elseif (length(result) == 1)
    return result[1];
  else
    return $ambiguous_match;
  endif
endif
return result;
// Copied from root class (#1):match by James (#316) Sun Jun 25 00:09:35 2000 EDT
// Copied from James (#316):match Thu Jan 25 15:17:24 2001 EST
Searching for core verbs containing the string ":match(" ...

#4:@building-o*ptions @buildingo*ptions [+d Core-Wizard (#184)]:  option_pkg = $string_utils:match("@" + what + "-options", this:options_packages(), "command");
#11:get take [+d Core-Wizard (#184)]:    dobj = loc:match(dobjstr = argstr);
#6:@eject [+d Core-Wizard (#184)]:  elseif ($failed_match == (dobj = $string_utils:literal_object(dobjstr)) && $command_utils:object_match_failed(dobj = iobj:match(dobjstr), dobjstr))
#6:@remove-feature @rmfeature @rm-feature [+d Core-Wizard (#184)]:      dobj = $string_utils:match(dobjstr, features, "name", features, "aliases");
#6:options_command [+d Core-Wizard (#184)]:  package = $string_utils:match(category, this:options_packages(), "category");
#6:@edit*# [+d Core-Wizard (#184)]:      editor = $string_utils:match(desire, active, "aliases");
#6:match_help_object [+d unknown hacker (#35)]:    object = $string_utils:match(what, features, "name", features, "aliases");
#6:match_type_object [+d Core-Wizard (#184)]:    return $string_utils:match(args[1], owned, "name", owned, "aliases");
#6:@remove-handler @rmhandler @rm-handler [+d Core-Wizard (#184)]:      dobj = $string_utils:match(dobjstr, handlers, "name", handlers, "aliases");
#38:match_gender match_gender_name match_gender_obj [+d unknown hacker (#35)]:    ret = $string_utils:match(string, genders, "gender_name");
#41:set_aliases [+d unknown hacker (#35)]:      if (!index(a, " ") && (valid(p = $mail_agent:match(a, #-1)) && (p != this && a in p.aliases)))
#42:check_names [+d unknown hacker (#35)]:    elseif (valid(p = $mail_agent:match(a, #-1)) && (p != what && a in p.aliases))
#42:match [+d unknown hacker (#35)]:  ":match(string) => mailing list object in here that matches string.";
#42:match_recipient [+d unknown hacker (#35)]:    return this:match(@args);
#43:parse_recipients [+d unknown hacker (#35)]:    elseif (!$mail_agent:match_failed(md = $mail_agent:match(s), s, cmd_id))
#43:subsc*ribe [+d unknown hacker (#35)]:  elseif ($mail_agent:match_failed(iobj = $mail_agent:match(iobjstr), iobjstr))
#43:unsubsc*ribe [+d unknown hacker (#35)]:  elseif ($mail_agent:match_failed(iobj = $mail_agent:match(iobjstr), iobjstr))
#52:@disown @disinherit [+d Core-Wizard (#184)]:    elseif ($command_utils:object_match_failed(dobj = $string_utils:match(dobjstr, children(iobj), "name", children(iobj), "aliases"), dobjstr))
#52:#* [-d Core-Wizard (#184)]:    what = player:match(whatstr);
#54:match_help_db [+d unknown hacker (#35)]:    return $string_utils:match(name, dblist, "name", dblist, "aliases");
#18:match [+d Core-Wizard (#184)]:  "$string_utils:match(string [, obj-list, prop-name]*)";
#18:match_object [+d Core-Wizard (#184)]:  "This first tries :literal_object(string), \"me\"=>someone,\"here\"=>location, then player:match(string) and finally location:match(string) if location is valid.";
#18:match_room [+d Core-Wizard (#184)]:  matches = $string_utils:match(args[1], rooms, "name", rooms, "aliases");
#9:match_type_object [+d Core-Wizard (#184)]:  return $string_utils:match(args[1], d = $object_utils:leaves(this), "name", d, "aliases");
#126:can_get_from [+d unknown hacker (#35)]:  elseif ((what = this:match(whatstr)) == $nothing)
#7:match_type_object [+d unknown hacker (#35)]:  return this.dest:match(args[1]);
#3:@remove-entrance [+d Core-Wizard (#184)]:  entrance = $string_utils:match(dobjstr, all_entrances, "name", all_entrances, "aliases");
#3:match_type_object [+d unknown hacker (#35)]:    return $string_utils:match(args[1], d = $object_utils:leaves(this), "name", d, "aliases");
#1:match [+d unknown hacker (#35)]:    whose = this:match(who_str = first[1..$ - 2]);
#163:match_group [+d unknown hacker (#35)]:  return $string_utils:match(args[1], groups, "name", groups, "aliases");
#145:look_in [+d unknown hacker (#35)]:  elseif ((thing = this:match(name)) == $failed_match)
#127:init_for_core [+d unknown hacker (#35)]:    this.help_recipient = $mail_agent:match("*Bug-reports");
#133:match_type_object [+d unknown hacker (#35)]:    ret = $string_utils:match(string, handlers, "name", handlers, "aliases");
#170:match_group [+d unknown hacker (#35)]:  return $string_utils:match(args[1], groups, "name", groups, "aliases");
#151:match_feature [-d unknown hacker (#35)]:    ret = $string_utils:match(string, features, "name", features, "aliases");

Total: 35 verbs.
-----
$STRING_UTILS:MATCH
===================

$string_utils:match(string [, obj-list, prop-name]*)

Each obj-list should be a list of objects or a single object, which is treated as if it were a list of that object.  Each prop-name should be string naming a property on every object in the corresponding obj-list.  The value of that property in each case should be either a string or a list of strings.

The argument string is matched against all of the strings in the property values.

If it exactly matches exactly one of them, the object containing that property is returned.  If it exactly matches more than one of them, $ambiguous_match is returned.

If there are no exact matches, then partial matches are considered, ones in which the given string is a prefix of some property string.  Again, if exactly one match is found, the object with that property is returned, and if there is more than one match, $ambiguous_match is returned.

Finally, if there are no exact or partial matches, then $failed_match is returned.

#1:"huh" this none this
cp = caller_perms();
if (!valid(cp))
  if (cp == $nothing)
    cp = player;
  else
    $error:raise(E_PERM);
  endif
endif
set_task_perms(cp);
$command_utils:do_huh(verb, args);
#50:"do_huh" this none this
// :do_huh(verb,args)  what :huh should do by default.
set_task_perms(cp = caller_perms());
verb = args[1];
args = args[2];
bad = "That is not a valid command";
notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
if (valid(player.location))
  dobj = player.location:match_object(dobjstr);
  iobj = player.location:match_object(iobjstr);
endif
if (player:my_huh(verb, args))
  // ... the player found something funky to do ...
elseif (caller:here_huh(verb, args))
  // ... the room found something funky to do ...
elseif (this:extra_huh(verb, args))
  // ... we found something on dobj or iobj
elseif (player:last_huh(verb, args))
  // ... player's second round found something to do ...
  // elseif ($mistake_tracker:handle_failed_command(player, verb, argstr, dobjstr, prepstr, iobjstr, dobj, iobj))
  // ... experimental mistake learner found something to do ...
elseif (dobj == $ambiguous_match)
  // ... from here on, it's all error-reporting.
  if (iobj == $ambiguous_match)
    player:(notify)(tostr(bad, " (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
  else
    player:(notify)(tostr(bad, " (\"", dobjstr, "\" is an ambiguous name)."));
  endif
elseif (iobj == $ambiguous_match)
  player:(notify)(tostr(bad, " (\"", iobjstr, "\" is an ambiguous name)."));
else
  player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args)) || player:(notify)(bad + ".");
endif
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Sat Jun 30 13:32:30 2001 PDT by Xplat (#4014) (on Waterpoint).
#6:"my_huh" this none this
// Extra parsing of player commands.  Called by $command_utils:do_huh.
// This version of my_huh just handles features.
if (!$perm_utils:controls(caller_perms(), this))
  return E_PERM;
endif
// verb - obvious                 pass - would be args
// plist - list of prepspecs that this command matches
// dlist and ilist - likewise for dobjspecs, iobjspecs
verb = args[1];
if (!verb || $string_utils:is_numeric(verb))
  return 0;
endif
pass = args[2];
plist = {"any", prepstr ? $code_utils:full_prep(prepstr) | "none"};
dlist = dobjstr ? {"any"} | {"none", "any"};
ilist = iobjstr ? {"any"} | {"none", "any"};
focus = this.focus_object;
if (`focus:match_command(verb, dlist, plist, ilist) ! E_VERBNF, E_INVIND')
  set_task_perms(this);
  focus:(verb)(@pass);
  return 1;
endif
for fobj in (this:features())
  try
    match = fobj:match_command(verb, dlist, plist, ilist);
  except (E_VERBNF, E_INVIND)
    this:remove_feature(fobj);
  endtry
  if (match)
    set_task_perms(this);
    fobj:(verb)(@pass);
    return 1;
  endif
  if ($command_utils:running_out_of_time())
    player:tell("You have too many features.  Parsing your command runs out of ticks while checking ", fobj:name(), " (", fobj, ").");
    return 1;
  endif
endfor
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Thu Jul 24 10:07:00 2008 PDT by Xplat (#4014) (on Waterpoint).
#3:"here_huh" this none this
// :here_huh(verb,args)  -- room-specific :huh processing.  This should return 1 if it finds something interesting to do and 0 otherwise; see $command_utils:do_huh.
// For the generic room, we check for the case of the caller specifying an exit for which a corresponding verb was never defined.
// If that fails, we check to see if the verb is defined on an exit or other object which can match with player:my_match_object() in the room.
set_task_perms(caller_perms());
verb = args[1];
if (args[2] || $failed_match == (exit = this:match_exit(verb)))
  // ... okay, it's not an exit.  see if it's a verb defined on an exit ...
  if ($server_options.support_numeric_verbname_strings && (!verb || $string_utils:is_numeric(verb)))
    // don't allow numeric verbs below, cuz it's not matching on verb name
    // splat 2002.01.29 -- don't allow null verbs either, although you can't enter them anyway at the moment
    player:tell("That is not a valid command.");
    return 1;
  endif
  dobj = this:match_object(dobjstr);
  iobj = this:match_object(iobjstr);
  for o in ({this, dobj, iobj})
    if (typeof(o) == OBJ && valid(o) && (where = $object_utils:has_callable_verb(o, verb)))
      vargs = verb_args(where[1], verb);
      if (vargs[2] == "any" || (!prepstr && vargs[2] == "none") || index("/" + vargs[2] + "/", "/" + prepstr + "/"))
        if (vargs[1] == "any" || (!dobjstr && vargs[1] == "none") || (dobj == o && vargs[1] == "this"))
          if (vargs[3] == "any" || (!iobjstr && vargs[3] == "none") || (iobj == o && vargs[3] == "this"))
            o:(verb)(@args[2]);
            return 1;
          endif
        endif
      endif
    endif
  endfor
  // ... okay it's not a verb defined on an exit either.  we give up ...
  return 0;
elseif (valid(exit))
  exit:invoke();
elseif (exit == $ambiguous_match)
  // ... ambiguous exit ...
  player:tell("Which direction `", verb, "' do you mean?");
endif
return 1;
You see no "player" here.
#6:"my_match_object" this none this
// :my_match_object(string [,location])
return $string_utils:match_object(@{@args, this.location}[1..2], this);
-----
$STRING_UTILS:MATCH_OBJECT
==========================

:match_object(string,location[,someone])

Returns the object matching the given string for someone, on the assumption that s/he is in the given location.  `someone' defaults to player.

This first tries :literal_object(string), "me"=>someone,"here"=>location, then player:match(string) and finally location:match(string) if location is valid.

This is the default algorithm for use by room :match_object() and player :my_match_object() verbs.  Player verbs that are calling this directly should probably be calling :my_match_object instead.

-----
GENERAL INFORMATION ON $COMMAND_UTILS[1]
========================================

$command_utils is the repository for verbs that are of general usefulness to authors of all sorts of commands.

Detecting and Handling Failures in Matching
-------------------------------------------
:object_match_failed(match_result, name)
    Test whether or not a :match_object() call failed and print messages if so.
:player_match_failed(match_result, name)
    Test whether or not a :match_player() call failed and print messages if so.
:player_match_result(match_results, names)
    ...similar to :player_match_failed, but does a whole list at once.
:room_match_failed(match_result, name)
    Test whether or not a :match_room() call failed and print messages if so.

Reading Input from the Player
-----------------------------
:read()         -- Read one line of input from the player and return it.
:yes_or_no([prompt])
                -- Prompt for and read a `yes' or `no' answer.
:read_lines()   -- Read zero or more lines of input from the player.
:dump_lines(lines) 
                -- Return list of lines quoted so that feeding them to 
                   :read_lines() will reproduce the original lines.

Utilities for Suspending
------------------------
:running_out_of_time()
                -- Return true if we're low on ticks or seconds.
:suspend_if_needed(time)
                -- Suspend (and return true) if we're running out of time.

Client Support for Lengthy Commands
-----------------------------------
:suspend(args)  -- Handle PREFIX and SUFFIX for clients in long commands.

Last modified Sat Sep  7 18:38:09 2013 PDT by Crag (#243).
#509:"match_command" this none this
// Look commands;
//   "l(ook) [[preposition] subject]"
{command_str} = args;
str_match = match(command_str, "^l(ook)? *%(.*%)$");
if (!str_match)
  return {};
endif
rest = command_str[str_match[2][1][1]..-1];
if (!rest)
  return {{10, $action.look}};
endif
matches = {};
for way_of_looking in (this:match_rest(rest))
  {confidence, prep, subject} = way_of_looking;
  matches = {@matches, {confidence, $action.look, {subject, prep}}};
endfor
return matches;
0 errors.
Verb programmed.
The root class(#1) has 24 kids.
name                          dbref  #kids  #verbs  #props
----                          -----  -----  ------  ------
The Guest Log                 #12    0      4       1
Limbo                         #15    0      10      2
The Mail Distribution Center  #42    0      54      2
The Error Generator           #66    0      18      1
The administration            #170   0      12      0
The server options            #188   0      1       20
The checkpointer              #175   0      9       5
The startup handler           #189   0      8       1
The syslog                    #183   0      8       9
The http                      #87    0      18      9
The SMTP                      #212   0      19      8
The FTP                       #230   0      33      8
The link dispatcher tag       #123   0      2       3
The Tag Root                  #91    15     7       1
The Address Root              #109   6      14      1
The Helpful Object            #250   7      1       0
The MCP parent                #251   6      0       0
The Parsing objects           #252   2      0       0
The Text generation objects   #253   5      0       0
The Abstract class            #254   17     0       0
The Generic Achievement       #445   1      1       1
The Generic Command           #531   1      1       0
The Blank Root                #560   2      0       0
The Generic Dictionary        #510   1      1       1
----                          -----  -----  ------  ------
Abstract class (#254) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Abstract class (#254) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
You see nothing special.
server options (#188) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
.fg_ticks                Core-Wizard (#184)    r      900000
.bg_ticks                Core-Wizard (#184)    r      900000
.support_numeric_verbname_strings Core-Wizard (#184) r c 1
.boot_msg                Core-Wizard (#184)    r c    "*** Disconnected ***"
.timeout_msg             Core-Wizard (#184)    r c    "*** Timed-out waiting ..
.recycle_msg             Core-Wizard (#184)    r c    "*** Recycled ***"
.redirect_from_msg       Core-Wizard (#184)    r c    "*** Redirecting connec..
.redirect_to_msg         Core-Wizard (#184)    r c    "*** Redirecting old co..
.connect_msg             Core-Wizard (#184)    r c    "*** Connected ***"
.create_msg              Core-Wizard (#184)    r c    "*** Created ***"
.permit_writable_verbs   Core-Wizard (#184)    r      0
.protect_set_verb_info   Core-Wizard (#184)    r      1
.protect_add_verb        Core-Wizard (#184)    r      1
.protect_verb_code       Core-Wizard (#184)    r      1
.protect_set_verb_code   Core-Wizard (#184)    r      1
.protect_recycle         Core-Wizard (#184)    r      0
.protect_chparent        Core-Wizard (#184)    r      0
.queued_task_limit       Core-Wizard (#184)    r      75
.bg_seconds              Core-Wizard (#184)    r c    5
.fg_seconds              Core-Wizard (#184)    r c    5
-------------------------------- finished ---------------------------------
server options (#188) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #188:set_message              Core-Wizard (#184)   rx     this none this
-------------------------------- finished ---------------------------------
You see nothing special.
That object does not define that verb.
The verb :@d is on   Crag(#243)--generic programmer(#52)   Beaker(#256)--generic programmer(#52)
Object #243 does not define that verb, but its ancestor #52 does.
Last modified Wed Aug 17 14:07:45 2005 PDT by Xplat (#4014) (on Waterpoint).
#52:"@d*isplay" any none none
// @display <object>[.[property]]*[,[inherited_property]]*[:[verb]]*[;[inherited_verb]]*
// null names for properties and verbs are interpreted as meaning all of them.
if (player != this)
  // yet another bandaid for the @shout bug ... :(  --*
  player:tell(E_PERM);
  return E_PERM;
endif
opivu = {{}, {}, {}, {}, {}};
string = "";
punc = 1;
literal = 0;
for jj in [1..length(argstr)]
  j = argstr[jj];
  if (literal)
    string = string + j;
    literal = 0;
  elseif (j == "\\")
    literal = 1;
  elseif (y = index(".,:;", j))
    opivu[punc] = {@opivu[punc], string};
    punc = 1 + y;
    string = "";
  else
    string = string + j;
  endif
endfor
opivu[punc] = {@opivu[punc], string};
objname = opivu[1][1];
it = this:my_match_object(objname);
if ($command_utils:object_match_failed(it, objname))
  return;
endif
readable = it.owner == this || (it.r || this.wizard);
cant = {};
if ("" in opivu[2])
  if (readable)
    prop = properties(it);
  else
    prop = {};
    cant = setadd(cant, it);
  endif
  if (this:display_option("firstancestor"))
    what = it;
    while (!prop && valid(what = parent(what)))
      if (what.owner == this || (what.r || this.wizard))
        prop = properties(what);
      else
        cant = setadd(cant, what);
      endif
    endwhile
  endif
else
  prop = opivu[2];
endif
if ("" in opivu[3])
  inh = {};
  for what in ({it, @$object_utils:ancestors(it)})
    if (what.owner == this || what.r || this.wizard)
      inh = {@inh, @properties(what)};
    else
      cant = setadd(cant, what);
    endif
  endfor
else
  inh = opivu[3];
endif
for q in (inh)
  if (q in properties(it))
    prop = setadd(prop, q);
    inh = setremove(inh, q);
  endif
endfor
vrb = {};
if ("" in opivu[4])
  if (readable)
    vrbs = verbs(it);
  else
    vrbs = {};
    cant = setadd(cant, it);
  endif
  what = it;
  if (this:display_option("firstancestor"))
    while (!vrbs && valid(what = parent(what)))
      if (what.owner == this || (what.r || this.wizard))
        vrbs = verbs(what);
      else
        cant = setadd(cant, what);
      endif
    endwhile
  endif
  for n in [1..length(vrbs)]
    vrb = setadd(vrb, {what, n});
  endfor
else
  for w in (opivu[4])
    if (y = $object_utils:has_verb(it, w))
      vrb = setadd(vrb, {y[1], w});
    else
      this:notify(tostr("No such verb, \"", w, "\""));
    endif
  endfor
endif
if ("" in opivu[5])
  for z in ({it, @$object_utils:ancestors(it)})
    if (this == z.owner || z.r || this.wizard)
      for n in [1..length(verbs(z))]
        vrb = setadd(vrb, {z, n});
      endfor
    else
      cant = setadd(cant, z);
    endif
  endfor
else
  for w in (opivu[5])
    if (typeof(y = $object_utils:has_verb(it, w)) == LIST)
      vrb = setadd(vrb, {y[1], w});
    else
      this:notify(tostr("No such verb, \"", w, "\""));
    endif
  endfor
endif
if ({""} in opivu || opivu[2..5] == {{}, {}, {}, {}})
  this:notify(tostr(it:name(), " (", it, ") [ ", it.r ? "readable " | "", it.w ? "writeable " | "", it.f ? "fertile " | "", is_player(it) ? "(player) " | "", it.programmer ? "programmer " | "", it.wizard ? "wizard " | "", "]"));
  if (it.owner != (is_player(it) ? it | this))
    this:notify(tostr("  Owned by ", valid(p = it.owner) ? p:name() | "** extinct **", " (", p, ")."));
  endif
  this:notify(tostr("  Child of ", valid(p = parent(it)) ? p:name() | "** none **", " (", p, ")."));
  if (it.location != $nothing)
    this:notify(tostr("  Location ", valid(p = it.location) ? p:name() | "** unplace (tell a wizard, fast!) **", " (", p, ")."));
  endif
endif
set_task_perms(this.owner);
blankargs = this:display_option("blank_tnt") ? {"this", "none", "this"} | #-1;
for b in (vrb)
  $command_utils:suspend_if_needed(0);
  {where, q} = b;
  short = typeof(q) == NUM ? q | strsub((y = index(q, " ")) ? q[1..y - 1] | q, "*", "");
  inf = verb_info(where, short);
  if (typeof(inf) == LIST || inf == E_PERM)
    name = typeof(inf) == LIST ? inf[3] | q;
    name = index(name, " ") ? "\"" + name + "\"" | name;
    line = $string_utils:left(tostr($string_utils:right(tostr(where), 6), ":", name, " "), 32);
    if (inf == E_PERM)
      line = line + "   ** unreadable **";
    else
      line = $string_utils:left(tostr(line, inf[1]:name(), " (", inf[1], ") "), 53) + ((i = inf[2] in {"x", "xd", "d", "rd"}) ? {" x", " xd", "  d", "r d"}[i] | inf[2]);
      vargs = verb_args(where, short);
      if (vargs != blankargs)
        if (this:display_option("shortprep") && !(vargs[2] in {"any", "none"}))
          vargs[2] = $code_utils:short_prep(vargs[2]);
        endif
        line = $string_utils:left(line + " ", 60) + $string_utils:from_list(vargs, " ");
      endif
    endif
    this:notify(line);
  elseif (inf == E_VERBNF)
    this:notify(tostr(inf));
    this:notify(tostr("  ** no such verb, \"", short, "\" **"));
  else
    this:notify("This shouldn't ever happen. @display is buggy.");
  endif
endfor
all = {@prop, @inh};
max = length(all) < 4 ? 999 | abs(this.linelen) - 54;
depth = length(all) < 4 ? -1 | 1;
truncate_owner_names = length(all) > 1;
for q in (all)
  $command_utils:suspend_if_needed(0);
  inf = property_info(it, q);
  if (inf == E_PROPNF)
    if (q in $code_utils.builtin_props)
      this:notify(tostr($string_utils:left("," + q, 25), "Built in property ", length(y = $string_utils:from_value(it.(q), 1, depth)) > max ? y[1..max] + ".." | y));
    else
      this:notify(tostr("  ** property not found, \"", q, "\" **"));
    endif
  else
    pname = $string_utils:left(tostr(q in properties(it) ? "." | (is_clear_property(it, q) ? " " | ","), q, " "), 25);
    if (inf == E_PERM)
      this:notify(pname + "   ** unreadable **");
    else
      oname = inf[1]:name();
      truncate_owner_names && (length(oname) > 12 && (oname = oname[1..12]));
      inf[2][1] != "r" && (inf[2][1..0] = " ");
      inf[2][2] != "w" && (inf[2][2..1] = " ");
      this:notify($string_utils:left(tostr($string_utils:left(tostr(pname, oname, " (", inf[1], ") "), 47), inf[2], " "), 54) + $string_utils:print_truncated(it.(q), max, ".."));
    endif
  endif
endfor
if (cant)
  failed = {};
  for k in (cant)
    failed = listappend(failed, tostr(k:name(), " (", k, ")"));
  endfor
  this:notify($string_utils:centre(tostr(" no permission to read ", $string_utils:english_list(failed, ", ", " or ", " or "), ". "), 75, "-"));
else
  this:notify($string_utils:centre(" finished ", 75, "-"));
endif
System Object (#0) [ readable ]
  Owned by Core-Wizard (#184).
  Child of builtin function definitions (#153).
  Location generic room (#3).
    #0:set_verb_code_raw        Wizard (#2)          rxd    this none this
    #0:do_login_command         Core-Wizard (#184)   rxd    this none this
    #0:server_started           Core-Wizard (#184)   rxd    this none this
    #0:init_for_core            Core-Wizard (#184)   rxd    this none this
    #0:do_out_of_band_command   Core-Wizard (#184)   rxd    this none this
    #0:"user_created user_connected" Core-Wizard (#184) rxd this none this
    #0:"user_disconnected user_client_disconnected" Core-Wizard (#184) rxd this none this
    #0:user_reconnected         Core-Wizard (#184)   rxd    this none this
    #0:checkpoint_finished      Core-Wizard (#184)   rxd    this none this
    #0:checkpoint_started       Core-Wizard (#184)   rxd    this none this
    #0:do_command               Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#0:"set_verb_code_raw" this none this
`caller_perms().wizard ! E_INVIND' || raise(E_PERM);
return set_verb_code(@args);
You see no "ne" here.
Carrying:
 a Look Command                          
Look Command (#509) [ readable ]
  Child of Generic English Command (#532).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
,ownership_quota         Quota (#185)                 -10000
-------------------------------- finished ---------------------------------
Crag has a total building quota of 0 bytes.
His total usage was 116,628 as of Sat Sep  7 18:15:21 2013 PDT.
Crag is over quota by 116,628 bytes.
-----
MOVE()
======

Syntax:  move (obj <what>, obj <where>)   => none

Changes <what>'s location to be <where>.  This is a complex process because a number of permissions checks and notifications must be performed.  The actual movement takes place as described in the following paragraphs.

<what> should be a valid object and <where> should be either a valid object or `#-1' (denoting a location of `nowhere'); otherwise `E_INVARG' is raised.  The programmer must be either the owner of <what> or a wizard; otherwise, `E_PERM' is raised.

If <where> is a valid object, then the verb-call

    <where>:accept(<what>)

is performed before any movement takes place.  If the verb returns a false value and the programmer is not a wizard, then <where> is considered to have refused entrance to <what>; `move()' raises `E_NACC'.  If <where> does not define an `accept' verb, then it is treated as if it defined one that always returned false.

If moving <what> into <where> would create a loop in the containment hierarchy (i.e., <what> would contain itself, even indirectly), then `E_RECMOVE' is raised instead.

The `location' property of <what> is changed to be <where>, and the `contents' properties of the old and new locations are modified appropriately.  Let <old-where> be the location of <what> before it was moved.  If <old-where> is a valid object, then the verb-call

    <old-where>:exitfunc(<what>)

is performed and its result is ignored; it is not an error if <old-where> does not define a verb named `exitfunc'.  Finally, if <where> and <what> are still valid objects, and <where> is still the location of <what>, then the verb-call

    <where>:enterfunc(<what>)

is performed and its result is ignored; again, it is not an error if <where> does not define a verb named `enterfunc'.

=> "ACBD18DB4CC2F85CEDEF654FCCC4A4D8"
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
  #243:find_all_commands        Crag (#243)          rxd    this none this
  #243:audit_sys                Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Sep  7 18:12:49 2013 PDT by Crag (#243).
#243:"audit_sys" this none this
seen = {};
for p in (properties(#0))
  o = #0.(p);
  if (typeof(o) == OBJ && valid(o))
    if (o in seen)
      player:tell(toliteral({p, o}));
    endif
    seen = setadd(seen, p);
  endif
endfor
=> {"Language version number: 4", "First line number: 1", "", "Main code vector:", "=================", "[Bytes for labels = 1, literals = 1, forks = 1, variables = 1, stack refs = 1]", "[Maximum stack size = 6]", "  0: 101                   MAKE_EMPTY_LIST", "  1: 052                 * PUT seen", "  2: 111                   POP", "  3: 100 000               PUSH_LITERAL #0", "  5: 016                 * MAKE_SINGLETON_LIST", "  6: 012 082             * CALL_FUNC properties", "  8: 124                   NUM 1", "  9: 005 020 064         * FOR_LIST p 64", " 12: 100 000               PUSH_LITERAL #0", " 14: 087                   PUSH p", " 15: 009                 * GET_PROP", " 16: 053                 * PUT o", " 17: 111                   POP", " 18: 086                   PUSH o", " 19: 016                 * MAKE_SINGLETON_LIST", " 20: 012 069             * CALL_FUNC typeof", " 22: 068                   PUSH OBJ", " 23: 023                 * EQ", " 24: 030 030             * AND 30", " 26: 086                   PUSH o", " 27: 016                 * MAKE_SINGLETON_LIST", " 28: 012 073             * CALL_FUNC valid", " 30: 000 062             * IF 62", " 32: 086                   PUSH o", " 33: 085                   PUSH seen", " 34: 029                 * IN", " 35: 000 052             * IF 52", " 37: 072                   PUSH player", " 38: 100 001               PUSH_LITERAL \"tell\"", " 40: 087                   PUSH p", " 41: 016                 * MAKE_SINGLETON_LIST", " 42: 086                   PUSH o", " 43: 102                   LIST_ADD_TAIL", " 44: 016                 * MAKE_SINGLETON_LIST", " 45: 012 032             * CALL_FUNC toliteral", " 47: 016                 * MAKE_SINGLETON_LIST", " 48: 010                 * CALL_VERB", " 49: 111                   POP", " 50: 107 052               JUMP 52", " 52: 085                   PUSH seen", " 53: 016                 * MAKE_SINGLETON_LIST", " 54: 087                   PUSH p", " 55: 102                   LIST_ADD_TAIL", " 56: 012 023             * CALL_FUNC setadd", " 58: 052                 * PUT seen", " 59: 111                   POP", " 60: 107 062               JUMP 62", " 62: 107 009               JUMP 9", " 64: 123                   NUM 0", " 65: 030 069             * AND 69", " 67: 100 002               PUSH_LITERAL \"Automatically Added Return\"", " 69: 108                   RETURN", " 70: 100 003               PUSH_LITERAL \"Metadata 202106\"", " 72: 111                   POP", " 73: 100 004               PUSH_LITERAL \"Last-Modify: {1378602769, \\\"Crag\\\", #243, \\\"YourMOO\\\"}\"", " 75: 111                   POP", " 76: 110                   DONE"}
{list}
=> 0
Language version number: 4
First line number: 1

Main code vector:
=================
[Bytes for labels = 1, literals = 1, forks = 1, variables = 1, stack refs = 1]
[Maximum stack size = 6]
  0: 101                   MAKE_EMPTY_LIST
  1: 052                 * PUT seen
  2: 111                   POP
  3: 100 000               PUSH_LITERAL #0
  5: 016                 * MAKE_SINGLETON_LIST
  6: 012 082             * CALL_FUNC properties
  8: 124                   NUM 1
  9: 005 020 064         * FOR_LIST p 64
 12: 100 000               PUSH_LITERAL #0
 14: 087                   PUSH p
 15: 009                 * GET_PROP
 16: 053                 * PUT o
 17: 111                   POP
 18: 086                   PUSH o
 19: 016                 * MAKE_SINGLETON_LIST
 20: 012 069             * CALL_FUNC typeof
 22: 068                   PUSH OBJ
 23: 023                 * EQ
 24: 030 030             * AND 30
 26: 086                   PUSH o
 27: 016                 * MAKE_SINGLETON_LIST
 28: 012 073             * CALL_FUNC valid
 30: 000 062             * IF 62
 32: 086                   PUSH o
 33: 085                   PUSH seen
 34: 029                 * IN
 35: 000 052             * IF 52
 37: 072                   PUSH player
 38: 100 001               PUSH_LITERAL "tell"
 40: 087                   PUSH p
 41: 016                 * MAKE_SINGLETON_LIST
 42: 086                   PUSH o
 43: 102                   LIST_ADD_TAIL
 44: 016                 * MAKE_SINGLETON_LIST
 45: 012 032             * CALL_FUNC toliteral
 47: 016                 * MAKE_SINGLETON_LIST
 48: 010                 * CALL_VERB
 49: 111                   POP
 50: 107 052               JUMP 52
 52: 085                   PUSH seen
 53: 016                 * MAKE_SINGLETON_LIST
 54: 087                   PUSH p
 55: 102                   LIST_ADD_TAIL
 56: 012 023             * CALL_FUNC setadd
 58: 052                 * PUT seen
 59: 111                   POP
 60: 107 062               JUMP 62
 62: 107 009               JUMP 9
 64: 123                   NUM 0
 65: 030 069             * AND 69
 67: 100 002               PUSH_LITERAL "Automatically Added Return"
 69: 108                   RETURN
 70: 100 003               PUSH_LITERAL "Metadata 202106"
 72: 111                   POP
 73: 100 004               PUSH_LITERAL "Last-Modify: {1378602769, \"Crag\", #243, \"YourMOO\"}"
 75: 111                   POP
 76: 110                   DONE
=> 0
=> {"seen = {};", "for p in (properties(#0))", "  o = #0.(p);", "  if (typeof(o) == OBJ && valid(o))", "    if (o in seen)", "      player:tell(toliteral({p, o}));", "    endif", "    seen = setadd(seen, p);", "  endif", "endfor"}
Searching for core verbs containing the string "metadata" ...

#153:bf_set_verb_code [+d Core-Wizard (#184)]:  {oldcode, oldmeta} = this:metadata_from_code(oldcode);
#153:bf_verb_code [+d Core-Wizard (#184)]:  if (idx = this:metadata_begin_index(code))
#153:verb_metadata [+d Core-Wizard (#184)]:  "Usage: $verb_metadata(object, verb)";
#153:set_verb_metadata [+d Core-Wizard (#184)]:  "Usage: $set_verb_metadata(o, v, metadata)";
#153:metadata_to_code [+d unknown hacker (#35)]:  ":metadata_to_code(metadata)";
#153:metadata_from_code [+d unknown hacker (#35)]:  if (!(idx = this:metadata_begin_index(code)))
#153:metadata_begin_index [+d unknown hacker (#35)]:    if (line == "\"Metadata 202106\";")
#153:metadata_item [+d unknown hacker (#35)]:  {metadata, name} = args;
#153:set_metadata_item [+d unknown hacker (#35)]:  {metadata, name, value} = args;
#153:set_verb_metadata_item [+d Core-Wizard (#184)]:  "Usage:  :set_verb_metadata_item(object, verb, name, value)";
#153:verb_metadata_item [+d Core-Wizard (#184)]:  "Usage:  :verb_metadata_item(object, verb, name)";
#153:delete_metadata_item [+d Core-Wizard (#184)]:  "Usage:  :delete_metadata_item(metadata, name)";
#153:delete_verb_metadata_item [+d Core-Wizard (#184)]:  "Usage:  :delete_verb_metadata_item(object, verb, name)";
#52:@list*# [+d Core-Wizard (#184)]:    if (lastmodify = $metadata_item($verb_metadata(what, vloc), "Last-Modify"))
#1:init_for_core [+d Core-Wizard (#184)]:        last_modify = $verb_metadata_item(this, vnum, "Last-Modify");

Total: 15 verbs.
=> #153 (builtin function definitions)
builtin function definitions (#153) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic property farm (#206).
  #153:bf_add_verb              Core-Wizard (#184)   rxd    this none this
  #153:bf_set_verb_info         Core-Wizard (#184)   rxd    this none this
  #153:bf_set_verb_code         Core-Wizard (#184)   rxd    this none this
  #153:bf_verb_code             Core-Wizard (#184)   rxd    this none this
  #153:verb_metadata            Core-Wizard (#184)   rxd    this none this
  #153:set_verb_metadata        Core-Wizard (#184)   rxd    this none this
  #153:metadata_to_code         unknown hacker (#35) rxd    this none this
  #153:metadata_from_code       unknown hacker (#35) rxd    this none this
  #153:metadata_begin_index     unknown hacker (#35) rxd    this none this
  #153:metadata_item            unknown hacker (#35) rxd    this none this
  #153:set_metadata_item        unknown hacker (#35) rxd    this none this
  #153:"bf_recycle bf_chparent" Core-Wizard (#184)   rxd    this none this
  #153:_protect_recycle         Core-Wizard (#184)   rxd    this none this
  #153:_protect_chparent        Core-Wizard (#184)   rxd    this none this
  #153:set_verb_metadata_item   Core-Wizard (#184)   rxd    this none this
  #153:verb_metadata_item       Core-Wizard (#184)   rxd    this none this
  #153:delete_metadata_item     Core-Wizard (#184)   rxd    this none this
  #153:delete_verb_metadata_item Core-Wizard (#184)  rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Jan  6 14:43:30 2001 PST by Xplat (#4014) (on Waterpoint).
#153:"bf_set_verb_code" this none this
set_task_perms(caller_perms());
{o, v, code} = args;
if (!code || (code[$] != "return;" && index(code[$], "return ") != 1))
  code = {@code, "return 0 && \"Automatically Added Return\";"};
endif
oldcode = verb_code(o, v);
{oldcode, oldmeta} = this:metadata_from_code(oldcode);
who = caller_perms();
if ($__core_init_phase)
  last_modify = {time(), "core initialization", who, "core"};
else
  last_modify = {time(), who.name, who, $network.moo_name};
endif
newmeta = this:set_metadata_item(oldmeta, "Last-Modify", last_modify);
return set_verb_code(o, v, {@code, @this:metadata_to_code(newmeta)});
-----
HELP ON THE BUILTIN FUNCTION DEFINITIONS
========================================

No help found.

This object has the builtin function wrappers on it.  As such, it is a parent for #0.

bf_add_verb and bf_set_verb_info are wrappers that prevent writable verbs.

bf_set_verb_code, bf_verb_code, verb_metadata, and set_verb_metadata all implement a metadata-in-verb-code system. 

Metadata in this context is an list of {name, value} where name is a string containing no colons and value is an arbitrary MOO value.  The only metadata item automatically updated by the system is Last-Modify which is a list of {last modify time, last modified by}.

Details:

In this system, the metadata is stored as comments at the end of the verb code.  It looks like:

verb code;
verb code;
return;
// Metadata 2021026
// Item: "Value";

Where // signifies comment syntax.  return; is put there by set_verb_code if the verb does not end in return;
System Object (#0) [ readable ]
  Owned by Core-Wizard (#184).
  Child of builtin function definitions (#153).
  Location generic room (#3).
-------------------------------- finished ---------------------------------
Usage:  @create <parent-class> named [name:]alias,...,alias
   or:  @create <parent-class> named name-and-alias,alias,...,alias
#-1 does not exist.
-----
`HELP CREATE' AMBIGUOUS
=======================

Sorry, the topic `create' is ambiguous.  I don't know which of the following topics you mean:

`help @create'[1]       `help create()'[2]      

-----
CREATE()
========

Syntax:  create (obj <parent> [, obj <owner>])   => obj

Creates and returns a new object whose parent is <parent> and whose owner is as described below.  Either the given <parent> object must be `#-1' or valid and fertile (i.e., its `f' bit must be set) or else the programmer must own <parent> or be a wizard; otherwise `E_PERM' is raised.  `E_PERM' is also raised if <owner> is provided and not the same as the programmer, unless the programmer is a wizard.  After the new object is created, its `initialize' verb, if any, is called with no arguments.

The new object is assigned the least non-negative object number that has not yet been used for a created object.  Note that no object number is ever reused, even if the object with that number is recycled.

The owner of the new object is either the programmer (if <owner> is not provided), the new object itself (if <owner> was given as `#-1'), or <owner> (otherwise).

The other built-in properties of the new object are initialized as follows:
    name         ""
    location     #-1
    contents     {}
    programmer   0
    wizard       0
    r            0
    w            0
    f            0
The function `is_player()' returns false for newly created objects.

In addition, the new object inherits all of the other properties on <parent>.  These properties have the same permission bits as on <parent>.  If the `c' permissions bit is set, then the owner of the property on the new object is the same as the owner of the new object itself; otherwise, the owner of the property on the new object is the same as that on <parent>.  The initial value of every inherited property is "clear"; see the description of the built-in function `clear_property()' for details.

If the intended owner of the new object has a property named `ownership_quota' and the value of that property is an integer, then `create()' treats that value as a "quota".  If the quota is less than or equal to zero, then the quota is considered to be exhausted and `create()' raises `E_QUOTA' instead of creating an object.  Otherwise, the quota is decremented and stored back into the `ownership_quota' property as a part of the creation of the new object.

#-1:Input to EVAL, line 4:  Resource limit exceeded
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> -10000
=> #2 (Wizard)
=> -10000
Crag has a total building quota of 0 bytes.
His total usage was 116,628 as of Sat Sep  7 18:15:21 2013 PDT.
Crag is over quota by 116,628 bytes.
[Type a reason for the quota increase or `@abort' to abort the command.]
Crag's quota set to 1000000.
=> -10000
=> 100000
#18:print_with_names, line 16:  Verb not found
... called from #52:print_eval_result (this == #243), line 17
... called from #52:eval eval-d eval+d (this == #243), line 17
(End of traceback)
Objects owned by Crag (from #0 to #580):
 13K #243 Crag                      *[North Vestibule]
  1K #244 generic group             *[Music Room]
  7K #242 Generic Pile               [Nowhere]
 <1K #248 Group Utilities            [Nowhere]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Nowhere]
 <1K #252 Parsing objects            [Nowhere]
 <1K #253 Text generation objects    [Nowhere]
 <1K #254 Abstract class             [Nowhere]
  4K #255 Generic Pilable Thing      [Nowhere]
 <1K #264 adventure party           *[bridge]
  2K #265 Generic Nesting Decoratio  [Nowhere]
  7K #269 Delegator                  [Nowhere]
  1K #270 Delegate                   [Nowhere]
 <1K #271 New Generic Room           [Nowhere]
  1K #279 Room Exit Delegate         [Nowhere]
  3K #280 Generic Table              [Nowhere]
  3K #290 How $staff will notice pe *[butler's desk]
 <1K #291 Generic Virtual Reality O  [Nowhere]
  1K #445 Generic Achievement        [Nowhere]
 <1K #448 Tested Generic Achievemen  [Nowhere]
  1K #510 Generic Dictionary         [Nowhere]
 <1K #511 Beaker's Dictionary        [Nowhere]
  1K #531 Generic Command            [Nowhere]
 <1K #532 Generic English Command    [Nowhere]
 <1K #533 Grouping Command           [Nowhere]
 14K #540 Generic See-through Porta  <invalid>-><invalid>
 26K #558 Cardgame Feature           [Nowhere]
 <1K #560 Blank Root                 [Nowhere]
 <1K #561 Interface                  [Nowhere]
 <1K #562 Class                      [Nowhere]
 <1K #247 Delegation Utilities       [Nowhere]
  6K #574 Clock                     *[Front Parlour]
  2K #504 Source control strategy    [Nowhere]
 <1K #578 contents test             *[Music Room]
 <1K #509 Look Command               [Crag]
-- 36 objects.  Total bytes: 116,628.-----------------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {87335, 1378627200}
.core_names              Core-Wizard (#184)    r c    {"$root", "$root_class"}
-------------------------------- finished ---------------------------------
=> #184 (Core-Wizard)
-----
`HELP CREATE' AMBIGUOUS
=======================

Sorry, the topic `create' is ambiguous.  I don't know which of the following topics you mean:

`help @create'[1]       `help create()'[2]      

-----
CREATE()
========

Syntax:  create (obj <parent> [, obj <owner>])   => obj

Creates and returns a new object whose parent is <parent> and whose owner is as described below.  Either the given <parent> object must be `#-1' or valid and fertile (i.e., its `f' bit must be set) or else the programmer must own <parent> or be a wizard; otherwise `E_PERM' is raised.  `E_PERM' is also raised if <owner> is provided and not the same as the programmer, unless the programmer is a wizard.  After the new object is created, its `initialize' verb, if any, is called with no arguments.

The new object is assigned the least non-negative object number that has not yet been used for a created object.  Note that no object number is ever reused, even if the object with that number is recycled.

The owner of the new object is either the programmer (if <owner> is not provided), the new object itself (if <owner> was given as `#-1'), or <owner> (otherwise).

The other built-in properties of the new object are initialized as follows:
    name         ""
    location     #-1
    contents     {}
    programmer   0
    wizard       0
    r            0
    w            0
    f            0
The function `is_player()' returns false for newly created objects.

In addition, the new object inherits all of the other properties on <parent>.  These properties have the same permission bits as on <parent>.  If the `c' permissions bit is set, then the owner of the property on the new object is the same as the owner of the new object itself; otherwise, the owner of the property on the new object is the same as that on <parent>.  The initial value of every inherited property is "clear"; see the description of the built-in function `clear_property()' for details.

If the intended owner of the new object has a property named `ownership_quota' and the value of that property is an integer, then `create()' treats that value as a "quota".  If the quota is less than or equal to zero, then the quota is considered to be exhausted and `create()' raises `E_QUOTA' instead of creating an object.  Otherwise, the quota is decremented and stored back into the `ownership_quota' property as a part of the creation of the new object.

Line 1:  Unknown built-in function: db_top
1 error.
-----
`HELP DB' AMBIGUOUS
===================

Sorry, the topic `db' is ambiguous.  I don't know which of the following topics you mean:

`help DB Group'[1]      `help db_disk_size()'[2]
`help @dbsize'[3]       

There are 581 valid objects out of 581 allocated object numbers.
=> #581 <invalid>
#18:print_with_names, line 16:  Verb not found
... called from #52:print_eval_result (this == #243), line 17
... called from #52:eval eval-d eval+d (this == #243), line 17
(End of traceback)
Verb not found (#580) [ ]
  Child of ** none ** (#-1).
-------------------------------- finished ---------------------------------
=> "new core root"
Property added with value #580.
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {87335, 1378627200}
.core_names              Core-Wizard (#184)    r c    {"$root", "$root_class"}
-------------------------------- finished ---------------------------------
You now have old core root with object number #581 and parent root class (#1).
The created object is now your current object.
Object #243 does not define that verb, but its ancestor #52 does.
Last modified Sat Jun 29 17:07:27 1996 PDT by Ken (#75) (on JHM).
#52:"@copy @copy-x" any (at/to) any
// Usage:  @copy[-x] source:verbname to target[:verbname]
//   the target verbname, if not given, defaults to that of the source.  If the target verb doesn't already exist, a new verb is installed with the same args, names, code, and permission flags as the source.  Otherwise, the existing target's verb code is overwritten and no other changes are made.
//   @copy-x is like @copy except that any new verb is created with the x flag reset.
// This the poor man's version of multiple inheritance... the main problem is that someone may update the verb you're copying and you'd never know.
set_task_perms(player);
if (!player.programmer)
  player:notify("You need to be a programmer to do this.");
  player:notify("If you want to become a programmer, read help programmer-policy.");
  return;
endif
if (!(from = $code_utils:parse_verbref(dobjstr)) || !iobjstr)
  player:notify(tostr("Usage:  ", verb, " obj:verb to obj:verb"));
  player:notify(tostr("        ", verb, " obj:verb to obj"));
  player:notify(tostr("        ", verb, " obj:verb to :verb"));
  return E_INVARG;
elseif ($command_utils:object_match_failed(fobj = player:my_match_object(from[1]), from[1]))
  return;
elseif (iobjstr[1] == ":")
  to = {fobj, iobjstr[2..length(iobjstr)]};
elseif (!(to = $code_utils:parse_verbref(iobjstr)))
  iobj = player:my_match_object(iobjstr);
  if ($command_utils:object_match_failed(iobj, iobjstr))
    return;
  endif
  to = {iobj, from[2]};
elseif ($command_utils:object_match_failed(tobj = player:my_match_object(to[1]), to[1]))
  return;
else
  to[1] = tobj;
endif
from[1] = fobj;
to_firstname = strsub(to[2][1..index(to[2] + " ", " ") - 1], "*", "") || "*";
if (!(hv = $object_utils:has_verb(to[1], to_firstname)) || hv[1] != to[1])
  try
    info = verb_info(@from);
    vargs = verb_args(@from);
  except v (E_PERM, E_INVARG, E_VERBNF)
    player:notify(tostr("Retrieving ", from[1], ":", from[2], " --> ", v[1]));
    return;
  endtry
  if (!player.wizard)
    info[1] = player;
  endif
  if (verb == "@copy-x")
    // ... make sure this is an unusable copy...
    info[2] = strsub(info[2], "x", "");
    vargs = {"this", "none", "this"};
  endif
  if (from[2] != to[2])
    info[3] = to[2];
  endif
  try
    add_verb(to[1], info, vargs);
  except v (ANY)
    player:notify(tostr("Adding ", to[1], ":", to[2], " --> ", v[2]));
    return;
  endtry
endif
code = verb_code(@from);
owner = verb_info(@from)[1];
if (owner != player)
  code = {@code, tostr("\"Copied from ", from[1]:name_and_number(), ":", from[2], from[1] == owner ? " " | tostr(" by ", player:name_and_number(), " "), ctime(), "\";")};
endif
try
  set_verb_code(to[1], to_firstname, code);
except v (ANY)
  player:notify(tostr("Copying ", from[1], ":", from[2], " to ", to[1], ":", to[2], " --> ", v[1]));
  return;
endtry
player:notify(tostr(to[1], ":", to[2], " code set."));
=> {"initialize", "recycle", "set_name", "name", "titlec namec", "set_aliases", "match", "match_object", "set_description", "description", "look_self", "notify", "tell", "tell_lines", "accept", "moveto", "eject", "is_unlocked_for", "huh", "set_message", "do_examine", "examine_key", "examine_names", "examine_desc", "examine_contents", "examine_verbs", "init_for_core", "contents objects_for_match", "examine_verb_ok", "is_listening", "obvious_verbs hidden_verbs help_verbs", "examine_owner", "announce*_all_but", "visible", "integrate_room_msg integrate_container_msg", "dname*c iname*c", "where_am_i where_are_you", "integrate_in", "name_for_look_self namec_for_look_self", "look_in", "integrate_player_msg", "default_editing", "title", "name_for_tell_contents namec_for_tell_contents", "tell_lines_suspended", "is_hidden_verb", "verb_sub noun_sub adj_sub", "exitfunc", "editing_for", "event_*", "name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number", "add_handler", "_add_handler", "remove_handler", "handlers_event_*", "ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu", "gender gender_name", "set_number set_visible set_integrate_in", "number", "is_plural are_plural plural", "gender_obj", "you", "modname_d", "modname_i", "modname_c", "modname_p", "base_name", "nominate_for_core", "help_text", "modname_u", "modname_titleize", "empty_message", "empty_message_integrate_room empty_message_integrate_container", "modname_in", "acceptable", "modname_v", "modname_#", "modname_l", "get_messages", "get_message", "set_proper set_unique", "call_from_self_*", "name_for", "name_mentioned", "namebuilder_i namebuilder_d", "verb_sub_for noun_sub_for", "ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for", "match_type_object", "clear_for_rebuild", "location", "location_for_caller", "core_names"}
old core root (#581) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Sure you want to recycle the old core root (#581)? [Enter `yes' or `no']
Okay.
That is not a valid command.
Sure you want to recycle the old core root (#581)? [Enter `yes' or `no']
The old core root (#581) recycled.
Property #0.root already exists.
=> #1 (root class)
#6:@co @currentobject @current-object (this == #243), line 19:  Verb not found
(End of traceback)
#18:print_with_names, line 16:  Verb not found
... called from #52:print_eval_result (this == #243), line 17
... called from #52:eval eval-d eval+d (this == #243), line 17
(End of traceback)
=> 0
*** Shutting down: shutdown() called by Crag (#243) ***
