Welcome to IslandMOO

Have a pleasant visit.
*** Connected ***
#$#mcp version: 2.1 to: 2.1
The First Room
This is all there is right now.
Last connected Tue Apr  9 16:54:09 2013 PDT from localhost
#$#mcp-negotiate-can 269516662 package: mcp-negotiate min-version: 1.0 max-version: 2.0
#$#mcp-negotiate-can 269516662 package: mcp-cord min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-can 269516662 package: dns-org-mud-moo-simpleedit min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-end 269516662
The generic thing(#5) has 9 kids.
generic note (#9)   network utils (#82)   generic sittable object (#80)   Registrar (#108)   topic sign (#178)   old FTP (#234)   generic module (#203)   feature object registry (#151)   Recycling Center (#55)
-----
HELP ON THE NETWORK UTILS
=========================

sendmail
========

sendmail(to, subject, @lines)

g*et t*ake
==========

Usage: get/take <thing>
  This allows you to pick up things.

d*rop
=====

Usage: drop <thing>
 This drops things in the room the dropper is in.

gi*ve ha*nd
===========

Usage: give <thing> to <person>
This lets you experience the joy of giving things to others.

@dump-kids
==========

Usage: @dump-kids <parent>
Lists the object hierarchy from parent down

----

generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
.drop_failed_msg         Core-Wizard (#184)    r c    {#69, "do", "You can't ..
.drop_succeeded_msg      Core-Wizard (#184)    r c    {#69, "do", "You drop "..
.odrop_failed_msg        Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
.odrop_succeeded_msg     Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
.otake_succeeded_msg     Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
.otake_failed_msg        Core-Wizard (#184)    r c    ""
.take_succeeded_msg      Core-Wizard (#184)    r c    {#69, "do", "You take "..
.take_failed_msg         Core-Wizard (#184)    r c    {#69, "do", "You can't ..
-------------------------------- finished ---------------------------------
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location first room (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Wed Aug 28 06:08:43 2002 PDT by Xeric (#999) (on Waterpoint).
#5:"help_text" this none this
 1:  all_help = `this.help_text ! E_PROPNF' || {};
 2:  if (typeof(all_help) == STR)
 3:    all_help = {all_help};
 4:  endif
 5:  helpless = {};
 6:  for vrb in (this:help_verbs(player))
 7:    if (typeof(vrb) == LIST)
 8:      vrb = vrb[2];
 9:      if (space = index(vrb, " "))
10:        vrb = vrb[1..space - 1];
11:      endif
12:      vrb = strsub(vrb, "*", "");
13:    endif
14:    if (loc = $object_utils:has_verb(this, vrb))
15:      $command_utils:suspend_if_needed(0);
16:      help = $code_utils:verb_documentation(loc[1], vrb);
17:      if (help)
18:        msg = verb_info(loc[1], vrb)[3];
19:        underline = $string_utils:space(length(msg), "=");
20:        if (all_help)
21:          "all_help = {@all_help, \"\", tostr(this) + \":\" + verb_info(this, vrb)[3], @help};";
22:          all_help = {@all_help, "", msg, underline, "", @help};
23:        else
24:          "all_help = {tostr(this) + \":\" + verb_info(this, vrb)[3], @help};";
25:          all_help = {msg, underline, "", @help};
26:        endif
27:      else
28:        helpless = {@helpless, vrb};
29:      endif
30:    endif
31:  endfor
32:  if (helpless)
33:    if (all_help)
34:      all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
35:    else
36:      return {tostr("Sorry, but no help is avilable on ", name = this:name(), "(", this, ").", "  Try `examine ", name, "'.")};
37:    endif
38:  endif
39:  return all_help ? {@all_help, "", "----"} | {};
Current list options:

-parentheses        Parenthesize expressions in listings only as needed.
-nonumbers          Include line numbers.
-//-comments        Don't mangle comments in verb code
-args-assignment    Suppress assignment of args; do named-arg extraction
+//-comments        Display comment lines with //
Ambiguous option:  n
-----
@LIST-OPTIONS
=============

Syntax:  @list-option
         @list-option <option>

Synonym:  @listoption

The list options customize the behavior of the @list command to your particular taste.  The first form of this command displays all of your display options.  The second form displays just that one option, one of the flags listed below.

The remaining forms of this command are for setting your list options:

         @list-option +<flag>
         @list-option -<flag>
         @list-option !<flag>           (equivalent to -<flag>)

These respectively set and reset the specified flag

-parentheses       Parenthesize expressions in listings only as needed.
+parentheses       Fully parenthesize expressions in listings.
-nonumbers         Include line numbers.
+nonumbers         Omit line numbers.
-//_comments       Don't mangle comments in verb code
+//_comments       Display comment lines with //
-args_assignment   Suppress assignment of args; do named-arg extraction
+args_assignment   Show assignment of args; no named-arg extraction

The option `numbers' is recognized as being the negation of `nonumbers'.

Last modified Wed Aug 28 06:08:43 2002 PDT by Xeric (#999) (on Waterpoint).
#5:"help_text" this none this
 1:  all_help = `this.help_text ! E_PROPNF' || {};
 2:  if (typeof(all_help) == STR)
 3:    all_help = {all_help};
 4:  endif
 5:  helpless = {};
 6:  for vrb in (this:help_verbs(player))
 7:    if (typeof(vrb) == LIST)
 8:      vrb = vrb[2];
 9:      if (space = index(vrb, " "))
10:        vrb = vrb[1..space - 1];
11:      endif
12:      vrb = strsub(vrb, "*", "");
13:    endif
14:    if (loc = $object_utils:has_verb(this, vrb))
15:      $command_utils:suspend_if_needed(0);
16:      help = $code_utils:verb_documentation(loc[1], vrb);
17:      if (help)
18:        msg = verb_info(loc[1], vrb)[3];
19:        underline = $string_utils:space(length(msg), "=");
20:        if (all_help)
21:          // all_help = {@all_help, "", tostr(this) + ":" + verb_info(this, vrb)[3], @help};
22:          all_help = {@all_help, "", msg, underline, "", @help};
23:        else
24:          // all_help = {tostr(this) + ":" + verb_info(this, vrb)[3], @help};
25:          all_help = {msg, underline, "", @help};
26:        endif
27:      else
28:        helpless = {@helpless, vrb};
29:      endif
30:    endif
31:  endfor
32:  if (helpless)
33:    if (all_help)
34:      all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
35:    else
36:      return {tostr("Sorry, but no help is avilable on ", name = this:name(), "(", this, ").", "  Try `examine ", name, "'.")};
37:    endif
38:  endif
39:  return all_help ? {@all_help, "", "----"} | {};
Current list options:

-parentheses        Parenthesize expressions in listings only as needed.
-nonumbers          Include line numbers.
+//-comments        Display comment lines with //
-args-assignment    Suppress assignment of args; do named-arg extraction
+nonumbers          Omit line numbers.
Last modified Wed Aug 28 06:08:43 2002 PDT by Xeric (#999) (on Waterpoint).
#5:"help_text" this none this
all_help = `this.help_text ! E_PROPNF' || {};
if (typeof(all_help) == STR)
  all_help = {all_help};
endif
helpless = {};
for vrb in (this:help_verbs(player))
  if (typeof(vrb) == LIST)
    vrb = vrb[2];
    if (space = index(vrb, " "))
      vrb = vrb[1..space - 1];
    endif
    vrb = strsub(vrb, "*", "");
  endif
  if (loc = $object_utils:has_verb(this, vrb))
    $command_utils:suspend_if_needed(0);
    help = $code_utils:verb_documentation(loc[1], vrb);
    if (help)
      msg = verb_info(loc[1], vrb)[3];
      underline = $string_utils:space(length(msg), "=");
      if (all_help)
        // all_help = {@all_help, "", tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {@all_help, "", msg, underline, "", @help};
      else
        // all_help = {tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {msg, underline, "", @help};
      endif
    else
      helpless = {@helpless, vrb};
    endif
  endif
endfor
if (helpless)
  if (all_help)
    all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
  else
    return {tostr("Sorry, but no help is avilable on ", name = this:name(), "(", this, ").", "  Try `examine ", name, "'.")};
  endif
endif
return all_help ? {@all_help, "", "----"} | {};
=> 1
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
    #5:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
You now have Helpful Object (aka helpful) with object number #250 and parent root class (#1).
Registered the Helpful Object (#250) as $local.helpful.
Your current object is now helpful, a Helpful Object (#250).
=> {"$root_class"}
=> {"$root_class"}
=> #1 (root class)
#250:help_text code set.
Parent changed.
Verb #5:help_text [8] {this none this} removed.
The generic thing(#5) has 9 kids.
generic note (#9)   network utils (#82)   generic sittable object (#80)   Registrar (#108)   topic sign (#178)   old FTP (#234)   generic module (#203)   feature object registry (#151)   Recycling Center (#55)
Parent changed.
Parent changed.
Parent changed.
Parent changed.
Parent changed.
-----
HELP ON THE FEATURE OBJECT REGISTRY
===================================

open
====

Open the registry to the table of contents.

close
=====

Close the registry.

write enter
===========

Add a feature object to the registry.

turn open
=========

Turn the registry to a given page.

read
====

Read the current page, or open it if it's closed.

read
====

Read the current page, or open it if it's closed.

@dump-kids
==========

Usage: @dump-kids <parent>
Lists the object hierarchy from parent down

----

The generic thing(#5) has 4 kids.
generic note (#9)   generic sittable object (#80)   topic sign (#178)   Recycling Center (#55)
Parent changed.
Moved.
generic thing (#5)
  generic note (#9)
  generic sittable object (#80)
    generic piece of furniture (#81)
      leather couch (#245)
  topic sign (#178)
The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)   Helpful Object (#250)
Login Commands (#10) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
-----
$LOGIN
======

This object manages command parsing for unconnected players and governs the initiation of an actual connection.  There are verbs pertaining to registration, controlling player creation, and doing site-locks (see `help blacklist'[1] on $wiz_help).

COMMANDS FOR UNCONNECTED PLAYERS
--------------------------------

Recall that for each line that an unconnected player types, the server parses that line into words (the same way normal commands are parsed into a list of words that is then assigned to `args') and then #0:do_login_command is called.

  :parse_command (@args) => {verb, @args}
    given the sequence of arguments that were fed to #0:do_login_command
    this returns the name of a verb on $login to be called together with a 
    list of arguments to be passed to it.

By default this just returns args iff args[1] names an actual verb on $login that is +x and has args {"any","none","any"}.  Otherwise, it returns one of

  .blank_command   -- verb to call if command line is empty
  .bogus_command   -- verb to call if command line otherwise unintelligible

In both cases :parse_command returns a verbname followed by the entire args list passed to it (including the would-be verb at the beginning if any).

Currently the following verbs are availabe to non-connected players

  h*elp @h*elp       -- print .welcome_message
  ?                  -- print a short list of available commands
  w*ho @w*ho         -- print a list of logged in players (excluding wizards)
  co*nnect @co*nnect -- connect to an existing player
  cr*eate @cr*eate   -- create a new player
  up*time @up*time   -- tell how long the server has been running
  version @version   -- tell which version of the server is running
  q*uit @q*uit       -- logoff

Adding a new command is fairly straightforward; just create a verb on $login, making sure a previous verb doesn't already match the name you want to give it.  Then give it args of "any" "none "any" and make sure it is +x.  Such a verb should begin with `if (caller != #0) return E_PERM; ...' so as to prevent anyone other from a not-logged-in player from making use of it.

CUSTOMIZATIONS
--------------

  .welcome_message 
    -- the message for "help" to print.
  .create_enabled 
    == 0 => @create prints .registration_string if one tries to use it
    == 1 => anyone from a non-blacklisted site (see `help blacklist')
            may use @create to make a new player

  .registration_address
    -- an email address for character creation requests
  .registration_string  
    -- string to print to players to give them information about how to get 
       a character created for them, .registration_address is substituted 
       for %e, % for %%
  .newt_registration_string
    -- string to print to @newted players (see `help @newt').
       same substitutions as for .registration_string.

  .sitematch_guests
    -- use $country_db to connect guests from ".fr" as "French guest", etc.

OTHER VERBS
-----------

   :registration_string()      => .registration_string with substitutions
   :newt_registration_string() => .newt_registration_string with substitutions
   :player_creation_enabled(connection) 
       decides whether someone on connection should be allowed to create 
       a player.  If you decide this shouldn't depend strictly on the blacklist
       and on the value of .create_enabled, here's where the extra code can go.
   :check_for_shutdown()
       prints a warning message to append to the login banner in the event 
       that the server will be going down soon.
   :check_player_db()
       prints a warning message to append to the login banner in the event 
       that $player_db is being reloaded to warn players that their character
       names might not be recognized.

SITE LOCKS
----------

See `help blacklist'[2].

Login Commands (#10) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
.welcome_message         Core-Wizard (#184)    r c    {"Welcome to IslandMOO"..
.newt_registration_string Core-Wizard (#184)   r c    "Your character is temp..
.registration_string     Core-Wizard (#184)    r c    0
.registration_address    Core-Wizard (#184)    r c    ""
.create_enabled          Core-Wizard (#184)    r c    1
.bogus_command           Core-Wizard (#184)    r      "?"
.blank_command           Core-Wizard (#184)    r      "help"
.graylist                Core-Wizard (#184)           {{}, {}}
.blacklist               Core-Wizard (#184)           {{}, {}}
.redlist                 Core-Wizard (#184)           {{}, {}}
.spooflist               Core-Wizard (#184)           {{}, {}}
.bootlist                Core-Wizard (#184)           {}
.newted                  Core-Wizard (#184)           {}
.sitematch_guests        Core-Wizard (#184)    r c    1
.testers                 Core-Wizard (#184)    r      {}
.max_guests              Core-Wizard (#184)    r      4
.registration_text       Core-Wizard (#184)    r c    0
.who_enabled             Core-Wizard (#184)    r c    1
.request_enabled         Core-Wizard (#184)    r c    0
.preferred_registration_method Core-Wizard (#184) r c "any"
-------------------------------- finished ---------------------------------
Line 1:  Unknown built-in function: has_property
1 error.
-----
PROPERTY_INFO()
===============

Syntax:  property_info (obj <object>, str <prop-name>)              => list
     set_property_info (obj <object>, str <prop-name>, list <info>) => none

These two functions get and set (respectively) the owner and permission bits for the property named <prop-name> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> has no non-built-in property named <prop-name>, then `E_PROPNF' is raised.  If the programmer does not have read (write) permission on the property in question, then `property_info()' (`set_property_info()') raises `E_PERM'.  Property info has the following form:

    {<owner>, <perms> [, <new-name>]}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', and `c', and <new-name> is a string; <new-name> is never part of the value returned by `property_info()', but it may optionally be given as part of the value provided to `set_property_info()'.  This list is the kind of value returned by `property_info()' and expected as the third argument to `set_property_info()'; the latter function raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or, when <new-name> is given, if <prop-name> is not defined directly on <object> or <new-name> names an existing property defined on <object> or any of its ancestors or descendants.

Generic Feature Object
Generic BigList Utilities
room matching utilities
you
Registrar
generic piece of furniture
=> 0
Generic Feature Object (#65) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Generic Feature Object (#65) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
.feature_verbs           unknown hack (#35)    r c    {"using"}
.feature_ok              unknown hack (#35)    r      0
.commands                unknown hack (#35)    r      {"@reg*ister @unreg*ist..
.registry                unknown hack (#35)    r      #151
.help_text               unknown hack (#35)    r c    "The Generic Feature Ob..
-------------------------------- finished ---------------------------------
-----
HELP ON THE GENERIC FEATURE OBJECT
==================================

The Generic Feature Object--not to be used as a feature object.

using this
==========

Proper usage for the Generic Feature Object:

Make a short description.  The :look_msg automatically includes a pointer to `help <this object>', so you don't have to.

Put a list of the commands you want people to use in <this object>.feature_verbs.  When someone types `help <this object>', they will be told the comment strings from each of the verbs named in .feature_verbs.

When you add or remove command verbs, you'll have to `@fix-commands <this object>' before they will be recognized correctly.

When you're ready, `@reg <this object>' to enter it in the feature registry.

=> {}
Generic Feature Object (#65) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
   #65:look_self                unknown hacker (#35) rxd    this none this
   #65:"using this"             unknown hacker (#35) rxd    this none this
   #65:examine_commands_ok      unknown hacker (#35) rxd    this none this
   #65:"@fix-commands @fix_commands" Core-Wizard (#184) rx  this none none
   #65:set_commands             unknown hacker (#35) rx     this none this
   #65:match_command            unknown hacker (#35) rx     this none this
   #65:moveto                   unknown hacker (#35) rxd    this none this
   #65:initialize               unknown hacker (#35) rx     this none this
   #65:set_feature_ok           unknown hacker (#35) rxd    this none this
   #65:obvious_verbs            Core-Wizard (#184)   rxd    this none this
   #65:examine_verb_ok          unknown hacker (#35) rxd    this none this
   #65:"@reg*ister @unreg*ister" Core-Wizard (#184)  rxd    this none none
   #65:match_type_object        unknown hacker (#35) rxd    this none this
   #65:nominate_for_core        Core-Wizard (#184)   rx     this none this
   #65:help_text                unknown hacker (#35) rx     this none this
   #65:recycle                  Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#65:"help_text" this none this
// Definition from #79
all_help = $string_utils:pronoun_sub(this.help_text) || {};
if (typeof(all_help) == STR)
  all_help = {all_help};
endif
helpless = {};
for vrb in (this:obvious_verbs(player))
  if (typeof(vrb) == LIST)
    vrb = vrb[2];
  endif
  if (loc = $object_utils:has_verb(this, vrb))
    help = $code_utils:verb_documentation(this, vrb);
    if (help)
      if (all_help)
        msg = verb_info(this, vrb)[3];
        underline = $string_utils:space(length(msg), "=");
        all_help = {@all_help, "", msg, underline, "", @help};
      else
        msg = verb_info(this, vrb)[3];
        underline = $string_utils:space(length(msg), "=");
        all_help = {msg, underline, "", @help};
      endif
    else
      helpless = {@helpless, vrb};
    endif
  endif
endfor
if (helpless)
  if (all_help)
    all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
  else
    return {"Sorry, but no help is available on " + this:name() + "(" + tostr(this) + ")." + "Try `examine " + this:name() + "'."};
  endif
endif
// return {@all_help, "----"};
return all_help;
The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)   Helpful Object (#250)
generic cord stub (#222) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #222:recycle                  Core-Wizard (#184)   rx     this none this
  #222:closed                   Core-Wizard (#184)   rxd    this none this
  #222:send                     Core-Wizard (#184)   rxd    this none this
  #222:close                    Core-Wizard (#184)   rxd    this none this
  #222:user                     Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
generic cord stub (#222) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
.id                      Core-Wizard (#184)           0
.our_side                Core-Wizard (#184)    r      #-1
.connection              Core-Wizard (#184)    r c    0
.type                    Core-Wizard (#184)    r      #-1
.session                 Core-Wizard (#184)    r      #-1
.user                    Core-Wizard (#184)    r      #-1
-------------------------------- finished ---------------------------------
-----
HELP ON THE GENERIC CORD STUB
=============================

No help found.

Last modified Fri May 15 13:10:39 1998 PDT by Xythian (#199) (on Waterpoint).
#222:"recycle" this none this
// Usage:  :recycle()
// 
$cord:cleanup(this);
return pass(@args);
Cord Dispatcher (#223) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
.root                    Core-Wizard (#184)    r c    #222
.next_id                 Core-Wizard (#184)           1
.registry                Core-Wizard (#184)    r      {}
.type_root               Core-Wizard (#184)    r      #218
.registry_ids            Core-Wizard (#184)    r      {}
-------------------------------- finished ---------------------------------
Cord Dispatcher (#223) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #223:open                     Core-Wizard (#184)   rxd    this none this
  #223:lookup                   Core-Wizard (#184)   rxd    this none this
  #223:mcp_receive              Core-Wizard (#184)   rxd    this none this
  #223:mcp_closed               Core-Wizard (#184)   rxd    this none this
  #223:closed                   Core-Wizard (#184)   rxd    this none this
  #223:cleanup                  Core-Wizard (#184)   rx     this none this
  #223:connection               Core-Wizard (#184)   rxd    this none this
  #223:module_finish_unpack     Core-Wizard (#184)   rxd    this none this
  #223:init_for_module          Core-Wizard (#184)   rxd    this none this
  #223:nominate_for_core        unknown hacker (#35) rxd    this none this
  #223:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
-----
HELP ON THE CORD DISPATCHER
===========================

No help found.

-----
`HELP CORD' NOT FOUND
=====================

Sorry, but no help is available on `cord'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Last modified Wed Sep 18 18:28:32 2002 PDT by Xythian (#199) (on Waterpoint).
#223:"open" this none this
// Usage:  :open(connection, type) => cord
// 
// Open a cord between the calling object and something at the other end of the is_player() object given by `connection'.  Return the stub object representing the cord, or raise or return an error.
{connection, type} = args;
if (!valid(session = $mcp:session_for(connection, type.parent_package)))
  return E_INVARG;
elseif (!session:handles_package($mcp.cord))
  return E_INVARG;
elseif (!session:handles_package(type.parent_package))
  return E_INVARG;
elseif (!$object_utils:isa(type, this.type_root))
  return E_INVARG;
endif
cord = $recycler:_create(type.cord_class);
if (typeof(cord) == ERR)
  return $error:raise_or_return(cord);
endif
cord.type = type;
cord.id = tostr("I", this.next_id);
cord.our_side = caller;
// ask `connection' whether it's willing to put up with a new cord.
if (!`session:cord_open(cord, caller) ! E_VERBNF => 1')
  $recycler:_recycle(cord);
  raise(E_PERM);
endif
cord.session = session;
cord.connection = connection;
cord.user = connection;
res = $mcp.cord:send_open(session, cord.id, $mcp.cord:type_name(type), {"objnum", tostr(cord)});
if (typeof(res) == ERR)
  $recycler:_recycle(cord);
  return $error:raise_or_return(res);
endif
this.next_id = this.next_id + 1;
this.registry_ids = {tostr(cord.id), @this.registry_ids};
this.registry = {cord, @this.registry};
return cord;
Cord Dispatcher (#223) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #223:open                     Core-Wizard (#184)   rxd    this none this
  #223:lookup                   Core-Wizard (#184)   rxd    this none this
  #223:mcp_receive              Core-Wizard (#184)   rxd    this none this
  #223:mcp_closed               Core-Wizard (#184)   rxd    this none this
  #223:closed                   Core-Wizard (#184)   rxd    this none this
  #223:cleanup                  Core-Wizard (#184)   rx     this none this
  #223:connection               Core-Wizard (#184)   rxd    this none this
  #223:module_finish_unpack     Core-Wizard (#184)   rxd    this none this
  #223:init_for_module          Core-Wizard (#184)   rxd    this none this
  #223:nominate_for_core        unknown hacker (#35) rxd    this none this
  #223:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Fri May 15 13:10:39 1998 PDT by Xythian (#199) (on Waterpoint).
#223:"connection" (cord)
// Usage:  :connection(cord)
// 
if (caller != cord.our_side)
  return $error:raise_or_return(E_PERM);
endif
return cord.connection;
Cord Dispatcher (#223) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
.root                    Core-Wizard (#184)    r c    #222
.next_id                 Core-Wizard (#184)           1
.registry                Core-Wizard (#184)    r      {}
.type_root               Core-Wizard (#184)    r      #218
.registry_ids            Core-Wizard (#184)    r      {}
-------------------------------- finished ---------------------------------
=> #223 (Cord Dispatcher)
generic cord stub (#222) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
The generic cord stub(#222) has no kids.
=> {"$root_class", "$modules.mcp.obj_cord_stub", "$cord.root"}
Cord Dispatcher (#223) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #223:open                     Core-Wizard (#184)   rxd    this none this
  #223:lookup                   Core-Wizard (#184)   rxd    this none this
  #223:mcp_receive              Core-Wizard (#184)   rxd    this none this
  #223:mcp_closed               Core-Wizard (#184)   rxd    this none this
  #223:closed                   Core-Wizard (#184)   rxd    this none this
  #223:cleanup                  Core-Wizard (#184)   rx     this none this
  #223:connection               Core-Wizard (#184)   rxd    this none this
  #223:module_finish_unpack     Core-Wizard (#184)   rxd    this none this
  #223:init_for_module          Core-Wizard (#184)   rxd    this none this
  #223:nominate_for_core        unknown hacker (#35) rxd    this none this
  #223:init_for_core            Core-Wizard (#184)   rxd    this none this
.root                    Core-Wizard (#184)    r c    #222
-------------------------------- finished ---------------------------------
Your current object is now $cord.root, the generic cord stub (#222).
generic cord stub (#222) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #222:recycle                  Core-Wizard (#184)   rx     this none this
  #222:closed                   Core-Wizard (#184)   rxd    this none this
  #222:send                     Core-Wizard (#184)   rxd    this none this
  #222:close                    Core-Wizard (#184)   rxd    this none this
  #222:user                     Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Fri May 15 13:10:39 1998 PDT by Xythian (#199) (on Waterpoint).
#222:"send" this none this
// Usage:  :send(msg, @posargs, @keywordargs)
// 
// Send the given message across this cord.  The first N arguments should be given in order, where N is the number of required arguments defined for the message.  Additional arguments, if any, should be provided as {keyword, value} pairs.
// 
// Examples:
//   :send("edit", "#123.foo", {"Hi!"})
//   :send("edit", "#123:foo", {"Hi!"}, {"type", "MOO-Code"})
{msg, @rest} = args;
if (caller != this.our_side)
  //  raise(E_PERM);
endif
return $mcp.cord:cord_send(msg, this.type:parse_send_args(@args));
The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)   Helpful Object (#250)
You now have MCP parent with object number #251 and parent root class (#1).
Your current object is now MCP parent, a MCP parent (#251).
Parent changed.
Parent changed.
Parent changed.
Parent changed.
The root class(#1) has 45 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)   Helpful Object (#250)   MCP parent (#251)
Parent changed.
Parent changed.
FTP (#230) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
  #230:get_reply                Core-Wizard (#184)   rxd    this none this
  #230:decode_reply             Core-Wizard (#184)   rxd    this none this
  #230:send                     Core-Wizard (#184)   rxd    this none this
  #230:_open_connection         Core-Wizard (#184)   rxd    this none this
  #230:_close_connection        Core-Wizard (#184)   rxd    this none this
  #230:open                     Core-Wizard (#184)   rxd    this none this
  #230:trusts                   Core-Wizard (#184)   rxd    this none this
  #230:login                    Core-Wizard (#184)   rxd    this none this
  #230:close                    Core-Wizard (#184)   rxd    this none this
  #230:send_USER                Core-Wizard (#184)   rxd    this none this
  #230:send_PASS                Core-Wizard (#184)   rxd    this none this
  #230:"send_CWD send_CDUP"     Core-Wizard (#184)   rxd    this none this
  #230:_set_info                Core-Wizard (#184)   rxd    this none this
  #230:_get_info                Core-Wizard (#184)   rxd    this none this
  #230:"send_SMNT send_REIN send_ALLO send_PORT" Core-Wizard (#184) rxd this none this
  #230:send_QUIT                Core-Wizard (#184)   rxd    this none this
  #230:send_PASV                Core-Wizard (#184)   rxd    this none this
  #230:"send_MODE send_TYPE send_STRU" Core-Wizard (#184) rxd this none this
  #230:open_data_connection     Core-Wizard (#184)   rxd    this none this
  #230:close_data_connection    Core-Wizard (#184)   rxd    this none this
  #230:"send_STOR send_STOU send_APPE send_RETR" Core-Wizard (#184) rxd this none this
  #230:_delete_info             Core-Wizard (#184)   rxd    this none this
  #230:data_send                Core-Wizard (#184)   rxd    this none this
  #230:data_read                Core-Wizard (#184)   rxd    this none this
  #230:"get get_binary"         Core-Wizard (#184)   rxd    this none this
  #230:"put put_binary"         Core-Wizard (#184)   rxd    this none this
  #230:parse_url                unknown hacker (#35) rxd    this none this
  #230:"anonymous_username anonymous_password" Core-Wizard (#184) rxd this none this
  #230:"begin_put begin_put_binary" Core-Wizard (#184) rxd  this none this
  #230:"finish_put finish_get"  Core-Wizard (#184)   rxd    this none this
  #230:"begin_get begin_get_binary" Core-Wizard (#184) rxd  this none this
  #230:init_for_module          Core-Wizard (#184)   rxd    this none this
  #230:module_finish_unpack     Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
-----
HELP ON THE FTP
===============

No help found.

FTP (#230) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
.responses               Core-Wizard (#184)    r      {{"110", "MARK %1 = %2"..
.error                   Core-Wizard (#184)    r      "FTP error"
.debugging               Core-Wizard (#184)    r      0
.error_code              Core-Wizard (#184)    r      "FTP error code"
._connections            Core-Wizard (#184)           {}
.trusts                  Core-Wizard (#184)    r      {}
.anonymous_username      Core-Wizard (#184)    r      "anonymous"
.anonymous_password      Core-Wizard (#184)    r      "joe@"
-------------------------------- finished ---------------------------------
The root class(#1) has 43 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)   Helpful Object (#250)   MCP parent (#251)
You see no "$here" here.
here (#180) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
,core_names              unknown hacker (#35)  r c    {"$root_class", "$english.here"}
-------------------------------- finished ---------------------------------
here (#180) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
  #180:modname_in               unknown hacker (#35) rxd    this none this
  #180:look_self                unknown hacker (#35) rx     this none this
-------------------------------- finished ---------------------------------
English Utilities (#72) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
-------------------------------- finished ---------------------------------
English Utilities (#72) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
.vowels                  unknown hack (#35)    r c    {"a", "e", "i", "o", "u"}
.vowel_exceptions        unknown hack (#35)    r c    {"usu", "uke", "uvu", "..
.nonvowel_exceptions     unknown hack (#35)    r c    {"historic", "ydu", "ho..
.capitalize_exceptions   unknown hack (#35)    r c    {"the", "a", "an", "and..
.alphabet                unknown hack (#35)    r c    "abcdefghijklmnopqrstuv..
.noun_exceptions         unknown hack (#35)    r c    {{"child", "children"},..
.letter_names            unknown hack (#35)    r c    {"ay", "bee", "see", "d..
.cardinal_directions     unknown hack (#35)    r c    {"north", "northeast", ..
.verb_exceptions         unknown hack (#35)    r c    {{"has", "have"}, {"is"..
.cardinal_direction_opposites unknown hack (#35) r c  {"south", "southwest", ..
.here                    unknown hack (#35)    r c    #180
.all                     unknown hack (#35)    r c    #103
.everything              unknown hack (#35)    r c    #139
.suggestions_recipient   Core-Wizard (#184)    r      #2
.selector_words          unknown hack (#35)    r c    {"all", "everything", "..
.directional_prepositions unknown hack (#35)   r c    {"toward", "into", "out..
-------------------------------- finished ---------------------------------
The root class(#1) has 43 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)   Helpful Object (#250)   MCP parent (#251)
server options (#188) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
.fg_ticks                Core-Wizard (#184)    r      900000
.bg_ticks                Core-Wizard (#184)    r      900000
.support_numeric_verbname_strings Core-Wizard (#184) r c 1
.boot_msg                Core-Wizard (#184)    r c    "*** Disconnected ***"
.timeout_msg             Core-Wizard (#184)    r c    "*** Timed-out waiting ..
.recycle_msg             Core-Wizard (#184)    r c    "*** Recycled ***"
.redirect_from_msg       Core-Wizard (#184)    r c    "*** Redirecting connec..
.redirect_to_msg         Core-Wizard (#184)    r c    "*** Redirecting old co..
.connect_msg             Core-Wizard (#184)    r c    "*** Connected ***"
.create_msg              Core-Wizard (#184)    r c    "*** Created ***"
.permit_writable_verbs   Core-Wizard (#184)    r      0
.protect_set_verb_info   Core-Wizard (#184)    r      1
.protect_add_verb        Core-Wizard (#184)    r      1
.protect_verb_code       Core-Wizard (#184)    r      1
.protect_set_verb_code   Core-Wizard (#184)    r      1
.protect_recycle         Core-Wizard (#184)    r      0
.protect_chparent        Core-Wizard (#184)    r      0
.queued_task_limit       Core-Wizard (#184)    r      75
.bg_seconds              Core-Wizard (#184)    r c    5
.fg_seconds              Core-Wizard (#184)    r c    5
-------------------------------- finished ---------------------------------
generic name builder (#240) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
  #240:modname                  unknown hacker (#35) rxd    this none this
  #240:mentioned                unknown hacker (#35) rxd    this none this
  #240:for_pre                  unknown hacker (#35) rxd    this none this
  #240:for_post                 unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic name builder (#240) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Last modified Sun Jul 24 18:39:56 2005 PDT by James (#316) (on Waterpoint).
#240:"modname" this none this
// Usage: modname(<what>, <name>, <flag>, ...)
// 
// Modifies <name> according to the action of <flag>.  It is assumed that the name in question belongs to <what>.
return args[1]:("modname_" + args[3])(args[2], @args[4..$]);
Last modified Sun Jul 24 18:44:58 2005 PDT by James (#316) (on Waterpoint).
#240:"mentioned" this none this
// Usage: mentioned(<aforementioned>, <what>, <flag>, ...)
// 
// Figures out which additional objects are mentioned when the flag <flag> is applied to <what>'s name.  'Mentioned' here means 'may require rephrasing when taken as the viewpoint.'.  Once those are figured out, they should be added to <aforementioned> and the lot returned.
return args[1];
The generic name builder(#240) has 3 kids.
namebuilder_i for #1 (#227)   namebuilder_d for #1 (#239)   dummy name builder (#236)
namebuilder_i for #1 (#227) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic name builder (#240).
  #227:modname                  unknown hacker (#35) rxd    this none this
  #227:mentioned                unknown hacker (#35) rxd    this none this
  #227:for_pre                  unknown hacker (#35) rxd    this none this
  #227:for_post                 unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sun Jul 24 20:48:09 2005 PDT by Xplat (#4014) (on Waterpoint).
#227:"mentioned" this none this
// Usage:  :modname_i(<name>,[<adj>])
// 
// Returns <name> prepended with proper indefinite article (e.g. "a").
// 
// The (optional) <adj>ective will be inserted between the article and the name.
// 
// Relevant properties on this:
// 
//   * .proper == 1 if this is a proper noun (e.g. John or Pittsburgh)
//   * .possessor == <possessing object> if this's name includes a possessive (e.g. John's car)
//   * :possessor() will be used, if it exists.
//   * .indef_art == definite article to use instead of "a" (e.g. "lots of" money)
//   * :indef_art() will be used, if it exists.
// 
// Also, if this.unique == 1 then this:modname_d(@args) will be returned instead (e.g. "the" System Object instead of "a" System Object).
{mentioned, what, flag, ?adj = ""} = args;
if (what.unique)
  namebuilder_d = $name_utils:find_builders(what, {{"d", @args[4..$]}})[1];
  return namebuilder_d[1]:mentioned(mentioned, what, @namebuilder_d[2..$]);
endif
if (what.proper && !adj)
elseif ($recycler:valid(pos = `$code_utils:verb_or_property(what, "possessor") ! E_PROPNF => #-1') && (ret = `pos:name_mentioned(mentioned, "pi") ! E_VERBNF => mentioned'))
  mentioned = ret;
elseif (typeof(ret = `$code_utils:verb_or_property(what, "indef_art_mentioned", mentioned) ! E_PROPNF') == LIST)
  mentioned = ret;
endif
return mentioned;
// Copied from root class (#1):dname by James (#2142) Sun Sep  4 21:25:07 1994 EDT
// Copied from naming test object (#373):modname_i by Erik (#74) Thu Sep 22 17:35:36 1994 EDT
// Copied from root class (#1):modname_i by Xplat (#4014) Sun Jul 24 11:32:38 2005 PDT
// Copied from root class (#1):modname_i_for by Xplat (#4014) Sun Jul 24 12:44:02 2005 PDT
// Copied from root class (#1):mentionedname_i by James (#316) Sun Jul 24 14:56:57 2005 PDT
The root class(#1) has 43 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)   Helpful Object (#250)   MCP parent (#251)
administration (#170) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
administration (#170) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
  #170:"groups_helpme groups_register_other groups_register_other_as groups_check_registration_other groups_set_registration_other" unknown hacker (#35) rxd this none this
  #170:ok_gag_announce          unknown hacker (#35) rxd    this none this
  #170:"ok_check_registration_other ok_set_registration_other" unknown hacker (#35) rxd this none this
  #170:groups_shout             unknown hacker (#35) rxd    this none this
  #170:ok_shout                 unknown hacker (#35) rxd    this none this
  #170:in_any_group             unknown hacker (#35) rxd    this none this
  #170:members_groups           unknown hacker (#35) rxd    this none this
  #170:"member_term members_term" unknown hacker (#35) rxd  this none this
  #170:all_groups               unknown hacker (#35) rxd    this none this
  #170:match_group              unknown hacker (#35) rxd    this none this
  #170:group_match_failed       unknown hacker (#35) rxd    this none this
  #170:help_references          unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
-----
HELP ON THE GROUP UTILITIES
===========================

No help found.

-----
`HELP GROUPS' NOT FOUND
=======================

Sorry, but no help is available on `groups'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
Available Help Indices
======================

wiz-index[1]
      Wizard Help Topics
prog-index[2]
      Programmer Help Topics
builtin-index[3]
      Server Built-in Functions
core-index[4]
      Core Utility Help Topics
jtext-index[5]
      Jtext Help Topics
mcp-index[6]
      MCP help topics
tkmoo-index[7]
      tkmoo help topics
unicode-index[8]
      Server Unicode Built-in Functions
policy-index[9]
      policy help database
admin-index[10]
      administration group help
gen-index[11]
      General Help Topics

full-index[12]
      EVERYTHING

-----
ADMIN-INDEX -- NOT FOUND
========================

Administration group help thinks it knows about `admin-index' but something's messed up.

Please tell a documenter.

-----
GENERAL HELP TOPICS
===================

![1]                    "[2]                    '[3]
+[4]                    ++[5]                   @911[6]
:[7]                    ::[8]                   ?[9]
_[10]                   @add-entrance[11]       @add-exit[12]
@add-feature[13]        @add-owned[14]          @addalias[15]
@administrators[16]     @admins[17]             alias[18]
aliases[19]             @aliases[20]            @answer[21]
@audit[22]              @auditdb[23]            author_feature[24]
@boot[25]               @boot![26]              @bug[27]
building[28]            character[29]           characters[30]
@check[31]              @co[32]                 commands[33]
@comment[34]            common_quota[35]        communication[36]
communications[37]      container-messages[38]  containers[39]
@contents[40]           @count[41]              creation[42]
current-object[43]      @current-object[44]     @currentobject[45]
decrypt[46]             delete[47]              @describe[48]
descriptions[49]        doing[50]               drop[51]
@dump[52]               @edit[53]               @edit-options[54]
@edito[55]              @editoptions[56]        editors[57]
@eject[58]              email[59]               emote[60]
encrypt[61]             @entrances[62]          erase[63]
examine[64]             @examine[65]            exit-messages[66]
@exits[67]              features[68]            @features[69]
following[70]           @forward[71]            @forward-me[72]
full-index[73]          @gag[74]                @gagged[75]
gagging[76]             @gaglist[77]            gen-index[78]
gender[79]              @gender[80]             get[81]
getting-started[82]     give[83]                go[84]
@go[85]                 @grant[86]              @gripe[87]
hand[88]                help[89]                help-format[90]
@helpme[91]             home[92]                @idea[93]
idle[94]                idling[95]              index[96]
information[97]         insert[98]              introduction[99]
inventory[100]          join[101]               @join[102]
key-representation[103]                         keys[104]
known_dbs[105]          @lastlog[106]           @linelength[107]
@listgag[108]           @locations[109]         @lock[110]
@lock_for_open[111]     locking[112]            look[113]
mail[114]               @mail[115]              mail-forwarding[116]
@mail-options[117]      @mailoptions[118]       manipulation[119]
me[120]                 @memory[121]            message-sequences[122]
messages[123]           @messages[124]          miscellaneous[125]
@more[126]              @move[127]              movement[128]
name[129]               naming[130]             @netforward[131]
news[132]               @next[133]              @nn[134]
@notedit[135]           notes[136]              @opacity[137]
@options[138]           page[139]               @pagelength[140]
@paranoid[141]          @parents[142]           @password[143]
@peek[144]              @popo[145]              @popobject[146]
@prev[147]              privacy[148]            programming[149]
pronouns[150]           @pusho[151]             @pushobject[152]
put[153]                @qsend[154]             @quicksend[155]
@quit[156]              @quota[157]             read[158]
@read[159]              @recycle[160]           @register[161]
registration[162]       reidle[163]             remove[164]
@remove-entrance[165]   @remove-exit[166]       @remove-feature[167]
@rename[168]            @renumber[169]          @reply[170]
@resend[171]            @resident[172]          @rmalias[173]
@rmmail[174]            @rn[175]                room-messages[176]
rooms[177]              say[178]                security[179]
@send[180]              @sethome[181]           @skip[182]
@sort-owned[183]        spoofing[184]           @subscribe[185]
@subscribed[186]        @suggest[187]           summary[188]
@swapo[189]             @swapobject[190]        @sweep[191]
take[192]               teleportation[193]      thing-messages[194]
throw[195]              time-stamp[196]         time-stamping[197]
time-stamps[198]        timestamping[199]       timestamps[200]
topics[201]             topology[202]           tstamp[203]
two-letter-spec[204]    @typo[205]              @ungag[206]
@unlock[207]            @unlock_for_open[208]   @unrmmail[209]
@unsubscribe[210]       @unsubscribed[211]      @uptime[212]
@verify-owned[213]      @version[214]           walk[215]
whereis[216]            whisper[217]            @who[218]
@who-options[219]       @whooptions[220]        wizard-list[221]
wizards[222]            @wrap[223]              write[224]
zombie-messages[225]    

-----
Available Help Indices
======================

wiz-index[1]
      Wizard Help Topics
prog-index[2]
      Programmer Help Topics
builtin-index[3]
      Server Built-in Functions
core-index[4]
      Core Utility Help Topics
jtext-index[5]
      Jtext Help Topics
mcp-index[6]
      MCP help topics
tkmoo-index[7]
      tkmoo help topics
unicode-index[8]
      Server Unicode Built-in Functions
policy-index[9]
      policy help database
admin-index[10]
      administration group help
gen-index[11]
      General Help Topics

full-index[12]
      EVERYTHING

-----
TKMOO HELP TOPICS
=================

tkmoo[1]                tkmoo-goals[2]          tkmoo-index[3]
tkmoo-installation[4]   tkmoo-internals[5]      tkmoo-setup[6]
tkmoo-usage[7]          tkmoo-versions[8]       

-----
TKMOO
=====

tkmoo is a MOO client for the X window system, written in Tcl and using the Tk widget kit.  The tkmoo documentation is divided into the following sections:

tkmoo-goals[1]
      What's the point?
tkmoo-installation[2]
      How to get tkmoo built on your system
tkmoo-setup[3]
      How to set up and configure tkmoo
tkmoo-usage[4]
      Using tkmoo
tkmoo-internals[5]
      Extending tkmoo 
tkmoo-versions[6]
      Release history

-----
GOALS OF TKMOO
==============

Early in January of 1993, the jtext system (see `help jtext-intro'[1]) was getting off the ground.  From the beginning, we were planning to build clients that could display richtext---text with attributes such as boldfacing, links and headers.  

At the time, emacs couldn't do this very well, and I didn't want to relearn elisp.  I found the Tk kit's excellent text widget, which seemed a good fit to what I wanted to do.

tkmoo was originally my squash court for playing with jtext, and that continues to be its primary charter.  The future direction of this part has changed from the display of styled text (which mostly works) to display of documents, however.

tkmoo is also a testbed for MCP, the MOO Client Protocol (see `help mcp'[2]).

Finally, tkmoo is a vehicle for experimenting with GUIs for other MOO resources.  Other Tk applications can interact with the MOO session.  I have blue-sky plans to implement MOO building tools in a direct manipulation style rather than the clunky TinyMUD-style @-commands.

The root class(#1) has 43 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)   Helpful Object (#250)   MCP parent (#251)
$generic_help
$generic_db
$mail_recipient
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
$root_class
=> 0
Generic Help Database (#30)
New Generic Database (#79)
Generic Mail Recipient (#41)
Generic Option Package (#60)
Generic Feature Object (#65)
generic admin group (#163)
generic event dispatching object (#110)
generic utilities (#146)
generic event handler (#133)
generic gender object (#64)
Generic BigList Resident (#75)
generic property farm (#206)
Generic Pronoun_sub Translator (#73)
generic name builder (#240)
generic source or sink (#196)
generic message dispatch object (#219)
generic listener (#224)
generic daemon service handler (#210)
generic group (#244)
=> 0
Login Commands (#10)
Player Last_huh Verbs (#11)
Guest Log (#12)
Limbo (#15)
Mail Distribution Center (#42)
Error Generator (#66)
pronoun substitution (#69)
everything (#139)
all (#103)
administration (#170)
server options (#188)
checkpointer (#175)
startup handler (#189)
syslog (#183)
http (#87)
SMTP (#212)
FTP (#230)
link dispatcher tag (#123)
here (#180)
Tag Root (#91)
Address Root (#109)
name-subbing dummy object (#132)
Helpful Object (#250)
MCP parent (#251)
=> 0
You now have Parsing objects with object number #252 and parent root class (#1).
Your current object is now parsing objects, a Parsing objects (#252).
Parent changed.
Parent changed.
You now have Text generation objects with object number #253 and parent root class (#1).
Your current object is now Text, a Text generation objects (#253).
Parent changed.
Parent changed.
Parent changed.
Parent changed.
Parent changed.
Guest Log (#12)
Limbo (#15)
Mail Distribution Center (#42)
Error Generator (#66)
administration (#170)
server options (#188)
checkpointer (#175)
startup handler (#189)
syslog (#183)
http (#87)
SMTP (#212)
FTP (#230)
link dispatcher tag (#123)
Tag Root (#91)
Address Root (#109)
Helpful Object (#250)
MCP parent (#251)
Parsing objects (#252)
Text generation objects (#253)
=> 0
administration (#170) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
administration (#170) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
  #170:"groups_helpme groups_register_other groups_register_other_as groups_check_registration_other groups_set_registration_other" unknown hacker (#35) rxd this none this
  #170:ok_gag_announce          unknown hacker (#35) rxd    this none this
  #170:"ok_check_registration_other ok_set_registration_other" unknown hacker (#35) rxd this none this
  #170:groups_shout             unknown hacker (#35) rxd    this none this
  #170:ok_shout                 unknown hacker (#35) rxd    this none this
  #170:in_any_group             unknown hacker (#35) rxd    this none this
  #170:members_groups           unknown hacker (#35) rxd    this none this
  #170:"member_term members_term" unknown hacker (#35) rxd  this none this
  #170:all_groups               unknown hacker (#35) rxd    this none this
  #170:match_group              unknown hacker (#35) rxd    this none this
  #170:group_match_failed       unknown hacker (#35) rxd    this none this
  #170:help_references          unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
administration (#170) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Last modified Wed Aug 15 08:06:14 2001 PDT by splat (#3024) (on JHM).
#170:"all_groups" this none this
return $object_utils:descendants($admin_group);
administration (#170)
=> {"$root_class", "$admin"}
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           First room                    0 seconds                         

Total: 1 person, who has been active recently.
The root class(#1) has 38 kids.
Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   Tag Root (#91)   Address Root (#109)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)   Helpful Object (#250)   MCP parent (#251)   Parsing objects (#252)   Text generation objects (#253)
Guest Log (#12)
Limbo (#15)
Mail Distribution Center (#42)
Error Generator (#66)
administration (#170)
server options (#188)
checkpointer (#175)
startup handler (#189)
syslog (#183)
http (#87)
SMTP (#212)
FTP (#230)
link dispatcher tag (#123)
Tag Root (#91)
Address Root (#109)
Helpful Object (#250)
MCP parent (#251)
Parsing objects (#252)
Text generation objects (#253)
=> 0
Generic Help Database (#30)
New Generic Database (#79)
Generic Mail Recipient (#41)
Generic Option Package (#60)
Generic Feature Object (#65)
generic admin group (#163)
generic event dispatching object (#110)
generic utilities (#146)
generic event handler (#133)
generic gender object (#64)
Generic BigList Resident (#75)
generic property farm (#206)
Generic Pronoun_sub Translator (#73)
generic name builder (#240)
generic source or sink (#196)
generic message dispatch object (#219)
generic listener (#224)
generic daemon service handler (#210)
generic group (#244)
=> 0
You now have Abstract class with object number #254 and parent root class (#1).
-----
CHPARENT()
==========

Syntax:  chparent (obj <object>, obj <new-parent>)   => none

Changes the parent of <object> to be <new-parent>.  If <object> is not valid, or if <new-parent> is neither valid nor equal to `#-1', then `E_INVARG' is raised.  If the programmer is neither a wizard or the owner of <object>, or if <new-parent> is not fertile (i.e., its `f' bit is not set) and the programmer is neither the owner of <new-parent> nor a wizard, then `E_PERM' is raised.  If <new-parent> is equal to `object' or one of its current ancestors, `E_RECMOVE' is raised.  If <object> or one of its descendants defines a property with the same name as one defined either on <new-parent> or on one of its ancestors, then `E_INVARG' is raised.

Changing an object's parent can have the effect of removing some properties from and adding some other properties to that object and all of its descendants (i.e., its children and its children's children, etc.).  Let <common> be the nearest ancestor that <object> and <new-parent> have in common before the parent of <object> is changed.  Then all properties defined by ancestors of <object> under <common> (that is, those ancestors of <object> that are in turn descendants of <common>) are removed from <object> and all of its descendants.  All properties defined by <new-parent> or its ancestors under <common> are added to <object> and all of its descendants.  As with `create()', the newly-added properties are given the same permission bits as they have on <new-parent>, the owner of each added property is either the owner of the object it's added to (if the `c' permissions bit is set) or the owner of that property on <new-parent>, and the value of each added property is "clear"; see the description of the built-in function `clear_property()' for details.  All properties that are not removed or added in the reparenting process are completely unchanged.

If <new-parent> is equal to `#-1', then <object> is given no parent at all; it becomes a new root of the parent/child hierarchy.  In this case, all formerly inherited properties on <object> are simply removed.

Generic Help Database (#30)
New Generic Database (#79)
Generic Mail Recipient (#41)
Generic Option Package (#60)
Generic Feature Object (#65)
generic admin group (#163)
generic event dispatching object (#110)
generic utilities (#146)
generic event handler (#133)
generic gender object (#64)
Generic BigList Resident (#75)
generic property farm (#206)
Generic Pronoun_sub Translator (#73)
generic name builder (#240)
generic source or sink (#196)
generic message dispatch object (#219)
generic listener (#224)
generic daemon service handler (#210)
generic group (#244)
=> 0
The root class(#1) has 20 kids.
Guest Log (#12)   Limbo (#15)   Mail Distribution Center (#42)   Error Generator (#66)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   http (#87)   SMTP (#212)   FTP (#230)   link dispatcher tag (#123)   Tag Root (#91)   Address Root (#109)   Helpful Object (#250)   MCP parent (#251)   Parsing objects (#252)   Text generation objects (#253)   Abstract class (#254)
generic thing (#5)   Helpful Object (#250)   root class (#1)
Objects owned by Crag (from #0 to #254):
  8K #243 Crag                      *[first room]
  1K #245 leather couch              [Nowhere]
  1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
-- 11 objects.  Total bytes: 18,920.------------------------------------------
The First Room
This is all there is right now.
You see no "my couch" here.
A leather couch materializes out of thin air, moved by Crag.
Moved.
Your current object is Text, a Text generation objects (#253).
You now have Generic Pilable Thing with object number #255 and parent generic thing (#5).
The generic thing(#5) has 4 kids.
generic note (#9)   generic sittable object (#80)   topic sign (#178)   Generic Pilable Thing (#255)
That is not a valid command.
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of Helpful Object (#250).
  Location generic room (#3).
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Your current object is now a Generic Pilable Thing (#255).
Verb added [1] (0).
You see no "$pile" here.
.pile                    Crag (#243)           r      #242
-------------------------------- finished ---------------------------------
-----
@REGISTER
=========

Usage:  @register [<someone>]
        @register <someone> as <email-address>[ <commentary>]

Check or update an email address.

The first form just tells you the person's email address.  It works only if you are that person or are on the community group (see `help cg'[1]), or if the person has made eir address public (with `@miscoption +public_email').  It may also tell you about others registered to the same address.

The second form will change the database entry, assign a new password, and mail the new password to the given email address.

Most people can only register themselves, and can't provide commentary (additional text that's stored with the email address).  Community group members can register others and add comments.

This is different from the @request/@register command for guests.

-----
$LOCAL:@REGISTER
================

@register <object> on $local

Add a property to $local with the name as you specify on the command line and the value the matching object.  The name should be a legal MOO identifier so that no quoting is necessary when refering to it from verbs.  You may have to give the object an additional suitable alias before registering it.

Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Alias "pilable" added to Generic Pilable Thing(#255).
Aliases for Generic Pilable Thing(#255) are now {"Generic Pilable Thing", "pilable"}
Registered the Generic Pilable Thing (#255) as $local.pilable.
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
.pile                    Crag (#243)           r      #242
-------------------------------- finished ---------------------------------
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
  #193:"@reg*ister @@reg*ister" unknown hacker (#35) rxd    any on top of/on/onto/upon this
  #193:"@unreg*ister @@unreg*ister" unknown hacker (#35) rxd any on top of/on/onto/upon this
  #193:add_property             Core-Wizard (#184)   rxd    this none this
  #193:delete_property          Core-Wizard (#184)   rxd    this none this
  #193:description              unknown hacker (#35) rxd    this none this
  #193:init_for_core            unknown hacker (#35) rx     this none this
  #193:non_core_properties      unknown hacker (#35) rxd    this none this
  #193:help_text                Core-Wizard (#184)   rxd    this none this
.pile                    Crag (#243)           r      #242
-------------------------------- finished ---------------------------------
You see no "@local" here.
Your current object is now $local.pile (#242).
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
You see no "_^" here.
Generic Pile (#242) [ readable ]
  Child of generic group (#244).
  Location Crag (#243).
  ** property not found, "^" **
-------------------------------- finished ---------------------------------
Verb added [1] (0).
Your current object is now #255.
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
You see no "$huh" here.
Player Last_huh Verbs (#11) [ readable ]
  Owned by Core-Wizard (#184).
  Child of Parsing objects (#252).
   #11:@*                       Core-Wizard (#184)   rxd    this none this
   #11:"give hand"              Core-Wizard (#184)   rxd    this none this
   #11:"get take"               Core-Wizard (#184)   rxd    this none this
   #11:drop                     Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#11:"give hand" this none this
// {last_huh}  give any to any
// a give "verb" that works for non-$things.
set_task_perms(caller_perms());
if (dobj == $nothing)
  player:tell("What do you want to give?");
elseif (iobj == $nothing)
  player:tell("To whom/what do you want to give it?");
elseif ($command_utils:object_match_failed(dobj, dobjstr) || $command_utils:object_match_failed(iobj, iobjstr))
  // ...lose...
elseif (dobj.location != player)
  player:tell("You don't have that!");
elseif (iobj.location != player.location)
  player:tell("You see no ", iobj:name(), " here.");
else
  dobj:moveto(iobj);
  if (dobj.location == iobj)
    player:tell("You give ", dobj:dname(), " to ", iobj:dname(), ".");
    iobj:tell(player:dnamec(), " ", player:verb_sub("gives"), " you ", dobj:iname(), ".");
    player.location:announce_all_but({player, iobj}, player:dnamec(), " ", player:verb_sub("hands"), " ", iobj:dname(), " ", dobj:iname(), ".");
  else
    player:tell("Either that doesn't want to be given away or ", iobj:dname(), " ", iobj:verb_sub("doesn't"), " want it.");
  endif
endif
You see no "$1" here.
Last modified Mon Jan  1 08:04:56 2001 PST by splat (#4014) (on Waterpoint).
#1:"moveto" this none this
// you'd think this would have a security check
set_task_perms(this.owner);
// RAISEME
return `move(this, args[1]) ! ANY';
Beaker has connected.
Usage: @prog <object>:<verb> [<dobj> <prep> <iobj>]
Now ignoring code for beaker.
[Type lines of input; use `.' to end or `@abort' to abort the command.]
Verb code ignored.
Beaker is now a programmer.  Eir quota is currently 0.
Beaker and the other admins have been notified.
Beaker is now a programmer.
[Type a reason for the quota increase or `@abort' to abort the command.]
Beaker's quota set to 500000.
Carrying:
 a Generic Pile                          a Parsing objects
 some Group Utilities                    a Text generation objects
 a jar                                   an Abstract class
 a MCP parent                            a Generic Pilable Thing
=> {#242, #248, #249, #251, #252, #253, #254, #255}
=> #255 (Generic Pilable Thing)
You drop the Generic Pile.
=> {#248, #249, #251, #252, #253, #254, #255}
You take the Generic Pile.
=> {#248, #249, #251, #252, #253, #254, #255, #242}
You drop the jar.
You take the jar.
=> {#248, #251, #252, #253, #254, #255, #242, #249}
stormagnet has connected.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
That is not a valid command.
You say, " " /quote '.tf/prefs.tf"
You say, " " NOPE"
That is not a valid command.
-----
`HELP PASTE' NOT FOUND
======================

Sorry, but no help is available on `paste'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

You now have Robert's TF settings with object number #259 and parent generic note (#9).
-----
HELP ON THE GENERIC NOTE
========================

mailme
======

Usage:  mailme <note>
  uses the 'internet mail' object
  sends the text of this note to your REAL internet email address.
  This only works for players who have a valid registration .email_address

read-new
========

Copied from jtext note (#701):read by Jay (#88) Wed Apr 20 13:04:10 1994 EDT

g*et t*ake
==========

Usage: get/take <thing>
  This allows you to pick up things.

d*rop
=====

Usage: drop <thing>
 This drops things in the room the dropper is in.

gi*ve ha*nd
===========

Usage: give <thing> to <person>
This lets you experience the joy of giving things to others.

@dump-kids
==========

Usage: @dump-kids <parent>
Lists the object hierarchy from parent down

No help found on read, erase, write, delete, encrypt, decrypt, or show.

----

#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#259.text" name: "Robert's TF settings.text" type: string-list content*: "" _data-tag: 198517496815
#$#: 198517496815
Set text property of the Robert's TF settings (#259).
It appears to be blank.
That is not a valid command.
-----
There appears to be some writing on the note ...

ROBERT'S TF SETTINGS
====================

/wrapspace 1
/isize 5
/ptime 0
/quiet off
/visual on
/more on
/set redef=on
/histsize 100000
/unset DISPLAY

(You finish reading.)
You drop the Robert's TF settings.
=> "\""
stormagnet drops a Wind-Up Duck.
stormagnet winds up the Wind-Up Duck.
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:@dump-kids               Crag (#243)          rxd    this none none
-------------------------------- finished ---------------------------------
That object does not define that verb.
Verb added [92] (91).
Now programming root class:location[92](91).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Verb added [93] (92).
Now programming root class:location_for_caller[93](92).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Last modified Sat Apr 20 14:11:23 2013 PDT by Crag (#243).
#1:"location" this none this
return this.location;
Now programming root class:location[92](91).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
=> {#248, #251, #252, #253, #254, #255, #242, #249}
=> #70 (first room)
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
#1:"contents objects_for_match" this none this
// Returns a list of the objects that are apparently inside this one.  Don't confuse this with .contents, which is a property kept consistent with .location by the server.  This verb should be used in `VR' situations, for instance when looking in a room, and does not necessarily have anything to do with the value of .contents (although the default implementation does).  `Non-VR' commands (like @contents) should look directly at .contents.
return this.contents;
The verb :contents is on   Crag(#243)--root class(#1)   first room(#70)--root class(#1)   leather couch(#245)--root class(#1)   Beaker(#256)--root class(#1)   stormagnet(#246)--root class(#1)   Robert's TF settings(#259)--root class(#1)   Wind-Up Duck(#261)--root class(#1)   Group Utilities(#248)--root class(#1)   MCP parent(#251)--root class(#1)   Parsing objects(#252)--root class(#1)   Text generation objects(#253)--root class(#1)   Abstract class(#254)--root class(#1)   Generic Pilable Thing(#255)--root class(#1)   Generic Pile(#242)--root class(#1)   jar(#249)--root class(#1)   Stage-Talk Feature(#67)--root class(#1)   Thinking Feature(#68)--root class(#1)
=> {"core_objects"}
Line 1:  syntax error
1 error.
Limbo (#15)
feature object registry (#151)
=> 0
#15:"contents" this none this
return {};
#151:"contents" this none this
// The contents page.
// It would be nice to have chapters for categories or something.
header = this:contents_header_msg();
underline = $string_utils:space(length(header), "-");
if (!(features = this:features()))
  contents = {this:no_contents_msg()};
else
  contents = this:feature_list_lines(player, features);
endif
return {header, underline, "", @contents};
Line 1:  syntax error
1 error.
=> {"Table of Contents", "-----------------", "", "Community Group Commands                Stage-Talk Feature", "documentation feature                   Thinking Feature", "login watcher mark 2                    "}
Searching for core verbs containing the string ":contents" ...

#6:@add-feature @addfeature [+d Core-Wizard (#184)]:    "\"for c in ($feature.warehouse:contents())\";";
#6:@who [+d Core-Wizard (#184)]:    if (!(plyrs = $set_utils:intersection(room:contents(), $code_utils:players())))
#52:find_verbs_on [+d unknown hacker (#35)]:  return {this, this.location, @valid(this.location) ? this.location:contents() | {}, @this:contents(), @this:features()};
#52:find_properties_on [+d unknown hacker (#35)]:  return {this, this.location, @valid(this.location) ? this.location:contents() | {}, @this:contents()};
#7:sub_who [+d Core-Wizard (#184)]:    for item in (dest:contents())
#3:look_self [+d unknown hacker (#35)]:  things = this:visible_of(setremove(this:contents(), player));
#3:description [+d unknown hacker (#35)]:    integrate_objects = {@this:contents(), @this:exits()};
#3:objects_for_match [+d unknown hacker (#35)]:  return $set_utils:union(this:contents(), this:exits());
#3:walking_cost [+d unknown hacker (#35)]:  for i in (this:contents())
#1:integrate_in [+d unknown hacker (#35)]:      return this in what:contents();
#63:replace [+d housekeeper (#63)]:      for y in (loc:contents())
#69:obj_contents [-d unknown hacker (#35)]:    return {what:visible_of(what:contents())};
#80:seat_for [+d unknown hacker (#35)]:  for seat in (player.location:contents())
#145:tell_contents [+d unknown hacker (#35)]:  contents = length(args) ? args[1] | this:visible_of(this:contents());
#145:dependents dependents_event_* [+d unknown hacker (#35)]:  return {@pass(@args), @this:contents()};
#145:look_self [+d unknown hacker (#35)]:  things = this:visible_of(this:contents());
#145:contents_for_integration [+d unknown hacker (#35)]:  return setremove(this:contents(), player);
#178:event_exit [-d topic-owner (#181)]:  elseif (!$set_utils:intersection(this.location:contents(), $code_utils:connected_players()))
#190:_restrict_furnished _restrict_sittable [+d unknown hacker (#35)]:    for o in (r:contents())
#190:_restrict_vacant _restrict_unoccupied _restrict_empty [+d unknown hacker (#35)]:    for o in (r:contents())
#190:_restrict_vehicle _restrict_boat [+d unknown hacker (#35)]:    for o in (r:contents())
#151:contents [+d unknown hacker (#35)]:  header = this:contents_header_msg();

Total: 22 verbs.
Objects owned by Crag (from #0 to #261):
  8K #243 Crag                      *[first room]
  1K #245 leather couch             *[first room]
  1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #259 Robert's TF settings      *[first room]
-- 13 objects.  Total bytes: 20,274.------------------------------------------
Your current object is a Generic Pilable Thing (#255).
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
#255:"pile" this (on top of/on/onto/upon) any
That verb has not been programmed.
#5:"d*rop" this none none
// Usage: drop <thing>
//  This drops things in the room the dropper is in.
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't drop that here.");
else
  this:moveto(player.location);
  if (this.location == player.location)
    player:tell_lines(this:drop_succeeded_msg() || "Dropped.");
    if (msg = this:odrop_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:drop_failed_msg() || "You can't seem to drop that here.");
    if (msg = this:odrop_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#255:pile this on any" name: "MOO verb: #255:pile this on any" type: moo-code content*: "" _data-tag: 154988681416
#$#: 154988681416
Object #70 does not define that verb, but its ancestor #3 does.
#3:"l*ook" any any any
if (dobjstr == "" && !prepstr)
  this:look_self();
elseif ($code_utils:short_prep(prepstr) != "in" && prepstr != "on")
  if (!dobjstr && prepstr == "at")
    dobjstr = iobjstr;
    iobjstr = "";
  else
    dobjstr = dobjstr + (prepstr && (dobjstr && " ") + prepstr);
    dobjstr = dobjstr + (iobjstr && (dobjstr && " ") + iobjstr);
  endif
  dobj = this:match_object(dobjstr);
  if (!$command_utils:object_match_failed(dobj, dobjstr))
    dobj:look_self();
  endif
elseif (!iobjstr)
  player:tell(verb, " ", prepstr, " what?");
else
  iobj = this:match_object(iobjstr);
  if (!$command_utils:object_match_failed(iobj, iobjstr))
    iobj:look_in(dobjstr);
  endif
endif
Objects owned by stormagnet (from #0 to #261):
  3K #246 stormagnet                *[first room]
 <1K #260 Generic Wind-Up Toy        [stormagnet]
 <1K #261 Wind-Up Duck              *[first room]
-- 3 objects.  Total bytes: 4,696.--------------------------------------------
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#260:description this none this" name: "MOO verb: #260:description this none this" type: moo-code content*: "" _data-tag: 180022379817
#$#* 180022379817 content: basic = pass(@args);
#$#* 180022379817 content: if (this.wound)
#$#* 180022379817 content:   return basic + " " + this:going_msg();
#$#* 180022379817 content: else
#$#* 180022379817 content:   return basic;
#$#* 180022379817 content: endif
#$#: 180022379817
0 errors.
Verb programmed.
That is not a valid command.
Crag | a = {}; {@a} == a
Crag | append: a = {@a, x};
Crag | prepend: a = {x, @a};
You say, "etc"
=> {{#-1, "eval", #-1, #-1, #243}, {#243, "eval_cmd_string", #243, #52, #243}, {#243, "eval", #243, #52, #243}}
=> #243 (Crag)
0 errors.
Verb programmed.
#260:description (this == #261), line 3:  Verb not found
... called from #1:look_self (this == #261), line 1
... called from #3:l*ook (this == #70), line 13
(End of traceback)
Last modified Sat Apr 20 14:39:58 2013 PDT by Crag (#243).
#260:"description" this none this
basic = pass(@args);
if (this.wound)
  return {@basic, this:going_msg()};
else
  return basic;
endif
Generic Wind-Up Toy (#260) [ readable fertile ]
  Owned by stormagnet (#246).
  Child of generic thing (#5).
  Location stormagnet (#246).
  #260:wind                     stormagnet (#246)    r d    this none none
  #260:"d*rop th*row"           stormagnet (#246)    r d    this none none
  #260:description              stormagnet (#246)    rxd    this none this
-------------------------------- finished ---------------------------------
,aliases                 stormagnet (#246)     r c    {"Generic Wind-Up Toy", "Toy"}
-------------------------------- finished ---------------------------------
That object does not define that verb.
Last modified Sat Feb  2 20:11:12 2002 PST by Xeric (#999) (on Waterpoint).
#193:"@reg*ister @@reg*ister" any (on top of/on/onto/upon) this
// @register <object> on $local
// 
// Add a property to $local with the name as you specify on the command line and the value the matching object.  The name should be a legal MOO identifier so that no quoting is necessary when refering to it from verbs.  You may have to give the object an additional suitable alias before registering it.
cp = valid(cp = caller_perms()) ? cp | player;
if (!this.free_addition && !$perm_utils:controls(cp, this))
  player:tell("Sorry, only wizards may register objects on $local.");
elseif (!cp.programmer)
  player:tell("Sorry, only programmers may register objects on $local.");
elseif (!valid(dobj) && $command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
elseif (!$perm_utils:controls(cp, dobj))
  player:tell("You can only register your own objects on $local.  Please contact ", dobj.owner:dname(), " about registering ", dobj:name("d#"), ".");
elseif (!match(dobjstr, this.legal_name_regexp))
  player:tell("Please use a legal MOO identifier to register the object; you don't want people to have to use something like `$pronoun_sub.(\"two-letter\")' in their code, do you?");
elseif (`old = this.(dobjstr) ! E_PROPNF' != E_PROPNF)
  player:tell(old:name("dc#"), " is already registered as $local.", dobjstr, ".");
else
  for p in (properties(this))
    if (this.(p) == dobj)
      player:tell("Warning: ", dobj:name("d#"), " is already registered as $local.", p, ".");
    endif
  endfor
  this:add_property(dobjstr, dobj, cp);
  player:tell("Registered ", dobj:name("d#"), " as $local.", dobjstr, ".");
endif
#193:add_property, line 9:  Permission denied
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Last modified Thu May 29 23:16:16 1997 PDT by Xythian (#199) (on Waterpoint).
#193:"add_property" this none this
// :add_property(name, value, owner)
// WIZARDLY
{name, value, owner} = args;
// if ($perm_utils:controls(caller_perms(), this))
if (caller == this)
  // can only fail with E_INVARG if the prop exists, just let the caller handle that
  add_property(this, name, value, {owner, "r"});
else
  raise(E_PERM);
endif
Property added with value #260.
=> #260 (Generic Wind-Up Toy)
Your current object is a Generic Pilable Thing (#255).
Last modified Sat Apr 20 14:44:47 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile = $local.pile:create_pile(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
=> #242 (Generic Pile)
Verb added [2] (1).
Searching for core verbs containing the string "todo" ...

#1:clear_for_rebuild [+d Crag (#243)]:  "TODO: should check perms first";
#87:streaming_get [+d Core-Wizard (#184)]:  "TODO: handle chunked encoding";
#203:@update [+d Core-Wizard (#184)]:    this:set_todo_for_update({});
#203:update_from [+d Core-Wizard (#184)]:      this:todo_for_update({"verbs", o, length(verbs(o))});
#203:update_object [+d Core-Wizard (#184)]:  this:todo_for_update({"chparent", wot, prnt});
#203:update_property-defined [+d Core-Wizard (#184)]:    this:todo_for_update({"set", wot, name, value});
#203:update_property-inherited [+d Core-Wizard (#184)]:  this:todo_for_update({"set", wot, name, value});

Total: 7 verbs.
=> #203 (generic module)
Last modified Sat Jan  2 21:02:48 1999 PST by Xythian (#199) (on Waterpoint).
#203:"@update" this (out of/from inside/from) any
set_task_perms(callers() ? caller_perms() | player);
{sourcestr, @sourceargs} = $string_utils:explode(iobjstr);
src = this:match_source(sourcestr);
if (this:match_source_failed(src, sourcestr))
  return;
endif
src = src[1];
pt = src:parse_commandline(@sourceargs);
if (typeof(pt) != OBJ)
  return player:tell(pt);
endif
try
  this:set_made_for_update({});
  this:set_todo_for_update({});
  pt:fetch();
  this:update_from(pt);
except v (ANY)
  player:tell_lines($code_utils:format_traceback(v[4], v[1], v[2]));
  player:Tell("(Cleaning up...)");
  $recycler:_recycle(pt);
  made = this.made_for_update;
  for i in [0..length(made) - 1]
    $command_utils:suspend_if_needed(0);
    zog = made[length(made) - i];
    if (typeof(zog) == OBJ)
      if (is_player(zog))
        $wiz_utils:unset_player(zog);
      endif
      $recycler:_recycle(zog);
      if (zog in this.objects)
        this:remove_object(zog);
      endif
    else
      if (zog[1] == "set_player")
        wot = zog[2];
        isplayer = zog[3];
        if ($object_utils:isa(wot, $Player))
          $wiz_utils:set_player(wot, isplayer);
        else
          set_player_flag(wot, isplayer);
        endif
      elseif (zog[1] == "set")
        // reverse property set
        zog[2].(zog[3]) = zog[4];
      elseif (typeof(zog[1]) == STR)
        // zog[1] is the name of a reversal function, [2..$] are its args
        call_function(@zog);
      elseif (typeof(zog[1]) == OBJ)
        // likewise, object, verb, @args
        zog[1]:(zog[2])(zog[3..$]);
      endif
    endif
  endfor
  return;
endtry
$recycler:_recycle(pt);
player:tell("Done.");
return;
-----
HELP ON THE GENERIC MODULE
==========================

@pack
=====

Usage:  @pack module at sink [sinkarg1, etc]

This initiates a module pack at the specified sink.  Standard sinks include `player' which outputs the flat format at the player.

@unpack
=======

Usage:  :@unpack()

@add
====

Usage:  :@add [object, verb, or property] to this


@remove
=======

Usage:  :@remove()
Usage: @remove object from this


@add-local
==========

Usage:  :@add-local <object> to this


@remove-local
=============

Usage:  :@remove()
Usage: @remove object from this


try_pack_to
===========

Usage:  try_pack_to(target[, loud])

This initiates a module pack at the specified target.  Normally a target will have been generated by calling :parse_commandline on a sink.

@dump-kids
==========

Usage: @dump-kids <parent>
Lists the object hierarchy from parent down

No help found on @define, @check-dependencies, or @update.

----

Last modified Sun Apr 14 16:25:23 2013 PDT by Crag (#243).
#1:"@dump-kids" this none none
// Usage: @dump-kids <parent>
// Lists the object hierarchy from parent down
prefix = "";
if (args && typeof(args[1]) == STR && index(args[1], " ") == 1)
  prefix = args[1];
endif
thisinfo = this:name_and_number();
player:tell(prefix, thisinfo);
for child in (children(this))
  child:("@dump-kids")(prefix + "  ");
  $command_utils:suspend_if_needed(0);
endfor
Verb #1:@dump-kids [91] {this none none} removed.
Verb added [2] (1).
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#243:@dumpkids any none none" name: "MOO verb: #243:@dumpkids any none none" type: moo-code content*: "" _data-tag: 58746300418
#$#: 58746300418
A copper clockwork duck with wheels on the bottom and a winding key protruding from its back.
{list}
Last modified Sat Apr 20 14:39:58 2013 PDT by Crag (#243).
#260:"description" this none this
basic = pass(@args);
if (this.wound)
  return {@basic, this:going_msg()};
else
  return basic;
endif
Line 1:  syntax error
1 error.
=> {#69, "do", "The duck is rolling forward, rocking back and forth on its wheels."}
#-1:Input to EVAL, line 5:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Last modified Sat Apr 20 14:45:56 2013 PDT by stormagnet (#246).
#260:"wind_down_msg continue_msg startup_msg going_msg" this none this
return this.(verb);
Usage:  @list <object>:<verb> [<dobj> <prep> <iobj>] [with|without parentheses|numbers] [all] [ranges]
.going_msg               stormagnet (#246)     r c    ""
-------------------------------- finished ---------------------------------
=> {#69, "do", "The duck is rolling forward, rocking back and forth on its wheels."}
=> #69 (pronoun substitution)
stormagnet picks up the Wind-Up Duck.
stormagnet winds up the Wind-Up Duck.
stormagnet drops a Wind-Up Duck.
Wind-Up Duck {list}
@integrate_room duck isn't set.
@integrate_player duck isn't set.
@integrate_container duck isn't set.
@drop_failed duck is "You can't seem to drop %td here."
@drop_succeeded duck is "You drop %td."
@odrop_failed duck is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded duck is "%n:(drops) %ti."
@otake_succeeded duck is "%n:(picks) up %td."
@otake_failed duck isn't set.
@take_succeeded duck is "You take %td."
@take_failed duck is "You can't pick up %td."
@startup duck is "clanks, shudders, and starts rolling forward."
@continue duck is "swivels its neck and emits a mechanical \"QUACK!\""
@going duck is "The duck is rolling forward, rocking back and forth on its wheels."
@wind_down duck is "creaks, shudders, and rolls to stop."
Wind-Up Duck {list}
Wind-Up Duck {list}
Object #70 does not define that verb, but its ancestor #3 does.
#3:"announce" this none this
for dude in (setremove(this.contents, player))
  dude:tell(@args);
endfor
Wind-Up Duck {list}
Generic Wind-Up Toy (#260) [ readable fertile ]
  Owned by stormagnet (#246).
  Child of generic thing (#5).
  Location stormagnet (#246).
  #260:wind                     stormagnet (#246)    r d    this none none
  #260:"d*rop th*row"           stormagnet (#246)    r d    this none none
  #260:description              stormagnet (#246)    rxd    this none this
  #260:"wind_down_msg continue_msg startup_msg going_msg" stormagnet (#246) rxd this none this
  #260:do_the_work              stormagnet (#246)    rxd    this none this
-------------------------------- finished ---------------------------------
Wind-Up Duck {list}
Wind-Up Duck {list}
Last modified Sat Apr 20 14:47:48 2013 PDT by stormagnet (#246).
#260:"do_the_work" this none this
if (this.wound)
  if ($object_utils:isa(this.location, $room))
    this.location:announce_all(this.name, " ", this:continue_msg());
    this.wound = this.wound - 1;
    if (this.wound)
      fork (15)
        this:do_the_work();
      endfork
    else
      this.location:announce_all(this.name, " ", this:wind_down_msg());
    endif
  endif
  if (this.wound < 0)
    this.wound = 0;
  endif
endif
-----
$YOU:SAY_ACTION
===============

$you:say_action(message [,who [, thing[, where[, dobj[, iobj]]]]]).

announce 'message' with pronoun substitution as if it were just 

  where:announce_all($string_utils:pronoun_sub(message, who, thing, where, dobj, iobj)); 

except that all involved parties get modified messages, with the appropriate use of 'you' instead of their name.

who   default player

thing default object that called this verb

where default who.location

Any of these may be lists, of the form {<list of objs>, @<args to $string_utils:english_list>}.

The duck is rolling forward, rocking back and forth on its wheels.
=> 0
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#260:do_the_work this none this" name: "MOO verb: #260:do_the_work this none this" type: moo-code content*: "" _data-tag: 69991812419
#$#* 69991812419 content: if (this.wound)
#$#* 69991812419 content:   if ($object_utils:isa(this.location, $room))
#$#* 69991812419 content:     this.location:announce_all(this.name, " ", this:continue_msg());
#$#* 69991812419 content:     this.wound = this.wound - 1;
#$#* 69991812419 content:     if (this.wound)
#$#* 69991812419 content:       fork (15)
#$#* 69991812419 content:         this:do_the_work();
#$#* 69991812419 content:       endfork
#$#* 69991812419 content:     else
#$#* 69991812419 content:       this.location:announce_all(this.name, " ", this:wind_down_msg());
#$#* 69991812419 content:     endif
#$#* 69991812419 content:   endif
#$#* 69991812419 content:   if (this.wound < 0)
#$#* 69991812419 content:     this.wound = 0;
#$#* 69991812419 content:   endif
#$#* 69991812419 content: endif
#$#: 69991812419
0 errors.
Verb programmed.
Generic Wind-Up Toy (#260) [ readable fertile ]
  Owned by stormagnet (#246).
  Child of generic thing (#5).
  Location stormagnet (#246).
  #260:wind                     stormagnet (#246)    r d    this none none
  #260:"d*rop th*row"           stormagnet (#246)    r d    this none none
  #260:description              stormagnet (#246)    rxd    this none this
  #260:"wind_down_msg continue_msg startup_msg going_msg" stormagnet (#246) rxd this none this
  #260:do_the_work              stormagnet (#246)    rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#260:description this none this" name: "MOO verb: #260:description this none this" type: moo-code content*: "" _data-tag: 179660979020
#$#* 179660979020 content: basic = pass(@args);
#$#* 179660979020 content: if (this.wound)
#$#* 179660979020 content:   return {@basic, this:going_msg()};
#$#* 179660979020 content: else
#$#* 179660979020 content:   return basic;
#$#* 179660979020 content: endif
#$#: 179660979020
Line 1:  syntax error
1 error.
#-1:Input to EVAL, line 4:  Verb not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> "The duck is rolling forward, rocking back and forth on its wheels."
0 errors.
Verb programmed.
A copper clockwork duck with wheels on the bottom and a winding key protruding from its back.
You take the Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
You drop the Wind-Up Duck.
Wind-Up Duck {list}
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#260:drop this none none" name: "MOO verb: #260:drop this none none" type: moo-code content*: "" _data-tag: 202443006221
#$#* 202443006221 content: pass(@args);
#$#* 202443006221 content: if (this.wound)
#$#* 202443006221 content:   this.location:announce_all(this.name, " ", this:startup_msg());
#$#* 202443006221 content:   fork (15)
#$#* 202443006221 content:     this:do_the_work();
#$#* 202443006221 content:   endfork
#$#* 202443006221 content: endif
#$#: 202443006221
swivels its neck and emits a mechanical "QUACK!"
0 errors.
Verb programmed.
swivels its neck and emits a mechanical "QUACK!"
@integrate_room duck isn't set.
@integrate_player duck isn't set.
@integrate_container duck isn't set.
@drop_failed duck is "You can't seem to drop %td here."
@drop_succeeded duck is "You drop %td."
@odrop_failed duck is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded duck is "%n:(drops) %ti."
@otake_succeeded duck is "%n:(picks) up %td."
@otake_failed duck isn't set.
@take_succeeded duck is "You take %td."
@take_failed duck is "You can't pick up %td."
@startup duck is "clanks, shudders, and starts rolling forward."
@continue duck is "swivels its neck and emits a mechanical \"QUACK!\""
@going duck is "The duck is rolling forward, rocking back and forth on its wheels."
@wind_down duck is "creaks, shudders, and rolls to stop."
You set the "startup" message of the Wind-Up Duck (#261).
swivels its neck and emits a mechanical "QUACK!"
swivels its neck and emits a mechanical "QUACK!"
creaks, shudders, and rolls to stop.
You set the "continue" message of the Wind-Up Duck (#261).
-----
TWO-LETTER
==========

This help text describes the format of pronoun-substitution messages.  Other help texts on pronoun_substitution include:

pronouns[1]
      An overview.
pronoun-substitution[2]
      How to call pronoun_sub and how it works.
pronoun-example[3]
      A detailed example.
two-letter-qr[4]
      A quick reference guide to the format string.
pronoun-style[5]
      Dunno yet.

Pronoun-substitution messages are entered as strings, but are usually converted to an arcane list format before they're used.  This document is about the format of the string entry; the list format may be discussed elsewhere.

The information passed to :pronoun_sub() can have subsitution specifiers in it that are replaced by values that depend on the context.  The string that results after all the substitutions are made is returned.

In the format string that :pronoun_sub() parses, a `%' indicates that a substition should take place.  The characters after it specify the type of substition.  Take a look at this string:

  "%Td %t:(looks) at %dd oddly."

It has three substitutions to be made in it:  `%Td', `%t:(looks)', and `%dd'.

In most cases, a substition consists of three elements:

  o  The % sign, indicating that a substitution should be made.
  o  A symbol indicating the object that should be considered.
  o  A symbol indicating what about that object to substitute.


The Object Specifier
====================

The object specifier is the letter that follows the % sign.  Consider the string:

    "%Td %t:(looks) at %dd oddly."
 

In `%Td' and in `%t:', the object specifer is `t'.  In `%dd', the object specifer is `d'.

The possible letters and the objects that they correspond to include:

  t - represents the thing where the verb calling :pronoun_sub() is stored
  n - represents the player that started the command
  d - represents the direct object of the initial command
  i - represents the indirect object of the initial command
  l - represents the location of the player

As an example, If Munchkin typed this command:

  put duck in pond
 

and the duck had this as a @put_in_water message:

  "%Nd %n:(puts) %td in %id."
 

Then:

  %Nd would get the `d' information on Munchkin and capitalize it.

  %n:(puts) would conjugate `puts' according to Munchkin's gender.

  %td would get the `d' information from the duck.

  %id would get the `d' information from the pond.


The Information Specifier
=========================

The character following the object specifier is the information specifier.  It specifies what sort of information to get about the object.  It can be any of these characters:

  n - the object's name        ("Susan",   "duck",    "king and queen")
  d - definite-article         ("Susan",   "the duck","the king and queen")
  i - indefinite-article       ("Susan",   "a duck",  "a king and queen")
  o - the objective pronoun    ("her",     "him",     "them")
  p - possessive adjective     ("her",     "his",     "their")
  q - possessive pronoun       ("hers",    "his",     "theirs")
  r - reflexive pronoun        ("herself", "himself", "themselves")
  s - subjective pronoun       ("she",     "he,       "they")

Sometimes, several characters follow the object specifier:

  'i  - indefinite possessive  ("a duck's")
  'd  - definite possessive    ("the duck's")
  'n  - possessive name        ("duck's")

In using any of these, you can capitalize the object specifier to have the phrase capitalize--for example, `%Nd' might become "The duck".  If you capitalize both the object specifier and the information specifier (`%ND'), you'll get all caps--"THE DUCK".

Information Specifiers for Verb Conjugation
===========================================

You often want to insert a verb into a sentence, but the conjugation depends on the context that it's used in.  Give this as the information specifer in order to have pronoun_sub conjugate a verb:

  :(foos) - conjugate the verb `to foo'

For example:
  "%ns %n:(runs)"

will result in "he runs", "she runs", or "they run", depending on the gender of the player who called the verb.

If you capitalize the verb, the result will be capitalized:

  "%ns %n:(Runs)"
  => "he Runs"


Information Specifiers for Pluralizing Nouns
============================================

If you want to make a noun singular or plural depending on context, you can give the noun as an information specifier, and it will be pluralized if the object you specified is plural.  This is the format of the information specification:

  '(noun)
 

For example, this string:
  "%nD %n:(shakes) %d'd %d'(hand)."

may result in either:
  "Munchkin shakes Susan's hand."
or
  "Munchkin shakes the king and queen's hands."

Again, capitalizing the noun will result in a capitalized substitution.


Information Specifiers for Object Data
======================================

You can also obtain information about the actual object by using these information specifiers.

  #      - the object's number 
  .(foo) - the object's "foo" property

For example:
  %t.(mood)
would return the string in the object's `mood' property.

If the proprety doesn't exist, the string `Property not found' will be returned.

If you capitalize the property name, the resulting string will be capitalized.


Information Specifiers for Odd Cases
====================================

A list of arguments enclosed in curly brackets (see `help pronoun-literals'[6]) can be used as an information specifier, e.g.:

  %n{u}
 

which produces the same result as `%NN'.  The arguments will be passed directly to :name() during substitution.  Some forms of name, such as the 'in' name, can only be obtained in this manner.  See `help #1:name'[7] for more information.


Random Choice
=============

To add a little variety to oft-used messages, you can specify that one of several messages be chosen at random each time a message is used.  For example:

  %Nd %(%n:(dives) gracefully|%n:(bellyflops) clumsily) into the water.
 

The section in parentheses will be broken up into phrases at the vertical bars (|) and only one of these phrases, chosen at random, will be displayed.  This also works whenever an information specifier contains something enclosed in parentheses:

  %Nd %n:(dives|plunges) gracefully into the water.
 

When used with $you:say_action (see `help $you:say_action') the same alternatives will be used for everyone.  Vertical bars may be included literally by preceding them with a percent sign.
 
Object Locations and Contents
=============================

Sometimes you want information about an object's location.  This can be retrieved by appending an `l' to the object specifier.  For example:

  %tln - Get the `thing' this code is on, find out where it's located, and then get the name of that location. 

This can be done to every kind of object specifier: %tl, %nl, %il, %dl, and %ll.

Moreover, `L' and `c' may be used in the same fashion, to refer to the object's outermost location (usually a room) and its visible contents, respectively.

Object Callbacks
================

The letter `x' can be used in two ways to call back to an object for specialized information.

Firstly, it can be used as an object specifier, followed by another object specifier and some data in curly brackets, thusly:

  %xn{foo arg1 arg2 ...}d

The data in curly brackets is changed into a list, in the way specified in the next section.  Then, during substitution, the substitution mechanism will call the verb `:obj_foo(arg1, arg2, ...)' on the object(s) specified by `%n' to obtain some objects to get the `d' information of.

Secondly, it can be used as an information specifier, like this:

  %nx{foo arg1 arg2 ...}

This case is similar to the above, only the verb called is `:sub_foo' and the mechanism expects text rather than objects.  The returned text is inserted literally for single objects, and turned into an English-style list otherwise.

Other Substitutions
===================

In addition to the format of %(object specifier)(information specifier), you can also use these substitutions:

  %% - A percent sign.   That is:  %
 
  %$a - the argstr to the verb that called :pronoun_sub().
  %$d - the dobjstr to the verb that called :pronoun_sub().
  %$i - the iobjstr to the verb that called :pronoun_sub().
  %$p - the prepstr to the verb that called :pronoun_sub().
 
  %{information} 
 

%{information} allows one to insert an arbitrary list into the data structure used for pronoun substitution.  The format in which the list is specified is discussed in `help pronoun-literals'[8]; how it is interpreted is beyond the scope of this document.

Errata
======

If the information following the % isn't a valid substitution string, the % will remain a %.  This is a clue that the format string needs some work.

-----
TWO-LETTER-QR
=============

This help text is a quick reference for pronoun_sub format strings.  For explanation, see `help two-letter'[1].

General format:   %<object specifier><information specifier>

Object Specifiers
  %t - this           %d - the dobj     %l - the player location
  %n - the player     %i - the iobj
  Append `l' to refer to that object's location, or `L' for the outermost.
  Append `c' for the contents.
  %x<object specifier>{foo arg1 arg2 ...} is an object specifier meaning
  "call :obj_foo on the specified object, with the given arguments."

Information Specifiers (capitalizable)
  n - the object's name         ("Susan",   "duck",    "king and queen")
  d - definite-article          ("Susan",   "the duck","the king and queen")
  i - indefinite-article        ("Susan",   "a duck",  "a king and queen")
  o  - the objective pronoun    ("her",     "him",     "them")
  p  - possessive adjective     ("her",     "his",     "their")
  q  - possessive pronoun       ("hers",    "his",     "theirs")
  r  - reflexive pronoun        ("herself", "himself", "themselves")
  s  - subjective pronoun       ("she",     "he,       "they")
  'i - indefinite possessive    ("a duck's")
  'd - definite possessive      ("the duck's")
  'n - possessive title         ("duck's")
  #  - the object's number 
  <object specifier>x{foo arg1 arg2 ...} is an information specifier
  meaning "call :sub_foo on the object, with the given arguments."

Verbs, Nouns, Properties (capitalizable)
  :(foos) - conjugate the verb `to foo'
  '(foo)  - pluralize the noun `foo' if necessary
  .(foo)  - the object's `foo' property

Other Substitutions
  %${a,d,i,p} - the {arg,dobj,iobj,prep}str 

@integrate_room duck isn't set.
@integrate_player duck isn't set.
@integrate_container duck isn't set.
@drop_failed duck is "You can't seem to drop %td here."
@drop_succeeded duck is "You drop %td."
@odrop_failed duck is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded duck is "%n:(drops) %ti."
@otake_succeeded duck is "%n:(picks) up %td."
@otake_failed duck isn't set.
@take_succeeded duck is "You take %td."
@take_failed duck is "You can't pick up %td."
@startup duck is "%tn clanks, shudders, and starts rolling forward."
@continue duck is "%tn swivels its neck and emits a mechanical \"QUACK!\""
@going duck is "The duck is rolling forward, rocking back and forth on its wheels."
@wind_down duck is "creaks, shudders, and rolls to stop."
You set the "going" message of the Wind-Up Duck (#261).
You take the Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
You drop the Wind-Up Duck.
Wind-Up Duck clanks, shudders, and starts rolling forward.
@integrate_room duck isn't set.
@integrate_player duck isn't set.
@integrate_container duck isn't set.
@drop_failed duck is "You can't seem to drop %td here."
@drop_succeeded duck is "You drop %td."
@odrop_failed duck is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded duck is "%n:(drops) %ti."
@otake_succeeded duck is "%n:(picks) up %td."
@otake_failed duck isn't set.
@take_succeeded duck is "You take %td."
@take_failed duck is "You can't pick up %td."
@startup duck is "%tn clanks, shudders, and starts rolling forward."
@continue duck is "%tn swivels its neck and emits a mechanical \"QUACK!\""
@going duck is "%tn %%:(is) rolling forward, rocking back and forth on %tp wheels."
@wind_down duck is "creaks, shudders, and rolls to stop."
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
You set the "wind_down" message of the Wind-Up Duck (#261).
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
You set the "startup" message of the Wind-Up Duck (#261).
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck creaks, shudders, and rolls to stop.
 proper                  stormagnet (#246)     r c    0
-------------------------------- finished ---------------------------------
=> 1
A copper clockwork duck with wheels on the bottom and a winding key protruding from its back.
You take Wind-Up Duck.
You wind up the Wind-Up Duck.
You drop Wind-Up Duck.
Wind-Up Duck clanks, shudders, and %:(starts) rolling forward.
You say, "aw"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck creaks, shudders, and rolls to stop.
You set the "startup" message of Wind-Up Duck (#261).
@integrate_room duck isn't set.
@integrate_player duck isn't set.
@integrate_container duck isn't set.
@drop_failed duck is "You can't seem to drop %td here."
@drop_succeeded duck is "You drop %td."
@odrop_failed duck is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded duck is "%n:(drops) %ti."
@otake_succeeded duck is "%n:(picks) up %td."
@otake_failed duck isn't set.
@take_succeeded duck is "You take %td."
@take_failed duck is "You can't pick up %td."
@startup duck is "%tn %t:(clanks), %t:(shudders), and %t:(starts) rolling forward."
@continue duck is "%tn swivels its neck and emits a mechanical \"QUACK!\""
@going duck is "%tn %%:(is) rolling forward, rocking back and forth on %tp wheels."
@wind_down duck is "%tn creaks, shudders, and rolls to stop."
You set the "continue" message of Wind-Up Duck (#261).
Wind-Up Duck (#261) [ readable ]
  Owned by stormagnet (#246).
  Child of Generic Wind-Up Toy (#260).
  Location first room (#70).
-------------------------------- finished ---------------------------------
-----
TWO-LETTER-QR
=============

This help text is a quick reference for pronoun_sub format strings.  For explanation, see `help two-letter'[1].

General format:   %<object specifier><information specifier>

Object Specifiers
  %t - this           %d - the dobj     %l - the player location
  %n - the player     %i - the iobj
  Append `l' to refer to that object's location, or `L' for the outermost.
  Append `c' for the contents.
  %x<object specifier>{foo arg1 arg2 ...} is an object specifier meaning
  "call :obj_foo on the specified object, with the given arguments."

Information Specifiers (capitalizable)
  n - the object's name         ("Susan",   "duck",    "king and queen")
  d - definite-article          ("Susan",   "the duck","the king and queen")
  i - indefinite-article        ("Susan",   "a duck",  "a king and queen")
  o  - the objective pronoun    ("her",     "him",     "them")
  p  - possessive adjective     ("her",     "his",     "their")
  q  - possessive pronoun       ("hers",    "his",     "theirs")
  r  - reflexive pronoun        ("herself", "himself", "themselves")
  s  - subjective pronoun       ("she",     "he,       "they")
  'i - indefinite possessive    ("a duck's")
  'd - definite possessive      ("the duck's")
  'n - possessive title         ("duck's")
  #  - the object's number 
  <object specifier>x{foo arg1 arg2 ...} is an information specifier
  meaning "call :sub_foo on the object, with the given arguments."

Verbs, Nouns, Properties (capitalizable)
  :(foos) - conjugate the verb `to foo'
  '(foo)  - pluralize the noun `foo' if necessary
  .(foo)  - the object's `foo' property

Other Substitutions
  %${a,d,i,p} - the {arg,dobj,iobj,prep}str 

-----
TWO-LETTER
==========

This help text describes the format of pronoun-substitution messages.  Other help texts on pronoun_substitution include:

pronouns[1]
      An overview.
pronoun-substitution[2]
      How to call pronoun_sub and how it works.
pronoun-example[3]
      A detailed example.
two-letter-qr[4]
      A quick reference guide to the format string.
pronoun-style[5]
      Dunno yet.

Pronoun-substitution messages are entered as strings, but are usually converted to an arcane list format before they're used.  This document is about the format of the string entry; the list format may be discussed elsewhere.

The information passed to :pronoun_sub() can have subsitution specifiers in it that are replaced by values that depend on the context.  The string that results after all the substitutions are made is returned.

In the format string that :pronoun_sub() parses, a `%' indicates that a substition should take place.  The characters after it specify the type of substition.  Take a look at this string:

  "%Td %t:(looks) at %dd oddly."

It has three substitutions to be made in it:  `%Td', `%t:(looks)', and `%dd'.

In most cases, a substition consists of three elements:

  o  The % sign, indicating that a substitution should be made.
  o  A symbol indicating the object that should be considered.
  o  A symbol indicating what about that object to substitute.


The Object Specifier
====================

The object specifier is the letter that follows the % sign.  Consider the string:

    "%Td %t:(looks) at %dd oddly."
 

In `%Td' and in `%t:', the object specifer is `t'.  In `%dd', the object specifer is `d'.

The possible letters and the objects that they correspond to include:

  t - represents the thing where the verb calling :pronoun_sub() is stored
  n - represents the player that started the command
  d - represents the direct object of the initial command
  i - represents the indirect object of the initial command
  l - represents the location of the player

As an example, If Munchkin typed this command:

  put duck in pond
 

and the duck had this as a @put_in_water message:

  "%Nd %n:(puts) %td in %id."
 

Then:

  %Nd would get the `d' information on Munchkin and capitalize it.

  %n:(puts) would conjugate `puts' according to Munchkin's gender.

  %td would get the `d' information from the duck.

  %id would get the `d' information from the pond.


The Information Specifier
=========================

The character following the object specifier is the information specifier.  It specifies what sort of information to get about the object.  It can be any of these characters:

  n - the object's name        ("Susan",   "duck",    "king and queen")
  d - definite-article         ("Susan",   "the duck","the king and queen")
  i - indefinite-article       ("Susan",   "a duck",  "a king and queen")
  o - the objective pronoun    ("her",     "him",     "them")
  p - possessive adjective     ("her",     "his",     "their")
  q - possessive pronoun       ("hers",    "his",     "theirs")
  r - reflexive pronoun        ("herself", "himself", "themselves")
  s - subjective pronoun       ("she",     "he,       "they")

Sometimes, several characters follow the object specifier:

  'i  - indefinite possessive  ("a duck's")
  'd  - definite possessive    ("the duck's")
  'n  - possessive name        ("duck's")

In using any of these, you can capitalize the object specifier to have the phrase capitalize--for example, `%Nd' might become "The duck".  If you capitalize both the object specifier and the information specifier (`%ND'), you'll get all caps--"THE DUCK".

Information Specifiers for Verb Conjugation
===========================================

You often want to insert a verb into a sentence, but the conjugation depends on the context that it's used in.  Give this as the information specifer in order to have pronoun_sub conjugate a verb:

  :(foos) - conjugate the verb `to foo'

For example:
  "%ns %n:(runs)"

will result in "he runs", "she runs", or "they run", depending on the gender of the player who called the verb.

If you capitalize the verb, the result will be capitalized:

  "%ns %n:(Runs)"
  => "he Runs"


Information Specifiers for Pluralizing Nouns
============================================

If you want to make a noun singular or plural depending on context, you can give the noun as an information specifier, and it will be pluralized if the object you specified is plural.  This is the format of the information specification:

  '(noun)
 

For example, this string:
  "%nD %n:(shakes) %d'd %d'(hand)."

may result in either:
  "Munchkin shakes Susan's hand."
or
  "Munchkin shakes the king and queen's hands."

Again, capitalizing the noun will result in a capitalized substitution.


Information Specifiers for Object Data
======================================

You can also obtain information about the actual object by using these information specifiers.

  #      - the object's number 
  .(foo) - the object's "foo" property

For example:
  %t.(mood)
would return the string in the object's `mood' property.

If the proprety doesn't exist, the string `Property not found' will be returned.

If you capitalize the property name, the resulting string will be capitalized.


Information Specifiers for Odd Cases
====================================

A list of arguments enclosed in curly brackets (see `help pronoun-literals'[6]) can be used as an information specifier, e.g.:

  %n{u}
 

which produces the same result as `%NN'.  The arguments will be passed directly to :name() during substitution.  Some forms of name, such as the 'in' name, can only be obtained in this manner.  See `help #1:name'[7] for more information.


Random Choice
=============

To add a little variety to oft-used messages, you can specify that one of several messages be chosen at random each time a message is used.  For example:

  %Nd %(%n:(dives) gracefully|%n:(bellyflops) clumsily) into the water.
 

The section in parentheses will be broken up into phrases at the vertical bars (|) and only one of these phrases, chosen at random, will be displayed.  This also works whenever an information specifier contains something enclosed in parentheses:

  %Nd %n:(dives|plunges) gracefully into the water.
 

When used with $you:say_action (see `help $you:say_action') the same alternatives will be used for everyone.  Vertical bars may be included literally by preceding them with a percent sign.
 
Object Locations and Contents
=============================

Sometimes you want information about an object's location.  This can be retrieved by appending an `l' to the object specifier.  For example:

  %tln - Get the `thing' this code is on, find out where it's located, and then get the name of that location. 

This can be done to every kind of object specifier: %tl, %nl, %il, %dl, and %ll.

Moreover, `L' and `c' may be used in the same fashion, to refer to the object's outermost location (usually a room) and its visible contents, respectively.

Object Callbacks
================

The letter `x' can be used in two ways to call back to an object for specialized information.

Firstly, it can be used as an object specifier, followed by another object specifier and some data in curly brackets, thusly:

  %xn{foo arg1 arg2 ...}d

The data in curly brackets is changed into a list, in the way specified in the next section.  Then, during substitution, the substitution mechanism will call the verb `:obj_foo(arg1, arg2, ...)' on the object(s) specified by `%n' to obtain some objects to get the `d' information of.

Secondly, it can be used as an information specifier, like this:

  %nx{foo arg1 arg2 ...}

This case is similar to the above, only the verb called is `:sub_foo' and the mechanism expects text rather than objects.  The returned text is inserted literally for single objects, and turned into an English-style list otherwise.

Other Substitutions
===================

In addition to the format of %(object specifier)(information specifier), you can also use these substitutions:

  %% - A percent sign.   That is:  %
 
  %$a - the argstr to the verb that called :pronoun_sub().
  %$d - the dobjstr to the verb that called :pronoun_sub().
  %$i - the iobjstr to the verb that called :pronoun_sub().
  %$p - the prepstr to the verb that called :pronoun_sub().
 
  %{information} 
 

%{information} allows one to insert an arbitrary list into the data structure used for pronoun substitution.  The format in which the list is specified is discussed in `help pronoun-literals'[8]; how it is interpreted is beyond the scope of this document.

Errata
======

If the information following the % isn't a valid substitution string, the % will remain a %.  This is a clue that the format string needs some work.

@integrate_room duck isn't set.
@integrate_player duck isn't set.
@integrate_container duck isn't set.
@drop_failed duck is "You can't seem to drop %td here."
@drop_succeeded duck is "You drop %td."
@odrop_failed duck is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded duck is "%n:(drops) %ti."
@otake_succeeded duck is "%n:(picks) up %td."
@otake_failed duck isn't set.
@take_succeeded duck is "You take %td."
@take_failed duck is "You can't pick up %td."
@startup duck is "%tn %t:(clanks), %t:(shudders), and %t:(starts) rolling forward."
@continue duck is "%tn %t:(swivels) %tp neck and %t:(emits) a mechanical \"QUACK!\""
@going duck is "%tn %%:(is) rolling forward, rocking back and forth on %tp wheels."
@wind_down duck is "%tn creaks, shudders, and rolls to stop."
-----
@GENDER
=======

Syntax: @gender <gender>
        @gender

The first form, with an argument, defines your player to have the gender <gender>.  If <gender> is one of the standard genders (e.g., 'male', 'female', 'neuter',...), your various pronouns will also be set appropriately, making exits and certain other objects behave more pleasantly for you.

The second form tells you the current definition of your player's gender, your current pronouns, and the complete list of standard genders.

-----
TWO-LETTER-QR
=============

This help text is a quick reference for pronoun_sub format strings.  For explanation, see `help two-letter'[1].

General format:   %<object specifier><information specifier>

Object Specifiers
  %t - this           %d - the dobj     %l - the player location
  %n - the player     %i - the iobj
  Append `l' to refer to that object's location, or `L' for the outermost.
  Append `c' for the contents.
  %x<object specifier>{foo arg1 arg2 ...} is an object specifier meaning
  "call :obj_foo on the specified object, with the given arguments."

Information Specifiers (capitalizable)
  n - the object's name         ("Susan",   "duck",    "king and queen")
  d - definite-article          ("Susan",   "the duck","the king and queen")
  i - indefinite-article        ("Susan",   "a duck",  "a king and queen")
  o  - the objective pronoun    ("her",     "him",     "them")
  p  - possessive adjective     ("her",     "his",     "their")
  q  - possessive pronoun       ("hers",    "his",     "theirs")
  r  - reflexive pronoun        ("herself", "himself", "themselves")
  s  - subjective pronoun       ("she",     "he,       "they")
  'i - indefinite possessive    ("a duck's")
  'd - definite possessive      ("the duck's")
  'n - possessive title         ("duck's")
  #  - the object's number 
  <object specifier>x{foo arg1 arg2 ...} is an information specifier
  meaning "call :sub_foo on the object, with the given arguments."

Verbs, Nouns, Properties (capitalizable)
  :(foos) - conjugate the verb `to foo'
  '(foo)  - pluralize the noun `foo' if necessary
  .(foo)  - the object's `foo' property

Other Substitutions
  %${a,d,i,p} - the {arg,dobj,iobj,prep}str 

-----
`HELP PRONOUN' AMBIGUOUS
========================

Sorry, the topic `pronoun' is ambiguous.  I don't know which of the following topics you mean:

`help pronoun-example'[1]                       `help pronoun-internals'[2]
`help pronoun-literals'[3]                      `help pronoun-substitution'[4]
`help pronouns'[5]      

-----
PRONOUNS
========

Some kinds of messages are not printed directly to players; they are allowed to contain special characters marking places to include the appropriate pronoun for some player.  For example, a builder might have a doorway that's very short, so that people have to crawl to get through it.  When they do so, the builder wants a little message like this to be printed:

        Balthazar crawls through the little doorway, bruising his knee.

The problem is the use of 'his' in the message; what if the player in question is female?  The correct setting of the 'oleave' message on that doorway is as follows:

        "crawls through the little doorway, bruising %np knee."

The `%np' in the message will be replaced by either 'his', 'her', or 'its', depending upon the gender of the player.  

As it happens, you can also refer to elements of the command line (e.g., direct and indirect objects) the object issuing the message, and the location where this is all happening.  In addition one can get at various other information, like verb conjugation, plural/singular nouns, and strings from the command line.

The MOO offers a variety of pronoun substitution styles; the default is described in `help two-letter'[1].

For an example of using pronoun substitution in programming, see `help pronoun-example'[2].

-----
PRONOUNS
========

Some kinds of messages are not printed directly to players; they are allowed to contain special characters marking places to include the appropriate pronoun for some player.  For example, a builder might have a doorway that's very short, so that people have to crawl to get through it.  When they do so, the builder wants a little message like this to be printed:

        Balthazar crawls through the little doorway, bruising his knee.

The problem is the use of 'his' in the message; what if the player in question is female?  The correct setting of the 'oleave' message on that doorway is as follows:

        "crawls through the little doorway, bruising %np knee."

The `%np' in the message will be replaced by either 'his', 'her', or 'its', depending upon the gender of the player.  

As it happens, you can also refer to elements of the command line (e.g., direct and indirect objects) the object issuing the message, and the location where this is all happening.  In addition one can get at various other information, like verb conjugation, plural/singular nouns, and strings from the command line.

The MOO offers a variety of pronoun substitution styles; the default is described in `help two-letter'[1].

For an example of using pronoun substitution in programming, see `help pronoun-example'[2].

-----
`HELP PRONOUN' AMBIGUOUS
========================

Sorry, the topic `pronoun' is ambiguous.  I don't know which of the following topics you mean:

`help pronoun-example'[1]                       `help pronoun-internals'[2]
`help pronoun-literals'[3]                      `help pronoun-substitution'[4]
`help pronouns'[5]      

-----
`HELP PICK 4' NOT FOUND
=======================

Sorry, but no help is available on `pick 4'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
PRONOUN-SUBSTITUTION
====================

This text describes the basic pronoun substitution model.  An introduction to the pronoun substitution concept can be found in `help pronouns'[1], and a detailed example can be find in `help pronoun-example'[2].  Detailed information on the format of a two-letter substitution is in `help two-letter'[3].

Messages
--------

Pronoun substitution is performed on messages.  A message is a special list (or sometimes, string) containing detailed instructions on the substitutions to be done.  To ease the construction of messages, three parsers are provided to convert messages to and from ordinary strings.  Each parser has its own way of expressing the actual substitutions as strings.

The "generic" parser uses a simple and general way of converting the message lists into strings, but for the user it is longwinded and finicky.  Because of its great generality, it is also used as a fallback method by other parsers for representing certain very complicated substitutions or illegal messages that could not have been constructed by any of the other parsers.

The "lambdacore" parser offers a certain simplicity and the greatest degree of compatibility with very different MOOs, because it is based on the format used for pronoun substitution on one of the very earliest MOOs, LambdaMOO.  It is very useful for porting objects from other MOOs for this reason.  However, it has difficulty in expressing more complex substitutions than existed early in the history of MOO, and it is not always obvious how much text will be replaced when a substitution is made.

The "two-letter" parser is more compact than the general parser and makes it harder to mistakenly construct illegal messages.  It is also more general and systematic than the lambdacore parser.  With the two-letter parser anything that will be substituted for starts with a "%" character, and the substituted text only continues past a space if it is enclosed in "()", "[]", "<>" or "{}".  Many of the most common substitutions are expressed as a "%" followed by two letters, hence the name of the parser.  The two-letter parser is sometimes considered cryptic, but it is recommended for most uses.  More detailed information can be found at `help two-letter'[4].

The two-letter parser will be used for all examples in this article.

Using Parsers
-------------

In code, the three parsers are referred to as "$pronoun_sub.generic", "$pronoun_sub.lambdacore" and "$pronoun_sub.two_letter".  Creating a message from a string is done with the parser's ":parse" verb:

  $pronoun_sub.two_letter:parse("%Td %t:(sets) in the west.")


Converting a message back to a string requires the ":unparse" verb:

  $pronoun_sub.two_letter:unparse($thing.drop_msg)


You can unparse a message with any parser, regardless of which one created it.

To set which parser you use when building verbs parse and unparse messages automatically, use your own "@pronoun-sub" verb:

  @pronoun-sub with two-letter


The Evaluation Context
----------------------

Pronoun substition is done on a string by calling:

  $string_utils:pronoun_sub(message);
 

This will return a new string that is based on the format of string and the context in which pronoun_sub:() was called.

For example, if an object named `sun' calls this code:

  $string_utils:pronoun_sub($pronoun_sub.two_letter:parse("%Td sets in the west."));
 

the returned string will be:

  "The sun sets in the west."
 

The information that :pronoun_sub() can use to try to decipher the string includes, (along with they way they can be referred to in the format string):

  o  The player who caused the code to execute. (%n)
  o  The object where the code is stored, usually referred to as `this'. (%t)
  o  The location of the player. (%l)
  o  The direct object of the command line that was typed by the player. (%d)
  o  The indirect object of the command line that was typed by the player. (%i)

These values, which :pronoun_sub() figures out by itself, can be set explicitly by passing them in as arguments:

   $string_utils:pronoun_sub(string, player, this, location, dobj, iobj)
 

All of these (except the string) are optional, but order is important, so if you want to change the location, you also need to specifically mention the string, player, and this.

Each of these arguments can be:

  o  an object (as you'd expect)
  o  a list of objects
  o  a list like you'd pass to $string_utils:english_list, i.e: :pronoun_sub("The %n", {{#0, #1, #2}, "nothing", " or "})

Multiple Similar Contexts
-------------------------

It often turns out that you want to say nearly the same thing to several different targets.  For example, if Munchkin picks up a duck, three messages will probably be printed:

  To Munchkin: You pick the duck up.
  To the duck: Munchkin picks you up.
  To everyone else in the room: Munchkin picks the duck up.

If you want to use :pronoun_sub() to create these messages, you'll either have to call it three times with three different format messages, or you'll have to call it three times with one format while tweaking the arguments to :pronoun_sub().

This happens so often that a special command has been created to do this for you.  The verb $you:say_action(string) takes the string and then substitutes in appropriately for everything involved or nearby.  In the above situation, you would simply call:

  $you:say_action($pronoun_sub.two_letter:parse("%nD %n:(picks) up %td."))


This will print the message according to how each person should see it, exactly like the three messages above.

A detailed example using $you:say_action() can be found in `help pronoun-example'[5].

-----
PRONOUN-EXAMPLE
===============

This text is intended to tell you something about how to use pronoun substitution in programming.  If you don't know anything about pronoun substitution, you should probably read `help pronouns'[1] before you start.

Note that, at least for now, the text assumes two-letter pronoun substitution (see `help two-letter'[2] for a full specification).

STEP ONE
--------

Okay.  For our example, let's say you've been creating a duck.  It's a pretty independent duck, and you don't want people to be able to pick it up, so you write a simple verb:

   >@verb duck:take this
   >@program duck:take
   >player:tell("You try to pick the duck up, but it swiftly dodges away.");
   >.

Here's a sample interaction with that code:

   >take duck
   You try to pick the duck up, but it swiftly dodges away.

About what you'd expect.

STEP TWO
--------

So now you have a duck that won't let itself be picked up.  But if you change the duck's name, or if you make a generic ornery bird, then "the duck" won't be correct.

One way to deal with this would be to have the `take' verb call this:dname().  This verb will return "the duck" (or "the mallard" or "Bob the Wonder Pigeon").  This is an improvement, but it still lacks flexibility for the generic case.  You can provide this flexibility by using a pronoun-sub message.

   >@newmessage @dodge on duck
   @dodge on duck is now "".

This command just creates a message called `@dodge' on the duck.  Actually, it creates a property named `dodge_msg'.  This is all a message is:  A property with a special name (`something_msg') and a special format (more complicated).

   >@dodge duck is "You try to pick up %td, but %ts swiftly %t:(dodges) away."

This command sets the contents of the .dodge_msg property on the duck.  Notice that a lot of words related to the duck have been replaced with strange expressions that begin with `%t'.  This is NOT A COINCIDENCE.

The `%t' means that some piece of information about `this' should be used.  (`This' is usually the object on which the message is located.)  The particular piece of information is then specified:

   %td         -- the object's name, with definite article if needed
                  ("the duck", "Bob the Wonder Pigeon", "the goslings")
   %ts         -- the subjective pronoun
                  ("it",       "he",                    "they")
   %t:(dodges) -- a verb, conjugated for the object
                  ("dodges",   "dodges",                "dodge")

The last of these may be a little bit tricky.  `%t' means `substitute information about "this"'.  Following that, `:' means `use a conjugated verb'.  Then `(dodges)' specifies what verb to use.

Now, reprogram the verb to actually use this new message:

   >@program duck:take
   >player:tell($string_utils:pronoun_sub(this.dodge_msg));
   >.

$string_utils:pronoun_sub is a verb that takes a message in the standard format, looks at information in the state of the world (knowing `player' and the object that called it) or passed in explicitly, and returns a string with the appropriate substitutions made.  So a sample interaction might go:

   >take duck
   You try to pick the duck up, but it swiftly dodges away.

.. exactly the same!  But if you change the duck's name, make it plural, or change its gender, the message will change automatically.

STEP THREE
----------

Now, suppose you're not satisfied with having your duck reject players' advances; you want everyone around to know what the player is doing, too.  (This is a perfectly reasonable goal, by the way; that way if the player says `That pesky duck!', everyone will know why.)


So, you make a new message:

   >@newmessage @ododge on duck
   @ododge on duck is now "".
   >@ododge duck is "%nD %n:(tries) to pick up %td, but %ts swiftly %t:(dodges) away."

In this message, `%n' works just the way `%t' does, but it refers to `player' (the one who typed the command), not to `this'.

   >@program duck:take
   >player:tell($string_utils:pronoun_sub(this.dodge_msg));
   >player:room_announce($string_utils:pronoun_sub(this.ododge_msg));
   >.

The :room_announce verb tells its arguments to everyone in the room with `player', except for `player'.  So:

Munchkin types:
   >take duck
Munchkin sees:
   You try to pick the duck up, but it swiftly dodges away.
Everyone else in the room sees:
   Munchkin tries to pick the duck up, but it swiftly dodges away.

Two messages and two lines take care of all of this.

STEP FOUR
---------

Actually, when the message is essentially the same for all parties involved (as in this example), you can simplify it still more.

   >@dodge duck is "%nD %n:(tries) to pick up %td, but %ts swiftly %t:(dodges) away."

Notice that this sets the `@dodge' to just the same thing `@ododge' was.

   >@program duck:take
   >$you:say_action(this.dodge_msg);
   >.

$you:say_action is a very handy verb that takes a message in the standard format, and substitutes appropriately for everyone involved (or nearby).  So, with this one message (you could `@rmprop duck.ododge_msg') and one line of code, you get this:

Munchkin types:
   >take duck
Munchkin sees:
   You try to pick the duck up, but it swiftly dodges away.
The duck sees:
   Munchkin tries to pick you up, but you swiftly dodge away.
Everyone else sees:
   Munchkin tries to pick the duck up, but it swiftly dodges away.

Munchkin gets treated as `you' in his own message; so does the duck.  Everyone else sees it in third person.

STEP ZERO
---------

This is a basic use of pronoun substitution, but if you understand it well it will cover many cases.  To find out more, you might want to read `help two-letter'[3] for more description of the capabilities of pronoun substitution; search through existing code that does things that interest you; and don't hesitate to ask other people for help.

Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
  #255:pile                     Crag (#243)          r d    this on top of/on/onto/upon any
-------------------------------- finished ---------------------------------
Last modified Sat Apr 20 14:44:47 2013 PDT by Crag (#243).
#255:"pile" this (on top of/on/onto/upon) any
// Usage: pile <thing> on <other thing>
//  This forms a pile out of the dobj and iobj.
//  (based on $thing:drop)
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't pile that here.");
else
  pile = $local.pile:create_pile(this, iobj, player.location);
  if (this.location == pile)
    player:tell_lines(this:pile_succeeded_msg() || "Done.");
    if (msg = this:opile_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:pile_failed_msg() || "You can't seem to pile that here.");
    if (msg = this:opile_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
=> #255 (Generic Pilable Thing)
=> #242 (Generic Pile)
Your current object is now $local.pile (#242).
Warning:  Verb `create_pile' already defined on that object.
Verb added [3] (2).
#242:"create_pile" ()
That verb has not been programmed.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#242:create_pile ()" name: "MOO verb: #242:create_pile ()" type: moo-code content*: "" _data-tag: 93952823522
#$#: 93952823522
-----
`HELP $OBJECT_UTILS:' NOT FOUND
===============================

Sorry, but no help is available on `$Object_utils:'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
GENERAL INFORMATION ON $OBJECT_UTILS[1]
=======================================

These routines are useful for finding out information about individual objects.

Examining everything an object has defined on it:
  all_verbs          (object) => like it says
  all_properties     (object) => likewise
  findable_properties(object) => tests to see if caller can "find" them
  owned_properties   (object[, owner]) => tests for ownership

Investigating inheritance:
  ancestors(object[,object...]) => all ancestors
  descendants      (object)     => all descendants
  ordered_descendants(object)   => descendants, in a different order
  leaves           (object)     => descendants with no children
  branches         (object)     => descendants with children 
  isa        (object,class) => true iff object is a descendant of class (or ==)

Considering containment:
  contains      (obj1, obj2) => Does obj1 contain obj2 (nested)?
  all_contents      (object) => return all the (nested) contents of object

Verifying verbs and properties:
  has_property(object,pname) => false/true   according as object.(pname) exists
  has_verb    (object,vname) => false/{#obj} according as object:(vname) exists
  has_callable_verb          => same, but verb must be callable from a program
  match_verb  (object,vname) => false/{location, newvname}
                               (identify location and usable name of verb)
Suspending:
  Many of the above verbs have ..._suspended versions to assist with very large object hierarchies.  The following exist:
   descendants_suspended              
   branches_suspended                 
   leaves_suspended                   
   all_properties_suspended           
   descendants_with_property_suspended

#-1:Input to EVAL, line 4:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> 2
-----
HELP ON THE RECYCLING CENTER
============================

Sorry, but no help is avilable on Recycling Center(#55).  Try `examine Recycling Center'.

Recycling Center (aka #55 and Center)
Owned by unknown hacker.
Object reuse. Call $recycler:_create() to create an object (semantics the same as create()), $recycler:_recycle() to recycle an object. Will create a new object if nothing available in its contents. Note underscores, to avoid builtin :recycle() verb called when objects are recycled. Uses $building_utils:recreate() to prepare objects.
Obvious verbs:
  show*-history $recycler
  request <anything> from $recycler
Recycling Center (#55) [ readable ]
  Owned by unknown hacker (#35).
  Child of Helpful Object (#250).
   #55:_recreate                Core-Wizard (#184)   rxd    this none this
   #55:_recycle                 Core-Wizard (#184)   rxd    this none this
   #55:_create                  Core-Wizard (#184)   rx     this none this
   #55:addhist                  Core-Wizard (#184)   rxd    this none this
   #55:show*-history            Core-Wizard (#184)   rx     this none none
   #55:request                  Core-Wizard (#184)   r d    any out of/from inside/from this
   #55:setup_toad               Core-Wizard (#184)   rx     this none this
   #55:add_orphan               unknown hacker (#35) rxd    this none this
   #55:remove_orphan            unknown hacker (#35) rxd    this none this
   #55:valid                    Core-Wizard (#184)   rxd    this none this
   #55:init_for_core            Core-Wizard (#184)   rxd    this none this
   #55:accept                   Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
The First Room
This is all there is right now.  A leather couch is here.
You see a Robert's TF settings and Wind-Up Duck here.
stormagnet is here, dozing.  Beaker is off in another world.
@integrate_room me isn't set.
@integrate_player me isn't set.
@integrate_container me isn't set.
@in me is "in"
@page_absent me is "%Nd %n:(is) not currently logged in."
@page_origin me isn't set.
@page_echo me isn't set.
@spoof_attribution me is "     --"
@integrate_sep me is "  "
@remote_emote_prefix me is "(from %li)"
@dozing me is "idling"
@idle me is "real life intrusion"
@doing me is ""
@shout me is "%Nd %n:(shouts), \"%$a\""
@newt_victim me isn't set.
@newt me is "%Nd %n:(@newts) %dd (%d#)."
@programmer me is "%Dd %d:(is) now a programmer."
@programmer_victim me is "You are now a programmer."
@toad_victim me is "Have a nice life..."
@toad me is "%Nd %n:(@toads) %dd (%d#)."
@boot_player me is "%Nd %n:(boots) %dd."
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
You now have detailed painting with object number #262 and parent generic container (#126).
Alias "painting" added to detailed painting(#262).
Aliases for detailed painting(#262) are now {"detailed painting", "painting"}
Your current object is now detailed (#262).
@integrate_room _ isn't set.
@integrate_player _ isn't set.
@integrate_container _ isn't set.
@in _ is "in"
@put_fail _ is "You can't put %dd %tx{in} that."
@remove_fail _ is "You can't remove that."
@remove _ is "%Nd %n:(removes) %di from %id."
@put _ is "%Nd %n:(puts) %dd %tx{in} %id."
@empty _ is "%Ts %t:(is) empty."
@integrate_sep _ is "  "
-----
TWO-LETTER-QR
=============

This help text is a quick reference for pronoun_sub format strings.  For explanation, see `help two-letter'[1].

General format:   %<object specifier><information specifier>

Object Specifiers
  %t - this           %d - the dobj     %l - the player location
  %n - the player     %i - the iobj
  Append `l' to refer to that object's location, or `L' for the outermost.
  Append `c' for the contents.
  %x<object specifier>{foo arg1 arg2 ...} is an object specifier meaning
  "call :obj_foo on the specified object, with the given arguments."

Information Specifiers (capitalizable)
  n - the object's name         ("Susan",   "duck",    "king and queen")
  d - definite-article          ("Susan",   "the duck","the king and queen")
  i - indefinite-article        ("Susan",   "a duck",  "a king and queen")
  o  - the objective pronoun    ("her",     "him",     "them")
  p  - possessive adjective     ("her",     "his",     "their")
  q  - possessive pronoun       ("hers",    "his",     "theirs")
  r  - reflexive pronoun        ("herself", "himself", "themselves")
  s  - subjective pronoun       ("she",     "he,       "they")
  'i - indefinite possessive    ("a duck's")
  'd - definite possessive      ("the duck's")
  'n - possessive title         ("duck's")
  #  - the object's number 
  <object specifier>x{foo arg1 arg2 ...} is an information specifier
  meaning "call :sub_foo on the object, with the given arguments."

Verbs, Nouns, Properties (capitalizable)
  :(foos) - conjugate the verb `to foo'
  '(foo)  - pluralize the noun `foo' if necessary
  .(foo)  - the object's `foo' property

Other Substitutions
  %${a,d,i,p} - the {arg,dobj,iobj,prep}str 

You set the "integrate_room" message of the detailed painting (#262).
The First Room
This is all there is right now.  A leather couch is here.
You see a Robert's TF settings and Wind-Up Duck here.
stormagnet is here, dozing.  Beaker is off in another world.
detailed painting (#262) [ readable ]
  Child of generic container (#126).
  Location Crag (#243).
 put_fail_msg            unknown hack (#35)    r      {#69, "do", "You can't ..
 remove_fail_msg         unknown hack (#35)    r      {#69, "do", "You can't ..
 remove_msg              unknown hack (#35)    r      {#69, "do", {"dname", "..
 put_msg                 unknown hack (#35)    r      {#69, "do", {"name", "p..
 empty_msg               unknown hack (#35)    r      {#69, "do", {"pronoun",..
 integrate_sep_msg       unknown hack (#35)    r      {#69, "do", "  "}
 integration_enabled     unknown hack (#35)    r      1
 in_msg                  Crag (#243)           r c    {#69, "do", "in"}
,dependents              Core-Wizard (#184)    r      {}
,key                     Crag (#243)             c    0
,aliases                 Crag (#243)           r c    {"detailed painting", "..
 description             Crag (#243)           r c    ""
 visible                 unknown hack (#35)    r      1
,integrate_room_msg      Crag (#243)           r c    {#69, "do", "Someone ha..
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
 unique                  Crag (#243)           r c    0
 proper                  Crag (#243)           r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {681, 1366498581}
 core_names              Crag (#243)           r c    {"$container"}
-------------------------------- finished ---------------------------------
detailed painting (#262) [ readable ]
  Child of generic container (#126).
  Location Crag (#243).
 put_fail_msg            unknown hack (#35)    r      {#69, "do", "You can't ..
 remove_fail_msg         unknown hack (#35)    r      {#69, "do", "You can't ..
 remove_msg              unknown hack (#35)    r      {#69, "do", {"dname", "..
 put_msg                 unknown hack (#35)    r      {#69, "do", {"name", "p..
 empty_msg               unknown hack (#35)    r      {#69, "do", {"pronoun",..
 integrate_sep_msg       unknown hack (#35)    r      {#69, "do", "  "}
 integration_enabled     unknown hack (#35)    r      1
 in_msg                  Crag (#243)           r c    {#69, "do", "in"}
,dependents              Core-Wizard (#184)    r      {}
,key                     Crag (#243)             c    0
,aliases                 Crag (#243)           r c    {"detailed painting", "..
 description             Crag (#243)           r c    ""
 visible                 unknown hack (#35)    r      1
,integrate_room_msg      Crag (#243)           r c    {#69, "do", "Someone ha..
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
 unique                  Crag (#243)           r c    0
 proper                  Crag (#243)           r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {681, 1366498581}
 core_names              Crag (#243)           r c    {"$container"}
-------------------------------- finished ---------------------------------
-----
INTEGRATION
===========

Some rooms have descriptions which incorporate text from each of the objects in them.  For example, in Jay's kitchen, the thermostat is an object which contributes the sentence "A thermostat is attached to the wall near the appliances."  A description of this type is said to `integrate' objects into itself.

Each object may have separate messages for integrating into room descriptions, player descriptions, and container descriptions, as well as a default message used for integration into anything.  These messages are @integrate_room, @integrate_player, @integrate_container, and @integrate.  Room integration is the best developed of these, and the subject of this documentation.

These instructions are centered around a particular model of integration:  Namely, that you as a builder have created a room, with certain objects that belong in it (at least part of the time), and you want them to be part of the description, instead of showing up in the contents list at its end.  It's also possible for random wandering objects to integrate into the description, but it's hard to make that effective.

EACH OBJECT'S PART
------------------

If the room wants to integrate a given object, the object has control over how it gets integrated, or whether it gets integrated at all.  There are three basic options.

First, an object can be invisible--that is, not to show up in the description at all.  To do this, it must either have a verb :visible or a property .visible that returns or contains a false value.

Second, an object can be visible but not integrate--it'll show up in the contents list, but not in the main text of the description.  If a visible object's @integrate_room message is empty, this happens.

Third, an object can contribute to the description's main text.  Having a non-empty @integrate_room message accomplishes this.  These messages are run through pronoun substitution (see `help pronouns'[1]), so you can include the object's name or its location's name in the text.

It's actually possible for objects to have different integration messages for different locations, but that's not discussed here.

PUTTING THE PIECES TOGETHER
---------------------------

The text description that people see in a room is effectively made up of its .description and .integrate_paragraphs properties.  The first is a piece of text; the second may be a combination of objects to be integrated and `filler' text to put between them.

The .description property is either a string or a list of strings; it's set with @describe.  This part is simple.  (See `help describe'[2].)  If it's a list, each string is a paragraph; otherwise, the string constitutes the first and only paragraph.

The .integrate_paragraphs property is a little more complicated, and has no associated setter command.  It's a list of lists, representing paragraphs.  The first list is not actually its own paragraph but is appended to the last paragraph of .description; if it's empty, the text paragraph will stand alone.

Each paragraph list is composed of a number of objects and strings.  When somebody looks at a room, the objects' integration messages are all checked; these and the strings are put together in the order given.

[There should be a medium-length example here, and probably furniture should be mentioned.  (Furniture has an automatic integration message.)  And, really, we just need a decent user interface so we can cover up the ugly distinction between .description and .integrate_paragraphs, and probably do something more sensible with visibility too.]

 visible                 unknown hacker (#35)  r      1
-------------------------------- finished ---------------------------------
The First Room
This is all there is right now.  A leather couch is here.
You see a Robert's TF settings and Wind-Up Duck here.
stormagnet is here, dozing.  Beaker is off in another world.
You drop the detailed painting.
The First Room
This is all there is right now.  A leather couch is here.  Someone has artfully hung a detailed painting on a wall.
You see a Robert's TF settings and Wind-Up Duck here.
stormagnet is here, dozing.  Beaker is off in another world.
You see nothing special.
It is empty.
Description set.
detailed painting (aka #262 and painting)
Owned by Crag.
This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle. A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.
It is empty.
Obvious verbs:
  p*ut/in*sert/d*rop/qput <anything> in painting
  re*move/ta*ke/g*et <anything> from painting
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
You now have bridge with object number #263 and parent generic container (#126).
Description set.
You put the bridge in the detailed painting.
This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle. A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.
Contents:
  a bridge
Focusing on the bridge you observe a party of adventures apparently setting out to conquer the forest. They and their steeds are well armored, and they bring with them a cart which presumably contains supplies for their journey.
It is empty.
Crag |l painting's bridge
Focusing on the bridge you observe a party of adventures apparently setting out to conquer the forest. They and their steeds are well armored, and they bring with them a cart which presumably contains supplies for their journey.
It is empty.
Crag | l bridge in painting
You now have adventure party (aka party) with object number #264 and parent generic container (#126).
That is not a valid command.
Try this instead:  @d bridge
Objects owned by Crag (from #0 to #264):
  8K #243 Crag                      *[first room]
  1K #245 leather couch             *[first room]
  1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #259 Robert's TF settings      *[first room]
 <1K #262 detailed painting         *[first room]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [Crag]
-- 16 objects.  Total bytes: 22,317.------------------------------------------
You can't get at the bridge.
Moved.
Description set.
You see no "bridge in painting" here.
stormagnet removes a bridge from the detailed painting.
stormagnet puts the bridge in the detailed painting.
-----
@LOCK
=====

Syntax:  @lock <object> with <key expression>

Set a lock on <object> to restrict its use.  See `help locking'[1] for general information about locking and `help keys'[2] for the syntax and semantics of key expressions.

N.B.  In the case of rooms, you are actually better off setting room.free_entry to 0 thus preventing teleportation and then @locking the various entrances.  The problem with @locking the room itself is that this can make it impossible to drop objects in the room.

-----
KEYS
====

JHCore supports a simple but powerful notation for specifying locks on objects and encryption on notes, among other applications.  The idea is to describe a constraint that must be satisfied concerning what some object must be or contain in order to use some other object.

The constraint is given in the form of a logical expression, made up of object numbers connected with the operators 'and', 'or', and 'not' (written '&&', '||', and '!', for compatibility with the MOO programming language).  When writing such expressions, though, one usually does not use object numbers directly, but rather gives their names, as with most MOO commands.

These logical expressions (called 'key expressions') are always evaluated in the context of some particular 'candidate' object, to see if that object meets the constraint.  To do so, we consider the candidate object, along with every object it contains (and the ones those objects contain, and so on, and not counting administration groups), and every administration group (see `help @admin'[1]) it is a member of, to be 'true' and all other objects to be 'false'.

As an example, suppose the player Munchkin wanted to lock the exit leading to his home so that only he and the holder of his magic wand could use it.  Further, suppose that Munchkin was object #999 and the wand was #1001.  Munchkin would use the '@lock' command to lock the exit with the following key expression:
        me || magic wand
and the system would understand this to mean
        #999 || #1001
That is, players could only use the exit if they were (or were carrying) either #999 or #1001.

To encrypt a note so that it could only be read by Munchkin or someone carrying his book, his bell, and his candle, Munchkin would use the 'encrypt' command with the key expression
        me || (bell && book && candle)

Finally, to keep players from taking a large gold coffin through a particularly narrow exit, Munchkin would use this key expression:
        ! coffin
That is, the expression would be false for any object that was or was carrying the coffin.

There is one other kind of clause that can appear in a key expression:
        ? <object>
This is evaluated by testing whether the given object is unlocked for the candidate object; if so, this clause is true, and otherwise, it is false.  This allows you to have several locks all sharing some single other one; when the other one is changed, all of the locks change their behavior simultaneously.

[Note to programmers: The internal representation of key expressions, as stored in .key on every object, for example, is very simple and easy to construct on the fly.  For details, see `help key-representation'[2].]

Locked detailed painting to this key:
  #-1
You remove a bridge from the detailed painting.
You put the bridge in the detailed painting.
Locked detailed painting to this key:
  ~Crag && !~Crag
You see no "bridge" here.
You remove a bridge from the detailed painting.
You put the bridge in the detailed painting.
Objects owned by Crag (from #0 to #264):
  8K #243 Crag                      *[first room]
  1K #245 leather couch             *[first room]
  1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #259 Robert's TF settings      *[first room]
 <1K #262 detailed painting         *[first room]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
-- 16 objects.  Total bytes: 22,317.------------------------------------------
Locked bridge to this key:
  ~Crag && !~Crag
You can't remove that.
You see no "painting->bridge->party" here.
They look like they're having fun!
It is empty.
Crag | l painting's bridge's party
 integrate_in            unknown hacker (#35)  r      {#145}
-------------------------------- finished ---------------------------------
Last modified Sat May 31 17:19:19 1997 PDT by Xythian (#199) (on Waterpoint).
#126:"description" this none this
desc = pass(@args);
// defaultdesc = {"You see nothing special."};
// if (!desc)
//  desc = defaultdesc;
// endif
integrate = $integration_utils:integrate(args, "integrate_container_msg");
if (integrate)
  if (!desc)
    return integrate;
  else
    desc[$] = desc[$] + $string_utils:pronoun_sub(this.integrate_sep_msg) + integrate[1];
    if (length(integrate) > 1)
      desc = {@desc, @integrate[2..$]};
    endif
  endif
endif
return desc;
Object #126 does not define that verb, but its ancestor #145 does.
Last modified Fri May 31 08:49:53 1996 PDT by DavidSan (#84) (on JHM).
#145:"look_self" this none this
things = this:visible_of(this:contents());
integrate = {};
if ("for now" || this.integration_enabled)
  for i in (things)
    if (this:ok_to_integrate(i))
      integrate = {@integrate, i};
      things = setremove(things, i);
    endif
  endfor
endif
pass(integrate);
this:tell_contents(things);
return;
You now have Non-VR detail (aka detail) with object number #265 and parent generic container (#126).
Verb added [1] (0).
Now programming Non-VR detail:tell_contents[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Objects owned by Crag (from #0 to #265):
  8K #243 Crag                      *[first room]
  1K #245 leather couch             *[first room]
  1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #259 Robert's TF settings      *[first room]
 <1K #262 detailed painting         *[first room]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
-- 17 objects.  Total bytes: 22,998.------------------------------------------
Parent changed.
Parent changed.
Parent changed.
This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle. A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.
Focusing on the bridge you observe a party of adventures apparently setting out to conquer the forest. They and their steeds are well armored, and they bring with them a cart which presumably contains supplies for their journey.
They look like they're having fun!
That is not a valid command.
You see no scene here.
You see no scene here.
That is not a valid command.
You see no scene here.
That is not a valid command.
You set the "integrate_container" message of the bridge (#263).
This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle. A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.  A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#262.description" name: "detailed painting.description" type: string content*: "" _data-tag: 205092575323
#$#* 205092575323 content: This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle. A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.
#$#: 205092575323
Set description property of the detailed painting (#262).
This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle.  A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.
Either the bridge doesn't want to go, or the first room doesn't want to accept it.
Unlocked detailed painting.
Unlocked bridge.
You remove a bridge from the detailed painting.
This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle.
You put the bridge in the detailed painting.
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
=> 0
examine_verbs
examine_verb_ok
obvious_verbs hidden_verbs help_verbs
is_hidden_verb
verb_sub noun_sub adj_sub
verb_sub_for noun_sub_for
=> 0
examine_contents
contents objects_for_match
name_for_tell_contents namec_for_tell_contents
=> 0
Object #126 does not define that verb, but its ancestor #1 does.
Last modified Mon Jan  1 08:33:14 2001 PST by splat (#4014) (on Waterpoint).
#1:"examine_contents" (who)
// examine_contents(examiner)
// by default, calls :tell_contents.
if (caller == this && $object_utils:has_verb(this, "tell_contents"))
  this:tell_contents(this.contents);
endif
Objects owned by Crag (from #0 to #265):
  8K #243 Crag                      *[first room]
  1K #245 leather couch             *[first room]
  1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #259 Robert's TF settings      *[first room]
 <1K #262 detailed painting         *[first room]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
-- 17 objects.  Total bytes: 22,998.------------------------------------------
Verb added [2] (1).
Now programming Non-VR detail:examine_contents[2](1).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
Last modified Sun Jan  7 06:52:56 2001 PST by Xplat (#4014) (on Waterpoint).
#1:"examine_verbs" this none this
// Return a list of strings to be told to the player.  Standard format says "Obvious verbs:" followed by a series of lines explaining syntax for each usable verb.
if (caller != this)
  // RAISEME
  return E_PERM;
endif
who = args[1];
name = dobjstr;
vrbs = {};
commands_ok = `this:examine_commands_ok(who) ! E_VERBNF => 0';
dull_classes = {$root_class, $room, $player, $prog, $builder, $event_dispatcher};
what = this;
hidden_verbs = this:hidden_verbs(who);
while (what != $nothing)
  if (!(what in dull_classes))
    for i in [1..length(verbs(what))]
      info = verb_info(what, i);
      syntax = verb_args(what, i);
      if (this:examine_verb_ok(what, i, info, syntax, commands_ok, hidden_verbs))
        dobj = syntax[1];
        prep = syntax[2];
        iobj = syntax[3];
        if (syntax == {"any", "any", "any"})
          prep = "none";
        endif
        if (prep != "none")
          for x in ($string_utils:explode(prep, "/"))
            if (length(x) <= length(prep))
              prep = x;
            endif
          endfor
        endif
        // This is the correct way to handle verbs ending in *
        vname = info[3];
        while (i = index(vname, "* "))
          vname[i..i] = "<anything>";
        endwhile
        if (vname[$] == "*")
          vname[$..$] = "<anything>";
        endif
        vname = strsub(vname, " ", "/");
        rest = "";
        if (prep != "none")
          rest = " " + (prep == "any" ? "<anything>" | prep);
          if (iobj != "none")
            rest = tostr(rest, " ", iobj == "this" ? name | "<anything>");
          endif
        endif
        if (dobj != "none")
          rest = tostr(" ", dobj == "this" ? name | "<anything>", rest);
        endif
        vrbs = setadd(vrbs, "  " + vname + rest);
      endif
      $command_utils:suspend_if_needed(0);
    endfor
  endif
  what = parent(what);
endwhile
if (vrbs)
  return {"Obvious verbs:", @vrbs};
endif
Please note that your destination would not have accepted you if you were a non-wizard.
Moved.
That is not a valid command.
@integrate_room me isn't set.
@integrate_player me isn't set.
@integrate_container me isn't set.
@in me is "in"
@page_absent me is "%Nd %n:(is) not currently logged in."
@page_origin me isn't set.
@page_echo me isn't set.
@spoof_attribution me is "     --"
@integrate_sep me is "  "
@remote_emote_prefix me is "(from %li)"
@dozing me is "idling"
@idle me is "real life intrusion"
@doing me is ""
@shout me is "%Nd %n:(shouts), \"%$a\""
@newt_victim me isn't set.
@newt me is "%Nd %n:(@newts) %dd (%d#)."
@programmer me is "%Dd %d:(is) now a programmer."
@programmer_victim me is "You are now a programmer."
@toad_victim me is "Have a nice life..."
@toad me is "%Nd %n:(@toads) %dd (%d#)."
@boot_player me is "%Nd %n:(boots) %dd."
Please note that your destination would not have accepted you if you were a non-wizard.
stormagnet removes you from the detailed painting.
You set the "integrate_container" message of Crag (#243).
That is not a valid command.
=> #246 (stormagnet)
=> {"You see a wizard who chooses not to reveal eir true appearance."}
Line 1:  syntax error
1 error.
You see a wizard who chooses not to reveal eir true appearance.
She is awake, but has been staring off into space for a minute.
Carrying:
 a Generic Wind-Up Toy                   Crag
=> 0
You set the "integrate_player" message of Crag (#243).
You see a wizard who chooses not to reveal eir true appearance.  Crag is riding stormagnet piggyback.
She is awake and looks alert.
Carrying:
 a Generic Wind-Up Toy                   
=> 0
You click your heels three times.
The First Room
This is all there is right now.  A leather couch is here.  Someone has artfully hung a detailed painting on a wall.
You see a Robert's TF settings and Wind-Up Duck here.
stormagnet is here.  Beaker is off in another world.
You are moved by stormagnet.
Please note that your destination would not have accepted you if you were a non-wizard.
=> #262 (detailed painting)
This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle.  A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.  Crag is in detailed painting! That can't be good...
=> 0
@integrate_room me isn't set.
@integrate_player me is "%tn %t:(is) riding %tln piggyback."
@integrate_container me is "%tn is in %tln! That can't be good..."
@in me is "in"
@page_absent me is "%Nd %n:(is) not currently logged in."
@page_origin me isn't set.
@page_echo me isn't set.
@spoof_attribution me is "     --"
@integrate_sep me is "  "
@remote_emote_prefix me is "(from %li)"
@dozing me is "idling"
@idle me is "real life intrusion"
@doing me is ""
@shout me is "%Nd %n:(shouts), \"%$a\""
@newt_victim me isn't set.
@newt me is "%Nd %n:(@newts) %dd (%d#)."
@programmer me is "%Dd %d:(is) now a programmer."
@programmer_victim me is "You are now a programmer."
@toad_victim me is "Have a nice life..."
@toad me is "%Nd %n:(@toads) %dd (%d#)."
@boot_player me is "%Nd %n:(boots) %dd."
You set the "integrate_container" message of Crag (#243).
You set the "integrate_container" message of Crag (#243).
This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle.  A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.  Crag is in the detailed painting! That can't be good...
=> 0
generic room (#3)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
detailed painting (#262)   Non-VR detail (#265)   generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
Non-VR detail (#265) [ readable ]
  Child of generic container (#126).
  Location Crag (#243).
  #265:tell_contents            Crag (#243)          rxd    this none this
  #265:examine_contents         Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Parent changed.
Some property existing on #126 is defined on #3 or one of its descendants.
Try @check-chparent #3 to #126

Property                      Also Defined on
--------                      ---------------
#126.integration_enabled      #3
#126.integrate_sep_msg        #3
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
    #3:confunc                  unknown hacker (#35) rxd    this none this
    #3:disfunc                  unknown hacker (#35) rxd    this none this
    #3:say                      unknown hacker (#35) rxd    any any any
    #3:emote                    unknown hacker (#35) rxd    any any any
    #3:announce                 unknown hacker (#35) rxd    this none this
    #3:"match_exit match_entrance" unknown hacker (#35) rxd this none this
    #3:add_exit                 Core-Wizard (#184)   rxd    this none this
    #3:tell_contents            unknown hacker (#35) rxd    this none this
    #3:@exits                   unknown hacker (#35) rxd    any none none
    #3:add_entrance             Core-Wizard (#184)   rxd    this none this
    #3:bless_for_entry          Core-Wizard (#184)   rxd    this none this
    #3:@entrances               Core-Wizard (#184)   r d    none none none
    #3:go                       Core-Wizard (#184)   rxd    any none none
    #3:l*ook                    unknown hacker (#35) rxd    any any any
    #3:announce_all             unknown hacker (#35) rxd    this none this
    #3:announce_all_but         unknown hacker (#35) rxd    this none this
    #3:enterfunc                Core-Wizard (#184)   rxd    this none this
    #3:remove_exit              Core-Wizard (#184)   rxd    this none this
    #3:remove_entrance          Core-Wizard (#184)   rxd    this none this
    #3:"@add-exit @addexit"     Core-Wizard (#184)   r d    any none none
    #3:"@add-entrance @addentrance" Core-Wizard (#184) r d  any none none
    #3:recycle                  Core-Wizard (#184)   rxd    this none this
    #3:"e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down" unknown hacker (#35) rxd none none none
    #3:@eject                   Core-Wizard (#184)   r d    any none none
    #3:"ejection_msg oejection_msg victim_ejection_msg" unknown hacker (#35) rxd this none this
    #3:accept_for_abode         unknown hacker (#35) rxd    this none this
    #3:@resident*s              Core-Wizard (#184)   r d    any none none
    #3:@remove-exit             Core-Wizard (#184)   r d    any none none
    #3:@remove-entrance         Core-Wizard (#184)   r d    any none none
    #3:moveto                   Core-Wizard (#184)   rxd    this none this
    #3:who_location_msg         unknown hacker (#35) rxd    this none this
    #3:"exits entrances"        Core-Wizard (#184)   rxd    this none this
    #3:obvious_exits            unknown hacker (#35) rxd    this none this
    #3:here_huh                 Core-Wizard (#184)   rxd    this none this
    #3:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #3:examine_commands_ok      unknown hacker (#35) rxd    this none this
    #3:examine_key              Core-Wizard (#184)   rxd    this none this
    #3:examine_contents         unknown hacker (#35) rxd    this none this
    #3:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #3:look_self                unknown hacker (#35) rxd    this none this
    #3:description              unknown hacker (#35) rxd    this none this
    #3:where_am_i               unknown hacker (#35) rxd    this none this
    #3:"housekeeper_msg housekeeper_deposit_msg" unknown hacker (#35) rxd this none this
    #3:look_in                  unknown hacker (#35) rxd    this none this
    #3:namec_for_look_self      unknown hacker (#35) rxd    this none this
    #3:set_integrate_unknown_objects unknown hacker (#35) rx this none this
    #3:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
    #3:reconfunc                unknown hacker (#35) rxd    this none this
    #3:sit                      unknown hacker (#35) rxd    none none none
    #3:stand                    unknown hacker (#35) r d    none none none
    #3:topic_msg                unknown hacker (#35) rxd    this none this
    #3:topic                    unknown hacker (#35) r d    any any any
    #3:set_topic_sign           topic-owner (#181)   rxd    this none this
    #3:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #3:match_type_object        unknown hacker (#35) rxd    this none this
    #3:party_location           unknown hacker (#35) rxd    this none this
    #3:init_for_core            Core-Wizard (#184)   rxd    this none this
    #3:acceptable               Core-Wizard (#184)   rxd    this none this
    #3:is_public_location       Core-Wizard (#184)   rxd    this none this
    #3:objects_for_match        unknown hacker (#35) rxd    this none this
    #3:set_walking_cost         unknown hacker (#35) rxd    this none this
    #3:walking_cost             unknown hacker (#35) rxd    this none this
    #3:"can_add_exit can_add_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_remove_exit can_remove_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_read_exits can_read_entrances" Core-Wizard (#184) rxd this none this
    #3:terrain_delay            unknown hacker (#35) rxd    this none this
    #3:set_terrain_delay        unknown hacker (#35) rx     this none this
    #3:"walk_failed_source walk_failed_dest" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------

Property                      Also Defined on
--------                      ---------------
#126.integration_enabled      #3
#126.integrate_sep_msg        #3
generic room (#3)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
generic containing object (#145) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic event dispatching object (#110).
  Location generic container (#126).
  #145:enterfunc                Core-Wizard (#184)   rxd    this none this
  #145:exitfunc                 Core-Wizard (#184)   rxd    this none this
  #145:tell_contents            unknown hacker (#35) rxd    this none this
  #145:"empty_msg in_msg"       unknown hacker (#35) rx     this none this
  #145:in_name                  unknown hacker (#35) rxd    this none this
  #145:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #145:look_self                unknown hacker (#35) rxd    this none this
  #145:look_in                  unknown hacker (#35) rxd    this none this
  #145:visible_of               unknown hacker (#35) rxd    this none this
  #145:contents_for_integration unknown hacker (#35) rxd    this none this
  #145:ok_to_integrate          unknown hacker (#35) rxd    this none this
  #145:acceptable               unknown hacker (#35) rxd    this none this
  #145:in_namec                 unknown hacker (#35) rxd    this none this
  #145:modname_in               unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
-------------------------------- finished ---------------------------------
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
    #3:confunc                  unknown hacker (#35) rxd    this none this
    #3:disfunc                  unknown hacker (#35) rxd    this none this
    #3:say                      unknown hacker (#35) rxd    any any any
    #3:emote                    unknown hacker (#35) rxd    any any any
    #3:announce                 unknown hacker (#35) rxd    this none this
    #3:"match_exit match_entrance" unknown hacker (#35) rxd this none this
    #3:add_exit                 Core-Wizard (#184)   rxd    this none this
    #3:tell_contents            unknown hacker (#35) rxd    this none this
    #3:@exits                   unknown hacker (#35) rxd    any none none
    #3:add_entrance             Core-Wizard (#184)   rxd    this none this
    #3:bless_for_entry          Core-Wizard (#184)   rxd    this none this
    #3:@entrances               Core-Wizard (#184)   r d    none none none
    #3:go                       Core-Wizard (#184)   rxd    any none none
    #3:l*ook                    unknown hacker (#35) rxd    any any any
    #3:announce_all             unknown hacker (#35) rxd    this none this
    #3:announce_all_but         unknown hacker (#35) rxd    this none this
    #3:enterfunc                Core-Wizard (#184)   rxd    this none this
    #3:remove_exit              Core-Wizard (#184)   rxd    this none this
    #3:remove_entrance          Core-Wizard (#184)   rxd    this none this
    #3:"@add-exit @addexit"     Core-Wizard (#184)   r d    any none none
    #3:"@add-entrance @addentrance" Core-Wizard (#184) r d  any none none
    #3:recycle                  Core-Wizard (#184)   rxd    this none this
    #3:"e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down" unknown hacker (#35) rxd none none none
    #3:@eject                   Core-Wizard (#184)   r d    any none none
    #3:"ejection_msg oejection_msg victim_ejection_msg" unknown hacker (#35) rxd this none this
    #3:accept_for_abode         unknown hacker (#35) rxd    this none this
    #3:@resident*s              Core-Wizard (#184)   r d    any none none
    #3:@remove-exit             Core-Wizard (#184)   r d    any none none
    #3:@remove-entrance         Core-Wizard (#184)   r d    any none none
    #3:moveto                   Core-Wizard (#184)   rxd    this none this
    #3:who_location_msg         unknown hacker (#35) rxd    this none this
    #3:"exits entrances"        Core-Wizard (#184)   rxd    this none this
    #3:obvious_exits            unknown hacker (#35) rxd    this none this
    #3:here_huh                 Core-Wizard (#184)   rxd    this none this
    #3:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #3:examine_commands_ok      unknown hacker (#35) rxd    this none this
    #3:examine_key              Core-Wizard (#184)   rxd    this none this
    #3:examine_contents         unknown hacker (#35) rxd    this none this
    #3:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #3:look_self                unknown hacker (#35) rxd    this none this
    #3:description              unknown hacker (#35) rxd    this none this
    #3:where_am_i               unknown hacker (#35) rxd    this none this
    #3:"housekeeper_msg housekeeper_deposit_msg" unknown hacker (#35) rxd this none this
    #3:look_in                  unknown hacker (#35) rxd    this none this
    #3:namec_for_look_self      unknown hacker (#35) rxd    this none this
    #3:set_integrate_unknown_objects unknown hacker (#35) rx this none this
    #3:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
    #3:reconfunc                unknown hacker (#35) rxd    this none this
    #3:sit                      unknown hacker (#35) rxd    none none none
    #3:stand                    unknown hacker (#35) r d    none none none
    #3:topic_msg                unknown hacker (#35) rxd    this none this
    #3:topic                    unknown hacker (#35) r d    any any any
    #3:set_topic_sign           topic-owner (#181)   rxd    this none this
    #3:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #3:match_type_object        unknown hacker (#35) rxd    this none this
    #3:party_location           unknown hacker (#35) rxd    this none this
    #3:init_for_core            Core-Wizard (#184)   rxd    this none this
    #3:acceptable               Core-Wizard (#184)   rxd    this none this
    #3:is_public_location       Core-Wizard (#184)   rxd    this none this
    #3:objects_for_match        unknown hacker (#35) rxd    this none this
    #3:set_walking_cost         unknown hacker (#35) rxd    this none this
    #3:walking_cost             unknown hacker (#35) rxd    this none this
    #3:"can_add_exit can_add_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_remove_exit can_remove_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_read_exits can_read_entrances" Core-Wizard (#184) rxd this none this
    #3:terrain_delay            unknown hacker (#35) rxd    this none this
    #3:set_terrain_delay        unknown hacker (#35) rx     this none this
    #3:"walk_failed_source walk_failed_dest" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of Helpful Object (#250).
  Location generic room (#3).
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#5:"examine_key" (who)
// examine_key(examiner)
// return a list of strings to be told to the player, indicating what the key on this type of object means, and what this object's key is set to.
// the default will only tell the key to a wizard or this object's owner.
if (caller == this && $perm_utils:controls(who, this) && this.key != 0)
  return {tostr(this:dnamec(), " can only be moved to locations matching this key:"), tostr("  ", $lock_utils:unparse_key(this.key))};
endif
#5:"moveto" (where)
if (!valid(where) || this:is_unlocked_for(where))
  pass(where);
endif
The root class(#1) has 20 kids.
Guest Log (#12)   Limbo (#15)   Mail Distribution Center (#42)   Error Generator (#66)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   http (#87)   SMTP (#212)   FTP (#230)   link dispatcher tag (#123)   Tag Root (#91)   Address Root (#109)   Helpful Object (#250)   MCP parent (#251)   Parsing objects (#252)   Text generation objects (#253)   Abstract class (#254)
Objects owned by Crag (from #0 to #265):
  8K #243 Crag                       [detailed painting]
  1K #245 leather couch             *[first room]
  1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #259 Robert's TF settings      *[first room]
 <1K #262 detailed painting         *[first room]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
-- 17 objects.  Total bytes: 22,998.------------------------------------------
The Abstract class(#254) has 19 kids.
Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Generic Option Package (#60)   Generic Feature Object (#65)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   Generic BigList Resident (#75)   generic property farm (#206)   Generic Pronoun_sub Translator (#73)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)
generic player (#6) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
  Location generic room (#3).
    #6:init_for_core            Core-Wizard (#184)   rxd    this none this
    #6:confunc                  Core-Wizard (#184)   rxd    this none this
    #6:disfunc                  Core-Wizard (#184)   rxd    this none this
    #6:initialize               Core-Wizard (#184)   rxd    this none this
    #6:recycle                  Core-Wizard (#184)   rxd    this none this
    #6:my_huh                   Core-Wizard (#184)   rxd    this none this
    #6:last_huh                 Core-Wizard (#184)   rxd    this none this
    #6:my_match_object          Core-Wizard (#184)   rxd    this none this
    #6:tell_contents            Core-Wizard (#184)   rxd    this none this
    #6:notify                   Core-Wizard (#184)   rxd    this none this
    #6:notify_lines             Core-Wizard (#184)   rxd    this none this
    #6:linesplit                Core-Wizard (#184)   rxd    this none this
    #6:linelen                  unknown hacker (#35) rxd    this none this
    #6:@more                    Core-Wizard (#184)   r d    any none none
    #6:@wrap                    unknown hacker (#35) r d    none any none
    #6:@linelen*gth             unknown hacker (#35) r d    any none none
    #6:@pagelen*gth             Core-Wizard (#184)   r d    any none none
    #6:tell                     Core-Wizard (#184)   rxd    this none this
    #6:gag_p                    Core-Wizard (#184)   rxd    this none this
    #6:"set_gaglist set_gaglist_noisy" Core-Wizard (#184) rxd this none this
    #6:@gag                     Core-Wizard (#184)   r d    any any any
    #6:"@listgag @gaglist @gagged" Core-Wizard (#184) rxd   none none none
    #6:@ungag                   Core-Wizard (#184)   rxd    any none none
    #6:whodunnit                Core-Wizard (#184)   rxd    this none this
    #6:@paranoid                Core-Wizard (#184)   r d    any any any
    #6:@sw*eep                  Core-Wizard (#184)   r d    none none none
    #6:wh*isper                 Core-Wizard (#184)   rxd    any at/to this
    #6:receive_page             Core-Wizard (#184)   rxd    this none this
    #6:"page_origin_msg page_echo_msg page_absent_msg" unknown hacker (#35) rxd this none this
    #6:"i inv*entory"           Core-Wizard (#184)   r d    none none none
    #6:look_self                Core-Wizard (#184)   rxd    this none this
    #6:home                     Core-Wizard (#184)   r d    none none none
    #6:@sethome                 Core-Wizard (#184)   r d    none none none
    #6:"g*et take"              Core-Wizard (#184)   rxd    this none none
    #6:@eject                   Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:"where*is @where*is"     Core-Wizard (#184)   rxd    any any any
    #6:@wizards                 Core-Wizard (#184)   rxd    any none none
    #6:"mail_forward mail_notify" Core-Wizard (#184) rxd    this none this
    #6:receive_message          Core-Wizard (#184)   rxd    this none this
    #6:display_message          Core-Wizard (#184)   rxd    this none this
    #6:"parse_message_seq from_msg_seq %from_msg_seq to_msg_seq %to_msg_seq subject_msg_seq body_msg_seq display_seq_headers display_seq_full messages_in_seq list_rmm new_message_num length_num_le length_date_le length_date_gt length_all_msgs exists_num_eq rm_message_seq undo_rmm expunge_rmm renumber" Core-Wizard (#184) rxd this none this
    #6:msg_summary_line         unknown hacker (#35) rxd    this none this
    #6:msg_text                 Core-Wizard (#184)   rxd    this none this
    #6:notify_mail              Core-Wizard (#184)   rxd    this none this
    #6:current_message          Core-Wizard (#184)   rxd    this none this
    #6:get_current_message      Core-Wizard (#184)   rxd    this none this
    #6:set_current_message      Core-Wizard (#184)   rxd    this none this
    #6:make_current_message     Core-Wizard (#184)   rxd    this none this
    #6:kill_current_message     Core-Wizard (#184)   rxd    this none this
    #6:current_folder           Core-Wizard (#184)   rxd    this none this
    #6:set_current_folder       Core-Wizard (#184)   rxd    this none this
    #6:parse_folder_spec        Core-Wizard (#184)   rxd    this none this
    #6:parse_mailread_cmd       Core-Wizard (#184)   rxd    this none this
    #6:@mail                    Core-Wizard (#184)   rxd    any any any
    #6:"@read @peek"            Core-Wizard (#184)   rxd    any any any
    #6:"@next @prev"            Core-Wizard (#184)   r d    any any any
    #6:@rmm*ail                 Core-Wizard (#184)   r d    any any any
    #6:@renumber                Core-Wizard (#184)   r d    any none none
    #6:@unrmm*ail               Core-Wizard (#184)   r d    any any any
    #6:@send                    Core-Wizard (#184)   rxd    any any any
    #6:"@answer @repl*y"        Core-Wizard (#184)   r d    any any any
    #6:@forward                 Core-Wizard (#184)   rxd    any any any
    #6:@gripe                   Core-Wizard (#184)   r d    any any any
    #6:"@typo @bug @suggest*ion @idea @comment" Core-Wizard (#184) r d any any any
    #6:"@skip @unsub*scribe"    Core-Wizard (#184)   r d    any any any
    #6:@subscribe               Core-Wizard (#184)   r d    any any any
    #6:mail_catch_up            Core-Wizard (#184)   rxd    this none this
    #6:"@rn check_mail_lists @subscribed" Core-Wizard (#184) rx none none none
    #6:mail_option              Core-Wizard (#184)   rxd    this none this
    #6:edit_option              Core-Wizard (#184)   rxd    this none this
    #6:"set_mail_option set_edit_option set_misc_option set_client_option set_who_option set_parse_option" Core-Wizard (#184) rxd this none this
    #6:"@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @misco*ptions @misc-o*ptions @cliento*ptions @client-o*ptions @whoo*ptions @who-o*ptions @parseo*ptions @parse-o*ptions" Core-Wizard (#184) r d any any any
    #6:set_name                 Core-Wizard (#184)   rxd    this none this
    #6:set_aliases              Core-Wizard (#184)   rxd    this none this
    #6:@rename*#                Core-Wizard (#184)   r d    any at/to any
    #6:"@add-alias*# @addalias*# @add_alias*#" Core-Wizard (#184) r d any at/to any
    #6:"@rmalias*# @rm-alias*#" Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:@desc*ribe               Core-Wizard (#184)   r d    any as any
    #6:@mess*ages               Core-Wizard (#184)   r d    any none none
    #6:@notedit                 unknown hacker (#35) r d    any none none
    #6:@password                Core-Wizard (#184)   r d    any any any
    #6:@last-c*onnection        Core-Wizard (#184)   rxd    any none none
    #6:"set_gender set_gender_name set_gender_obj" Core-Wizard (#184) rxd this none this
    #6:@gender                  Core-Wizard (#184)   r d    any none none
    #6:@ex*amine                Core-Wizard (#184)   rxd    any none none
    #6:ex*amine                 Core-Wizard (#184)   r d    any none none
    #6:add_feature              unknown hacker (#35) rx     this none this
    #6:remove_feature           unknown hacker (#35) rxd    this none this
    #6:"@add-feature @addfeature" Core-Wizard (#184) r d    any none none
    #6:"@remove-feature @rmfeature @rm-feature" Core-Wizard (#184) r d any none none
    #6:@features                Core-Wizard (#184)   rxd    any for/about any
    #6:@features                Core-Wizard (#184)   r d    any none none
    #6:@memory                  unknown hacker (#35) r d    none none none
    #6:@version                 unknown hacker (#35) r d    none none none
    #6:@uptime                  unknown hacker (#35) r d    none none none
    #6:"@quit quit"             Core-Wizard (#184)   r d    none none none
    #6:QUIT-IN-ALL-CAPS         Core-Wizard (#184)   r d    none none none
    #6:notify(new)              Core-Wizard (#184)   r d    this none this
    #6:examine_commands_ok      Core-Wizard (#184)   rxd    this none this
    #6:is_listening             Core-Wizard (#184)   rxd    this none this
    #6:"@quicksend @qsend"      Core-Wizard (#184)   r d    any any any
    #6:!*                       unknown hacker (#35) r d    any any any
    #6:'*                       unknown hacker (#35) r      any any any
    #6:"@pronoun_sub @pronoun-sub" Core-Wizard (#184) r d   none with/using any
    #6:"@set-note-string @set-note-text @set-note-value" Core-Wizard (#184) r d any none none
    #6:description              unknown hacker (#35) rxd    this none this
    #6:@nn                      Core-Wizard (#184)   r d    none none none
    #6:mu*rmur                  Core-Wizard (#184)   r d    any any any
    #6:look_in                  Core-Wizard (#184)   rxd    this none this
    #6:@option*s                Core-Wizard (#184)   r d    any any any
    #6:options_packages         Core-Wizard (#184)   rxd    this none this
    #6:options_command          Core-Wizard (#184)   rxd    this none this
    #6:contribute_partial       Core-Wizard (#184)   rxd    this none this
    #6:contribute_reset         Core-Wizard (#184)   rxd    this none this
    #6:contribute_link          Core-Wizard (#184)   rxd    this none this
    #6:receive_vbox             unknown hacker (#35) rxd    this none this
    #6:contribute_title         Core-Wizard (#184)   rxd    this none this
    #6:moveto                   Core-Wizard (#184)   rxd    this none this
    #6:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #6:visible_of               unknown hacker (#35) rxd    this none this
    #6:@set-jtext-form          Core-Wizard (#184)   r d    any none none
    #6:idle_suffix              Core-Wizard (#184)   rxd    this none this
    #6:modname_v                Core-Wizard (#184)   rxd    this none this
    #6:@edit*#                  Core-Wizard (#184)   r d    any any any
    #6:set_focus_object         Core-Wizard (#184)   rxd    this none this
    #6:email_address            Core-Wizard (#184)   rxd    this none this
    #6:"misc_option client_option who_option parse_option" Core-Wizard (#184) rxd this none this
    #6:"@forward-me @forwardme" Core-Wizard (#184)   r d    any any any
    #6:ownership_quota          Core-Wizard (#184)   rxd    this none this
    #6:contribute_newline       Core-Wizard (#184)   rxd    this none this
    #6:"set_current_object set_current_object_stack set_authentication_key" Core-Wizard (#184) rxd this none this
    #6:client_notify            Core-Wizard (#184)   rxd    this none this
    #6:brief                    Core-Wizard (#184)   rxd    this none this
    #6:picknew                  unknown hacker (#35) r d    any none none
    #6:"walk go"                unknown hacker (#35) rxd    none at/to any
    #6:_find_path               Core-Wizard (#184)   rxd    this none this
    #6:join                     Core-Wizard (#184)   rxd    any none none
    #6:pick                     unknown hacker (#35) rxd    any on top of/on/onto/upon this
    #6:pop                      unknown hacker (#35) rxd    none on top of/on/onto/upon this
    #6:match_command            unknown hacker (#35) rxd    this none this
    #6:my_match_room            Core-Wizard (#184)   rxd    this none this
    #6:features                 Core-Wizard (#184)   rxd    this none this
    #6:receive_document         Core-Wizard (#184)   rxd    this none this
    #6:"@co @currentobject @current-object" Core-Wizard (#184) r d any none none
    #6:parse_current_object     unknown hacker (#35) rxd    this none this
    #6:@pusho*bject             Core-Wizard (#184)   r d    any none none
    #6:@popo*object             Core-Wizard (#184)   r d    none none none
    #6:@swapo*bject             Core-Wizard (#184)   r d    none none none
    #6:jdetails                 Core-Wizard (#184)   r d    any none none
    #6:@@sendmail               Core-Wizard (#184)   r d    any any any
    #6:fol*low                  unknown hacker (#35) r d    this none none
    #6:unfol*low                unknown hacker (#35) r d    any any any
    #6:followers                unknown hacker (#35) r d    any any any
    #6:following                unknown hacker (#35) r d    none none none
    #6:my_match_player          Core-Wizard (#184)   rxd    this none this
    #6:news                     Core-Wizard (#184)   r d    any none none
    #6:"@helpme @911"           Core-Wizard (#184)   r d    any any any
    #6:"@admin*istrators @admins" Core-Wizard (#184) rxd    any none none
    #6:"parse_message unparse_message" Core-Wizard (#184) rxd this none this
    #6:@url                     Core-Wizard (#184)   r d    any any any
    #6:@read-all-new*-mail      Core-Wizard (#184)   rxd    any none none
    #6:send_self_netmail        Core-Wizard (#184)   rxd    this none this
    #6:@add-help-db             Core-Wizard (#184)   r d    any none none
    #6:@rm-help-db              Core-Wizard (#184)   r d    any none none
    #6:@unsubscribed            Core-Wizard (#184)   r d    none none none
    #6:reconfunc                Core-Wizard (#184)   rxd    this none this
    #6:@resend                  Core-Wizard (#184)   r d    any any any
    #6:"help ?*"                Core-Wizard (#184)   rxd    any any any
    #6:match_help_object        unknown hacker (#35) rxd    this none this
    #6:@aliases                 Core-Wizard (#184)   r d    any none none
    #6:contribute_newline_maybe Core-Wizard (#184)   rxd    this none this
    #6:contribute_hr            Core-Wizard (#184)   rxd    this none this
    #6:set_last_player_paged    Core-Wizard (#184)   rxd    this none this
    #6:visible                  unknown hacker (#35) rxd    this none this
    #6:set_number               unknown hacker (#35) rxd    this none this
    #6:you                      unknown hacker (#35) rxd    this none this
    #6:page                     Core-Wizard (#184)   rxd    any any any
    #6:is_idle                  Core-Wizard (#184)   rxd    none none none
    #6:start_dozing             Core-Wizard (#184)   rxd    this none this
    #6:start_idling             Core-Wizard (#184)   rxd    this none this
    #6:"idle reidle"            Core-Wizard (#184)   rxd    any any any
    #6:idle_msg                 Core-Wizard (#184)   rxd    this none this
    #6:dozing_msg               Core-Wizard (#184)   rxd    this none this
    #6:start_doing              unknown hacker (#35) rxd    this none this
    #6:doing_msg                Core-Wizard (#184)   rxd    this none this
    #6:"doing undoing"          Core-Wizard (#184)   r d    any any any
    #6:@who                     Core-Wizard (#184)   rxd    any any any
    #6:debug_if_player          Core-Wizard (#184)   rxd    this none this
    #6:match_type_object        Core-Wizard (#184)   rxd    this none this
    #6:dependents_event_really_disconnected Core-Wizard (#184) rxd this none this
    #6:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:maybe_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:modname_c                unknown hacker (#35) rxd    this none this
    #6:@desc*ribe               Core-Wizard (#184)   r d    any none none
    #6:@netforw*ard             Core-Wizard (#184)   r d    any any any
    #6:@register                Core-Wizard (#184)   r d    any as any
    #6:"@register @email-address" Core-Wizard (#184) r      any none none
    #6:more_string              Core-Wizard (#184)   rxd    this none this
    #6:desc_idle_msg            Core-Wizard (#184)   rxd    this none this
    #6:nominate_for_core        Core-Wizard (#184)   rxd    this none this
    #6:sit                      Core-Wizard (#184)   r d    none with/using this
    #6:acceptable               Core-Wizard (#184)   rxd    this none this
    #6:@shout                   Core-Wizard (#184)   r d    any any any
    #6:set_home                 unknown hacker (#35) rx     this none this
    #6:anyconfunc               Core-Wizard (#184)   rxd    this none this
    #6:@ch*eck-full             Core-Wizard (#184)   r d    any any any
    #6:"@add-handler @addhandler" Core-Wizard (#184) r d    any none none
    #6:handlers                 Core-Wizard (#184)   rxd    this none this
    #6:"@remove-handler @rmhandler @rm-handler" Core-Wizard (#184) r d any none none
    #6:@handlers                Core-Wizard (#184)   rx     any for/about any
    #6:@handlers                Core-Wizard (#184)   r      any none none
    #6:total_connect_times      Core-Wizard (#184)   rxd    this none this
    #6:_set_mail_task           Core-Wizard (#184)   rxd    this none this
    #6:add_handler              unknown hacker (#35) rxd    this none this
    #6:remove_handler           unknown hacker (#35) rxd    this none this
    #6:"set_walking_dest set_walking_task" unknown hacker (#35) rx this none this
    #6:move_by_exits            unknown hacker (#35) rxd    this none this
    #6:walking_step             unknown hacker (#35) rxd    this none this
    #6:begin_walking            unknown hacker (#35) rxd    this none this
    #6:end_walking              unknown hacker (#35) rxd    this none this
    #6:"walkto walkto_blocking" unknown hacker (#35) rxd    this none this
    #6:find_path                unknown hacker (#35) rxd    this none this
    #6:stop                     unknown hacker (#35) r d    none none none
    #6:timestamp_string         Core-Wizard (#184)   rxd    this none this
    #6:@age                     Core-Wizard (#184)   r d    any none none
    #6:+*                       Core-Wizard (#184)   rxd    any any any
    #6:lose                     unknown hacker (#35) rxd    any any any
    #6:display_current_object   Core-Wizard (#184)   rxd    this none this
    #6:current_object_string    Core-Wizard (#184)   rxd    this none this
    #6:edit_set_note_value      Core-Wizard (#184)   rxd    this none this
    #6:edit_sendmail            Core-Wizard (#184)   rxd    this none this
    #6:absent_for_page          unknown hacker (#35) rxd    this none this
    #6:send_forwarded_moomail   Core-Wizard (#184)   rxd    this none this
    #6:walking_delay            unknown hacker (#35) rxd    this none this
    #6:walk_failed              Core-Wizard (#184)   rxd    this none this
    #6:my_walk_failed           Core-Wizard (#184)   rxd    this none this
    #6:dwim_objects             Core-Wizard (#184)   rxd    this none this
    #6:"@room*# @rooms*#"       unknown hacker (#35) rxd    any any any
    #6:set_timezone             unknown hacker (#35) rxd    this none this
    #6:ctime                    unknown hacker (#35) rxd    this none this
    #6:time_sub                 unknown hacker (#35) rxd    this none this
    #6:@lastlog                 unknown hacker (#35) rxd    any none none
-------------------------------- finished ---------------------------------
You click your heels three times.
The First Room
This is all there is right now.  A leather couch is here.  Someone has artfully hung a detailed painting on a wall.
You see a Robert's TF settings and Wind-Up Duck here.
stormagnet is here.  Beaker is off in another world.
stormagnet whispers to you, "hawt"
#6:"jdetails" any none none
if (player != this)
  player:tell("You're trying to get details on ", this.name, ".");
  return;
endif
number = tonum(dobjstr);
if (number < 1 || number > length(this.contributed_links))
  if (length(this.contributed_links) == 0)
    player:tell("You have no contributed links.");
    return;
  else
    player:tell("The current range of link numbers is 1 through ", length(this.contributed_links), ".");
    return;
  endif
endif
address = this.contributed_links[number];
player:tell(address[1].name + " (" + "$jaddress." + address[1].address_type + ")");
for pair in (address[2])
  player:tell("  " + pair[1] + ": " + pair[2]);
endfor
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
    #3:confunc                  unknown hacker (#35) rxd    this none this
    #3:disfunc                  unknown hacker (#35) rxd    this none this
    #3:say                      unknown hacker (#35) rxd    any any any
    #3:emote                    unknown hacker (#35) rxd    any any any
    #3:announce                 unknown hacker (#35) rxd    this none this
    #3:"match_exit match_entrance" unknown hacker (#35) rxd this none this
    #3:add_exit                 Core-Wizard (#184)   rxd    this none this
    #3:tell_contents            unknown hacker (#35) rxd    this none this
    #3:@exits                   unknown hacker (#35) rxd    any none none
    #3:add_entrance             Core-Wizard (#184)   rxd    this none this
    #3:bless_for_entry          Core-Wizard (#184)   rxd    this none this
    #3:@entrances               Core-Wizard (#184)   r d    none none none
    #3:go                       Core-Wizard (#184)   rxd    any none none
    #3:l*ook                    unknown hacker (#35) rxd    any any any
    #3:announce_all             unknown hacker (#35) rxd    this none this
    #3:announce_all_but         unknown hacker (#35) rxd    this none this
    #3:enterfunc                Core-Wizard (#184)   rxd    this none this
    #3:remove_exit              Core-Wizard (#184)   rxd    this none this
    #3:remove_entrance          Core-Wizard (#184)   rxd    this none this
    #3:"@add-exit @addexit"     Core-Wizard (#184)   r d    any none none
    #3:"@add-entrance @addentrance" Core-Wizard (#184) r d  any none none
    #3:recycle                  Core-Wizard (#184)   rxd    this none this
    #3:"e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down" unknown hacker (#35) rxd none none none
    #3:@eject                   Core-Wizard (#184)   r d    any none none
    #3:"ejection_msg oejection_msg victim_ejection_msg" unknown hacker (#35) rxd this none this
    #3:accept_for_abode         unknown hacker (#35) rxd    this none this
    #3:@resident*s              Core-Wizard (#184)   r d    any none none
    #3:@remove-exit             Core-Wizard (#184)   r d    any none none
    #3:@remove-entrance         Core-Wizard (#184)   r d    any none none
    #3:moveto                   Core-Wizard (#184)   rxd    this none this
    #3:who_location_msg         unknown hacker (#35) rxd    this none this
    #3:"exits entrances"        Core-Wizard (#184)   rxd    this none this
    #3:obvious_exits            unknown hacker (#35) rxd    this none this
    #3:here_huh                 Core-Wizard (#184)   rxd    this none this
    #3:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #3:examine_commands_ok      unknown hacker (#35) rxd    this none this
    #3:examine_key              Core-Wizard (#184)   rxd    this none this
    #3:examine_contents         unknown hacker (#35) rxd    this none this
    #3:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #3:look_self                unknown hacker (#35) rxd    this none this
    #3:description              unknown hacker (#35) rxd    this none this
    #3:where_am_i               unknown hacker (#35) rxd    this none this
    #3:"housekeeper_msg housekeeper_deposit_msg" unknown hacker (#35) rxd this none this
    #3:look_in                  unknown hacker (#35) rxd    this none this
    #3:namec_for_look_self      unknown hacker (#35) rxd    this none this
    #3:set_integrate_unknown_objects unknown hacker (#35) rx this none this
    #3:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
    #3:reconfunc                unknown hacker (#35) rxd    this none this
    #3:sit                      unknown hacker (#35) rxd    none none none
    #3:stand                    unknown hacker (#35) r d    none none none
    #3:topic_msg                unknown hacker (#35) rxd    this none this
    #3:topic                    unknown hacker (#35) r d    any any any
    #3:set_topic_sign           topic-owner (#181)   rxd    this none this
    #3:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #3:match_type_object        unknown hacker (#35) rxd    this none this
    #3:party_location           unknown hacker (#35) rxd    this none this
    #3:init_for_core            Core-Wizard (#184)   rxd    this none this
    #3:acceptable               Core-Wizard (#184)   rxd    this none this
    #3:is_public_location       Core-Wizard (#184)   rxd    this none this
    #3:objects_for_match        unknown hacker (#35) rxd    this none this
    #3:set_walking_cost         unknown hacker (#35) rxd    this none this
    #3:walking_cost             unknown hacker (#35) rxd    this none this
    #3:"can_add_exit can_add_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_remove_exit can_remove_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_read_exits can_read_entrances" Core-Wizard (#184) rxd this none this
    #3:terrain_delay            unknown hacker (#35) rxd    this none this
    #3:set_terrain_delay        unknown hacker (#35) rx     this none this
    #3:"walk_failed_source walk_failed_dest" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
Allowable residents in this room:  no one.
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Mon Mar 15 20:33:23 1999 PST by Xythian (#199) (on Waterpoint).
#3:"terrain_delay" this none this
return this.(verb);
.terrain_delay           unknown hacker (#35)  r      1
-------------------------------- finished ---------------------------------
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location first room (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
-------------------------------- finished ---------------------------------
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => first room (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$lock_utils.player => Crag (#243)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => first room (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
$jtext.link.browser => Browser Link Tag (#95)
$jtext.root => Tag Root (#91)
$jtext.vgroup => Vgroup Tag (#97)
$jtext.header => Header Tag (#102)
$jtext.title => Title Tag (#96)
$jtext.string => String Tag (#84)
$jtext.list_of_strings => List Of Strings Tag (#86)
$jtext.paragraph => Paragraph Tag (#101)
$jtext.dlist => Definition List Tag (#98)
$jtext.plaintext => Plaintext Tag (#128)
$jtext.list => List Tag (#129)
$jtext.index => Index Tag (#120)
$jtext.itemize => Itemize Tag (#138)
$jtext.itemize_unnumbered => Unnumbered Itemization Tag (#114)
$jtext.itemize_numbered => Numbered Itemization Tag (#125)
$jtext.isindex => ISINDEX Tag (#119)
$jtext.hr => Horizontal Rule Tag (#134)
$feature_help => feature object help database (#100)
$jaddress => Jaddress Dispatcher (#111)
$jaddress.root => Address Root (#109)
$jaddress.help => Help Address (#131)
$jaddress.browser_object => Browser Object Address (#90)
$jaddress.note => Note Address (#118)
$jaddress.browser_verb => Browser Verb Address (#143)
$jaddress.browser_inherited_properties => Browser Inherited Properties Address (#144)
$jaddress.resolved_help => Resolved Help Address (#172)
$misc_options => Miscellaneous Options (#112)
$client_options => Client Options (#116)
$building_options => building options (#122)
$it => it (#154)
$furniture => generic piece of furniture (#81)
$sittable => generic sittable object (#80)
$I => I (#160)
$everything => everything (#139)
$all => all (#103)
$admin_group => generic admin group (#163)
$admin_group.leader => Wizard (#2)
$steering_committee => Steering Committee (#137)
$db_group => DB Group (#148)
$unix_group => Unix Group (#147)
$community_group => Community Group (#165)
$community_group.feature => Community Group Commands (#149)
$tech_group => Tech Group (#164)
$admin_mail_recipient => Generic Administrators Mailing List (#107)
$registrar => Registrar (#108)
$event_dispatcher => generic event dispatching object (#110)
$prog_group => Programming Group (#124)
$openable_container => generic openable container (#8)
$containing_object => generic containing object (#145)
$utils => generic utilities (#146)
$boot_log => Boot-Log (#85)
$help_editor => help text editor (#171)
$object_help => Object Help Database (#173)
$tester => generic testing player (#99)
$failed_help => last resort help database (#127)
$failed_help.help_recipient => Bug-reports (#140)
$who_options => Who Options (#89)
$event_handler => generic event handler (#133)
$eval_options => Eval Options (#136)
$he => he (#156)
$she => she (#157)
$e => e (#158)
$we => we (#159)
$plural_you => you (#161)
$either => s/he (#162)
$splat => *e (#166)
$gender => generic gender object (#64)
$none => none (#167)
$topic => topic sign (#178)
$builder_help => Builder Help (#155)
$name_utils => Name Utilities (#177)
$name_utils.dummy => name-subbing dummy object (#132)
$name_utils.dummy_builder => dummy name builder (#236)
$guest_help => guest help database (#168)
$parse_utils => Parsing Utilities (#117)
$admin => administration (#170)
$core_wizard => Core-Wizard (#184)
$first_wizard => Wizard (#2)
$door => generic door (#121)
$ftp => old FTP (#234)
$quota_utils => Byte Quota Utilities (#174)
$quota_utils.working => J. Text (#176)
$window => generic window (#179)
$server_options => server options (#188)
$walking_utils => walking utils (#182)
$checkpointer => checkpointer (#175)
$startup => startup handler (#189)
$syslog => syslog (#183)
$generic_biglist_home => Generic BigList Resident (#75)
$http => http (#87)
$module => generic module (#203)
$property_farm => generic property farm (#206)
$modules => module registry (#205)
$modules.module => module system module (#202)
$modules.module.obj_sink_player => spam-player sink (#208)
$modules.module.obj_sink_note => generate note sink (#195)
$modules.module.obj_source_generic => generic source (#200)
$modules.module.obj_source_http => http source (#194)
$modules.module.obj_source_player => read() player source (#198)
$modules.module.obj_sink_generic_spam => generic gather-then-spam sink (#199)
$modules.module.obj_sink_generic => generic sink (#207)
$modules.module.obj_generic_source_or_sink => generic source or sink (#196)
$modules.module.obj_ftp_sink => FTP URL sink (#231)
$modules.module.obj_ftp_source => ftp source (#229)
$modules.mcp => MCP 2.1 module (#214)
$modules.mcp.obj_mcp => MCP 2.1 (#213)
$modules.mcp.obj_mcp.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp.session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp.package => generic MCP package (#216)
$modules.mcp.obj_mcp.negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp.registry => MCP package registry (#209)
$modules.mcp.obj_mcp.cord => mcp-cord (#217)
$modules.mcp.obj_mcp_parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp_package => generic MCP package (#216)
$modules.mcp.obj_mcp_negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp_cord => mcp-cord (#217)
$modules.mcp.obj_cord_stub => generic cord stub (#222)
$modules.mcp.obj_type_root => generic cord type (#218)
$modules.mcp.obj_message_dispatcher => generic message dispatch object (#219)
$modules.simpleedit => simpleedit module (#220)
$modules.simpleedit.obj_simpleedit_package => dns-org-mud-moo-simpleedit (#201)
$modules.smtp => SMTP module (#226)
$modules.smtp.obj_smtp => SMTP (#212)
$modules.listeners => listeners module (#228)
$modules.listeners.obj_listener => generic listener (#224)
$modules.listeners.obj_daemon => generic daemon listener (#211)
$modules.listeners.obj_daemon_handler => generic daemon service handler (#210)
$modules.listeners.obj_redlist_daemon => generic daemon listener with flood control (#225)
$modules.core_features => core feature objects (#233)
$modules.core_features.obj_stage_talk => Stage-Talk Feature (#67)
$modules.core_features.obj_thinking => Thinking Feature (#68)
$smtp => SMTP (#212)
$cord => Cord Dispatcher (#223)
$cord.root => generic cord stub (#222)
$cord.type_root => generic cord type (#218)
$mcp => MCP 2.1 (#213)
$mcp.parser => MCP 2.1 parser (#221)
$mcp.session => generic MCP 2.1 session (#204)
$mcp.package => generic MCP package (#216)
$mcp.negotiate => mcp-negotiate (#215)
$mcp.registry => MCP package registry (#209)
$mcp.cord => mcp-cord (#217)
$parse_options => Parsing Options (#191)
$ftp_client => FTP (#230)
$local => Local Namespace (#193)
$local.group => generic group (#244)
$local.pile => Generic Pile (#242)
$local.helpful => Helpful Object (#250)
$local.pilable => Generic Pilable Thing (#255)
$local.toy => Generic Wind-Up Toy (#260)
$building_group => Building Group (#192)
$documentation_group => documentation group (#232)
$room_matching_utils => room matching utilities (#190)
$policy_help => policy help database (#235)
$admin_help => administration group help (#238)
$jhcore_help => JHCore Help DB (#237)
$namebuilder_i => namebuilder_i for #1 (#227)
$namebuilder_d => namebuilder_d for #1 (#239)
=> 0
=> {"builder", "login", "last_huh", "guest_log", "last_restart_time", "biglist", "big_mail_recipient", "limbo", "registration_db", "new_player_log", "verb_help", "core_help", "prog_help", "wiz_help", "shutdown_task", "wiz_utils", "site_db", "math_utils", "set_utils", "builtin_function_help", "new_prog_log", "generic_help", "guest", "seq_utils", "quota_log", "you", "hacker", "generic_db", "shutdown_message", "shutdown_time", "no_one", "player_db", "player_class", "gender_utils", "trig_utils", "time_utils", "editor_help", "mail_recipient", "mail_agent", "mail_editor", "note_editor", "verb_editor", "generic_editor", "object_utils", "lock_utils", "gripe_recipients", "dump_interval", "list_utils", "command_utils", "player", "wiz", "prog", "code_utils", "help", "nothing", "failed_match", "ambiguous_match", "perm_utils", "building_utils", "string_utils", "news", "note", "container", "thing", "exit", "room", "player_start", "root_class", "recycler", "garbage", "mail_options", "edit_options", "display_options", "generic_options", "maxint", "minint", "list_options", "error", "newt_log", "toad_log", "site_log", "housekeeper", "feature", "pronoun_sub", "they", "login_watcher", "english", "language", "integration_utils", "network", "country_db", "jtext", "feature_help", "jaddress", "misc_options", "client_options", "building_options", "it", "nobody", "furniture", "sittable", "I", "everything", "all", "nowhere", "admin_group", "steering_committee", "db_group", "unix_group", "community_group", "tech_group", "admin_mail_recipient", "registrar", "event_dispatcher", "prog_group", "openable_container", "containing_object", "utils", "biglist_utils", "english_utils", "boot_log", "help_editor", "object_help", "tester", "failed_help", "who_options", "who_utils", "event_handler", "eval_options", "he", "she", "e", "we", "plural_you", "either", "splat", "gender", "neuter", "egotistical", "plural", "royal", "male", "female", "Spivak", "second", "second_plural", "singular", "none", "topic", "builder_help", "name_utils", "guest_help", "parse_utils", "admin", "core_wizard", "first_wizard", "door", "ftp", "__core_init_phase", "quota_utils", "window", "server_options", "walking_utils", "maxfloat", "checkpointer", "startup", "syslog", "core_extraction_time", "generic_biglist_home", "http", "module", "property_farm", "modules", "smtp", "cord", "mcp", "parse_options", "ftp_client", "local", "building_group", "documentation_group", "first_restart_time", "room_matching_utils", "policy_help", "admin_help", "jhcore_help", "namebuilder_i", "namebuilder_d", "root"}
Last modified Sun Apr 14 16:49:00 2013 PDT by Crag (#243).
#243:"core_objects" this none this
// Find all objects with core names (like $local)
o = {@args, #0}[1];
pfx = {@args, "$", "$"}[2];
seen = {@args, {}, {}, {}}[3];
for p in (properties(o))
  v = o.(p);
  if (typeof(v) == OBJ && valid(v) && !(v in seen))
    seen = {@seen, v};
    name = pfx + p;
    player:tell(pfx + p + " => " + v:name_and_number());
    if (!(name in v.core_names))
      v.core_names = {@v.core_names, name};
    endif
    this:core_objects(v, pfx + p + ".", seen);
  endif
endfor
The generic exit(#7) has 1 kid.
generic door (#121)
The generic door(#121) has 1 kid.
generic window (#179)
generic window (#179) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic door (#121).
-------------------------------- finished ---------------------------------
generic window (#179) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic door (#121).
-------------------------------- finished ---------------------------------
generic window (#179) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic door (#121).
-------------------------------- finished ---------------------------------
generic window (#179) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic door (#121).
 open_msg                unknown hack (#35)    r c    {#69, "do", {"dname", "..
 close_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
,open                    unknown hack (#35)    r      0
 opened_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
 closed_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
,automatic               unknown hack (#35)    r      0
 locked_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
 other_side              unknown hack (#35)    r      #-1
,opens_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
,closes_msg              unknown hack (#35)    r c    {#69, "do", {"name", "p..
 user_key                unknown hack (#35)    r      #-1
 unlocked_msg            unknown hack (#35)    r c    {#69, "do", {"dname", "..
 lock_msg                unknown hack (#35)    r c    {#69, "do", {"dname", "..
 unlock_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
 locked                  unknown hack (#35)    r      0
,locks_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
,unlocks_msg             unknown hack (#35)    r c    {#69, "do", {"name", "p..
 knock_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
,knocks_msg              unknown hack (#35)    r c    {#69, "do", {"name", "p..
,opaque                  unknown hack (#35)    r      0
,help                    unknown hack (#35)    r c    {"Windows are just like..
 no_key_msg              unknown hack (#35)    r c    {#69, "do", "You don't ..
 close_delay             unknown hack (#35)    r      -1
 closing_task            unknown hack (#35)    r      0
 self_closes_msg         unknown hack (#35)    r c    {#69, "do", {"dname", "..
 pull_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
,obvious                 unknown hack (#35)    r c    0
 source                  unknown hack (#35)    r c    #-1
 dest                    unknown hack (#35)    r c    #-1
 nogo_msg                unknown hack (#35)    r c    0
 onogo_msg               unknown hack (#35)    r c    0
 arrive_msg              unknown hack (#35)    r c    0
 oarrive_msg             unknown hack (#35)    r c    0
 oleave_msg              unknown hack (#35)    r c    0
 leave_msg               unknown hack (#35)    r c    0
 nothing_msg             unknown hack (#35)    r c    "nothing"
 no_one_msg              unknown hack (#35)    r c    "no one"
 prefix_name             unknown hack (#35)    r c    1
 through_msg             unknown hack (#35)    r c    {#69, "do", {"name", {"..
 walking_cost            unknown hack (#35)    r      1
 dependents              Core-Wizard (#184)    r      {}
,key                     unknown hack (#35)      c    0
,aliases                 unknown hack (#35)    r c    {"generic window", "win..
 description             unknown hack (#35)    r c    {}
 visible                 unknown hack (#35)    r      1
,integrate_room_msg      unknown hack (#35)    r c    {#69, "do", {"name", "t..
 integrate_player_msg    unknown hack (#35)    r c    ""
 integrate_container_msg unknown hack (#35)    r c    ""
 unique                  unknown hack (#35)    r c    0
 proper                  unknown hack (#35)    r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {2766, 1238564325}
,core_names              unknown hack (#35)    r c    {"$exit", "$door", "$wi..
-------------------------------- finished ---------------------------------
Object #179 does not define that verb, but its ancestor #1 does.
#1:"look_self" this none this
desc = this:description(@args);
if (desc)
  player:tell_lines(desc);
else
  player:tell("You see nothing special.");
endif
Object #179 does not define that verb, but its ancestor #121 does.
#121:"description" this none this
desc = pass(@args);
what = this;
if (desc)
  line = desc[length(desc)];
  if (index(line, this:name()))
    what = this:gender_obj();
  endif
endif
msg = this:((this.open ? "opened" | "closed") + "_msg")(player, what);
if (!msg)
  msg = {};
endif
return {@desc, @typeof(msg) == LIST ? msg | {msg}};
generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
    #7:recycle                  Core-Wizard (#184)   rxd    this none this
    #7:"leave_msg oleave_msg arrive_msg oarrive_msg nogo_msg onogo_msg no_one_msg" Core-Wizard (#184) rxd this none this
    #7:set_name                 Core-Wizard (#184)   rxd    this none this
    #7:set_aliases              Core-Wizard (#184)   rxd    this none this
    #7:defaulting_oleave_msg    Core-Wizard (#184)   rxd    this none this
    #7:moveto                   Core-Wizard (#184)   rxd    this none this
    #7:examine_key              Core-Wizard (#184)   rxd    this none this
    #7:substitute               Core-Wizard (#184)   rxd    this none this
    #7:dest_who                 Core-Wizard (#184)   rxd    this none this
    #7:dest_contents            Core-Wizard (#184)   rxd    this none this
    #7:dest_description         Core-Wizard (#184)   rxd    this none this
    #7:set_message              Core-Wizard (#184)   rxd    this none this
    #7:set_description          Core-Wizard (#184)   rxd    this none this
    #7:invoke                   Core-Wizard (#184)   rxd    this none this
    #7:integrate_in             Core-Wizard (#184)   rxd    this none this
    #7:"direction sub_direction" unknown hacker (#35) rxd   this none this
    #7:description              Core-Wizard (#184)   rxd    this none this
    #7:sub_who                  Core-Wizard (#184)   rxd    this none this
    #7:move                     Core-Wizard (#184)   rxd    this none this
    #7:sweep_for_followers      Core-Wizard (#184)   rxd    this none this
    #7:obvious                  unknown hacker (#35) rxd    this none this
    #7:defaulting_oarrive_msg   unknown hacker (#35) rxd    this none this
    #7:integrate_room_msg       Core-Wizard (#184)   rxd    this none this
    #7:dependents_event_move_by_exit_* Core-Wizard (#184) rxd this none this
    #7:"other_side obj_other_side" Core-Wizard (#184) rxd   this none this
    #7:set_walking_cost         unknown hacker (#35) rxd    this none this
    #7:walking_cost             unknown hacker (#35) rxd    this none this
    #7:"obj_dest obj_source"    unknown hacker (#35) rxd    this none this
    #7:"moddir_d moddir_i"      unknown hacker (#35) rxd    this none this
    #7:moddir_*                 unknown hacker (#35) rxd    this none this
    #7:through_msg              Core-Wizard (#184)   rxd    this none this
    #7:where_are_you            Core-Wizard (#184)   rxd    this none this
    #7:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
The The North Vestibule
This is all there is right now.  A leather couch is here.  Someone has artfully hung a detailed painting on a wall.
You see a Robert's TF settings and Wind-Up Duck here.
stormagnet is here.  Beaker is off in another world.
The generic room(#3) has 3 kids.
Generic Editor (#46)   The North Vestibule (#70)   Northern Entrance (#267)
,aliases                 unknown hacker (#35)  r c    {"The North Vestibule", "nvest"}
-------------------------------- finished ---------------------------------
Name of #70 changed to "North Vestibule", with aliases {"nvest"}.
Sure you want to recycle the Robert's TF settings (#259)? [Enter `yes' or `no']
The Robert's TF settings (#259) recycled.
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           North Vestibule               0 seconds                         
stormagnet     North Vestibule               54 seconds                        
Beaker         North Vestibule               4 hours                           

Total: 3 people, 2 of whom have been active recently.
You page Beaker, "?"
Beaker has reconnected.
You hear a quiet popping sound; Beaker has disconnected.
@integrate_room here isn't set.
@integrate_player here isn't set.
@integrate_container here isn't set.
@in here is "on"
@who_location here is "%Tn"
@victim_ejection here is "You have been expelled from %id by %nd."
@ejection here is "You expel %dd from %id."
@oejection here is "%Dd %d:(is) unceremoniously expelled from %id by %nd."
@housekeeper here is "%Nd's friends arrive to cart %no off to bed."
@integrate_sep here is "  "
@housekeeper_deposit here is "%Ni's friends arrive to drop %no off, sound asleep."
@say here is "%Nd %n:(says), \"%$a\""
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck here.
stormagnet is here.
A delicate flower.
She is awake and looks alert.
Carrying:
 a Generic Wind-Up Toy                   a brown Persian rug
 a tracery windows                       
A dark brown Persian rug, figured in paler browns and golds.
@integrate_room storm's rug isn't set.
@integrate_player storm's rug isn't set.
@integrate_container storm's rug isn't set.
@drop_failed storm's rug is "You can't seem to drop %td here."
@drop_succeeded storm's rug is "You drop %td."
@odrop_failed storm's rug is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded storm's rug is "%n:(drops) %ti."
@otake_succeeded storm's rug is "%n:(picks) up %td."
@otake_failed storm's rug isn't set.
@take_succeeded storm's rug is "You take %td."
@take_failed storm's rug is "You can't pick up %td."
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck here.
stormagnet is here.
You sit on the leather couch.
This is an enormous painting of a complex scene. In the distance there are majestic mountains. In front of them there are foothills and then plains. To the left is a thick forest and to the right an enormous castle.  A large river runs through the the middle of the scene, and a bridge connects the castle to a road leading in to the forest.
stormagnet drops a brown Persian rug.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  Someone has artfully hung a detailed painting on a wall.  %I lies soft  underfoot
You see Wind-Up Duck here.
stormagnet is here.
You see no "rug" here.
You see no "pers" here.
@integrate_room brown is "%%I lies soft  underfoot"
@integrate_player brown isn't set.
@integrate_container brown isn't set.
@drop_failed brown is "You can't seem to drop %td here."
@drop_succeeded brown is "You drop %td."
@odrop_failed brown is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded brown is "%n:(drops) %ti."
@otake_succeeded brown is "%n:(picks) up %td."
@otake_failed brown isn't set.
@take_succeeded brown is "You take %td."
@take_failed brown is "You can't pick up %td."
You say, "%tn"
You set the "integrate_room" message of the brown Persian rug (#257).
You set the "integrate_room" message of the brown Persian rug (#257).
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  Someone has artfully hung a detailed painting on a wall.  A brown Persian rug lies soft underfoot
You see Wind-Up Duck here.
stormagnet is here, distracted.
Crag | @integrate_room brown is "%tI lies soft underfoot"
Crag | @integrate_room brown is "%tI lies soft underfoot."
@integrate_room paint is "Someone has artfully hung %ti on a wall."
@integrate_player paint isn't set.
@integrate_container paint isn't set.
@in paint is "in"
@put_fail paint is "You can't put %dd %tx{in} that."
@remove_fail paint is "You can't remove that."
@remove paint is "%Nd %n:(removes) %di from %id."
@put paint is "%Nd %n:(puts) %dd %tx{in} %id."
@empty paint is "%Ts %t:(is) empty."
@integrate_sep paint is "  "
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  Someone has artfully hung a detailed painting on a wall.  A brown Persian rug lies soft underfoot
You see Wind-Up Duck here.
stormagnet is here.
You set the "integrate_room" message of the brown Persian rug (#257).
stormagnet drops a tracery windows.
You set the "integrate_player" message of the detailed painting (#262).
You take the detailed painting.
An anachronistic cliche barbarian. He may wish to axe you a question.  he is carrying a detailed painting around, like it's no big deal.
He is awake and looks alert.
Carrying:
 some Group Utilities                    a Generic Pilable Thing
 a MCP parent                            a Generic Pile
 a Parsing objects                       a jar
 a Text generation objects               a Non-VR detail
 an Abstract class                       
You set the "integrate_player" message of the detailed painting (#262).
An anachronistic cliche barbarian. He may wish to axe you a question.  He is carrying a detailed painting around, like it's no big deal.
He is awake and looks alert.
Carrying:
 some Group Utilities                    a Generic Pilable Thing
 a MCP parent                            a Generic Pile
 a Parsing objects                       a jar
 a Text generation objects               a Non-VR detail
 an Abstract class                       
You drop the detailed painting.
@integrate_room paint is "Someone has artfully hung %ti on a wall."
@integrate_player paint is "%Tls %tl:(is) carrying %ti around, like it's no big deal."
@integrate_container paint isn't set.
@in paint is "in"
@put_fail paint is "You can't put %dd %tx{in} that."
@remove_fail paint is "You can't remove that."
@remove paint is "%Nd %n:(removes) %di from %id."
@put paint is "%Nd %n:(puts) %dd %tx{in} %id."
@empty paint is "%Ts %t:(is) empty."
@integrate_sep paint is "  "
You set the "integrate_container" message of the detailed painting (#262).
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck and a tracery windows here.
stormagnet is here, distracted.
,aliases                 Core-Wizard (#184)    r      {"stormagnet"}
-------------------------------- finished ---------------------------------
That is not a valid command.
Alias "raine" added to stormagnet(#246).
Aliases for stormagnet(#246) are now {"stormagnet", "raine"}
A pair of medieval tracery windows flank the doors, their delicate stone carvings belying the thickness of the walls.
Invalid indirection, you see nothing.
The tracery windows is closed.
Objects owned by stormagnet (from #0 to #268):
  3K #246 stormagnet                *[North Vestibule]
 <1K #260 Generic Wind-Up Toy        [stormagnet]
 <1K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 pair of tracery windows   *[North Vestibule]
  1K #267 Northern Entrance         
 <1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [stormagnet]
 <1K #257 brown Persian rug         *[North Vestibule]
-- 8 objects.  Total bytes: 9,293.--------------------------------------------
  ** property not found, "plural" **
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {86650, 1366444800}
.core_names              Core-Wizard (#184)    r c    {"$root_class"}
-------------------------------- finished ---------------------------------
A pair of medieval tracery windows flank the doors, their delicate stone carvings belying the thickness of the walls.
Invalid indirection, you see nothing.
The pair of tracery windows is closed.
A pair of medieval tracery windows flank the doors, their delicate stone carvings belying the thickness of the walls.
Invalid indirection, you see nothing.
The pair of tracery windows are closed.
@integrate_room raine's window is "%Ti are carved into the northern wall."
@integrate_player raine's window isn't set.
@integrate_container raine's window isn't set.
@nogo raine's window isn't set.
@onogo raine's window isn't set.
@arrive raine's window isn't set.
@oarrive raine's window isn't set.
@oleave raine's window isn't set.
@leave raine's window isn't set.
@nothing raine's window is "nothing"
@no_one raine's window is "no one"
@through raine's window is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open raine's window is "%Nd %n:(opens) %td."
@close raine's window is "%Nd %n:(closes) %td."
@opened raine's window is "%Td %t:(is) open."
@closed raine's window is "%Td %t:(is) closed."
@locked raine's window is "%Td %t:(is) locked."
@opens raine's window is "%Nd %n:(opens) %td from the other side."
@closes raine's window is "%Nd %n:(closes) %td from the other side."
@unlocked raine's window is "%Td %t:(is) unlocked."
@lock raine's window is "%Nd %n:(locks) %td."
@unlock raine's window is "%Nd %n:(unlocks) %td."
@locks raine's window is "%Nd locks %td from the other side."
@unlocks raine's window is "%Nd unlocks %td from the other side."
@knock raine's window is "%Nd %n:(knocks) on %td."
@knocks raine's window is "%Nd %n:(knocks) on %td."
@no_key raine's window is "You don't have the key for %td."
@self_closes raine's window is "%Td %t:(closes)."
@pull raine's window is "%Ni %n:(reaches) through %td and %n:(pulls) %dd into %nld."
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck and some pair of tracery windows here.
stormagnet is here.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck and some tracery windows here.
stormagnet is here.
-----
#1:NUMBER
=========

Non-numeric values imply that the object is plural but of an unspecified number.

#1:"number" this none this
// Non-numeric values imply that the object is plural but of an unspecified number.
return this.number;
Searching for core verbs containing the string ":number" ...

#1:is_plural are_plural plural [+d unknown hacker (#35)]:  return this:number() != 1;

Total: 1 verb.
#1:"is_plural are_plural plural" this none this
return this:number() != 1;
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sun Jan  7 06:31:07 2001 PST by Xplat (#4014) (on Waterpoint (for core)).
#1:"initialize" this none this
if (caller == this || $perm_utils:controls(caller_perms(), this))
  this.key = 0;
  $quota_utils.byte_based && $quota_utils.byte:object_size(this);
  owned = `this.owner.owned_objects ! E_INVIND, E_PROPNF';
  if (typeof(owned) == LIST)
    this.owner.owned_objects = setadd(owned, this);
  elseif (typeof(owned) == NUM)
    this.owner.owned_objects = owned + 1;
  endif
  if (parent(this) == $root_class)
    this.unique = 0;
  endif
  this.offered = #-1;
endif
-----
`HELP QUOTA' AMBIGUOUS
======================

Sorry, the topic `quota' is ambiguous.  I don't know which of the following topics you mean:

`help @quota'[1]        `help quota-policy'[2]  

=> #243 (Crag)
=> {#243, #245, #244, #242, #248, #249, #250, #251, #252, #253, #254, #255, #262, #263, #264, #265}
=> 1
-----
@QUOTA
======

Usage:  @quota [<someone>]

Each player has a limit as to how much database disk space e may consume with their objects, properties, and verbs.  Objects are periodically measured (and can have their measurement forced---see help @measure).  If a player is over quota after a measurement, e will not be able to @create any objects, use @copy, @verb, or @property to grow any objects.  Existing properties and verbs may be edited/changed at will, even while over quota.

The @quota command prints out your current quota and measured usage.  If you have more than one character, it will summarize all your other characters' usage as well.

@quota <player> will print out the quota and usage of another player.  [Note: you will not be able to obtain second character information for another player; whether primary or secondary character, the @quota display will only show one character's quota.]

@quota prints a time of measurement in its display.  This is the time of the oldest measurement out of all your objects.  For example, if you @measure three of your objects right now, those individual times get updated, but if you still have a couple of objects with older measurements, that older time will be the time printed by @quota.  This is confusing to many people.

If you want to get more quota, please see `help quota-policy'[1].


 - - - - - - - - - - - - - - - - - - - - - - - - - -
Syntax:  @quota <player> is <number> [<reason>]

This second and more interesting form of the verb changes a player's quota to the given number.  Mail will be sent to $quota_log; the message will include the <reason> if such is given.

Objects owned by Crag (from #0 to #268):
  8K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[North Vestibule]
  1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #262 detailed painting         *[North Vestibule]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
-- 16 objects.  Total bytes: 22,285.------------------------------------------
-----
@MEASURE
========

Syntax:
  @measure object <object name>
  @measure summary [player]
  @measure new [player]
  @measure breakdown <object name>

When the MOO is under byte-quota, objects in the MOO are measured approximately once a week, and the usage tally as reported by @quota is updated.  You may wish to measure an object specially, however, without waiting for the automatic measurement to take place, or if the MOO is under object-quota.  @measure has some subcommands to handle this.

@measure object will measure an individual object right now, update the usage of that object in your usage as reported by @quota, and update the date of that object's measurement.

@measure summary will go through your or another player's objects and produce the summary information that is printed by @quota.  Normally this will be just the same as @quota prints out, but occasionally the addition/subtraction done to keep @quota in sync will get out of date, and @measure summary will be needed.

@measure new will go through all your or another player's objects, measuring exactly those which have never been measured before (that is, are too newly @created to have any measurement data).  This is necessary as any player is only permitted to own 10 unmeasured objects, or object creation will not be permitted.

@measure breakdown will give you full information on where an object's size is coming from.  It will offer to moomail you the result.  Caution: don't forget to delete this message, as it is large and takes up a lot of space!

Measuring the sizes of Crag's recently created objects...
Total bytes used in new creations: 0.
Measuring the sizes of stormagnet's recently created objects...
Total bytes used in new creations: 0.
Objects owned by stormagnet (from #0 to #268):
  3K #246 stormagnet                *[North Vestibule]
 <1K #260 Generic Wind-Up Toy        [stormagnet]
 <1K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows           *[North Vestibule]
  1K #267 Northern Entrance         
 <1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [stormagnet]
 <1K #257 brown Persian rug         *[North Vestibule]
-- 8 objects.  Total bytes: 9,293.--------------------------------------------
You now have Generic Delegating Object (aka delegator) with object number #269 and parent root class (#1).
You now have Generic Delegate (aka delegate) with object number #270 and parent root class (#1).
Name of #269 changed to "Generic Delegator".  Aliases are unchanged ({"delegator"}).
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#269.description" name: "Generic Delegator.description" type: string content*: "" _data-tag: 96309629424
#$#* 96309629424 content: 
#$#: 96309629424
Set description property of the Generic Delegator (#269).
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#270.description" name: "Generic Delegate.description" type: string content*: "" _data-tag: 137253766625
#$#* 137253766625 content: 
#$#: 137253766625
Set description property of the Generic Delegate (#270).
You now have New Generic Room (aka room2) with object number #271 and parent Generic Delegator (#269).
That is not a valid command.
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
    #3:confunc                  unknown hacker (#35) rxd    this none this
    #3:disfunc                  unknown hacker (#35) rxd    this none this
    #3:say                      unknown hacker (#35) rxd    any any any
    #3:emote                    unknown hacker (#35) rxd    any any any
    #3:announce                 unknown hacker (#35) rxd    this none this
    #3:"match_exit match_entrance" unknown hacker (#35) rxd this none this
    #3:add_exit                 Core-Wizard (#184)   rxd    this none this
    #3:tell_contents            unknown hacker (#35) rxd    this none this
    #3:@exits                   unknown hacker (#35) rxd    any none none
    #3:add_entrance             Core-Wizard (#184)   rxd    this none this
    #3:bless_for_entry          Core-Wizard (#184)   rxd    this none this
    #3:@entrances               Core-Wizard (#184)   r d    none none none
    #3:go                       Core-Wizard (#184)   rxd    any none none
    #3:l*ook                    unknown hacker (#35) rxd    any any any
    #3:announce_all             unknown hacker (#35) rxd    this none this
    #3:announce_all_but         unknown hacker (#35) rxd    this none this
    #3:enterfunc                Core-Wizard (#184)   rxd    this none this
    #3:remove_exit              Core-Wizard (#184)   rxd    this none this
    #3:remove_entrance          Core-Wizard (#184)   rxd    this none this
    #3:"@add-exit @addexit"     Core-Wizard (#184)   r d    any none none
    #3:"@add-entrance @addentrance" Core-Wizard (#184) r d  any none none
    #3:recycle                  Core-Wizard (#184)   rxd    this none this
    #3:"e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down" unknown hacker (#35) rxd none none none
    #3:@eject                   Core-Wizard (#184)   r d    any none none
    #3:"ejection_msg oejection_msg victim_ejection_msg" unknown hacker (#35) rxd this none this
    #3:accept_for_abode         unknown hacker (#35) rxd    this none this
    #3:@resident*s              Core-Wizard (#184)   r d    any none none
    #3:@remove-exit             Core-Wizard (#184)   r d    any none none
    #3:@remove-entrance         Core-Wizard (#184)   r d    any none none
    #3:moveto                   Core-Wizard (#184)   rxd    this none this
    #3:who_location_msg         unknown hacker (#35) rxd    this none this
    #3:"exits entrances"        Core-Wizard (#184)   rxd    this none this
    #3:obvious_exits            unknown hacker (#35) rxd    this none this
    #3:here_huh                 Core-Wizard (#184)   rxd    this none this
    #3:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #3:examine_commands_ok      unknown hacker (#35) rxd    this none this
    #3:examine_key              Core-Wizard (#184)   rxd    this none this
    #3:examine_contents         unknown hacker (#35) rxd    this none this
    #3:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #3:look_self                unknown hacker (#35) rxd    this none this
    #3:description              unknown hacker (#35) rxd    this none this
    #3:where_am_i               unknown hacker (#35) rxd    this none this
    #3:"housekeeper_msg housekeeper_deposit_msg" unknown hacker (#35) rxd this none this
    #3:look_in                  unknown hacker (#35) rxd    this none this
    #3:namec_for_look_self      unknown hacker (#35) rxd    this none this
    #3:set_integrate_unknown_objects unknown hacker (#35) rx this none this
    #3:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
    #3:reconfunc                unknown hacker (#35) rxd    this none this
    #3:sit                      unknown hacker (#35) rxd    none none none
    #3:stand                    unknown hacker (#35) r d    none none none
    #3:topic_msg                unknown hacker (#35) rxd    this none this
    #3:topic                    unknown hacker (#35) r d    any any any
    #3:set_topic_sign           topic-owner (#181)   rxd    this none this
    #3:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #3:match_type_object        unknown hacker (#35) rxd    this none this
    #3:party_location           unknown hacker (#35) rxd    this none this
    #3:init_for_core            Core-Wizard (#184)   rxd    this none this
    #3:acceptable               Core-Wizard (#184)   rxd    this none this
    #3:is_public_location       Core-Wizard (#184)   rxd    this none this
    #3:objects_for_match        unknown hacker (#35) rxd    this none this
    #3:set_walking_cost         unknown hacker (#35) rxd    this none this
    #3:walking_cost             unknown hacker (#35) rxd    this none this
    #3:"can_add_exit can_add_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_remove_exit can_remove_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_read_exits can_read_entrances" Core-Wizard (#184) rxd this none this
    #3:terrain_delay            unknown hacker (#35) rxd    this none this
    #3:set_terrain_delay        unknown hacker (#35) rx     this none this
    #3:"walk_failed_source walk_failed_dest" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
Syntax error in initial value:  `d' unexpected
=> #269 (Generic Delegator)
Property added with value #269.
Property added with value #270.
Your current object is detailed, a detailed painting (#262).
That is not a valid command.
Your current object is now $local.pile (#242).
Your current object is now #255.
Generic Pilable Thing (#255) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Your current object is now #255.
Generic Pilable Thing (#255)   generic thing (#5)   Helpful Object (#250)   root class (#1)
The Generic Pilable Thing(#255) has no kids.
The generic thing(#5) has 6 kids.
generic note (#9)   generic sittable object (#80)   topic sign (#178)   Generic Pilable Thing (#255)   Generic Wind-Up Toy (#260)   generic rug (#259)
=> #242 (Generic Pile)
Your current object is now delegator, a Generic Delegator (#269).
Property added with value {}.
  ** property not found, "obvious" **
-------------------------------- finished ---------------------------------
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck and some tracery windows here.
stormagnet is here, off in another world.
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Verb added [1] (0).
Verb added [2] (1).
stormagnet drops a generic ceiling.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck and some tracery windows here.
stormagnet is here.
Verb added [3] (2).
stormagnet picks up the generic ceiling.
stormagnet drops a timbered ceiling.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck and some tracery windows here.
stormagnet is here.
North Vestibule (aka #70 and nvest)
Owned by unknown hacker.
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.
You see a leather couch, Wind-Up Duck, a brown Persian rug, some tracery windows, a detailed painting, and a timbered ceiling here.
stormagnet and Crag are here.
Objects owned by stormagnet (from #0 to #273):
  3K #246 stormagnet                *[North Vestibule]
 <1K #260 Generic Wind-Up Toy        [stormagnet]
 <1K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows           *[North Vestibule]
  1K #267 Northern Entrance         
 <1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [stormagnet]
 <1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling            [stormagnet]
 <1K #273 timbered ceiling          *[North Vestibule]
-- 10 objects.  Total bytes: 10,575.------------------------------------------
Crag | @prop #0.whatever whatever
Crag | @prop #0.whatever #whatever
Crag | @prop #0.rug #259
Crag | @register rug on $local
Crag | ;$local.rug
Crag | => #259
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
.legal_name_regexp       unknown hack (#35)    r      "^[a-z_][a-z0-9_]*$"
.free_addition           unknown hack (#35)    r      0
.group                   Crag (#243)           r      #244
.pile                    Crag (#243)           r      #242
.helpful                 Crag (#243)           r      #250
.pilable                 Crag (#243)           r      #255
.toy                     unknown hack (#35)    r c    #260
-------------------------------- finished ---------------------------------
The Helpful Object(#250) has 7 kids.
generic thing (#5)   network utils (#82)   Registrar (#108)   old FTP (#234)   generic module (#203)   feature object registry (#151)   Recycling Center (#55)
Helpful Object (#250) [ readable ]
  Child of root class (#1).
  #250:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Helpful Object (#250) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Last modified Sun Apr 14 23:53:11 2013 PDT by Crag (#243).
#250:"help_text" this none this
all_help = `this.help_text ! E_PROPNF' || {};
if (typeof(all_help) == STR)
  all_help = {all_help};
endif
helpless = {};
for vrb in (this:help_verbs(player))
  if (typeof(vrb) == LIST)
    vrb = vrb[2];
    if (space = index(vrb, " "))
      vrb = vrb[1..space - 1];
    endif
    vrb = strsub(vrb, "*", "");
  endif
  if (loc = $object_utils:has_verb(this, vrb))
    $command_utils:suspend_if_needed(0);
    help = $code_utils:verb_documentation(loc[1], vrb);
    if (help)
      msg = verb_info(loc[1], vrb)[3];
      underline = $string_utils:space(length(msg), "=");
      if (all_help)
        // all_help = {@all_help, "", tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {@all_help, "", msg, underline, "", @help};
      else
        // all_help = {tostr(this) + ":" + verb_info(this, vrb)[3], @help};
        all_help = {msg, underline, "", @help};
      endif
    else
      helpless = {@helpless, vrb};
    endif
  endif
endfor
if (helpless)
  if (all_help)
    all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
  else
    return {tostr("Sorry, but no help is avilable on ", name = this:name(), "(", this, ").", "  Try `examine ", name, "'.")};
  endif
endif
return all_help ? {@all_help, "", "----"} | {};
// Copied from generic thing (#5):help_text by Crag (#243) Sun Apr 14 23:53:11 2013 PDT
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck and some tracery windows here.
stormagnet is here, daydreaming.
=> #269 (Generic Delegator)
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb added [4] (3).
Verb added [5] (4).
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
-------------------------------- finished ---------------------------------
=> 10
System Object (#0) [ readable ]
  Owned by Core-Wizard (#184).
  Child of builtin function definitions (#153).
  Location generic room (#3).
.builder                 Core-Wizard (#184)    r c    #4
.login                   Core-Wizard (#184)    r      #10
.last_huh                Core-Wizard (#184)    r      #11
.guest_log               Core-Wizard (#184)    r      #12
.last_restart_time       Core-Wizard (#184)    r c    1366008485
.biglist                 Core-Wizard (#184)    r c    #13
.big_mail_recipient      Core-Wizard (#184)    r c    #14
.limbo                   Core-Wizard (#184)    r c    #15
.registration_db         Core-Wizard (#184)    r c    #16
.new_player_log          Core-Wizard (#184)    r c    #17
.verb_help               Core-Wizard (#184)    r c    #20
.core_help               Core-Wizard (#184)    r c    #21
.prog_help               Core-Wizard (#184)    r c    #22
.wiz_help                Core-Wizard (#184)    r c    #23
.shutdown_task           Core-Wizard (#184)    r c    E_NONE
.wiz_utils               Core-Wizard (#184)    r c    #24
.site_db                 Core-Wizard (#184)    r c    #25
.math_utils              Core-Wizard (#184)    r c    #26
.set_utils               Core-Wizard (#184)    r c    #27
.builtin_function_help   Core-Wizard (#184)    r c    #28
.new_prog_log            Core-Wizard (#184)    r c    #29
.generic_help            Core-Wizard (#184)    r c    #30
.guest                   Core-Wizard (#184)    r      #31
.seq_utils               Core-Wizard (#184)    r c    #32
.quota_log               Core-Wizard (#184)    r c    #33
.you                     unknown hack (#35)    r      #34
.hacker                  Core-Wizard (#184)    r c    #35
.generic_db              Core-Wizard (#184)    r c    #79
.shutdown_message        Core-Wizard (#184)    r c    ""
.shutdown_time           Core-Wizard (#184)    r c    0
.no_one                  Core-Wizard (#184)    r      #36
.player_db               Core-Wizard (#184)    r      #37
.player_class            Core-Wizard (#184)    r c    #6
.gender_utils            Core-Wizard (#184)    r      #38
.trig_utils              Core-Wizard (#184)    r c    #26
.time_utils              Core-Wizard (#184)    r c    #39
.editor_help             Core-Wizard (#184)    r c    #40
.mail_recipient          Core-Wizard (#184)    r c    #41
.mail_agent              Core-Wizard (#184)    r c    #42
.mail_editor             Core-Wizard (#184)    r c    #43
.note_editor             Core-Wizard (#184)    r c    #44
.verb_editor             Core-Wizard (#184)    r c    #45
.generic_editor          Core-Wizard (#184)    r c    #46
.object_utils            Core-Wizard (#184)    r c    #47
.lock_utils              Core-Wizard (#184)    r c    #48
.gripe_recipients        Core-Wizard (#184)    r c    {#2}
.dump_interval           Core-Wizard (#184)    r c    3600
.list_utils              Core-Wizard (#184)    r c    #49
.command_utils           Core-Wizard (#184)    r c    #50
.player                  Core-Wizard (#184)    r c    #6
.wiz                     Core-Wizard (#184)    r c    #51
.prog                    Core-Wizard (#184)    r c    #52
.code_utils              Core-Wizard (#184)    r c    #53
.help                    Core-Wizard (#184)    r c    #54
.nothing                 Core-Wizard (#184)    r c    #-1
.failed_match            Core-Wizard (#184)    r c    #-3
.ambiguous_match         Core-Wizard (#184)    r c    #-2
.perm_utils              Core-Wizard (#184)    r c    #130
.building_utils          Core-Wizard (#184)    r c    #19
.string_utils            Core-Wizard (#184)    r c    #18
.news                    Core-Wizard (#184)    r c    #141
.note                    Core-Wizard (#184)    r c    #9
.container               Core-Wizard (#184)    r c    #126
.thing                   Core-Wizard (#184)    r c    #5
.exit                    Core-Wizard (#184)    r c    #7
.room                    Core-Wizard (#184)    r c    #3
.player_start            Core-Wizard (#184)    r c    #70
.root_class              Core-Wizard (#184)    r c    #1
.recycler                Core-Wizard (#184)    r c    #55
.garbage                 Core-Wizard (#184)    r c    #56
.mail_options            Core-Wizard (#184)    r c    #57
.edit_options            Core-Wizard (#184)    r c    #58
.display_options         Core-Wizard (#184)    r c    #59
.generic_options         Core-Wizard (#184)    r c    #60
.maxint                  Core-Wizard (#184)    r c    2147483647
.minint                  Core-Wizard (#184)    r c    -2147483648
.list_options            Core-Wizard (#184)    r c    #61
.error                   Core-Wizard (#184)    r c    #66
.newt_log                Core-Wizard (#184)    r c    #106
.toad_log                Core-Wizard (#184)    r c    #62
.site_log                Core-Wizard (#184)    r c    #62
.housekeeper             Core-Wizard (#184)    r c    #63
.feature                 Core-Wizard (#184)    r      #65
.pronoun_sub             Core-Wizard (#184)    r      #69
.they                    Core-Wizard (#184)    r      #71
.login_watcher           Core-Wizard (#184)    r c    #83
.english                 Core-Wizard (#184)    r      #72
.language                Core-Wizard (#184)    r      #72
.integration_utils       Core-Wizard (#184)    r c    #74
.network                 Core-Wizard (#184)    r c    #82
.country_db              Core-Wizard (#184)    r      #94
.jtext                   Core-Wizard (#184)    r      #92
.feature_help            Core-Wizard (#184)    r      #100
.jaddress                Core-Wizard (#184)    r      #111
.misc_options            Core-Wizard (#184)    r      #112
.client_options          Core-Wizard (#184)    r      #116
.building_options        Core-Wizard (#184)    r c    #122
.it                      Core-Wizard (#184)    r c    #154
.nobody                  Core-Wizard (#184)    r c    #36
.furniture               Core-Wizard (#184)    r c    #81
.sittable                Core-Wizard (#184)    r c    #80
.I                       Core-Wizard (#184)    r c    #160
.everything              Core-Wizard (#184)    r c    #139
.all                     Core-Wizard (#184)    r c    #103
.nowhere                 Core-Wizard (#184)    r c    #-1
.admin_group             Core-Wizard (#184)    r c    #163
.steering_committee      Core-Wizard (#184)    r c    #137
.db_group                Core-Wizard (#184)    r c    #148
.unix_group              Core-Wizard (#184)    r c    #147
.community_group         Core-Wizard (#184)    r c    #165
.tech_group              Core-Wizard (#184)    r c    #164
.admin_mail_recipient    Core-Wizard (#184)    r c    #107
.registrar               Core-Wizard (#184)    r c    #108
.event_dispatcher        Core-Wizard (#184)    r c    #110
.prog_group              Core-Wizard (#184)    r c    #124
.openable_container      Core-Wizard (#184)    r c    #8
.containing_object       Core-Wizard (#184)    r c    #145
.utils                   Core-Wizard (#184)    r c    #146
.biglist_utils           Core-Wizard (#184)    r c    #13
.english_utils           Core-Wizard (#184)    r c    #72
.boot_log                Core-Wizard (#184)    r c    #85
.help_editor             Core-Wizard (#184)    r      #171
.object_help             Core-Wizard (#184)    r c    #173
.tester                  Core-Wizard (#184)    r      #99
.failed_help             Core-Wizard (#184)    r      #127
.who_options             Core-Wizard (#184)    r c    #89
.who_utils               Core-Wizard (#184)    r c    #89
.event_handler           Core-Wizard (#184)    r c    #133
.eval_options            Core-Wizard (#184)    r c    #136
.he                      Core-Wizard (#184)    r c    #156
.she                     Core-Wizard (#184)    r c    #157
.e                       Core-Wizard (#184)    r c    #158
.we                      Core-Wizard (#184)    r c    #159
.plural_you              Core-Wizard (#184)    r c    #161
.either                  Core-Wizard (#184)    r c    #162
.splat                   Core-Wizard (#184)    r c    #166
.gender                  Core-Wizard (#184)    r c    #64
.neuter                  Core-Wizard (#184)    r c    #154
.egotistical             Core-Wizard (#184)    r c    #160
.plural                  Core-Wizard (#184)    r c    #71
.royal                   Core-Wizard (#184)    r c    #159
.male                    Core-Wizard (#184)    r c    #156
.female                  Core-Wizard (#184)    r c    #157
.Spivak                  Core-Wizard (#184)    r c    #158
.second                  Core-Wizard (#184)    r c    #34
.second_plural           Core-Wizard (#184)    r c    #161
.singular                Core-Wizard (#184)    r c    #154
.none                    Core-Wizard (#184)    r c    #167
.topic                   Core-Wizard (#184)    r c    #178
.builder_help            Core-Wizard (#184)    r      #155
.name_utils              Core-Wizard (#184)    r      #177
.guest_help              Core-Wizard (#184)    r      #168
.parse_utils             Core-Wizard (#184)    r      #117
.admin                   Core-Wizard (#184)    r      #170
.core_wizard             Core-Wizard (#184)    r      #184
.first_wizard            Core-Wizard (#184)    r c    #2
.door                    Core-Wizard (#184)    r      #121
.ftp                     Core-Wizard (#184)    r c    #234
.__core_init_phase       Core-Wizard (#184)    r      0
.quota_utils             Core-Wizard (#184)    r c    #174
.window                  Core-Wizard (#184)    r c    #179
.server_options          Core-Wizard (#184)    r      #188
.walking_utils           Core-Wizard (#184)    r      #182
.maxfloat                Core-Wizard (#184)    r c    1.79769313486231e+308
.checkpointer            Core-Wizard (#184)    r      #175
.startup                 Core-Wizard (#184)    r c    #189
.syslog                  Core-Wizard (#184)    r      #183
.core_extraction_time    Core-Wizard (#184)    r      1364747283
.generic_biglist_home    Core-Wizard (#184)    r      #75
.http                    Core-Wizard (#184)    r c    #87
.module                  Core-Wizard (#184)    r      #203
.property_farm           Core-Wizard (#184)    r      #206
.modules                 Core-Wizard (#184)    r      #205
.smtp                    Core-Wizard (#184)    r c    #212
.cord                    Core-Wizard (#184)    r c    #223
.mcp                     Core-Wizard (#184)    r c    #213
.parse_options           Core-Wizard (#184)    r c    #191
.ftp_client              Core-Wizard (#184)    r c    #230
.local                   unknown hack (#35)    r c    #193
.building_group          Core-Wizard (#184)    r      #192
.documentation_group     Core-Wizard (#184)    r      #232
.first_restart_time      Core-Wizard (#184)    r      845958877
.room_matching_utils     Core-Wizard (#184)    r      #190
.policy_help             Core-Wizard (#184)    r      #235
.admin_help              Core-Wizard (#184)    r c    #238
.jhcore_help             Core-Wizard (#184)    r c    #237
.namebuilder_i           Core-Wizard (#184)    r c    #227
.namebuilder_d           Core-Wizard (#184)    r c    #239
.root                    Core-Wizard (#184)    r c    #1
.delegator               Core-Wizard (#184)    r c    #269
.delegate                Core-Wizard (#184)    r c    #270
-------------------------------- finished ---------------------------------
=> {"set_verb_code_raw", "do_login_command", "server_started", "init_for_core", "do_out_of_band_command", "user_created user_connected", "user_disconnected user_client_disconnected", "user_reconnected", "checkpoint_finished", "checkpoint_started"}
=> 191
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb added [6] (5).
=> {"__d_add_delegate", "__d_delegate_leaving", "__d_match_message", "__d_get_prop", "__d_set_prop", "__d_dispatch_message"}
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
.__d_delegates           Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Property added with value {}.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.
You see Wind-Up Duck and some tracery windows here.
stormagnet is here, distracted.
Crag <- minding his own business.
Your current object is now delegate (#270).
Verb added [1] (0).
Verb added [2] (1).
Verb added [3] (2).
Syntax error in initial value:  `t' unexpected
Verb added [4] (3).
Verb added [5] (4).
Verb added [6] (5).
Delegates handle work for their delegators. They know what verbs they provide and register them with their delegators when they are added. They know what properties they need and register those as well. They know how well they can handle tasks. They handle those tasks.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#270:__d_match_message ()" name: "MOO verb: #270:__d_match_message ()" type: moo-code content*: "" _data-tag: 184890849726
#$#: 184890849726
Crag |@integrate_room thing is "msg"
stormagnet drops some chaise lounge.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  You are sitting on it.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise lounge are here.
You see Wind-Up Duck and some tracery windows here.
stormagnet is here.
@integrate_room chaise is "%Ti sit under the windows."
@integrate_player chaise isn't set.
@integrate_container chaise isn't set.
@drop_failed chaise is "You can't seem to drop %td here."
@drop_succeeded chaise is "You drop %td."
@odrop_failed chaise is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded chaise is "%n:(drops) %ti."
@otake_succeeded chaise is "%n:(picks) up %td."
@otake_failed chaise isn't set.
@take_succeeded chaise is "You take %td."
@take_failed chaise is "You can't pick up %td."
@empty chaise is ""
@sitting chaise is "sitting"
@on chaise is "on"
@desc_along_with chaise is "along with"
@sit chaise is "%Nd %n:(sits) %tx{on} %td"
@squeeze chaise is "%Dd %d:(is) squeezed off %td."
@stand chaise is "%Dd %d:(stands) up from %td."
@fall chaise is "%Dd %d:(falls) off %td."
@shove chaise is "%Nd %n:(shoves) %dd off %td!"
@also_shove chaise is "%Nd %n:(takes) %dd with %no."
@nosqueeze chaise is "There's no room %tx{on} %td."
@integrate_empty chaise is "%Ti %t:(is) here."
@integrate_sitters chaise is "  %Ni %n:(is) %tx{sitting} %tx{on} %to."
@next_to chaise is " %d'(beside/between) %dd"
@already_sitting chaise is "You are already %tx{sitting} %tx{on} %td."
@move_next_to chaise is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting chaise isn't set.
@desc_empty chaise isn't set.
You stand up from the leather couch.
You sit on the chaise lounge.
You are squeezed off the chaise lounge.
You set the "integrate_room" message of the chaise lounge (#274).
You set the "integrate_room" message of the chaise lounge (#274).
@integrate_room chaise is "%Ti sit under the windows."
@integrate_player chaise isn't set.
@integrate_container chaise isn't set.
@drop_failed chaise is "You can't seem to drop %td here."
@drop_succeeded chaise is "You drop %td."
@odrop_failed chaise is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded chaise is "%n:(drops) %ti."
@otake_succeeded chaise is "%n:(picks) up %td."
@otake_failed chaise isn't set.
@take_succeeded chaise is "You take %td."
@take_failed chaise is "You can't pick up %td."
@empty chaise is ""
@sitting chaise is "sitting"
@on chaise is "on"
@desc_along_with chaise is "along with"
@sit chaise is "%Nd %n:(sits) %tx{on} %td"
@squeeze chaise is "%Dd %d:(is) squeezed off %td."
@stand chaise is "%Dd %d:(stands) up from %td."
@fall chaise is "%Dd %d:(falls) off %td."
@shove chaise is "%Nd %n:(shoves) %dd off %td!"
@also_shove chaise is "%Nd %n:(takes) %dd with %no."
@nosqueeze chaise is "There's no room %tx{on} %td."
@integrate_empty chaise is "%Ti %t:(is) here."
@integrate_sitters chaise is "  %Ni %n:(is) %tx{sitting} %tx{on} %to."
@next_to chaise is " %d'(beside/between) %dd"
@already_sitting chaise is "You are already %tx{sitting} %tx{on} %td."
@move_next_to chaise is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting chaise isn't set.
@desc_empty chaise isn't set.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise lounge are here.
You see Wind-Up Duck and some tracery windows here.
stormagnet is here.
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Thu Jul 19 07:52:28 2001 PDT by Xplat (#4014) (on Waterpoint).
#3:"description" this none this
// If there's more than one paragraph of description, then add integration messages to the end as a separate paragraph(s).
// If there are more than one paragraph of integration messages, add them as separate paragraphs to the end of the description.
// Otherwise, append the integration message to the end of the description paragraph.
desc = pass(@args);
if (!this.integrate_paragraphs)
  integrate = $integration_utils:integrate(args, "integrate_room_msg");
  integrate_sep = $string_utils:pronoun_sub(this.integrate_sep_msg);
  if (integrate)
    if ((sep_is_list = typeof(integrate_sep) == LIST) || !integrate_sep || length(desc) > 1 || length(integrate) > 1)
      if (sep_is_list)
        desc = {@desc, @integrate_sep, @integrate};
      else
        desc = {@desc, @integrate};
      endif
    else
      if (desc)
        desc = {desc[1] + integrate_sep + integrate[1]};
      else
        desc = integrate;
      endif
    endif
  endif
  return desc;
else
  if (!desc)
    desc = {""};
  endif
  explicit = $list_utils:flatten(integrate = this.integrate_paragraphs);
  integrate_objects = {@this:contents(), @this:exits()};
  for i in [1..length(integrate)]
    ni = {};
    for elt in (integrate[i])
      if (elt in integrate_objects || typeof(elt) in {LIST, STR})
        ni = {@ni, elt};
      endif
    endfor
    integrate[i] = ni;
  endfor
  // integrate[i] = $set_utils:intersection(integrate[i], $set_utils:union(this:contents(), this:exits()));
  if (misc = $set_utils:diff($list_utils:flatten(args), explicit))
    integrate[l = length(integrate)] = {@integrate[l], @misc};
  endif
  if (length(desc) == 1)
    integrate[1] = {@desc, @integrate[1]};
  else
    integrate[1] = {desc[$], @integrate[1]};
    for i in [1..length(desc) - 1]
      integrate = {{desc[$ - i]}, @integrate};
    endfor
  endif
  return $integration_utils:integrate(integrate, "integrate_room_msg");
endif
Your current object is now chaise (#274).
=> "Some chaise lounge are here."
=> {#69, "do", {"name", "thing", {"ic"}}, " sit under the windows."}
Object #274 does not define that verb, but its ancestor #81 does.
#81:"integrate_room_msg" this none this
people = this.sitting;
if (people)
  if (you = player in people)
    people[you] = $you;
  endif
  arglist = {{people}, @args ? listdelete(args, 1) | {}};
  normal = pass(@arglist);
  if (normal)
    return normal;
  else
    return $string_utils:pronoun_sub(this.integrate_empty_msg, @arglist) + $string_utils:pronoun_sub(this.integrate_sitters_msg, @arglist);
  endif
else
  return $string_utils:pronoun_sub(this.integrate_empty_msg, {{}}, @args ? listdelete(args, 1) | {});
endif
@integrate_room _ is "%Ti sit under the windows."
@integrate_player _ isn't set.
@integrate_container _ isn't set.
@drop_failed _ is "You can't seem to drop %td here."
@drop_succeeded _ is "You drop %td."
@odrop_failed _ is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded _ is "%n:(drops) %ti."
@otake_succeeded _ is "%n:(picks) up %td."
@otake_failed _ isn't set.
@take_succeeded _ is "You take %td."
@take_failed _ is "You can't pick up %td."
@empty _ is ""
@sitting _ is "sitting"
@on _ is "on"
@desc_along_with _ is "along with"
@sit _ is "%Nd %n:(sits) %tx{on} %td"
@squeeze _ is "%Dd %d:(is) squeezed off %td."
@stand _ is "%Dd %d:(stands) up from %td."
@fall _ is "%Dd %d:(falls) off %td."
@shove _ is "%Nd %n:(shoves) %dd off %td!"
@also_shove _ is "%Nd %n:(takes) %dd with %no."
@nosqueeze _ is "There's no room %tx{on} %td."
@integrate_empty _ is "%Ti %t:(is) here."
@integrate_sitters _ is "  %Ni %n:(is) %tx{sitting} %tx{on} %to."
@next_to _ is " %d'(beside/between) %dd"
@already_sitting _ is "You are already %tx{sitting} %tx{on} %td."
@move_next_to _ is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting _ isn't set.
@desc_empty _ isn't set.
Object #274 does not define that verb, but its ancestor #81 does.
#81:"integrate_room_msg" this none this
people = this.sitting;
if (people)
  if (you = player in people)
    people[you] = $you;
  endif
  arglist = {{people}, @args ? listdelete(args, 1) | {}};
  normal = pass(@arglist);
  if (normal)
    return normal;
  else
    return $string_utils:pronoun_sub(this.integrate_empty_msg, @arglist) + $string_utils:pronoun_sub(this.integrate_sitters_msg, @arglist);
  endif
else
  return $string_utils:pronoun_sub(this.integrate_empty_msg, {{}}, @args ? listdelete(args, 1) | {});
endif
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A leather couch is here.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise lounge sit under the windows.
You see Wind-Up Duck and some tracery windows here.
stormagnet is here.
Your current object is now tracer (#266).
Object #266 does not define that verb, but its ancestor #7 does.
Last modified Tue Jan 16 13:28:43 2001 PST by Xplat (#4014) (on Waterpoint).
#7:"integrate_room_msg" this none this
newargs = {player, this, player.location, dobj, iobj, this.source, this.dest};
newargs[1..length(args)] = args;
return pass(@newargs);
stormagnet picks up the leather couch.
generic exit (#7)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
The generic room(#3) has 3 kids.
Generic Editor (#46)   North Vestibule (#70)   Northern Entrance (#267)
=> {#268}
=> #268 (n)
=> {#268}
#-1:Input to EVAL, line 4:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> {#268, #266}
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Some tracery windows are carved into the northern wall.  Someone has artfully hung a detailed painting on a wall.  Some chaise lounge sit under the windows.
You see Wind-Up Duck here.
stormagnet is here, distracted.
=> "A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same."
=> {#261, #246, #243, #257, #266, #262, #273, #274}
=> #266 (tracery windows)
=> #70 (North Vestibule)
Try this instead:  @move _ $nothing to
The tracery windows disappear suddenly for parts unknown, moved by Crag.
Moved.
tracery windows (#266) [ readable ]
  Owned by stormagnet (#246).
  Child of generic window (#179).
-------------------------------- finished ---------------------------------
tracery windows (#266) [ readable ]
  Owned by stormagnet (#246).
  Child of generic window (#179).
 open_msg                stormagnet (#246)     r c    {#69, "do", {"dname", "..
 close_msg               stormagnet (#246)     r c    {#69, "do", {"dname", "..
 open                    unknown hack (#35)    r      0
 opened_msg              stormagnet (#246)     r c    {#69, "do", {"dname", "..
 closed_msg              stormagnet (#246)     r c    {#69, "do", {"dname", "..
 automatic               unknown hack (#35)    r      0
 locked_msg              stormagnet (#246)     r c    {#69, "do", {"dname", "..
 other_side              unknown hack (#35)    r      #-1
 opens_msg               stormagnet (#246)     r c    {#69, "do", {"name", "p..
 closes_msg              stormagnet (#246)     r c    {#69, "do", {"name", "p..
 user_key                unknown hack (#35)    r      #-1
 unlocked_msg            stormagnet (#246)     r c    {#69, "do", {"dname", "..
 lock_msg                stormagnet (#246)     r c    {#69, "do", {"dname", "..
 unlock_msg              stormagnet (#246)     r c    {#69, "do", {"dname", "..
 locked                  unknown hack (#35)    r      0
 locks_msg               stormagnet (#246)     r c    {#69, "do", {"name", "p..
 unlocks_msg             stormagnet (#246)     r c    {#69, "do", {"name", "p..
 knock_msg               stormagnet (#246)     r c    {#69, "do", {"dname", "..
 knocks_msg              stormagnet (#246)     r c    {#69, "do", {"name", "p..
 opaque                  unknown hack (#35)    r      0
 help                    stormagnet (#246)     r c    {"Windows are just like..
 no_key_msg              stormagnet (#246)     r c    {#69, "do", "You don't ..
 close_delay             unknown hack (#35)    r      -1
 closing_task            unknown hack (#35)    r      0
 self_closes_msg         stormagnet (#246)     r c    {#69, "do", {"dname", "..
 pull_msg                stormagnet (#246)     r c    {#69, "do", {"name", "p..
 obvious                 stormagnet (#246)     r c    0
 source                  stormagnet (#246)     r c    #-1
 dest                    stormagnet (#246)     r c    #-1
 nogo_msg                stormagnet (#246)     r c    0
 onogo_msg               stormagnet (#246)     r c    0
 arrive_msg              stormagnet (#246)     r c    0
 oarrive_msg             stormagnet (#246)     r c    0
 oleave_msg              stormagnet (#246)     r c    0
 leave_msg               stormagnet (#246)     r c    0
 nothing_msg             stormagnet (#246)     r c    "nothing"
 no_one_msg              stormagnet (#246)     r c    "no one"
 prefix_name             stormagnet (#246)     r c    1
 through_msg             stormagnet (#246)     r c    {#69, "do", {"name", {"..
 walking_cost            unknown hack (#35)    r      1
,dependents              Core-Wizard (#184)    r      {}
,key                     stormagnet (#246)       c    0
,aliases                 stormagnet (#246)     r c    {"tracery windows", "wi..
,description             stormagnet (#246)     r c    "A pair of medieval tra..
 visible                 unknown hack (#35)    r      1
,integrate_room_msg      stormagnet (#246)     r c    {#69, "do", {"name", "t..
 integrate_player_msg    stormagnet (#246)     r c    ""
 integrate_container_msg stormagnet (#246)     r c    ""
 unique                  stormagnet (#246)     r c    0
 proper                  stormagnet (#246)     r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
,number                  unknown hack (#35)    r      2
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {1449, 1366504677}
 core_names              stormagnet (#246)     r c    {"$exit", "$door", "$wi..
-------------------------------- finished ---------------------------------
=> #70 (North Vestibule)
A pair of massive oak double doors open out onto the northern entrance, each inscribed with the family crest.
In the Northern Entrance, you see nothing.
The generic room(#3) has 3 kids.
Generic Editor (#46)   North Vestibule (#70)   Northern Entrance (#267)
=> #267 (Northern Entrance)
A pair of medieval tracery windows flank the doors, their delicate stone carvings belying the thickness of the walls.
In the Northern Entrance, you see nothing.
The tracery windows are closed.
,aliases                 stormagnet (#246)     r c    {"tracery windows", "windows"}
-------------------------------- finished ---------------------------------
You open the tracery windows.
That is not a valid command.
You can't go that way (window).
You can't go that way (trace).
generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
-------------------------------- finished ---------------------------------
,key                     Core-Wizard (#184)      c    0
-------------------------------- finished ---------------------------------
Locked generic exit to this key:
  ~Crag && !~Crag
You close the tracery windows.
tracery windows (#266)   generic window (#179)   generic door (#121)   generic exit (#7)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
generic window (#179) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic door (#121).
-------------------------------- finished ---------------------------------
generic door (#121) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic exit (#7).
  #121:open                     unknown hacker (#35) rxd    this none none
  #121:"close shut"             unknown hacker (#35) rxd    this none none
  #121:"opens_msg closes_msg locks_msg unlocks_msg knocks_msg opened_msg closed_msg locked_msg unlocked_msg no_key_msg" unknown hacker (#35) rxd this none this
  #121:description              unknown hacker (#35) rxd    this none this
  #121:move                     unknown hacker (#35) rxd    this none this
  #121:trusted                  unknown hacker (#35) rxd    this none this
  #121:lock                     unknown hacker (#35) rxd    this none none
  #121:unlock                   unknown hacker (#35) rxd    this none none
  #121:is_locked                unknown hacker (#35) rxd    this none this
  #121:has_key                  unknown hacker (#35) rxd    this none this
  #121:find_other_side          unknown hacker (#35) rxd    this none this
  #121:setup_connection         unknown hacker (#35) rxd    this none this
  #121:"other_side obj_other_side" unknown hacker (#35) rxd this none this
  #121:knock                    unknown hacker (#35) rxd    none on top of/on/onto/upon this
  #121:"set_user_key set_close_delay" unknown hacker (#35) rxd this none this
  #121:"knock_msg open_msg close_msg lock_msg unlock_msg self_closes_msg" unknown hacker (#35) rxd this none this
  #121:"set_locked set_other_side set_opaque set_automatic set_closing_task" unknown hacker (#35) rxd this none this
  #121:self_close               unknown hacker (#35) rxd    this none this
  #121:set_open                 unknown hacker (#35) rxd    this none this
  #121:close_delay              unknown hacker (#35) rxd    this none this
  #121:event_directed_speech    unknown hacker (#35) rxd    this none this
  #121:is_unlocked_for          unknown hacker (#35) rxd    this none this
  #121:help_text                unknown hacker (#35) rxd    this none this
  #121:through_msg              unknown hacker (#35) rxd    this none this
  #121:sub_open                 Core-Wizard (#184)   rxd    this none this
  #121:pull                     unknown hacker (#35) rxd    any through this
  #121:walking_cost             unknown hacker (#35) rxd    this none this
  #121:obj_user_key             unknown hacker (#35) rxd    this none this
  #121:modname_open             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Wed Jul 17 07:43:42 2002 PDT by Xplat (#4014) (on Waterpoint).
#121:"open" this none none
who = caller == this ? args[1] | player;
if (this.open)
  who:tell(this:opened_msg());
  return;
endif
who.location:broadcast_event_door_open_attempted(who, this);
if (this:is_locked())
  if (this.automatic)
    this:unlock(who);
    if (this:is_locked())
      who.location:broadcast_event_door_open_failed(who, this);
      return;
    endif
  else
    who.location:broadcast_event_door_open_failed(who, this);
    who:tell(this:locked_msg());
    return;
  endif
endif
$you:say_action(this:open_msg(), who);
this:set_open(1);
who.location:broadcast_event_door_open_completed(who, this);
if (typeof(other_side = this:other_side()) == OBJ && $object_utils:isa(other_side, $door))
  other_side.source:announce_all_but({who}, other_side:opens_msg(who));
  other_side:set_open(1);
  other_side.source:broadcast_event_door_open_other_side(who, other_side);
endif
generic door (#121) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic exit (#7).
.open_msg                unknown hack (#35)    r c    {#69, "do", {"dname", "..
.close_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
.open                    unknown hack (#35)    r      0
.opened_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
.closed_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
.automatic               unknown hack (#35)    r      1
.locked_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
.other_side              unknown hack (#35)    r      #-1
.opens_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
.closes_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
.user_key                unknown hack (#35)    r      #-1
.unlocked_msg            unknown hack (#35)    r c    {#69, "do", {"dname", "..
.lock_msg                unknown hack (#35)    r c    {#69, "do", {"dname", "..
.unlock_msg              unknown hack (#35)    r c    {#69, "do", {"dname", "..
.locked                  unknown hack (#35)    r      0
.locks_msg               unknown hack (#35)    r c    {#69, "do", "You hear t..
.unlocks_msg             unknown hack (#35)    r c    {#69, "do", "You hear t..
.knock_msg               unknown hack (#35)    r c    {#69, "do", {"dname", "..
.knocks_msg              unknown hack (#35)    r c    {#69, "do", "Someone kn..
.opaque                  unknown hack (#35)    r      1
.help                    unknown hack (#35)    r c    {"A Generic Door which ..
.no_key_msg              unknown hack (#35)    r c    {#69, "do", "You don't ..
.close_delay             unknown hack (#35)    r      -1
.closing_task            unknown hack (#35)    r      0
.self_closes_msg         unknown hack (#35)    r c    {#69, "do", {"dname", "..
.pull_msg                unknown hack (#35)    r c    {#69, "do", {"name", "p..
-------------------------------- finished ---------------------------------
Last modified Wed Jul 17 07:43:42 2002 PDT by Xplat (#4014) (on Waterpoint).
#121:"open" this none none
who = caller == this ? args[1] | player;
if (this.open)
  who:tell(this:opened_msg());
  return;
endif
who.location:broadcast_event_door_open_attempted(who, this);
if (this:is_locked())
  if (this.automatic)
    this:unlock(who);
    if (this:is_locked())
      who.location:broadcast_event_door_open_failed(who, this);
      return;
    endif
  else
    who.location:broadcast_event_door_open_failed(who, this);
    who:tell(this:locked_msg());
    return;
  endif
endif
$you:say_action(this:open_msg(), who);
this:set_open(1);
who.location:broadcast_event_door_open_completed(who, this);
if (typeof(other_side = this:other_side()) == OBJ && $object_utils:isa(other_side, $door))
  other_side.source:announce_all_but({who}, other_side:opens_msg(who));
  other_side:set_open(1);
  other_side.source:broadcast_event_door_open_other_side(who, other_side);
endif
#121:"close shut" this none none
if (!this.open)
  player:tell(this:closed_msg());
else
  // assume we might want to fail to close someday?
  player.location:broadcast_event_door_close_attempted(player, this);
  $you:say_action(this:close_msg());
  this:set_open(0);
  player.location:broadcast_event_door_close_completed(player, this);
  if (typeof(other_side = this:other_side()) == OBJ && $object_utils:isa(other_side, $door))
    other_side.source:announce(other_side:closes_msg());
    other_side:set_open(0);
    other_side:broadcast_event_door_close_other_side(player, other_side);
  endif
endif
Your current object is now chaise (#274).
Your current object is now delegate (#270).
Generic Delegate (#270) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_commands             Crag (#243)          rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:__d_verbs                Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Generic Delegate (#270) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
stormagnet drops a butler's desk.
A black walnut butler's desk, with carefully polished brass fitting- including a shiny lock.
It is empty.
The generic container(#126) has 3 kids.
generic openable container (#8)   Non-VR detail (#265)   butler's desk (#275)
=> {"$container", "$openable_container"}
A black walnut butler's desk, with carefully polished brass fitting- including a shiny lock.
It is empty.
It's already open.
You close the butler's desk.
@integrate_room desk is "%Ti lies pushed up against the wall."
@integrate_player desk isn't set.
@integrate_container desk isn't set.
@in desk is "in"
@put_fail desk is "You can't put %dd %tx{in} that."
@remove_fail desk is "You can't remove that."
@remove desk is "%Nd %n:(removes) %di from %id."
@put desk is "%Nd %n:(puts) %dd %tx{in} %id."
@empty desk is "%Ts %t:(is) empty."
@integrate_sep desk is "  "
@close desk is "%Nd %n:(closes) %td."
@open desk is "%Nd %n:(opens) %td."
@open_fail desk is "You can't open that."
stormagnet opens the butler's desk.
,key                     stormagnet (#246)       c    0
-------------------------------- finished ---------------------------------
Crag | @lock desk with me ** !me
Crag | @create $thing called butler's key
Crag | @lock desk with "butler's key"
A black walnut butler's desk, with carefully polished brass fitting- including a shiny lock.
It is empty.
You close the butler's desk.
A black walnut butler's desk, with carefully polished brass fitting- including a shiny lock.
butler's desk (aka #275 and desk)
Owned by stormagnet.
A black walnut butler's desk, with carefully polished brass fitting- including a shiny lock.
Key:  #276[butler's key]
It is empty.
Obvious verbs:
  open desk
  @lock_for_open/@lock-for-open desk with <anything>
  close desk
  @unlock_for_open/@unlock-for-open desk
  @opacity desk is <anything>
  p*ut/in*sert/d*rop/qput <anything> in desk
  re*move/ta*ke/g*et <anything> from desk
Crag |@lock_for_open desk with "butler's key"
stormagnet drops a butler's key.
That is not a valid command ("but" is an ambiguous name).
You can't open that.
stormagnet picks up the butler's key.
Your current object is now delegator (#269).
You now have New Generic Room (aka room2) with object number #277 and parent Generic Delegator (#269).
@integrate_room desk is "%Ti lies pushed up against the wall."
@integrate_player desk isn't set.
@integrate_container desk isn't set.
@in desk is "in"
@put_fail desk is "You can't put %dd %tx{in} that."
@remove_fail desk is "You can't remove that."
@remove desk is "%Nd %n:(removes) %di from %id."
@put desk is "%Nd %n:(puts) %dd %tx{in} %id."
@empty desk is "%Ts %t:(is) empty."
@integrate_sep desk is "  "
@close desk is "%Nd %n:(closes) %td."
@open desk is "%Nd %n:(opens) %td."
@open_fail desk is "You can't open that."
You haven't specified which "room2" you mean.
Object #275 does not define that verb, but its ancestor #8 does.
#8:"open" this none none
if (this.opened)
  player:tell("It's already open.");
elseif (this:is_openable_by(player))
  this:set_opened(1);
  $you:say_action(this:open_msg());
endif
Object #266 does not define that verb, but its ancestor #121 does.
Last modified Wed Jul 17 07:43:42 2002 PDT by Xplat (#4014) (on Waterpoint).
#121:"open" this none none
who = caller == this ? args[1] | player;
if (this.open)
  who:tell(this:opened_msg());
  return;
endif
who.location:broadcast_event_door_open_attempted(who, this);
if (this:is_locked())
  if (this.automatic)
    this:unlock(who);
    if (this:is_locked())
      who.location:broadcast_event_door_open_failed(who, this);
      return;
    endif
  else
    who.location:broadcast_event_door_open_failed(who, this);
    who:tell(this:locked_msg());
    return;
  endif
endif
$you:say_action(this:open_msg(), who);
this:set_open(1);
who.location:broadcast_event_door_open_completed(who, this);
if (typeof(other_side = this:other_side()) == OBJ && $object_utils:isa(other_side, $door))
  other_side.source:announce_all_but({who}, other_side:opens_msg(who));
  other_side:set_open(1);
  other_side.source:broadcast_event_door_open_other_side(who, other_side);
endif
"room2" is not the name of any player.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise lounge sit under the windows.  A butler's desk lies pushed up against the wall.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck here.
stormagnet is here, distracted.
Objects owned by Crag (from #0 to #277):
  8K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #262 detailed painting         *[North Vestibule]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
 <1K #269 Generic Delegator          [Crag]
 <1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
 <1K #277 New Generic Room           [Crag]
-- 20 objects.  Total bytes: 24,254.------------------------------------------
New Generic Room (#271) [ readable ]
  Child of Generic Delegator (#269).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
New Generic Room (#271) [ readable ]
  Child of Generic Delegator (#269).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
New Generic Room (#277) [ readable ]
  Child of Generic Delegator (#269).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Sure you want to recycle the New Generic Room (#277)? [Enter `yes' or `no']
The New Generic Room (#277) recycled.
Your current object is now room2 (#271).
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#271.description" name: "New Generic Room.description" type: string content*: "" _data-tag: 142976930627
#$#* 142976930627 content: Delegators are responsible for managing their delegates. They update their verb list so they can receive messages for their delegates. When they have multiple instances of a delegate, they keep each instance's data separate. They pass on messages to their delegates and answer questions about themselves for their delegates.
#$#: 142976930627
Set description property of the New Generic Room (#271).
That object does not define that verb.
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Object #243 does not define that verb, but its ancestor #52 does.
Last modified Sat Aug 31 23:13:07 2002 PDT by Xplat (#4014) (on Waterpoint).
#52:"@prog*ram @program#" any any any
// This version of @program deals with multiple verbs having the same name.
// ... @program <object>:<verbname> <dobj> <prep> <iobj>  picks the right one.
if (player != caller)
  return;
endif
set_task_perms(player);
// ...
// ...catch usage errors first...
// ...
punt = "...set punt to 0 only if everything works out...";
if (!(args && (spec = $code_utils:parse_verbref(args[1]))))
  player:notify(tostr("Usage: ", verb, " <object>:<verb> [<dobj> <prep> <iobj>]"));
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
  // ...bogus object...
elseif (0 && index(spec[2], "("))
  // OLD--handle this in :parse_argspec now.
  named = $code_utils:parse_named_args(spec[2], @listdelete(args, 1));
  if (typeof(named) == LIST)
    if (named[2])
      player:notify("Can't parse after last arg: ", $string_utils:from_list(named[2]));
    else
      punt = 0;
      named = named[1];
      verbname = named[1];
      if (index(verbname, "*") > 1)
        verbname = strsub(verbname, "*", "");
      endif
      named_args = named[2];
      rest_arg = named[3];
      argspec = {"this", "none", "this"};
    endif
  else
    player:notify(tostr(named));
  endif
elseif (verb == "@program#")
  verbname = $code_utils:tonum(spec[2]);
  if (verbname == E_TYPE)
    player:notify("Verb number expected.");
  elseif (length(args) > 1)
    player:notify("Don't give args for @program#.");
  elseif (verbname < 1 || `verbname > length(verbs(object)) ! E_PERM => 0')
    player:notify("Verb number out of range.");
  else
    argspec = 0;
    punt = 0;
  endif
elseif (typeof(argspec = $code_utils:parse_argspec(@listdelete(args, 1))) != LIST)
  player:notify(tostr(argspec));
elseif (argspec[2])
  player:notify($string_utils:from_list(argspec[2], " ") + "??");
elseif (length(argspec = argspec[1]) in {1, 2})
  player:notify({"Missing preposition", "Missing iobj specification"}[length(argspec)]);
else
  punt = 0;
  verbname = spec[2];
  if (index(verbname, "*") > 1)
    verbname = strsub(verbname, "*", "");
  endif
endif
// ...
// ...if we have an argspec, we'll need to reset verbname...
// ...
if (punt)
elseif (argspec)
  named = argspec[4..min(5, $)];
  argspec = argspec[1..3];
  if (!(argspec[2] in {"none", "any"}))
    argspec[2] = $code_utils:full_prep(argspec[2]);
  endif
  loc = $code_utils:find_verb_named_1_based(object, verbname);
  while (loc && `verb_args(object, loc) ! E_PERM' != argspec)
    loc = $code_utils:find_verb_named_1_based(object, verbname, loc + 1);
  endwhile
  if (loc)
    verbname = loc;
  else
    punt = "...can't find it....";
    player:notify("That object has no verb matching that name + args.");
  endif
else
  named = {};
  loc = typeof(verbname) == NUM ? verbname | 0;
endif
// ...
// ...get verb info...
// ...
if (!punt)
  try
    info = verb_info(object, verbname);
  except e (ANY)
    if (e[1] == E_VERBNF)
      player:notify("That object does not have that verb definition.");
    else
      player:notify(e[2]);
    endif
    punt = 1;
  endtry
  if (!punt)
    aliases = info[3];
    if (!loc)
      loc = aliases in `verbs(object) ! E_PERM => {}';
    endif
  endif
endif
// ...
// ...read the code...
// ...
if (punt)
  player:notify(tostr("Now ignoring code for ", args ? args[1] | "nothing in particular", "."));
  $command_utils:read_lines();
  player:notify("Verb code ignored.");
else
  player:notify(tostr("Now programming ", object:name(), ":", aliases, @loc ? {"[", loc, "](", loc - 1, ")."} | {"[??](??)"}));
  lines = $command_utils:read_lines();
  lines = this:verbcode_external_to_internal(lines);
  if (named)
    code = $code_utils:split_verb_code(lines);
    lines = {@code[1], @$code_utils:named_args_to_code(named), @code[2]};
    // if (lines[1] == "\"Usage:\";")
    // lines[1..1] = $code_utils:commentify($code_utils:named_args_to_usage($string_utils:explode(aliases), named));
    // endif
    // named_args = named[1];
    // rest_arg = named[2];
    // for i in [1..length(named_args)]
    // lines = {@lines, tostr(named_args[i], " = args[", i, "];")};
    // endfor
    // if (rest_arg)
    // if (named_args)
    // lines = {@lines, tostr(rest_arg, " = args[", length(named_args) + 1, "..length(args)];")};
    // elseif (rest_arg != "args")
    // lines = {@lines, tostr(rest_arg, " = args;")};
    // endif
    // endif
    // lines = {@lines, @code[2]};
  endif
  try
    result = set_verb_code(object, verbname, lines);
  except e (ANY)
    result = e[2] + " ";
    // just in case some idiot throws an error with an empty string
  endtry
  if (result)
    if (typeof(result) == STR)
      player:notify(result);
    else
      player:notify_lines(result);
      player:notify(tostr(length(result), " error(s)."));
    endif
    player:notify("Verb not programmed.");
  else
    player:notify("0 errors.");
    player:notify("Verb programmed.");
  endif
endif
// Copied from generic programmer (#58):@prog by Erik (#74) Mon May  9 13:57:52 1994 EDT
// Copied from Erik (#74):@program by Erik (#74) Mon May  9 15:56:03 1994 EDT
stormagnet drops a demi-lune table.
A small semi-circular table of highly polished oak.
generic piece of furniture (#81)   generic sittable object (#80)   generic thing (#5)   Helpful Object (#250)   root class (#1)
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
stormagnet puts the silver salver in the demi-lune table.
A small semi-circular table of highly polished oak.
Contents:
  a silver salver
New Generic Room (#271) [ readable ]
  Child of Generic Delegator (#269).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
New Generic Room (#271) [ readable ]
  Child of Generic Delegator (#269).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
A small semi-circular table of highly polished oak.
Contents:
  a silver salver
The demi-lune table (#277) contains a silver salver (#278).
@integrate_room table's tray isn't set.
@integrate_player table's tray isn't set.
@integrate_container table's tray isn't set.
@in table's tray is "in"
@put_fail table's tray is "You can't put %dd %tx{in} that."
@remove_fail table's tray is "You can't remove that."
@remove table's tray is "%Nd %n:(removes) %di from %id."
@put table's tray is "%Nd %n:(puts) %dd %tx{in} %id."
@empty table's tray is "%Ts %t:(is) empty."
@integrate_sep table's tray is "  "
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {86650, 1366444800}
.core_names              Core-Wizard (#184)    r c    {"$root_class"}
-------------------------------- finished ---------------------------------
=> #145 (generic containing object)
butler's desk (#275) [ readable ]
  Owned by stormagnet (#246).
  Child of generic openable container (#8).
  Location North Vestibule (#70).
-------------------------------- finished ---------------------------------
=> #277 (demi-lune table)
 integrate_in            unknown hacker (#35)  r      {#145}
-------------------------------- finished ---------------------------------
butler's desk (#275) [ readable ]
  Owned by stormagnet (#246).
  Child of generic openable container (#8).
  Location North Vestibule (#70).
-------------------------------- finished ---------------------------------
generic openable container (#8) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic container (#126).
  Location generic player (#6).
.close_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
.open_msg                unknown hack (#35)    r c    {#69, "do", {"dname", "..
.opaque                  unknown hack (#35)    r      1
.dark                    unknown hack (#35)    r      0
.open_fail_msg           unknown hack (#35)    r c    {#69, "do", "You can't ..
.opened                  unknown hack (#35)    r      1
.open_key                unknown hack (#35)           0
.automatic               unknown hack (#35)    r      1
-------------------------------- finished ---------------------------------
generic openable container (#8) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic container (#126).
  Location generic player (#6).
    #8:look_self                unknown hacker (#35) rxd    this none this
    #8:open                     unknown hacker (#35) rxd    this none none
    #8:"@lock_for_open @lock-for-open" unknown hacker (#35) rxd this with/using any
    #8:is_openable_by           unknown hacker (#35) rxd    this none this
    #8:close                    unknown hacker (#35) rxd    this none none
    #8:"@unlock_for_open @unlock-for-open" unknown hacker (#35) rxd this none none
    #8:set_opened               unknown hacker (#35) rxd    this none this
    #8:@opacity                 unknown hacker (#35) r d    this is any
    #8:set_opaque               unknown hacker (#35) rxd    this none this
    #8:"open_msg close_msg"     unknown hacker (#35) rxd    this none this
    #8:look_in                  unknown hacker (#35) rxd    this none this
    #8:"open_fail_msg empty_msg" unknown hacker (#35) rxd   this none this
    #8:can_put_in               unknown hacker (#35) rxd    this none this
    #8:can_get_from             unknown hacker (#35) rxd    this none this
    #8:is_closable_by           unknown hacker (#35) rxd    this none this
    #8:"sub_open sub_opened"    unknown hacker (#35) rxd    this none this
    #8:"modname_open modname_opened" unknown hacker (#35) rxd this none this
    #8:"set_open_key set_automatic" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
Object #8 does not define that verb, but its ancestor #126 does.
Last modified Sat May 31 17:19:19 1997 PDT by Xythian (#199) (on Waterpoint).
#126:"description" this none this
desc = pass(@args);
// defaultdesc = {"You see nothing special."};
// if (!desc)
//  desc = defaultdesc;
// endif
integrate = $integration_utils:integrate(args, "integrate_container_msg");
if (integrate)
  if (!desc)
    return integrate;
  else
    desc[$] = desc[$] + $string_utils:pronoun_sub(this.integrate_sep_msg) + integrate[1];
    if (length(integrate) > 1)
      desc = {@desc, @integrate[2..$]};
    endif
  endif
endif
return desc;
You see no "$integrate_utils" here.
-----
$INTEGRATION_UTILS:INTEGRATE
============================

integrate(list, verb_or_property)

=> 2
#-1:Input to EVAL, line 5:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#-1:Input to EVAL, line 5:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
stormagnet picks up Wind-Up Duck.
stormagnet winds up the Wind-Up Duck.
stormagnet winds up the Wind-Up Duck.
stormagnet winds up the Wind-Up Duck.
stormagnet winds up the Wind-Up Duck.
A black walnut butler's desk, with carefully polished brass fitting- including a shiny lock.
stormagnet drops Wind-Up Duck.
Wind-Up Duck clanks, shudders, and starts rolling forward.
The verb :throw is on   Wind-Up Duck(#261)--Generic Wind-Up Toy(#260)
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Object #261 does not define that verb, but its ancestor #260 does.
Last modified Sat Apr 20 14:56:27 2013 PDT by Crag (#243).
#260:"d*rop th*row" this none none
pass(@args);
if (this.wound)
  $you:say_action(this:startup_msg());
  fork (15)
    this:do_the_work();
  endfork
endif
You take Wind-Up Duck.
#260:d*rop th*row (this == #261), line 1:  Verb not found
(End of traceback)
Wind-Up Duck (#261)   Generic Wind-Up Toy (#260)   generic thing (#5)   Helpful Object (#250)   root class (#1)
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
-------------------------------- finished ---------------------------------
Alias throw added to verb generic thing(#5):drop
Verbname is now generic thing(#5):"d*rop throw"
Alias chuck added to verb generic thing(#5):drop
Verbname is now generic thing(#5):"d*rop throw chuck"
You drop Wind-Up Duck.
You take Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
The knob comes to a stop while winding.
You give Wind-Up Duck to stormagnet.
stormagnet drops Wind-Up Duck.
Crag grins.
stormagnet picks up Wind-Up Duck.
stormagnet drops Wind-Up Duck.
That is not a valid command.
Queue ID    Start Time            Owner         Verb (Line) [This]
--------    ----------            -----         ------------------
1409462338  Apr 22 01:00:00 2013  Core-Wizard   #174:measurement_task (12)
-----
@FORKED
=======

Syntax:  @forked

Gives a list of all of the forked tasks you own, along with detailed information about each one.  The information includes the following:

Queue ID
========

A numeric identifier for the task, for use in killing it (see `help @kill'[1]).

Start Time
==========

The time after which the task will begin execution.

Owner
=====

The player whose permissions under which the task is running. Unless you are in the Core Group, @forked will show only your tasks.

Verb
====

The object and verb-name of the code that forked the task.

Line
====

The line number of the first statement that the task will execute when it starts.  Note that the code for the verb in question may have changed since the task was forked; the forked task will use the version that was being executed when it was forked.

This
====

The value of `this' for the forked task, in the case that it is different from (i.e., is a descendant of) the object on which the verb code lives.

Object #261 does not define that verb, but its ancestor #260 does.
Last modified Sat Apr 20 14:56:27 2013 PDT by Crag (#243).
#260:"d*rop th*row" this none none
pass(@args);
if (this.wound)
  $you:say_action(this:startup_msg());
  fork (15)
    this:do_the_work();
  endfork
endif
Object #261 does not define that verb, but its ancestor #260 does.
Last modified Sat Apr 20 14:54:40 2013 PDT by Crag (#243).
#260:"do_the_work" this none this
if (this.wound)
  if ($object_utils:isa(this.location, $room))
    $you:say_action(this:continue_msg());
    this.wound = this.wound - 1;
    if (this.wound)
      fork (15)
        this:do_the_work();
      endfork
    else
      $you:say_action(this:wind_down_msg());
    endif
  endif
  if (this.wound < 0)
    this.wound = 0;
  endif
endif
You take Wind-Up Duck.
,wound                   stormagnet (#246)     r      21
-------------------------------- finished ---------------------------------
You drop Wind-Up Duck.
Wind-Up Duck clanks, shudders, and starts rolling forward.
Queue ID    Start Time            Owner         Verb (Line) [This]
--------    ----------            -----         ------------------
476312806   Apr 21 01:27:12 2013  stormagnet    #260:d*rop th*row (5) [#261]
1409462338  Apr 22 01:00:00 2013  Core-Wizard   #174:measurement_task (12)
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Object #261 does not define that verb, but its ancestor #260 does.
Last modified Sat Apr 20 14:56:27 2013 PDT by Crag (#243).
#260:"d*rop th*row" this none none
pass(@args);
if (this.wound)
  $you:say_action(this:startup_msg());
  fork (15)
    this:do_the_work();
  endfork
endif
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
#5:"d*rop throw chuck" this none none
// Usage: drop <thing>
//  This drops things in the room the dropper is in.
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't drop that here.");
else
  this:moveto(player.location);
  if (this.location == player.location)
    player:tell_lines(this:drop_succeeded_msg() || "Dropped.");
    if (msg = this:odrop_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:drop_failed_msg() || "You can't seem to drop that here.");
    if (msg = this:odrop_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Crag peers at the duck suspiciously.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls exposed rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise lounges sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck here.
stormagnet is here, daydreaming.
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck creaks, shudders, and rolls to stop.
chaise lounges (#274) [ readable ]
  Owned by stormagnet (#246).
  Child of generic piece of furniture (#81).
  Location North Vestibule (#70).
-------------------------------- finished ---------------------------------
,seats                   stormagnet (#246)     r c    3
-------------------------------- finished ---------------------------------
[on the chaise lounges]
You sit on the chaise lounges.
A copper clockwork duck with wheels on the bottom and a winding key protruding from its back.
stormagnet sits on the chaise lounges beside you.
A copper clockwork duck with wheels on the bottom and a winding key protruding from its back.
You take Wind-Up Duck.
You wind up the Wind-Up Duck.
You wind up the Wind-Up Duck.
You drop Wind-Up Duck.
Wind-Up Duck clanks, shudders, and starts rolling forward.
A copper clockwork duck with wheels on the bottom and a winding key protruding from its back.
Wind-Up Duck %:(is) rolling forward, rocking back and forth on its wheels.
Object #261 does not define that verb, but its ancestor #260 does.
Last modified Sat Apr 20 14:55:51 2013 PDT by Crag (#243).
#260:"description" this none this
basic = pass(@args);
if (this.wound)
  return {@basic, $string_utils:pronoun_sub(this:going_msg())};
else
  return basic;
endif
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
=> "nothing %:(is) rolling forward, rocking back and forth on nothing wheels."
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
@integrate_room duck isn't set.
@integrate_player duck isn't set.
@integrate_container duck isn't set.
@drop_failed duck is "You can't seem to drop %td here."
@drop_succeeded duck is "You drop %td."
@odrop_failed duck is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded duck is "%n:(drops) %ti."
@otake_succeeded duck is "%n:(picks) up %td."
@otake_failed duck isn't set.
@take_succeeded duck is "You take %td."
@take_failed duck is "You can't pick up %td."
@startup duck is "%tn %t:(clanks), %t:(shudders), and %t:(starts) rolling forward."
@continue duck is "%tn %t:(swivels) %tp neck and %t:(emits) a mechanical \"QUACK!\""
@going duck is "%tn %%:(is) rolling forward, rocking back and forth on %tp wheels."
@wind_down duck is "%tn creaks, shudders, and rolls to stop."
You set the "going" message of Wind-Up Duck (#261).
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck creaks, shudders, and rolls to stop.
You set the "going" message of Wind-Up Duck (#261).
You take Wind-Up Duck.
You wind up the Wind-Up Duck.
Drop what?
You drop Wind-Up Duck.
Wind-Up Duck clanks, shudders, and starts rolling forward.
A copper clockwork duck with wheels on the bottom and a winding key protruding from its back.
Wind-Up Duck is rolling forward, rocking back and forth on its wheels.
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
You set the "going" message of Wind-Up Duck (#261).
A copper clockwork duck with wheels on the bottom and a winding key protruding from its back.
Wind-Up Duck is rolling forward, rocking back and forth on its wheels.
Wind-Up Duck swivels its neck and emits a mechanical "QUACK!"
Wind-Up Duck creaks, shudders, and rolls to stop.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise lounges' sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck here.
stormagnet is here.
@integrate_room chaise is "%Ti' sit under the windows."
@integrate_player chaise isn't set.
@integrate_container chaise isn't set.
@drop_failed chaise is "You can't seem to drop %td here."
@drop_succeeded chaise is "You drop %td."
@odrop_failed chaise is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded chaise is "%n:(drops) %ti."
@otake_succeeded chaise is "%n:(picks) up %td."
@otake_failed chaise isn't set.
@take_succeeded chaise is "You take %td."
@take_failed chaise is "You can't pick up %td."
@empty chaise is ""
@sitting chaise is "sitting"
@on chaise is "on"
@desc_along_with chaise is "along with"
@sit chaise is "%Nd %n:(sits) %tx{on} %td"
@squeeze chaise is "%Dd %d:(is) squeezed off %td."
@stand chaise is "%Dd %d:(stands) up from %td."
@fall chaise is "%Dd %d:(falls) off %td."
@shove chaise is "%Nd %n:(shoves) %dd off %td!"
@also_shove chaise is "%Nd %n:(takes) %dd with %no."
@nosqueeze chaise is "There's no room %tx{on} %td."
@integrate_empty chaise is "%Ti sit under the windows."
@integrate_sitters chaise is "  %Ni %n:(is) %tx{sitting} %tx{on} %to."
@next_to chaise is " %d'(beside/between) %dd"
@already_sitting chaise is "You are already %tx{sitting} %tx{on} %td."
@move_next_to chaise is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting chaise isn't set.
@desc_empty chaise isn't set.
You set the "integrate_room" message of the chaise lounges (#274).
You set the "integrate_room" message of the chaise lounges (#274).
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise lounges sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck here.
stormagnet is here, distracted.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise lounges sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck here.
stormagnet is here.
You are already sitting on the chaise lounges.
@integrate_room chaise is "%Ti sit under the windows."
@integrate_player chaise isn't set.
@integrate_container chaise isn't set.
@drop_failed chaise is "You can't seem to drop %td here."
@drop_succeeded chaise is "You drop %td."
@odrop_failed chaise is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded chaise is "%n:(drops) %ti."
@otake_succeeded chaise is "%n:(picks) up %td."
@otake_failed chaise isn't set.
@take_succeeded chaise is "You take %td."
@take_failed chaise is "You can't pick up %td."
@empty chaise is ""
@sitting chaise is "sitting"
@on chaise is "on"
@desc_along_with chaise is "along with"
@sit chaise is "%Nd %n:(sits) %tx{on} %td"
@squeeze chaise is "%Dd %d:(is) squeezed off %td."
@stand chaise is "%Dd %d:(stands) up from %td."
@fall chaise is "%Dd %d:(falls) off %td."
@shove chaise is "%Nd %n:(shoves) %dd off %td!"
@also_shove chaise is "%Nd %n:(takes) %dd with %no."
@nosqueeze chaise is "There's no room %tx{on} %td."
@integrate_empty chaise is "%Ti sit under the windows."
@integrate_sitters chaise is "  %Ni %n:(is) %tx{sitting} %tx{on} %to."
@next_to chaise is " %d'(beside/between) %dd"
@already_sitting chaise is "You are already %tx{sitting} %tx{on} %td."
@move_next_to chaise is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting chaise isn't set.
@desc_empty chaise isn't set.
A low walnut chaise lounge, upholhstered in a golf fern-figured damask.  You are sitting on the chaise lounges along with stormagnet.
You set the "sit" message of the chaise lounges (#274).
You set the "sit" message of the chaise longues (#274).
A low walnut chaise lounge, upholhstered in a golf fern-figured damask.  You are sitting on the chaise longues along with stormagnet.
You stand up from the chaise longues.
You lounge on the chaise longues beside stormagnet.
-----
@RMALIAS
========

Syntax: @rmalias  <alias>[,...,<alias>] from <object>
        @rmalias  <alias>[,...,<alias>] from <object>:<verb>
        @rmalias# <alias>[,...,<alias>] from <object>:<verb-number>

The first form is used to remove aliases from an object.  If the object is a valid player, space and commas will be assumed to be separations between unwanted aliases.  Otherwise, only commas will be assumed to be separations.  Note that @rmalias will not affect the object's name, only its aliases.

The other two forms are for use by programmers, to remove aliases from a verb they own.  All spaces and commas are assumed to be separations between unwanted aliases.  For `@rmalias#', verbs are specified by number, where 1 refers to the first verb on <object>.

@integrate_room chaise is "%Ti sit under the windows."
@integrate_player chaise isn't set.
@integrate_container chaise isn't set.
@drop_failed chaise is "You can't seem to drop %td here."
@drop_succeeded chaise is "You drop %td."
@odrop_failed chaise is "%n:(tries) to drop %ti but %n:(fails)."
@odrop_succeeded chaise is "%n:(drops) %ti."
@otake_succeeded chaise is "%n:(picks) up %td."
@otake_failed chaise isn't set.
@take_succeeded chaise is "You take %td."
@take_failed chaise is "You can't pick up %td."
@empty chaise is ""
@sitting chaise is "sitting"
@on chaise is "on"
@desc_along_with chaise is "along with"
@sit chaise is "%Nd %n:(lounges) %tx{on} %td"
@squeeze chaise is "%Dd %d:(is) squeezed off %td."
@stand chaise is "%Dd %d:(stands) up from %td."
@fall chaise is "%Dd %d:(falls) off %td."
@shove chaise is "%Nd %n:(shoves) %dd off %td!"
@also_shove chaise is "%Nd %n:(takes) %dd with %no."
@nosqueeze chaise is "There's no room %tx{on} %td."
@integrate_empty chaise is "%Ti sit under the windows."
@integrate_sitters chaise is "  %Ni %n:(is) %tx{sitting} %tx{on} %to."
@next_to chaise is " %d'(beside/between) %dd"
@already_sitting chaise is "You are already %tx{sitting} %tx{on} %td."
@move_next_to chaise is "%Nd %n:(crawls) over %id on %np way to %dd."
@desc_sitting chaise isn't set.
@desc_empty chaise isn't set.
You set the "sitting" message of the chaise longues (#274).
A low walnut chaise lounge, upholhstered in a golf fern-figured damask.  You are lounging on the chaise longues along with stormagnet.
Objects owned by Crag (from #0 to #278):
  8K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
 <1K #249 jar                        [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #262 detailed painting         *[North Vestibule]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
 <1K #269 Generic Delegator          [Crag]
 <1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
-- 19 objects.  Total bytes: 23,757.------------------------------------------
Your current object is room2, a New Generic Room (#271).
New Generic Room (#271) [ readable ]
  Child of Generic Delegator (#269).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
You now have Room Exit Delegate with object number #279 and parent Generic Delegate (#270).
You see nothing special.
jar (aka #249)
Owned by Crag.
(No description set.)
That is not a valid command.
jar (#249) [ readable ]
  Child of generic containing object (#145).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Sure you want to recycle the jar (#249)? [Enter `yes' or `no']
Okay.
jar (#249) [ readable ]
  Child of generic containing object (#145).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
jar (#249) [ readable ]
  Child of generic containing object (#145).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Sure you want to recycle the jar (#249)? [Enter `yes' or `no']
The jar (#249) recycled.
Objects owned by Crag (from #0 to #279):
  8K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #262 detailed painting         *[North Vestibule]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
 <1K #269 Generic Delegator          [Crag]
 <1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
 <1K #279 Room Exit Delegate         [Crag]
-- 19 objects.  Total bytes: 23,606.------------------------------------------
Your current object is now room exit (#279).
Wizard has connected.
Wizard disappears suddenly for parts unknown.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#279.description" name: "Room Exit Delegate.description" type: string content*: "" _data-tag: 114040533828
#$#* 114040533828 content: Delegates handle work for their delegators. They know what verbs they provide and register them with their delegators when they are added. They know what properties they need and register those as well. They know how well they can handle tasks. They handle those tasks.
#$#: 114040533828
Object #70 does not define that verb, but its ancestor #3 does.
#3:"announce_all" this none this
for dude in (this.contents)
  dude:tell(@args);
endfor
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Sat Feb  2 07:51:34 2002 PST by splat (#3024) (on JHM (for core)).
#3:"@exits" any none none
// Usage: @exits [obvious]
who = valid(caller_perms()) ? caller_perms() | player;
obvious = args && length(args) == 1 && index("obvious", args[1]) == 1;
if (args && !obvious)
  $command_utils:explain_syntax(this, verb, args);
  return E_ARGS;
endif
if (obvious || !this:can_read_exits(who))
  exits = this:obvious_exits();
  player:tell("Obvious exits:  ", $string_utils:dname_list(exits, "none"), ".");
  // player:tell("Sorry, only the owner of a room may list its exits.");
elseif (!(exits = this:exits()))
  player:tell("This room has no conventional exits.");
else
  for exit in (exits)
    // xplat 2002.01.31 -- Erik's version of the 'nowhere' thing didn't really work, so I'm trying something slightly more elaborate.
    room = `exit.dest ! E_INVIND, E_PROPNF => #-1';
    room_name = valid(room) ? $string_utils:dname_and_number(room) | "nowhere";
    exit_namec = valid(exit) ? $string_utils:dnamec_and_number(exit) | tostr("An invalid exit (", exit, ")");
    player:tell(exit_namec, " leads to ", room_name, " via {", $string_utils:from_list(`exit.aliases ! E_INVIND => {}', ", "), "}.");
  endfor
endif
The n (#268) leads to the Northern Entrance (#267) via {n}.
The tracery windows (#266) leads to the Northern Entrance (#267) via {tracery windows, windows}.
Set description property of the Room Exit Delegate (#279).
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#279.description" name: "Room Exit Delegate.description" type: string-list content*: "" _data-tag: 55840628529
#$#* 55840628529 content: The Room Exit Delegate handles commands and methods about exits and entrances
#$#* 55840628529 content: for room-like objects.
#$#* 55840628529 content: 
#$#* 55840628529 content: Commands:
#$#* 55840628529 content:     @exits                          any none none
#$#* 55840628529 content:     @entrances                      none none none
#$#* 55840628529 content:     go                              any none none
#$#* 55840628529 content:     "@add-exit @addexit"            any none none
#$#* 55840628529 content:     "@add-entrance @addentrance"    any none none
#$#* 55840628529 content:     (cardinal direction verbs)      none none none
#$#* 55840628529 content:     @remove-exit                    any none none
#$#* 55840628529 content:     @remove-entrance                any none none
#$#* 55840628529 content:     
#$#* 55840628529 content: Methods:
#$#* 55840628529 content:     "match_exit match_entrance"
#$#* 55840628529 content:     add_exit
#$#* 55840628529 content:     add_entrance
#$#* 55840628529 content:     remove_exit
#$#* 55840628529 content:     remove_entrance
#$#* 55840628529 content:     obvious_exits
#$#* 55840628529 content:     "exits entrances"
#$#* 55840628529 content: 
#$#* 55840628529 content: Properties:
#$#* 55840628529 content:     entrances
#$#* 55840628529 content:     exits
#$#: 55840628529
Set description property of the Room Exit Delegate (#279).
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#270.description" name: "Generic Delegate.description" type: string content*: "" _data-tag: 54702309130
#$#* 54702309130 content: Delegates handle work for their delegators. They know what verbs they provide and register them with their delegators when they are added. They know what properties they need and register those as well. They know how well they can handle tasks. They handle those tasks.
#$#: 54702309130
Room Exit Delegate (#279)   Generic Delegate (#270)   root class (#1)
Objects owned by Crag (from #0 to #279):
  8K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #262 detailed painting         *[North Vestibule]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
 <1K #269 Generic Delegator          [Crag]
 <1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
 <1K #279 Room Exit Delegate         [Crag]
-- 19 objects.  Total bytes: 23,606.------------------------------------------
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb added [7] (6).
Verb added [8] (7).
-----
`HELP CO' AMBIGUOUS
===================

Sorry, the topic `co' is ambiguous.  I don't know which of the following topics you mean:

`help @co'[1]           `help commands'[2]      `help @comment'[3]
`help common_quota'[4]  `help communication'[5]
`help communications'[6]                        `help Community Group'[7]
`help connected_players()'[8]                   `help connected_seconds()'[9]
`help connection_name()'[10]                    `help connection_option()'[11]
`help connection_options()'[12]                 `help container-messages'[13]
`help containers'[14]   `help @contents'[15]    `help coordinators'[16]
`help @copy'[17]        `help @copy-x'[18]      `help copyright'[19]
`help core-copyright'[20]                       `help core-index'[21]
`help core-license'[22]                         `help cos()'[23]
`help cosh()'[24]       `help @count'[25]       

-----
@CO
===

Usage:  @current-object
        @current-object <ref>[..]
        @current-object <base>[<ref>[..]]

The @current-object (@co) command is used to set your current object--an object referred to as _ in commands.  For more information on how to use the current object, see `help current-object'[1].

With no arguments, the command just tells you what your current object is.

If an argument is given, it indicates the object to go to, beginning with an optional `base object' and continuing with a series of references.  (If a base is given, no references need follow.)  The base object, if present, is matched as an ordinary object.  For example, "@co $jtext" would set your current object to the Jtext Dispatcher.

The <ref> segments are mostly properties.  For example, "@co $jtext.link" would set your object to the Link Dispatcher Tag.

If no base is identified, the current object you're already using is used as the base.  For example, after typing the previous command, you could type "@co .preceding" to change your current object to $jtext.link.root, the generic preceding link tag.

In addition to property references, there are two special kinds of <ref> segments for navigation through the object hierarchy.  One of them is ".<", and it works by retracing the steps by which your current object was determined.  For example, again following the preceding commands, "@co .<" would take you back to the Link Dispatcher Tag.

Finally, the ".^" <ref> segment gets you the parent of the current object.  Continuing the example, "@co .^" would bring you to the root class, the parent of the link dispatcher tag.

As indicated, any number of references can be combined; for example, "@co $jtext.link.preceding.<.<.<.string_utils.^" would be an exceedingly complicated way to get your current object to be the generic utilities.

Your current object is now #269.
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_match_message        Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:__d_dispatch_message     Crag (#243)          rxd    this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#269:__d_template_command ()" name: "MOO verb: #269:__d_template_command ()" type: moo-code content*: "" _data-tag: 84554900831
#$#: 84554900831
Verb added [9] (8).
Verb #269:__d_match_command [9] {this none this} removed.
That object does not define that verb.
Alias __d_match_command added to verb Generic Delegator(#269):__d_match_message
Verbname is now Generic Delegator(#269):"__d_match_message __d_match_command"
Alias __d_dispatch_command added to verb Generic Delegator(#269):__d_dispatch_message
Verbname is now Generic Delegator(#269):"__d_dispatch_message __d_dispatch_command"
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
.__d_delegates           Crag (#243)           r c    {}
.__d_delegate_ids        Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Verb added [9] (8).
Verb added [10] (9).
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:"__d_match_message __d_match_command" Crag (#243) rxd this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:"__d_dispatch_message __d_dispatch_command" Crag (#243) rxd this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:"@add-delegate @rm-delegate" Crag (#243)      r d    any any this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
Objects owned by Crag (from #0 to #279):
  8K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #262 detailed painting         *[North Vestibule]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
 <1K #269 Generic Delegator          [Crag]
 <1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
 <1K #279 Room Exit Delegate         [Crag]
-- 19 objects.  Total bytes: 23,606.------------------------------------------
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:"__d_match_message __d_match_command" Crag (#243) rxd this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:"__d_dispatch_message __d_dispatch_command" Crag (#243) rxd this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:"@add-delegate @rm-delegate" Crag (#243)      r d    any any this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
Generic Delegate (#270) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_commands             Crag (#243)          rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:__d_verbs                Crag (#243)          rxd    this none this
  #270:@addcommand              Wizard (#2)          r d    any any any
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
-------------------------------- finished ---------------------------------
Alias __d_match_command added to verb Generic Delegate(#270):__d_match_message
Verbname is now Generic Delegate(#270):"__d_match_message __d_match_command"
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
.__d_delegates           Crag (#243)           r c    {}
.__d_delegate_ids        Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
.__d_delegates           Crag (#243)           r c    {}
.__d_delegate_ids        Crag (#243)           r c    {}
,key                     Crag (#243)             c    0
,aliases                 Crag (#243)           r c    {"delegator"}
,description             Crag (#243)           r c    "Delegators are respons..
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Crag (#243)           r c    ""
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
,unique                  Crag (#243)           r c    0
 proper                  Crag (#243)           r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {449, 1366527402}
 core_names              Crag (#243)           r c    {"$root_class"}
-------------------------------- finished ---------------------------------
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Wed Apr 17 13:37:28 2002 PDT by Xplat (#4014) (on Waterpoint).
#126:"p*ut in*sert d*rop qput" any (in/inside/into) this
quiet = verb == "qput";
if (!quiet && length(dobjstr) >= 8 && dobjstr[$ - 7..$] == " quietly")
  dobjstr[$ - 7..$] = "";
  quiet = 1;
endif
if ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
  return E_INVARG;
endif
if (quiet && this.location != player)
  quiet = 0;
elseif (quiet && dobj.location != player)
  quiet = 0;
endif
if (dobj.location != player && dobj.location != player.location)
  if (dobj.location == this)
    player:tell(dobj:dnamec(), " ", dobj:verb_sub("is"), " already ", this:name("d", {"in"}), ".");
  else
    player:tell("You can't reach ", dobj:dname(), ".");
  endif
  return E_RANGE;
endif
if (this:can_put_in(dobj, dobjstr))
  loc = player.location;
  dobj:moveto(this);
  if (dobj.location == this)
    if (quiet)
      player:tell($string_utils:pronoun_sub(this:put_msg(), $you, this, loc));
    else
      $you:say_action(this:put_msg(), player, this, loc);
    endif
  else
    player:tell(this:put_fail_msg());
  endif
endif
// Xplat 2002.04.17 -- save player location so as to announce if someone puts emself in a container
Delegators are responsible for managing their delegates. They update their verb list so they can receive messages for their delegates. When they have multiple instances of a delegate, they keep each instance's data separate. They pass on messages to their delegates and answer questions about themselves for their delegates.
Delegates handle work for their delegators. They know what verbs they provide and register them with their delegators when they are added. They know what properties they need and register those as well. They know how well they can handle tasks. They handle those tasks.
Objects owned by Crag (from #0 to #279):
  8K #243 Crag                      *[North Vestibule]
  1K #245 leather couch             *[stormagnet]
  1K #244 generic group              [Nowhere]
  1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
  2K #250 Helpful Object             [Nowhere]
 <1K #251 MCP parent                 [Crag]
 <1K #252 Parsing objects            [Crag]
 <1K #253 Text generation objects    [Crag]
 <1K #254 Abstract class             [Crag]
 <1K #255 Generic Pilable Thing      [Crag]
 <1K #262 detailed painting         *[North Vestibule]
 <1K #263 bridge                     [detailed painting]
 <1K #264 adventure party            [bridge]
 <1K #265 Non-VR detail              [Crag]
 <1K #269 Generic Delegator          [Crag]
 <1K #270 Generic Delegate           [Crag]
 <1K #271 New Generic Room           [Crag]
 <1K #279 Room Exit Delegate         [Crag]
-- 19 objects.  Total bytes: 23,606.------------------------------------------
The Room Exit Delegate handles commands and methods about exits and entrances
for room-like objects.

Commands:
    @exits                          any none none
    @entrances                      none none none
    go                              any none none
    "@add-exit @addexit"            any none none
    "@add-entrance @addentrance"    any none none
    (cardinal direction verbs)      none none none
    @remove-exit                    any none none
    @remove-entrance                any none none
    
Methods:
    "match_exit match_entrance"
    add_exit
    add_entrance
    remove_exit
    remove_entrance
    obvious_exits
    "exits entrances"

Properties:
    entrances
    exits
Non-VR detail (#265) [ readable ]
  Child of generic container (#126).
  Location Crag (#243).
  #265:tell_contents            Crag (#243)          rxd    this none this
  #265:examine_contents         Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Non-VR detail (#265) [ readable ]
  Child of generic container (#126).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Last modified Sat Apr 20 16:09:33 2013 PDT by Crag (#243).
#265:"tell_contents" ()
That verb has not been programmed.
Last modified Sat Apr 20 16:17:02 2013 PDT by Crag (#243).
#265:"examine_contents" ()
That verb has not been programmed.
Name of #265 changed to "Generic Nesting Decoration", with aliases {"Generic Nesting Decoration"}.
Property added with value #265.
You see no "$nesting_decoration" here.
The Generic Nesting Decoration(#265) has 3 kids.
detailed painting (#262)   bridge (#263)   adventure party (#264)
Property name changed.
The Generic Nesting Decoration(#265) has 3 kids.
detailed painting (#262)   bridge (#263)   adventure party (#264)
Objects owned by stormagnet (from #0 to #279):
  3K #246 stormagnet                *[North Vestibule]
 <1K #260 Generic Wind-Up Toy        [stormagnet]
 <1K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows            *North Vestibule->Northern Entrance
  1K #267 Northern Entrance         
 <1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [stormagnet]
 <1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling           *[generic room]
 <1K #273 timbered ceiling          *[North Vestibule]
  1K #274 chaise longues            *[North Vestibule]
 <1K #275 butler's desk             *[North Vestibule]
 <1K #276 butler's key               [stormagnet]
  1K #277 demi-lune table           *[North Vestibule]
 <1K #278 silver salver              [demi-lune table]
-- 15 objects.  Total bytes: 14,964.------------------------------------------
=> #272 (generic ceiling)
You see no "$nesting_descoration" here.
Parent changed.
butler's desk (#275)   generic openable container (#8)   generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
You now have Generic Table with object number #280 and parent generic container (#126).
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Alias "table" added to Generic Table(#280).
Aliases for Generic Table(#280) are now {"Generic Table", "table"}
Property added with value #280.
Verb added [1] (0).
Now programming Generic Table:p*ut in*sert d*rop qput[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
You drop the Generic Table.
Carrying:
 some Group Utilities                    a Generic Pile
 a MCP parent                            a Generic Nesting Decoration
 a Parsing objects                       a Generic Delegator
 a Text generation objects               a Generic Delegate
 an Abstract class                       a New Generic Room
 a Generic Pilable Thing                 a Room Exit Delegate
=> #269 (Generic Delegator)
That is not a valid command ("table" is an ambiguous name).
Try this instead:  put _ on $table
Usage:  @verbs <object>
;verbs(#280) => {"p*ut in*sert d*rop qput"}
You haven't specified which "table" you mean.
The Generic Table disappears suddenly for parts unknown, moved by Crag.
Moved.
Objects owned by stormagnet (from #0 to #281):
  3K #246 stormagnet                *[North Vestibule]
 <1K #260 Generic Wind-Up Toy        [stormagnet]
 <1K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows            *North Vestibule->Northern Entrance
  1K #267 Northern Entrance         
 <1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [stormagnet]
 <1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling           *[generic room]
 <1K #273 timbered ceiling          *[North Vestibule]
  1K #274 chaise longues            *[North Vestibule]
 <1K #275 butler's desk             *[North Vestibule]
 <1K #276 butler's key               [stormagnet]
  1K #277 demi-lune table           *[North Vestibule]
 <1K #278 silver salver              [demi-lune table]
-- 15 objects.  Total bytes: 14,964.------------------------------------------
Parent changed.
A small semi-circular table of highly polished oak.
Contents:
  a silver salver
That is not a valid command.
@integrate_room #278 isn't set.
@integrate_player #278 isn't set.
@integrate_container #278 isn't set.
@in #278 is "in"
@put_fail #278 is "You can't put %dd %tx{in} that."
@remove_fail #278 is "You can't remove that."
@remove #278 is "%Nd %n:(removes) %di from %id."
@put #278 is "%Nd %n:(puts) %dd %tx{in} %id."
@empty #278 is "%Ts %t:(is) empty."
@integrate_sep #278 is "  "
You set the "integrate_container" message of the silver salver (#278).
A small semi-circular table of highly polished oak.  A silver salver has been placed on the demi-lune table.
You now have microphone with object number #282 and parent generic thing (#5).
You stand up from the chaise longues.
The Northern Entrance
You see nothing special.
You see a Generic Table here.
Wizard is here, distracted.
microphone (#282) [ readable ]
  Child of generic thing (#5).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Object #282 does not define that verb, but its ancestor #5 does.
#5:"d*rop throw chuck" this none none
// Usage: drop <thing>
//  This drops things in the room the dropper is in.
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:accept(this))
  player:tell("You can't drop that here.");
else
  this:moveto(player.location);
  if (this.location == player.location)
    player:tell_lines(this:drop_succeeded_msg() || "Dropped.");
    if (msg = this:odrop_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:drop_failed_msg() || "You can't seem to drop that here.");
    if (msg = this:odrop_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
Verb added [1] (0).
Now programming microphone:drop[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
Line 8:  syntax error
1 error(s).
Verb not programmed.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#282:drop this none none" name: "MOO verb: #282:drop this none none" type: moo-code content*: "" _data-tag: 120942441932
#$#: 120942441932
0 errors.
Verb programmed.
You drop the microphone.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck here.
stormagnet is here, off in another world.
You drop the microphone.
The tracery windows are closed.
You can't go that way.
You take the microphone.
You drop the microphone.
The tracery windows are closed.
You take the microphone.
You drop the microphone.
The Northern Entrance
You see nothing special.
You see a Generic Table here.
Wizard is here.
You see no "trace" here.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck and a microphone here.
stormagnet is here, off in another world.
=> #266 (tracery windows)
=> 0
=> #268 (n)
=> 1
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#282:drop this none none" name: "MOO verb: #282:drop this none none" type: moo-code content*: "" _data-tag: 125772674733
#$#* 125772674733 content: pass(@args);
#$#* 125772674733 content: if (this.location == player.location)
#$#* 125772674733 content:   exits = this:location():exits();
#$#* 125772674733 content:   exits[random(length(exits))]:invoke();
#$#* 125772674733 content: endif
#$#: 125772674733
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#282:drop this none none" name: "MOO verb: #282:drop this none none" type: moo-code content*: "" _data-tag: 149125589534
#$#* 149125589534 content: pass(@args);
#$#* 149125589534 content: if (this.location == player.location)
#$#* 149125589534 content:   exits = $list_utils:grep(this:location():exits(), "obvious");
#$#* 149125589534 content:   exits[random(length(exits))]:invoke();
#$#* 149125589534 content: endif
#$#: 149125589534
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#49:grep_o ()" name: "MOO verb: #49:grep_o ()" type: moo-code content*: "" _data-tag: 71822945935
#$#: 71822945935
0 errors.
Verb programmed.
Line 1:  Missing quote
Line 1:  syntax error
2 errors.
=> {#268}
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#282:drop this none none" name: "MOO verb: #282:drop this none none" type: moo-code content*: "" _data-tag: 74124761836
#$#* 74124761836 content: pass(@args);
#$#* 74124761836 content: if (this.location == player.location)
#$#* 74124761836 content:   exits = $list_utils:grep_o(this:location():exits(), "obvious");
#$#* 74124761836 content:   exits[random(length(exits))]:invoke();
#$#* 74124761836 content: endif
#$#: 74124761836
0 errors.
Verb programmed.
You don't have that.
The Northern Entrance
You see nothing special.
You see a Generic Table here.
Wizard is here.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck and a microphone here.
stormagnet is here, off in another world.
You take the microphone.
You drop the microphone.
The Northern Entrance
You see nothing special.
You see a Generic Table here.
Wizard is here, distracted.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck and a microphone here.
stormagnet is here, off in another world.
Now programming microphone:drop[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
>> Command Aborted <<
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#282:drop this none none" name: "MOO verb: #282:drop this none none" type: moo-code content*: "" _data-tag: 16129722037
#$#* 16129722037 content: pass(@args);
#$#* 16129722037 content: if (this.location == player.location)
#$#* 16129722037 content:   exits = $list_utils:grep_o(this:location():exits(), "obvious");
#$#* 16129722037 content:   exits[random(length(exits))]:invoke();
#$#* 16129722037 content: endif
#$#: 16129722037
0 errors.
Verb programmed.
Don't front.
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#282:drop this none none" name: "MOO verb: #282:drop this none none" type: moo-code content*: "" _data-tag: 104169781438
#$#* 104169781438 content: if (this.location != player)
#$#* 104169781438 content:   player:tell("Don't front.");
#$#* 104169781438 content:   return;
#$#* 104169781438 content: endif
#$#* 104169781438 content: pass(@args);
#$#* 104169781438 content: if (this.location == player.location)
#$#* 104169781438 content:   exits = $list_utils:grep_o(this:location():exits(), "obvious");
#$#* 104169781438 content:   exits[random(length(exits))]:invoke();
#$#* 104169781438 content: endif
#$#: 104169781438
0 errors.
Verb programmed.
You don't have that.
Don't front.
You take the microphone.
You drop the microphone.
The Northern Entrance
You see nothing special.
You see a Generic Table here.
Wizard is here, daydreaming.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck and a microphone here.
stormagnet is here, off in another world.
-----
@CO
===

Usage:  @current-object
        @current-object <ref>[..]
        @current-object <base>[<ref>[..]]

The @current-object (@co) command is used to set your current object--an object referred to as _ in commands.  For more information on how to use the current object, see `help current-object'[1].

With no arguments, the command just tells you what your current object is.

If an argument is given, it indicates the object to go to, beginning with an optional `base object' and continuing with a series of references.  (If a base is given, no references need follow.)  The base object, if present, is matched as an ordinary object.  For example, "@co $jtext" would set your current object to the Jtext Dispatcher.

The <ref> segments are mostly properties.  For example, "@co $jtext.link" would set your object to the Link Dispatcher Tag.

If no base is identified, the current object you're already using is used as the base.  For example, after typing the previous command, you could type "@co .preceding" to change your current object to $jtext.link.root, the generic preceding link tag.

In addition to property references, there are two special kinds of <ref> segments for navigation through the object hierarchy.  One of them is ".<", and it works by retracing the steps by which your current object was determined.  For example, again following the preceding commands, "@co .<" would take you back to the Link Dispatcher Tag.

Finally, the ".^" <ref> segment gets you the parent of the current object.  Continuing the example, "@co .^" would bring you to the root class, the parent of the link dispatcher tag.

As indicated, any number of references can be combined; for example, "@co $jtext.link.preceding.<.<.<.string_utils.^" would be an exceedingly complicated way to get your current object to be the generic utilities.

-----
CURRENT-OBJECT
==============

Your `current object' is an object that you can refer to in most commands without using its name, just by using the symbol "_".  It's intended primarily for programming.

For example, you can type

   @co $jtext.link
   @d _:

and get a list of verbs defined on the link dispatcher tag.

In addition, if your .eval_env property (see `help eval'[1]) sets _ to player.current_object, you can use it in evaluations.  The default .eval_env includes this binding.  So, to continue the example:

   >;_:dname()
   => "the link dispatcher tag"

A stack is kept of the current objects you've been using, so you can change your current object for a while and then switch back to the previous one without needing to identify it again.

To find out how to set or view your current object, read the following help topics:

@currentobject[2]
      Set current object, or find out what it is.
@pushobject[3]
      Push a current object onto the stack.
@popobject[4]
      Return to the previous current object.
@swapobject[5]
      Switch between current and previous object.

Object #243 does not define that verb, but its ancestor #6 does.
Last modified Thu Sep 18 11:50:18 1997 PDT by Erik (#74) (on JHM).
#6:"@pusho*bject" any none none
// Usage:  @pusho <objspec>
// Push current object onto the stack, select a new current object.
set_task_perms(player);
if (player != this)
  player:notify("You should get your own ", verb, " verb.");
  return E_PERM;
endif
co = this.current_object;
if (dobjstr)
  try
    co = this:parse_current_object(dobjstr, co);
  except e (ANY)
    return player:notify(e[2]);
  endtry
  if (valid(co[1]))
    this:set_current_object_stack({@this.current_object_stack, this.current_object});
    this:set_current_object(co);
    this:display_current_object(@co);
  else
    $command_utils:object_match_failed(@co);
  endif
elseif (stack = this.current_object_stack)
  player:notify("Your current object stack:");
  for co in (stack)
    player:notify(tostr("  ", this:current_object_string(@co)));
  endfor
  this:display_current_object(@this.current_object);
else
  player:notify("You have no current object stack.");
  this:display_current_object(@this.current_object);
endif
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> {{#244, "$local.group"}, {#269, "delegator"}, {#269, "delegator"}, {#271, "room2"}, {#279, "room exit"}}
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:"__d_match_message __d_match_command" Crag (#243) rxd this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:"__d_dispatch_message __d_dispatch_command" Crag (#243) rxd this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:"@add-delegate @rm-delegate" Crag (#243)      r d    any any this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
You see nothing special.
Description set.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk lies pushed up against the wall.  A demi-lune table stands between the doors, ready to receive calling cards.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck and a microphone here.
stormagnet is here.
stormagnet puts the chandelier in the timbered ceiling.
Your current object is a Generic Delegator (#269).
Generic Delegator (#269) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:"__d_match_message __d_match_command" Crag (#243) rxd this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:"__d_dispatch_message __d_dispatch_command" Crag (#243) rxd this none this
  #269:__d_template_command     Crag (#243)          rxd    this none this
  #269:__d_template_method      Crag (#243)          rxd    this none this
  #269:"@add-delegate @rm-delegate" Crag (#243)      r d    any any this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
-------------------------------- finished ---------------------------------
Carrying:
 some Group Utilities                    a Generic Pile
 a MCP parent                            a Generic Nesting Decoration
 a Parsing objects                       a Generic Delegator
 a Text generation objects               a Generic Delegate
 an Abstract class                       a New Generic Room
 a Generic Pilable Thing                 a Room Exit Delegate
You see nothing special.
Text generation objects (#253) [ readable ]
  Child of root class (#1).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
The New Generic Room replaces the old JHcore room. The implementation uses the new $delegator and $delegates to provide all the old functionality.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#271.description" name: "New Generic Room.description" type: string content*: "" _data-tag: 53320841239
#$#* 53320841239 content: The New Generic Room replaces the old JHcore room. The implementation uses the new $delegator and $delegates to provide all the old functionality.
#$#: 53320841239
Set description property of the New Generic Room (#271).
The New Generic Room replaces the old JHcore room. The implementation uses the
new $delegator and $delegates to provide all the old functionality.
Set description property of the New Generic Room (#271).
That object does not define that verb.
That object does not have that verb definition.
Now ignoring code for me:@dump-kids.
[Type lines of input; use `.' to end or `@abort' to abort the command.]
Verb code ignored.
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location North Vestibule (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:@dumpkids                Crag (#243)          r d    any none none
-------------------------------- finished ---------------------------------
Now programming Crag:@dumpkids[2](1).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
Line 1:  syntax error
1 error(s).
Verb not programmed.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#243:@dumpkids any none none" name: "MOO verb: #243:@dumpkids any none none" type: moo-code content*: "" _data-tag: 132734637940
#$#: 132734637940
0 errors.
Verb programmed.
Crag (#243)
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#243:@dumpkids any none none" name: "MOO verb: #243:@dumpkids any none none" type: moo-code content*: "" _data-tag: 89653110641
#$#* 89653110641 content: // Usage: @dump-kids <parent>
#$#* 89653110641 content: // Lists the object hierarchy from parent down
#$#* 89653110641 content: prefix = "";
#$#* 89653110641 content: if (args && typeof(args[1]) == STR && index(args[1], " ") == 1)
#$#* 89653110641 content:   prefix = args[1];
#$#* 89653110641 content: endif
#$#* 89653110641 content: thisinfo = this:name_and_number();
#$#* 89653110641 content: player:tell(prefix, thisinfo);
#$#* 89653110641 content: for child in (children(this))
#$#* 89653110641 content:   child:("@dump-kids")(prefix + "  ");
#$#* 89653110641 content:   $command_utils:suspend_if_needed(0);
#$#* 89653110641 content: endfor
#$#: 89653110641
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#243:@dumpkids any none none" name: "MOO verb: #243:@dumpkids any none none" type: moo-code content*: "" _data-tag: 105757670042
#$#* 105757670042 content: // Usage: @dump-kids <parent>
#$#* 105757670042 content: // Lists the object hierarchy from parent down
#$#* 105757670042 content: prefix = "";
#$#* 105757670042 content: if (args && typeof(args[1]) == STR && index(args[1], " ") == 1)
#$#* 105757670042 content:   prefix = args[1];
#$#* 105757670042 content: endif
#$#* 105757670042 content: thisinfo = this:name_and_number();
#$#* 105757670042 content: player:tell(prefix, thisinfo);
#$#* 105757670042 content: for child in (children(this))
#$#* 105757670042 content:   child:("@dump-kids")(prefix + "  ");
#$#* 105757670042 content:   $command_utils:suspend_if_needed(0);
#$#* 105757670042 content: endfor
#$#: 105757670042
0 errors.
Verb programmed.
=> {{#-1, "eval", #-1, #-1, #243}, {#243, "eval_cmd_string", #243, #52, #243}, {#243, "eval", #243, #52, #243}}
Last modified Sun Apr 21 14:10:45 2013 PDT by Crag (#243).
#243:"@dumpkids" any none none
// Usage: @dump-kids <parent>
// Lists the object hierarchy from parent down
prefix = "";
if (args && typeof(args[1]) == STR && index(args[1], " ") == 1)
  prefix = args[1];
endif
thisinfo = this:name_and_number();
player:tell(prefix, thisinfo);
for child in (children(this))
  child:("@dump-kids")(prefix + "  ");
  $command_utils:suspend_if_needed(0);
endfor
stormagnet drops a porter's chair.
Last modified Sat Jan 13 14:33:18 2001 PST by Xplat (#4014) (on Waterpoint).
#10:"cr*eate @cr*eate" any none any
if (caller != #0)
  return E_PERM;
  // ... caller isn't :do_login_command()...
elseif (!this:player_creation_enabled(player))
  this:notify_lines(this.registration_string ? this:registration_string() | this:registration_text(this.create_enabled ? "blacklisted" | "create"));
  // ... we've disabled player creation ...
elseif (length(args) != 2)
  notify(player, tostr("Usage:  ", verb, " <new-player-name> <new-password>"));
elseif (!(password = args[2]))
  notify(player, "You must set a password for your player.");
elseif (!(check = $player_db:check_name_request(args[1], $nothing))[1])
  this:notify_lines(check[2]);
elseif (typeof(new = $player_db:create_registered_player(name = check[2], {name}, password, "", "", $new_player_log.autoregistration_player, 0)) != OBJ)
  notify(player, tostr(new));
else
  if ($player_class.programmer)
    $wiz_utils:set_programmer(new, 1);
  endif
  this:record_connection(new);
  return new;
endif
return 0;
generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
    #7:recycle                  Core-Wizard (#184)   rxd    this none this
    #7:"leave_msg oleave_msg arrive_msg oarrive_msg nogo_msg onogo_msg no_one_msg" Core-Wizard (#184) rxd this none this
    #7:set_name                 Core-Wizard (#184)   rxd    this none this
    #7:set_aliases              Core-Wizard (#184)   rxd    this none this
    #7:defaulting_oleave_msg    Core-Wizard (#184)   rxd    this none this
    #7:moveto                   Core-Wizard (#184)   rxd    this none this
    #7:examine_key              Core-Wizard (#184)   rxd    this none this
    #7:substitute               Core-Wizard (#184)   rxd    this none this
    #7:dest_who                 Core-Wizard (#184)   rxd    this none this
    #7:dest_contents            Core-Wizard (#184)   rxd    this none this
    #7:dest_description         Core-Wizard (#184)   rxd    this none this
    #7:set_message              Core-Wizard (#184)   rxd    this none this
    #7:set_description          Core-Wizard (#184)   rxd    this none this
    #7:invoke                   Core-Wizard (#184)   rxd    this none this
    #7:integrate_in             Core-Wizard (#184)   rxd    this none this
    #7:"direction sub_direction" unknown hacker (#35) rxd   this none this
    #7:description              Core-Wizard (#184)   rxd    this none this
    #7:sub_who                  Core-Wizard (#184)   rxd    this none this
    #7:move                     Core-Wizard (#184)   rxd    this none this
    #7:sweep_for_followers      Core-Wizard (#184)   rxd    this none this
    #7:obvious                  unknown hacker (#35) rxd    this none this
    #7:defaulting_oarrive_msg   unknown hacker (#35) rxd    this none this
    #7:integrate_room_msg       Core-Wizard (#184)   rxd    this none this
    #7:dependents_event_move_by_exit_* Core-Wizard (#184) rxd this none this
    #7:"other_side obj_other_side" Core-Wizard (#184) rxd   this none this
    #7:set_walking_cost         unknown hacker (#35) rxd    this none this
    #7:walking_cost             unknown hacker (#35) rxd    this none this
    #7:"obj_dest obj_source"    unknown hacker (#35) rxd    this none this
    #7:"moddir_d moddir_i"      unknown hacker (#35) rxd    this none this
    #7:moddir_*                 unknown hacker (#35) rxd    this none this
    #7:through_msg              Core-Wizard (#184)   rxd    this none this
    #7:where_are_you            Core-Wizard (#184)   rxd    this none this
    #7:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
#7:"invoke" this none this
if (typeof(this.obvious) == LIST)
  this.obvious = setadd(this.obvious, player);
endif
this:move(player);
Last modified Sat Nov 17 21:46:31 2007 PST by Xplat (#4014) (on Waterpoint).
#7:"move" (what)
start = what.location;
if (start != this.source)
  what:tell("You can't go that way.");
  return;
endif
unlocked = this:is_unlocked_for(what);
if (typeof(dest = this.dest) == LIST)
  dest = dest[1]:create(listdelete(dest, 1));
endif
if (unlocked)
  dest:bless_for_entry(what);
endif
start:broadcast_event_move_by_exit_attempted(what, this);
dest:broadcast_event_move_by_exit_attempted(what, this);
if (unlocked && dest:accept(what))
  if (msg = this:leave_msg(what))
    what:tell_lines(msg);
  endif
  what:moveto(dest);
  start:broadcast_event_move_by_exit_completed(what, this);
  what.location:broadcast_event_move_by_exit_completed(what, this);
  if (what.location != start || dest == start)
    // Don't print oleave messages if WHAT didn't actually go anywhere...
    // Unless the exit is actually a loop...
    msg = this:oleave_msg(what) || this:defaulting_oleave_msg(what);
    start:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg || what:verb_sub("has") + " left.");
  endif
  if (what.location == dest)
    // Don't print arrive messages if WHAT didn't really end up there...
    if (msg = this:arrive_msg(what))
      what:tell_lines(msg);
    endif
    msg = this:oarrive_msg(what) || this:defaulting_oarrive_msg(what);
    what.location:announce_all_but({what}, this.prefix_name ? what:inamec() + " " | "", msg || what:verb_sub("has") + " arrived.");
    this:sweep_for_followers(what);
  endif
else
  start:broadcast_event_move_by_exit_failed(what, this);
  what.location:broadcast_event_move_by_exit_failed(what, this);
  if (msg = this:nogo_msg(what))
    what:tell_lines(msg);
  else
    what:tell("You can't go that way.");
  endif
  if (msg = this:onogo_msg(what))
    what.location:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg);
  endif
endif
// Copied from generic exit (#7):move by Ken (#75) Tue Nov  7 19:12:28 1995 CST
// Copied from generic exit (#7):move(old) by Ken (#75) Tue Nov  7 19:32:34 1995 CST
Object #70 does not define that verb, but its ancestor #110 does.
#110:"broadcast_event_*" this none this
// :broadcast_event_<type>(@event-args) -- broadcasts the event <type> with args `event-args' to all objects listening to this dispatcher.
// if (!$perm_utils:controls(caller_perms(), this))
//   return E_PERM;
// endif
name = verb[11..length(verb)];
retlist = {};
for o in (this:("dependents_" + name)(@args))
  ret = o:(name)(@args);
  if (ret)
    retlist = {@retlist, ret};
  endif
endfor
return retlist;
Object #70 does not define that verb, but its ancestor #110 does.
Last modified Sun Jan  7 19:21:16 2001 PST by Xplat (#4014) (on Waterpoint).
#110:"add_dependent" (object)
// :add_dependent(object) -- object will now receive any events broadcast from this dispatching object.
if (!$perm_utils:controls(caller_perms(), object) && !$perm_utils:controls(caller_perms(), this))
  return E_PERM;
endif
this.dependents = setadd(this.dependents, object);
generic event handler (#133) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
-------------------------------- finished ---------------------------------
generic event handler (#133) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
  #133:handle_event_*           unknown hacker (#35) rx     this none this
  #133:set_handler_ok           unknown hacker (#35) rx     this none this
  #133:initialize               unknown hacker (#35) rxd    this none this
  #133:help_verbs               Core-Wizard (#184)   rxd    this none this
  #133:help_text                unknown hacker (#35) rx     this none this
  #133:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
-----
HELP ON THE GENERIC EVENT HANDLER
=================================

Sorry, but no help is available on generic event handler(#133).
Try `examine generic event handler'.

This is an object that can handle events, with :handle_event_* verbs.  It's meant to be put in objects' .handlers lists.

Each handle verb takes three arguments: the calling object; the list of non-zero return values from previous handlers; and the list of arguments.
The generic event handler(#133) has no kids.
#133:"handle_event_*" this none this
return 0;
Object #3 does not define that verb, but its ancestor #110 does.
#110:"broadcast_event_*" this none this
// :broadcast_event_<type>(@event-args) -- broadcasts the event <type> with args `event-args' to all objects listening to this dispatcher.
// if (!$perm_utils:controls(caller_perms(), this))
//   return E_PERM;
// endif
name = verb[11..length(verb)];
retlist = {};
for o in (this:("dependents_" + name)(@args))
  ret = o:(name)(@args);
  if (ret)
    retlist = {@retlist, ret};
  endif
endfor
return retlist;
That object does not define that verb.
;verbs(#3) => {"confunc", "disfunc", "say", "emote", "announce", "match_exit match_entrance", "add_exit", "tell_contents", "@exits", "add_entrance", "bless_for_entry", "@entrances", "go", "l*ook", "announce_all", "announce_all_but", "enterfunc", "remove_exit", "remove_entrance", "@add-exit @addexit", "@add-entrance @addentrance", "recycle", "e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down", "@eject", "ejection_msg oejection_msg victim_ejection_msg", "accept_for_abode", "@resident*s", "@remove-exit", "@remove-entrance", "moveto", "who_location_msg", "exits entrances", "obvious_exits", "here_huh", "room_announce*_all_but", "examine_commands_ok", "examine_key", "examine_contents", "ok_to_integrate", "look_self", "description", "where_am_i", "housekeeper_msg housekeeper_deposit_msg", "look_in", "namec_for_look_self", "set_integrate_unknown_objects", "dependents dependents_event_*", "reconfunc", "sit", "stand", "topic_msg", "topic", "set_topic_sign", "event_really_disconnected", "match_type_object", "party_location", "init_for_core", "acceptable", "is_public_location", "objects_for_match", "set_walking_cost", "walking_cost", "can_add_exit can_add_entrance", "can_remove_exit can_remove_entrance", "can_read_exits can_read_entrances", "terrain_delay", "set_terrain_delay", "walk_failed_source walk_failed_dest"}
#3:"dependents dependents_event_*" this none this
return {@pass(@args), @this:exits()};
Usage:  @parents <object>
generic room (#3)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
#110:"dependents dependents_event_*" this none this
// Copied from event dispatcher (#1751):dependents by Doug (#444) Mon Apr 25 01:08:30 1994 EDT
// :dependents:  give the list of all dependents, to which all events could presumably be passed.
// By default this simply returns a list.
return this.dependents;
Object #3 does not define that verb, but its ancestor #110 does.
#110:"broadcast_event_*" this none this
// :broadcast_event_<type>(@event-args) -- broadcasts the event <type> with args `event-args' to all objects listening to this dispatcher.
// if (!$perm_utils:controls(caller_perms(), this))
//   return E_PERM;
// endif
name = verb[11..length(verb)];
retlist = {};
for o in (this:("dependents_" + name)(@args))
  ret = o:(name)(@args);
  if (ret)
    retlist = {@retlist, ret};
  endif
endfor
return retlist;
Last modified Sat Nov 17 21:46:31 2007 PST by Xplat (#4014) (on Waterpoint).
#7:"move" (what)
start = what.location;
if (start != this.source)
  what:tell("You can't go that way.");
  return;
endif
unlocked = this:is_unlocked_for(what);
if (typeof(dest = this.dest) == LIST)
  dest = dest[1]:create(listdelete(dest, 1));
endif
if (unlocked)
  dest:bless_for_entry(what);
endif
start:broadcast_event_move_by_exit_attempted(what, this);
dest:broadcast_event_move_by_exit_attempted(what, this);
if (unlocked && dest:accept(what))
  if (msg = this:leave_msg(what))
    what:tell_lines(msg);
  endif
  what:moveto(dest);
  start:broadcast_event_move_by_exit_completed(what, this);
  what.location:broadcast_event_move_by_exit_completed(what, this);
  if (what.location != start || dest == start)
    // Don't print oleave messages if WHAT didn't actually go anywhere...
    // Unless the exit is actually a loop...
    msg = this:oleave_msg(what) || this:defaulting_oleave_msg(what);
    start:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg || what:verb_sub("has") + " left.");
  endif
  if (what.location == dest)
    // Don't print arrive messages if WHAT didn't really end up there...
    if (msg = this:arrive_msg(what))
      what:tell_lines(msg);
    endif
    msg = this:oarrive_msg(what) || this:defaulting_oarrive_msg(what);
    what.location:announce_all_but({what}, this.prefix_name ? what:inamec() + " " | "", msg || what:verb_sub("has") + " arrived.");
    this:sweep_for_followers(what);
  endif
else
  start:broadcast_event_move_by_exit_failed(what, this);
  what.location:broadcast_event_move_by_exit_failed(what, this);
  if (msg = this:nogo_msg(what))
    what:tell_lines(msg);
  else
    what:tell("You can't go that way.");
  endif
  if (msg = this:onogo_msg(what))
    what.location:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg);
  endif
endif
// Copied from generic exit (#7):move by Ken (#75) Tue Nov  7 19:12:28 1995 CST
// Copied from generic exit (#7):move(old) by Ken (#75) Tue Nov  7 19:32:34 1995 CST
Searching for core verbs containing the string ":event_" ...

#6:event_really_disconnected [+d Core-Wizard (#184)]:  "Usage:  :event_really_disconnected()";
#3:event_really_disconnected [+d Core-Wizard (#184)]:  "Usage:  :event_really_disconnected()";
#80:event_sit [+d unknown hacker (#35)]:  ":event_sit(what, where)";

Total: 3 verbs.
=> #80 (generic sittable object)
Last modified Sun Mar 31 09:28:03 2013 PDT by core initialization (#191) (on core).
#3:"event_really_disconnected" this none this
// Usage:  :event_really_disconnected()
// 
// Do housekeeper stuff if applicable.
home = caller.home;
if (this == caller.location && this != home)
  fork (0)
    // This is forked so that it's protected from aborts due to errors in the player's :moveto verb.
    if (!(caller in connected_players() || caller.location == home))
      move(caller, $player_start);
    endif
  endfork
  home:bless_for_entry(caller);
  caller:moveto(home);
  if (caller.location != this)
    this:announce(this:housekeeper_msg());
  endif
  if (caller.location == home)
    home:announce(home:housekeeper_deposit_msg());
  endif
endif
generic event handler (#133) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
  #133:handle_event_*           unknown hacker (#35) rx     this none this
  #133:set_handler_ok           unknown hacker (#35) rx     this none this
  #133:initialize               unknown hacker (#35) rxd    this none this
  #133:help_verbs               Core-Wizard (#184)   rxd    this none this
  #133:help_text                unknown hacker (#35) rx     this none this
  #133:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic event handler (#133) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
.handler_ok              unknown hacker (#35)  r      0
-------------------------------- finished ---------------------------------
Searching for core verbs containing the string ":handle_event" ...


Total: 0 verbs.
Generic Feature Object (#65) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
   #65:look_self                unknown hacker (#35) rxd    this none this
   #65:"using this"             unknown hacker (#35) rxd    this none this
   #65:examine_commands_ok      unknown hacker (#35) rxd    this none this
   #65:"@fix-commands @fix_commands" Core-Wizard (#184) rx  this none none
   #65:set_commands             unknown hacker (#35) rx     this none this
   #65:match_command            unknown hacker (#35) rx     this none this
   #65:moveto                   unknown hacker (#35) rxd    this none this
   #65:initialize               unknown hacker (#35) rx     this none this
   #65:set_feature_ok           unknown hacker (#35) rxd    this none this
   #65:obvious_verbs            Core-Wizard (#184)   rxd    this none this
   #65:examine_verb_ok          unknown hacker (#35) rxd    this none this
   #65:"@reg*ister @unreg*ister" Core-Wizard (#184)  rxd    this none none
   #65:match_type_object        unknown hacker (#35) rxd    this none this
   #65:nominate_for_core        Core-Wizard (#184)   rx     this none this
   #65:help_text                unknown hacker (#35) rx     this none this
   #65:recycle                  Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Generic Feature Object (#65) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
   #65:look_self                unknown hacker (#35) rxd    this none this
   #65:"using this"             unknown hacker (#35) rxd    this none this
   #65:examine_commands_ok      unknown hacker (#35) rxd    this none this
   #65:"@fix-commands @fix_commands" Core-Wizard (#184) rx  this none none
   #65:set_commands             unknown hacker (#35) rx     this none this
   #65:match_command            unknown hacker (#35) rx     this none this
   #65:moveto                   unknown hacker (#35) rxd    this none this
   #65:initialize               unknown hacker (#35) rx     this none this
   #65:set_feature_ok           unknown hacker (#35) rxd    this none this
   #65:obvious_verbs            Core-Wizard (#184)   rxd    this none this
   #65:examine_verb_ok          unknown hacker (#35) rxd    this none this
   #65:"@reg*ister @unreg*ister" Core-Wizard (#184)  rxd    this none none
   #65:match_type_object        unknown hacker (#35) rxd    this none this
   #65:nominate_for_core        Core-Wizard (#184)   rx     this none this
   #65:help_text                unknown hacker (#35) rx     this none this
   #65:recycle                  Core-Wizard (#184)   rxd    this none this
.feature_verbs           unknown hack (#35)    r c    {"using"}
.feature_ok              unknown hack (#35)    r      0
.commands                unknown hack (#35)    r      {"@reg*ister @unreg*ist..
.registry                unknown hack (#35)    r      #151
.help_text               unknown hack (#35)    r c    "The Generic Feature Ob..
-------------------------------- finished ---------------------------------
Crag | :event_rummage(who, pile) => this:handle_event_rummage(who,pile) => h = this:match_handler("rummage", who, pile); h:("handle_event_" + "rummage")(who, pile);
You now have How $staff will notice people rummaging with object number #290 and parent generic note (#9).
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "str:#290.text" name: "How $staff will notice people rummaging.text" type: string-list content*: "" _data-tag: 169489328043
#$#: 169489328043
-----
GENERAL INFORMATION ON $LIST_UTILS[1]
=====================================

append            (list,list,..) => result of concatenating the given lists
flatten           (list of lists)=> list of all non-list elements
reverse           (list)         => reversed list
remove_duplicates (list)         => list with all duplicates removed
compress          (list)         => list with consecutive duplicates removed
setremove_all     (list,elt)     => list with all occurrences of elt removed
find_insert       (sortedlist,e) => index of first element > e in sortedlist
sort              (list[,keys])  => sorted list

make              (n[,e])        => list of n copies of e
range             (m,n)          => {m,m+1,...,n}

arrayset   (list,val,i[,j,k...]) => array modified so that list[i][j][k]==val

-- Mapping functions (take a list and do something to each element):

map_prop ({o...},prop)              => list of o.(prop)            for all o
map_verb ({o...},verb[,args)        => list of o:(verb)(@args)     for all o
map_arg  ([n,]obj,verb,{a...},args) => list of obj:(verb)(a,@args) for all a

-- Association list functions --

An association list (alist) is a list of pairs (2-element lists), though the following functions have been generalized for lists of n-tuples (n-element lists).  In each case i defaults to 1.

make_alist      (lists[,pad]) => alist from list of parallel lists
assoc        (targ,alist[,i]) => 1st tuple in alist whose i-th element is targ
iassoc       (targ,alist[,i]) => index of same.
assoc_prefix (targ,alist[,i]) => ... whose i-th element has targ as a prefix
iassoc_prefix(targ,alist[,i]) => index of same.
slice             (alist[,i]) => list of i-th elements
sort_alist        (alist[,i]) => alist sorted on i-th elements.

System Object (#0) [ readable ]
  Owned by Core-Wizard (#184).
  Child of builtin function definitions (#153).
  Location generic room (#3).
.builder                 Core-Wizard (#184)    r c    #4
.login                   Core-Wizard (#184)    r      #10
.last_huh                Core-Wizard (#184)    r      #11
.guest_log               Core-Wizard (#184)    r      #12
.last_restart_time       Core-Wizard (#184)    r c    1366008485
.biglist                 Core-Wizard (#184)    r c    #13
.big_mail_recipient      Core-Wizard (#184)    r c    #14
.limbo                   Core-Wizard (#184)    r c    #15
.registration_db         Core-Wizard (#184)    r c    #16
.new_player_log          Core-Wizard (#184)    r c    #17
.verb_help               Core-Wizard (#184)    r c    #20
.core_help               Core-Wizard (#184)    r c    #21
.prog_help               Core-Wizard (#184)    r c    #22
.wiz_help                Core-Wizard (#184)    r c    #23
.shutdown_task           Core-Wizard (#184)    r c    E_NONE
.wiz_utils               Core-Wizard (#184)    r c    #24
.site_db                 Core-Wizard (#184)    r c    #25
.math_utils              Core-Wizard (#184)    r c    #26
.set_utils               Core-Wizard (#184)    r c    #27
.builtin_function_help   Core-Wizard (#184)    r c    #28
.new_prog_log            Core-Wizard (#184)    r c    #29
.generic_help            Core-Wizard (#184)    r c    #30
.guest                   Core-Wizard (#184)    r      #31
.seq_utils               Core-Wizard (#184)    r c    #32
.quota_log               Core-Wizard (#184)    r c    #33
.you                     unknown hack (#35)    r      #34
.hacker                  Core-Wizard (#184)    r c    #35
.generic_db              Core-Wizard (#184)    r c    #79
.shutdown_message        Core-Wizard (#184)    r c    ""
.shutdown_time           Core-Wizard (#184)    r c    0
.no_one                  Core-Wizard (#184)    r      #36
.player_db               Core-Wizard (#184)    r      #37
.player_class            Core-Wizard (#184)    r c    #6
.gender_utils            Core-Wizard (#184)    r      #38
.trig_utils              Core-Wizard (#184)    r c    #26
.time_utils              Core-Wizard (#184)    r c    #39
.editor_help             Core-Wizard (#184)    r c    #40
.mail_recipient          Core-Wizard (#184)    r c    #41
.mail_agent              Core-Wizard (#184)    r c    #42
.mail_editor             Core-Wizard (#184)    r c    #43
.note_editor             Core-Wizard (#184)    r c    #44
.verb_editor             Core-Wizard (#184)    r c    #45
.generic_editor          Core-Wizard (#184)    r c    #46
.object_utils            Core-Wizard (#184)    r c    #47
.lock_utils              Core-Wizard (#184)    r c    #48
.gripe_recipients        Core-Wizard (#184)    r c    {#2}
.dump_interval           Core-Wizard (#184)    r c    3600
.list_utils              Core-Wizard (#184)    r c    #49
.command_utils           Core-Wizard (#184)    r c    #50
.player                  Core-Wizard (#184)    r c    #6
.wiz                     Core-Wizard (#184)    r c    #51
.prog                    Core-Wizard (#184)    r c    #52
.code_utils              Core-Wizard (#184)    r c    #53
.help                    Core-Wizard (#184)    r c    #54
.nothing                 Core-Wizard (#184)    r c    #-1
.failed_match            Core-Wizard (#184)    r c    #-3
.ambiguous_match         Core-Wizard (#184)    r c    #-2
.perm_utils              Core-Wizard (#184)    r c    #130
.building_utils          Core-Wizard (#184)    r c    #19
.string_utils            Core-Wizard (#184)    r c    #18
.news                    Core-Wizard (#184)    r c    #141
.note                    Core-Wizard (#184)    r c    #9
.container               Core-Wizard (#184)    r c    #126
.thing                   Core-Wizard (#184)    r c    #5
.exit                    Core-Wizard (#184)    r c    #7
.room                    Core-Wizard (#184)    r c    #3
.player_start            Core-Wizard (#184)    r c    #70
.root_class              Core-Wizard (#184)    r c    #1
.recycler                Core-Wizard (#184)    r c    #55
.garbage                 Core-Wizard (#184)    r c    #56
.mail_options            Core-Wizard (#184)    r c    #57
.edit_options            Core-Wizard (#184)    r c    #58
.display_options         Core-Wizard (#184)    r c    #59
.generic_options         Core-Wizard (#184)    r c    #60
.maxint                  Core-Wizard (#184)    r c    2147483647
.minint                  Core-Wizard (#184)    r c    -2147483648
.list_options            Core-Wizard (#184)    r c    #61
.error                   Core-Wizard (#184)    r c    #66
.newt_log                Core-Wizard (#184)    r c    #106
.toad_log                Core-Wizard (#184)    r c    #62
.site_log                Core-Wizard (#184)    r c    #62
.housekeeper             Core-Wizard (#184)    r c    #63
.feature                 Core-Wizard (#184)    r      #65
.pronoun_sub             Core-Wizard (#184)    r      #69
.they                    Core-Wizard (#184)    r      #71
.login_watcher           Core-Wizard (#184)    r c    #83
.english                 Core-Wizard (#184)    r      #72
.language                Core-Wizard (#184)    r      #72
.integration_utils       Core-Wizard (#184)    r c    #74
.network                 Core-Wizard (#184)    r c    #82
.country_db              Core-Wizard (#184)    r      #94
.jtext                   Core-Wizard (#184)    r      #92
.feature_help            Core-Wizard (#184)    r      #100
.jaddress                Core-Wizard (#184)    r      #111
.misc_options            Core-Wizard (#184)    r      #112
.client_options          Core-Wizard (#184)    r      #116
.building_options        Core-Wizard (#184)    r c    #122
.it                      Core-Wizard (#184)    r c    #154
.nobody                  Core-Wizard (#184)    r c    #36
.furniture               Core-Wizard (#184)    r c    #81
.sittable                Core-Wizard (#184)    r c    #80
.I                       Core-Wizard (#184)    r c    #160
.everything              Core-Wizard (#184)    r c    #139
.all                     Core-Wizard (#184)    r c    #103
.nowhere                 Core-Wizard (#184)    r c    #-1
.admin_group             Core-Wizard (#184)    r c    #163
.steering_committee      Core-Wizard (#184)    r c    #137
.db_group                Core-Wizard (#184)    r c    #148
.unix_group              Core-Wizard (#184)    r c    #147
.community_group         Core-Wizard (#184)    r c    #165
.tech_group              Core-Wizard (#184)    r c    #164
.admin_mail_recipient    Core-Wizard (#184)    r c    #107
.registrar               Core-Wizard (#184)    r c    #108
.event_dispatcher        Core-Wizard (#184)    r c    #110
.prog_group              Core-Wizard (#184)    r c    #124
.openable_container      Core-Wizard (#184)    r c    #8
.containing_object       Core-Wizard (#184)    r c    #145
.utils                   Core-Wizard (#184)    r c    #146
.biglist_utils           Core-Wizard (#184)    r c    #13
.english_utils           Core-Wizard (#184)    r c    #72
.boot_log                Core-Wizard (#184)    r c    #85
.help_editor             Core-Wizard (#184)    r      #171
.object_help             Core-Wizard (#184)    r c    #173
.tester                  Core-Wizard (#184)    r      #99
.failed_help             Core-Wizard (#184)    r      #127
.who_options             Core-Wizard (#184)    r c    #89
.who_utils               Core-Wizard (#184)    r c    #89
.event_handler           Core-Wizard (#184)    r c    #133
.eval_options            Core-Wizard (#184)    r c    #136
.he                      Core-Wizard (#184)    r c    #156
.she                     Core-Wizard (#184)    r c    #157
.e                       Core-Wizard (#184)    r c    #158
.we                      Core-Wizard (#184)    r c    #159
.plural_you              Core-Wizard (#184)    r c    #161
.either                  Core-Wizard (#184)    r c    #162
.splat                   Core-Wizard (#184)    r c    #166
.gender                  Core-Wizard (#184)    r c    #64
.neuter                  Core-Wizard (#184)    r c    #154
.egotistical             Core-Wizard (#184)    r c    #160
.plural                  Core-Wizard (#184)    r c    #71
.royal                   Core-Wizard (#184)    r c    #159
.male                    Core-Wizard (#184)    r c    #156
.female                  Core-Wizard (#184)    r c    #157
.Spivak                  Core-Wizard (#184)    r c    #158
.second                  Core-Wizard (#184)    r c    #34
.second_plural           Core-Wizard (#184)    r c    #161
.singular                Core-Wizard (#184)    r c    #154
.none                    Core-Wizard (#184)    r c    #167
.topic                   Core-Wizard (#184)    r c    #178
.builder_help            Core-Wizard (#184)    r      #155
.name_utils              Core-Wizard (#184)    r      #177
.guest_help              Core-Wizard (#184)    r      #168
.parse_utils             Core-Wizard (#184)    r      #117
.admin                   Core-Wizard (#184)    r      #170
.core_wizard             Core-Wizard (#184)    r      #184
.first_wizard            Core-Wizard (#184)    r c    #2
.door                    Core-Wizard (#184)    r      #121
.ftp                     Core-Wizard (#184)    r c    #234
.__core_init_phase       Core-Wizard (#184)    r      0
.quota_utils             Core-Wizard (#184)    r c    #174
.window                  Core-Wizard (#184)    r c    #179
.server_options          Core-Wizard (#184)    r      #188
.walking_utils           Core-Wizard (#184)    r      #182
.maxfloat                Core-Wizard (#184)    r c    1.79769313486231e+308
.checkpointer            Core-Wizard (#184)    r      #175
.startup                 Core-Wizard (#184)    r c    #189
.syslog                  Core-Wizard (#184)    r      #183
.core_extraction_time    Core-Wizard (#184)    r      1364747283
.generic_biglist_home    Core-Wizard (#184)    r      #75
.http                    Core-Wizard (#184)    r c    #87
.module                  Core-Wizard (#184)    r      #203
.property_farm           Core-Wizard (#184)    r      #206
.modules                 Core-Wizard (#184)    r      #205
.smtp                    Core-Wizard (#184)    r c    #212
.cord                    Core-Wizard (#184)    r c    #223
.mcp                     Core-Wizard (#184)    r c    #213
.parse_options           Core-Wizard (#184)    r c    #191
.ftp_client              Core-Wizard (#184)    r c    #230
.local                   unknown hack (#35)    r c    #193
.building_group          Core-Wizard (#184)    r      #192
.documentation_group     Core-Wizard (#184)    r      #232
.first_restart_time      Core-Wizard (#184)    r      845958877
.room_matching_utils     Core-Wizard (#184)    r      #190
.policy_help             Core-Wizard (#184)    r      #235
.admin_help              Core-Wizard (#184)    r c    #238
.jhcore_help             Core-Wizard (#184)    r c    #237
.namebuilder_i           Core-Wizard (#184)    r c    #227
.namebuilder_d           Core-Wizard (#184)    r c    #239
.root                    Core-Wizard (#184)    r c    #1
.delegator               Core-Wizard (#184)    r c    #269
.delegate                Core-Wizard (#184)    r c    #270
.ceiling                 Core-Wizard (#184)    r c    #272
.nesting_decoration      Core-Wizard (#184)    r c    #265
.table                   Core-Wizard (#184)    r c    #280
.bot                     Core-Wizard (#184)    r c    #289
-------------------------------- finished ---------------------------------
-----
ERRORS
======

The complete list of error codes:

    E_NONE         No error
    E_TYPE         Type mismatch
    E_DIV          Division by zero
    E_PERM         Permission denied
    E_PROPNF       Property not found
    E_VERBNF       Verb not found
    E_VARNF        Variable not found
    E_INVIND       Invalid indirection
    E_RECMOVE      Recursive move
    E_MAXREC       Too many verb calls
    E_RANGE        Range error
    E_ARGS         Incorrect number of arguments
    E_NACC         Move refused by destination
    E_INVARG       Invalid argument
    E_QUOTA        Resource limit exceeded
    E_FLOAT        Floating-point arithmetic error

root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {86928, 1366617600}
.core_names              Core-Wizard (#184)    r c    {"$root_class"}
-------------------------------- finished ---------------------------------
#1:"visible" this none this
return this.visible;
=> 1
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
    #3:confunc                  unknown hacker (#35) rxd    this none this
    #3:disfunc                  unknown hacker (#35) rxd    this none this
    #3:say                      unknown hacker (#35) rxd    any any any
    #3:emote                    unknown hacker (#35) rxd    any any any
    #3:announce                 unknown hacker (#35) rxd    this none this
    #3:"match_exit match_entrance" unknown hacker (#35) rxd this none this
    #3:add_exit                 Core-Wizard (#184)   rxd    this none this
    #3:tell_contents            unknown hacker (#35) rxd    this none this
    #3:@exits                   unknown hacker (#35) rxd    any none none
    #3:add_entrance             Core-Wizard (#184)   rxd    this none this
    #3:bless_for_entry          Core-Wizard (#184)   rxd    this none this
    #3:@entrances               Core-Wizard (#184)   r d    none none none
    #3:go                       Core-Wizard (#184)   rxd    any none none
    #3:l*ook                    unknown hacker (#35) rxd    any any any
    #3:announce_all             unknown hacker (#35) rxd    this none this
    #3:announce_all_but         unknown hacker (#35) rxd    this none this
    #3:enterfunc                Core-Wizard (#184)   rxd    this none this
    #3:remove_exit              Core-Wizard (#184)   rxd    this none this
    #3:remove_entrance          Core-Wizard (#184)   rxd    this none this
    #3:"@add-exit @addexit"     Core-Wizard (#184)   r d    any none none
    #3:"@add-entrance @addentrance" Core-Wizard (#184) r d  any none none
    #3:recycle                  Core-Wizard (#184)   rxd    this none this
    #3:"e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down" unknown hacker (#35) rxd none none none
    #3:@eject                   Core-Wizard (#184)   r d    any none none
    #3:"ejection_msg oejection_msg victim_ejection_msg" unknown hacker (#35) rxd this none this
    #3:accept_for_abode         unknown hacker (#35) rxd    this none this
    #3:@resident*s              Core-Wizard (#184)   r d    any none none
    #3:@remove-exit             Core-Wizard (#184)   r d    any none none
    #3:@remove-entrance         Core-Wizard (#184)   r d    any none none
    #3:moveto                   Core-Wizard (#184)   rxd    this none this
    #3:who_location_msg         unknown hacker (#35) rxd    this none this
    #3:"exits entrances"        Core-Wizard (#184)   rxd    this none this
    #3:obvious_exits            unknown hacker (#35) rxd    this none this
    #3:here_huh                 Core-Wizard (#184)   rxd    this none this
    #3:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #3:examine_commands_ok      unknown hacker (#35) rxd    this none this
    #3:examine_key              Core-Wizard (#184)   rxd    this none this
    #3:examine_contents         unknown hacker (#35) rxd    this none this
    #3:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #3:look_self                unknown hacker (#35) rxd    this none this
    #3:description              unknown hacker (#35) rxd    this none this
    #3:where_am_i               unknown hacker (#35) rxd    this none this
    #3:"housekeeper_msg housekeeper_deposit_msg" unknown hacker (#35) rxd this none this
    #3:look_in                  unknown hacker (#35) rxd    this none this
    #3:namec_for_look_self      unknown hacker (#35) rxd    this none this
    #3:set_integrate_unknown_objects unknown hacker (#35) rx this none this
    #3:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
    #3:reconfunc                unknown hacker (#35) rxd    this none this
    #3:sit                      unknown hacker (#35) rxd    none none none
    #3:stand                    unknown hacker (#35) r d    none none none
    #3:topic_msg                unknown hacker (#35) rxd    this none this
    #3:topic                    unknown hacker (#35) r d    any any any
    #3:set_topic_sign           topic-owner (#181)   rxd    this none this
    #3:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #3:match_type_object        unknown hacker (#35) rxd    this none this
    #3:party_location           unknown hacker (#35) rxd    this none this
    #3:init_for_core            Core-Wizard (#184)   rxd    this none this
    #3:acceptable               Core-Wizard (#184)   rxd    this none this
    #3:is_public_location       Core-Wizard (#184)   rxd    this none this
    #3:objects_for_match        unknown hacker (#35) rxd    this none this
    #3:set_walking_cost         unknown hacker (#35) rxd    this none this
    #3:walking_cost             unknown hacker (#35) rxd    this none this
    #3:"can_add_exit can_add_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_remove_exit can_remove_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_read_exits can_read_entrances" Core-Wizard (#184) rxd this none this
    #3:terrain_delay            unknown hacker (#35) rxd    this none this
    #3:set_terrain_delay        unknown hacker (#35) rx     this none this
    #3:"walk_failed_source walk_failed_dest" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
generic room (#3)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
generic event dispatching object (#110) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of Abstract class (#254).
  #110:add_dependent            Core-Wizard (#184)   rxd    this none this
  #110:remove_dependent         Core-Wizard (#184)   rxd    this none this
  #110:"@rm-dep*endent @rmdep*endent" Core-Wizard (#184) r d any out of/from inside/from this
  #110:"@add-dep*endent @adddep*endent" Core-Wizard (#184) r d any at/to this
  #110:initialize               Core-Wizard (#184)   rxd    this none this
  #110:broadcast_event_*        unknown hacker (#35) rx     this none this
  #110:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #110:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Alias add_receiver added to verb generic event dispatching object(#110):add_dependent
Verbname is now generic event dispatching object(#110):"add_dependent add_receiver"
Alias remove_receiver added to verb generic event dispatching object(#110):remove_dependent
Verbname is now generic event dispatching object(#110):"remove_dependent remove_receiver"
Searching for core verbs containing the string ":add_receiver" ...


Total: 0 verbs.
Searching for core verbs containing the string ":add_dependent" ...

#3:set_topic_sign [+d topic-owner (#181)]:    this:add_dependent(sign);
#80:moveto [+d unknown hacker (#35)]:    "this.location:add_dependent(this);";
#110:add_dependent add_receiver [+d Core-Wizard (#184)]:  ":add_dependent(object) -- object will now receive any events broadcast from this dispatching object.";
#110:@add-dep*endent @adddep*endent [+d Core-Wizard (#184)]:  error = this:add_dependent(dep);

Total: 4 verbs.
=> #80 (generic sittable object)
#80:"moveto" this none this
oldloc = this.location;
pass(@args);
if (this.location != oldloc)
  fork (0)
    this:delete_sitting(this.sitting, args[2], oldloc);
  endfork
  // oldloc:remove_dependent(this);
  // this.location:add_dependent(this);
endif
That object does not define that verb.
#3:"set_topic_sign" this none this
// :set_topic_sign([sign])
// sets or clears current topic sign
// only allows itself to be called by $topic and the sign itself
if (!$recycler:valid(this.topic_sign) && caller == $topic)
  this.topic_sign = sign = args[1];
  this:add_dependent(sign);
elseif (caller == this.topic_sign && !args)
  this:remove_dependent(sign = this.topic_sign);
  this.topic_sign = $nothing;
else
  return E_INVARG;
endif
topic sign (#178) [ readable ]
  Owned by topic-owner (#181).
  Child of generic thing (#5).
  #178:"set_default_topic set_current_topic" topic-owner (#181) rx this none this
  #178:write                    topic-owner (#181)   r d    any on top of/on/onto/upon this
  #178:cover                    topic-owner (#181)   rxd    this with/using any
  #178:look_self                topic-owner (#181)   rxd    this none this
  #178:uncover                  topic-owner (#181)   r d    this none none
  #178:event_exit               topic-owner (#181)   rx     this none this
  #178:moveto                   Core-Wizard (#184)   rxd    this none this
  #178:make_topic_sign          topic-owner (#181)   rxd    this none this
  #178:destroy_topic_sign       topic-owner (#181)   rxd    this none this
  #178:topic_msg                topic-owner (#181)   rxd    this none this
  #178:initialize               topic-owner (#181)   rxd    this none this
  #178:recycle                  topic-owner (#181)   rx     this none this
  #178:"remove kick"            topic-owner (#181)   r d    this none none
  #178:integrate_room_msg       topic-owner (#181)   rxd    this none this
  #178:carve                    topic-owner (#181)   r d    any on top of/on/onto/upon this
  #178:pop                      topic-owner (#181)   rxd    this none this
  #178:push                     topic-owner (#181)   rxd    this none this
  #178:set_topic                topic-owner (#181)   rxd    this none this
  #178:shake                    topic-owner (#181)   r d    this none none
  #178:nominate_for_core        topic-owner (#181)   rxd    this none this
  #178:initial_message          topic-owner (#181)   rxd    this none this
  #178:show_topic               topic-owner (#181)   rxd    this none this
  #178:matches_private          Core-Wizard (#184)   rx     this none this
  #178:set_private_from_topic   Core-Wizard (#184)   rxd    this none this
  #178:help_verbs               Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#178:"event_exit" this none this
// when the last person leaves, unset the 'current' topic message (revert to default)
if (!valid(this.location))
  $recycler:_recycle(this);
elseif (!$set_utils:intersection(this.location:contents(), $code_utils:connected_players()))
  while (this.stack)
    this:pop();
  endwhile
endif
return pass(@args);
topic sign (#178)   generic thing (#5)   Helpful Object (#250)   root class (#1)
generic event handler (#133) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
  #133:handle_event_*           unknown hacker (#35) rx     this none this
  #133:set_handler_ok           unknown hacker (#35) rx     this none this
  #133:initialize               unknown hacker (#35) rxd    this none this
  #133:help_verbs               Core-Wizard (#184)   rxd    this none this
  #133:help_text                unknown hacker (#35) rx     this none this
  #133:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
#133:"handle_event_*" this none this
return 0;
Searching for core verbs containing the string ":add_dependent" ...

#3:set_topic_sign [+d topic-owner (#181)]:    this:add_dependent(sign);
#80:moveto [+d unknown hacker (#35)]:    "this.location:add_dependent(this);";
#110:add_dependent add_receiver [+d Core-Wizard (#184)]:  ":add_dependent(object) -- object will now receive any events broadcast from this dispatching object.";
#110:@add-dep*endent @adddep*endent [+d Core-Wizard (#184)]:  error = this:add_dependent(dep);

Total: 4 verbs.
Crag |   {one, two, @three_four} = {"one", "two", "three", "four"};
Crag |   one => "one";
Crag |   two => "two";
Crag |   three_four => {"three", "four"};
Crag |   {one, two, @three_four} = {"one", "two", "three", "four"};
Crag |   one => "one";
Crag |   two => "two";
Crag |   three_four => {"three", "four"};
Crag | .
Crag | http://192.168.0.6/moo/ProgMan/ProgrammersManual_7.html#More-On-Lists
-----
$YOU:SAY_ACTION
===============

$you:say_action(message [,who [, thing[, where[, dobj[, iobj]]]]]).

announce 'message' with pronoun substitution as if it were just 

  where:announce_all($string_utils:pronoun_sub(message, who, thing, where, dobj, iobj)); 

except that all involved parties get modified messages, with the appropriate use of 'you' instead of their name.

who   default player

thing default object that called this verb

where default who.location

Any of these may be lists, of the form {<list of objs>, @<args to $string_utils:english_list>}.

generic player (#6) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
  Location generic room (#3).
    #6:init_for_core            Core-Wizard (#184)   rxd    this none this
    #6:confunc                  Core-Wizard (#184)   rxd    this none this
    #6:disfunc                  Core-Wizard (#184)   rxd    this none this
    #6:initialize               Core-Wizard (#184)   rxd    this none this
    #6:recycle                  Core-Wizard (#184)   rxd    this none this
    #6:my_huh                   Core-Wizard (#184)   rxd    this none this
    #6:last_huh                 Core-Wizard (#184)   rxd    this none this
    #6:my_match_object          Core-Wizard (#184)   rxd    this none this
    #6:tell_contents            Core-Wizard (#184)   rxd    this none this
    #6:notify                   Core-Wizard (#184)   rxd    this none this
    #6:notify_lines             Core-Wizard (#184)   rxd    this none this
    #6:linesplit                Core-Wizard (#184)   rxd    this none this
    #6:linelen                  unknown hacker (#35) rxd    this none this
    #6:@more                    Core-Wizard (#184)   r d    any none none
    #6:@wrap                    unknown hacker (#35) r d    none any none
    #6:@linelen*gth             unknown hacker (#35) r d    any none none
    #6:@pagelen*gth             Core-Wizard (#184)   r d    any none none
    #6:tell                     Core-Wizard (#184)   rxd    this none this
    #6:gag_p                    Core-Wizard (#184)   rxd    this none this
    #6:"set_gaglist set_gaglist_noisy" Core-Wizard (#184) rxd this none this
    #6:@gag                     Core-Wizard (#184)   r d    any any any
    #6:"@listgag @gaglist @gagged" Core-Wizard (#184) rxd   none none none
    #6:@ungag                   Core-Wizard (#184)   rxd    any none none
    #6:whodunnit                Core-Wizard (#184)   rxd    this none this
    #6:@paranoid                Core-Wizard (#184)   r d    any any any
    #6:@sw*eep                  Core-Wizard (#184)   r d    none none none
    #6:wh*isper                 Core-Wizard (#184)   rxd    any at/to this
    #6:receive_page             Core-Wizard (#184)   rxd    this none this
    #6:"page_origin_msg page_echo_msg page_absent_msg" unknown hacker (#35) rxd this none this
    #6:"i inv*entory"           Core-Wizard (#184)   r d    none none none
    #6:look_self                Core-Wizard (#184)   rxd    this none this
    #6:home                     Core-Wizard (#184)   r d    none none none
    #6:@sethome                 Core-Wizard (#184)   r d    none none none
    #6:"g*et take"              Core-Wizard (#184)   rxd    this none none
    #6:@eject                   Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:"where*is @where*is"     Core-Wizard (#184)   rxd    any any any
    #6:@wizards                 Core-Wizard (#184)   rxd    any none none
    #6:"mail_forward mail_notify" Core-Wizard (#184) rxd    this none this
    #6:receive_message          Core-Wizard (#184)   rxd    this none this
    #6:display_message          Core-Wizard (#184)   rxd    this none this
    #6:"parse_message_seq from_msg_seq %from_msg_seq to_msg_seq %to_msg_seq subject_msg_seq body_msg_seq display_seq_headers display_seq_full messages_in_seq list_rmm new_message_num length_num_le length_date_le length_date_gt length_all_msgs exists_num_eq rm_message_seq undo_rmm expunge_rmm renumber" Core-Wizard (#184) rxd this none this
    #6:msg_summary_line         unknown hacker (#35) rxd    this none this
    #6:msg_text                 Core-Wizard (#184)   rxd    this none this
    #6:notify_mail              Core-Wizard (#184)   rxd    this none this
    #6:current_message          Core-Wizard (#184)   rxd    this none this
    #6:get_current_message      Core-Wizard (#184)   rxd    this none this
    #6:set_current_message      Core-Wizard (#184)   rxd    this none this
    #6:make_current_message     Core-Wizard (#184)   rxd    this none this
    #6:kill_current_message     Core-Wizard (#184)   rxd    this none this
    #6:current_folder           Core-Wizard (#184)   rxd    this none this
    #6:set_current_folder       Core-Wizard (#184)   rxd    this none this
    #6:parse_folder_spec        Core-Wizard (#184)   rxd    this none this
    #6:parse_mailread_cmd       Core-Wizard (#184)   rxd    this none this
    #6:@mail                    Core-Wizard (#184)   rxd    any any any
    #6:"@read @peek"            Core-Wizard (#184)   rxd    any any any
    #6:"@next @prev"            Core-Wizard (#184)   r d    any any any
    #6:@rmm*ail                 Core-Wizard (#184)   r d    any any any
    #6:@renumber                Core-Wizard (#184)   r d    any none none
    #6:@unrmm*ail               Core-Wizard (#184)   r d    any any any
    #6:@send                    Core-Wizard (#184)   rxd    any any any
    #6:"@answer @repl*y"        Core-Wizard (#184)   r d    any any any
    #6:@forward                 Core-Wizard (#184)   rxd    any any any
    #6:@gripe                   Core-Wizard (#184)   r d    any any any
    #6:"@typo @bug @suggest*ion @idea @comment" Core-Wizard (#184) r d any any any
    #6:"@skip @unsub*scribe"    Core-Wizard (#184)   r d    any any any
    #6:@subscribe               Core-Wizard (#184)   r d    any any any
    #6:mail_catch_up            Core-Wizard (#184)   rxd    this none this
    #6:"@rn check_mail_lists @subscribed" Core-Wizard (#184) rx none none none
    #6:mail_option              Core-Wizard (#184)   rxd    this none this
    #6:edit_option              Core-Wizard (#184)   rxd    this none this
    #6:"set_mail_option set_edit_option set_misc_option set_client_option set_who_option set_parse_option" Core-Wizard (#184) rxd this none this
    #6:"@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @misco*ptions @misc-o*ptions @cliento*ptions @client-o*ptions @whoo*ptions @who-o*ptions @parseo*ptions @parse-o*ptions" Core-Wizard (#184) r d any any any
    #6:set_name                 Core-Wizard (#184)   rxd    this none this
    #6:set_aliases              Core-Wizard (#184)   rxd    this none this
    #6:@rename*#                Core-Wizard (#184)   r d    any at/to any
    #6:"@add-alias*# @addalias*# @add_alias*#" Core-Wizard (#184) r d any at/to any
    #6:"@rmalias*# @rm-alias*#" Core-Wizard (#184)   r d    any out of/from inside/from any
    #6:@desc*ribe               Core-Wizard (#184)   r d    any as any
    #6:@mess*ages               Core-Wizard (#184)   r d    any none none
    #6:@notedit                 unknown hacker (#35) r d    any none none
    #6:@password                Core-Wizard (#184)   r d    any any any
    #6:@last-c*onnection        Core-Wizard (#184)   rxd    any none none
    #6:"set_gender set_gender_name set_gender_obj" Core-Wizard (#184) rxd this none this
    #6:@gender                  Core-Wizard (#184)   r d    any none none
    #6:@ex*amine                Core-Wizard (#184)   rxd    any none none
    #6:ex*amine                 Core-Wizard (#184)   r d    any none none
    #6:add_feature              unknown hacker (#35) rx     this none this
    #6:remove_feature           unknown hacker (#35) rxd    this none this
    #6:"@add-feature @addfeature" Core-Wizard (#184) r d    any none none
    #6:"@remove-feature @rmfeature @rm-feature" Core-Wizard (#184) r d any none none
    #6:@features                Core-Wizard (#184)   rxd    any for/about any
    #6:@features                Core-Wizard (#184)   r d    any none none
    #6:@memory                  unknown hacker (#35) r d    none none none
    #6:@version                 unknown hacker (#35) r d    none none none
    #6:@uptime                  unknown hacker (#35) r d    none none none
    #6:"@quit quit"             Core-Wizard (#184)   r d    none none none
    #6:QUIT-IN-ALL-CAPS         Core-Wizard (#184)   r d    none none none
    #6:notify(new)              Core-Wizard (#184)   r d    this none this
    #6:examine_commands_ok      Core-Wizard (#184)   rxd    this none this
    #6:is_listening             Core-Wizard (#184)   rxd    this none this
    #6:"@quicksend @qsend"      Core-Wizard (#184)   r d    any any any
    #6:!*                       unknown hacker (#35) r d    any any any
    #6:'*                       unknown hacker (#35) r      any any any
    #6:"@pronoun_sub @pronoun-sub" Core-Wizard (#184) r d   none with/using any
    #6:"@set-note-string @set-note-text @set-note-value" Core-Wizard (#184) r d any none none
    #6:description              unknown hacker (#35) rxd    this none this
    #6:@nn                      Core-Wizard (#184)   r d    none none none
    #6:mu*rmur                  Core-Wizard (#184)   r d    any any any
    #6:look_in                  Core-Wizard (#184)   rxd    this none this
    #6:@option*s                Core-Wizard (#184)   r d    any any any
    #6:options_packages         Core-Wizard (#184)   rxd    this none this
    #6:options_command          Core-Wizard (#184)   rxd    this none this
    #6:contribute_partial       Core-Wizard (#184)   rxd    this none this
    #6:contribute_reset         Core-Wizard (#184)   rxd    this none this
    #6:contribute_link          Core-Wizard (#184)   rxd    this none this
    #6:receive_vbox             unknown hacker (#35) rxd    this none this
    #6:contribute_title         Core-Wizard (#184)   rxd    this none this
    #6:moveto                   Core-Wizard (#184)   rxd    this none this
    #6:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #6:visible_of               unknown hacker (#35) rxd    this none this
    #6:@set-jtext-form          Core-Wizard (#184)   r d    any none none
    #6:idle_suffix              Core-Wizard (#184)   rxd    this none this
    #6:modname_v                Core-Wizard (#184)   rxd    this none this
    #6:@edit*#                  Core-Wizard (#184)   r d    any any any
    #6:set_focus_object         Core-Wizard (#184)   rxd    this none this
    #6:email_address            Core-Wizard (#184)   rxd    this none this
    #6:"misc_option client_option who_option parse_option" Core-Wizard (#184) rxd this none this
    #6:"@forward-me @forwardme" Core-Wizard (#184)   r d    any any any
    #6:ownership_quota          Core-Wizard (#184)   rxd    this none this
    #6:contribute_newline       Core-Wizard (#184)   rxd    this none this
    #6:"set_current_object set_current_object_stack set_authentication_key" Core-Wizard (#184) rxd this none this
    #6:client_notify            Core-Wizard (#184)   rxd    this none this
    #6:brief                    Core-Wizard (#184)   rxd    this none this
    #6:picknew                  unknown hacker (#35) r d    any none none
    #6:"walk go"                unknown hacker (#35) rxd    none at/to any
    #6:_find_path               Core-Wizard (#184)   rxd    this none this
    #6:join                     Core-Wizard (#184)   rxd    any none none
    #6:pick                     unknown hacker (#35) rxd    any on top of/on/onto/upon this
    #6:pop                      unknown hacker (#35) rxd    none on top of/on/onto/upon this
    #6:match_command            unknown hacker (#35) rxd    this none this
    #6:my_match_room            Core-Wizard (#184)   rxd    this none this
    #6:features                 Core-Wizard (#184)   rxd    this none this
    #6:receive_document         Core-Wizard (#184)   rxd    this none this
    #6:"@co @currentobject @current-object" Core-Wizard (#184) r d any none none
    #6:parse_current_object     unknown hacker (#35) rxd    this none this
    #6:@pusho*bject             Core-Wizard (#184)   r d    any none none
    #6:@popo*object             Core-Wizard (#184)   r d    none none none
    #6:@swapo*bject             Core-Wizard (#184)   r d    none none none
    #6:jdetails                 Core-Wizard (#184)   r d    any none none
    #6:@@sendmail               Core-Wizard (#184)   r d    any any any
    #6:fol*low                  unknown hacker (#35) r d    this none none
    #6:unfol*low                unknown hacker (#35) r d    any any any
    #6:followers                unknown hacker (#35) r d    any any any
    #6:following                unknown hacker (#35) r d    none none none
    #6:my_match_player          Core-Wizard (#184)   rxd    this none this
    #6:news                     Core-Wizard (#184)   r d    any none none
    #6:"@helpme @911"           Core-Wizard (#184)   r d    any any any
    #6:"@admin*istrators @admins" Core-Wizard (#184) rxd    any none none
    #6:"parse_message unparse_message" Core-Wizard (#184) rxd this none this
    #6:@url                     Core-Wizard (#184)   r d    any any any
    #6:@read-all-new*-mail      Core-Wizard (#184)   rxd    any none none
    #6:send_self_netmail        Core-Wizard (#184)   rxd    this none this
    #6:@add-help-db             Core-Wizard (#184)   r d    any none none
    #6:@rm-help-db              Core-Wizard (#184)   r d    any none none
    #6:@unsubscribed            Core-Wizard (#184)   r d    none none none
    #6:reconfunc                Core-Wizard (#184)   rxd    this none this
    #6:@resend                  Core-Wizard (#184)   r d    any any any
    #6:"help ?*"                Core-Wizard (#184)   rxd    any any any
    #6:match_help_object        unknown hacker (#35) rxd    this none this
    #6:@aliases                 Core-Wizard (#184)   r d    any none none
    #6:contribute_newline_maybe Core-Wizard (#184)   rxd    this none this
    #6:contribute_hr            Core-Wizard (#184)   rxd    this none this
    #6:set_last_player_paged    Core-Wizard (#184)   rxd    this none this
    #6:visible                  unknown hacker (#35) rxd    this none this
    #6:set_number               unknown hacker (#35) rxd    this none this
    #6:you                      unknown hacker (#35) rxd    this none this
    #6:page                     Core-Wizard (#184)   rxd    any any any
    #6:is_idle                  Core-Wizard (#184)   rxd    none none none
    #6:start_dozing             Core-Wizard (#184)   rxd    this none this
    #6:start_idling             Core-Wizard (#184)   rxd    this none this
    #6:"idle reidle"            Core-Wizard (#184)   rxd    any any any
    #6:idle_msg                 Core-Wizard (#184)   rxd    this none this
    #6:dozing_msg               Core-Wizard (#184)   rxd    this none this
    #6:start_doing              unknown hacker (#35) rxd    this none this
    #6:doing_msg                Core-Wizard (#184)   rxd    this none this
    #6:"doing undoing"          Core-Wizard (#184)   r d    any any any
    #6:@who                     Core-Wizard (#184)   rxd    any any any
    #6:debug_if_player          Core-Wizard (#184)   rxd    this none this
    #6:match_type_object        Core-Wizard (#184)   rxd    this none this
    #6:dependents_event_really_disconnected Core-Wizard (#184) rxd this none this
    #6:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:maybe_really_disconnected Core-Wizard (#184)  rxd    this none this
    #6:modname_c                unknown hacker (#35) rxd    this none this
    #6:@desc*ribe               Core-Wizard (#184)   r d    any none none
    #6:@netforw*ard             Core-Wizard (#184)   r d    any any any
    #6:@register                Core-Wizard (#184)   r d    any as any
    #6:"@register @email-address" Core-Wizard (#184) r      any none none
    #6:more_string              Core-Wizard (#184)   rxd    this none this
    #6:desc_idle_msg            Core-Wizard (#184)   rxd    this none this
    #6:nominate_for_core        Core-Wizard (#184)   rxd    this none this
    #6:sit                      Core-Wizard (#184)   r d    none with/using this
    #6:acceptable               Core-Wizard (#184)   rxd    this none this
    #6:@shout                   Core-Wizard (#184)   r d    any any any
    #6:set_home                 unknown hacker (#35) rx     this none this
    #6:anyconfunc               Core-Wizard (#184)   rxd    this none this
    #6:@ch*eck-full             Core-Wizard (#184)   r d    any any any
    #6:"@add-handler @addhandler" Core-Wizard (#184) r d    any none none
    #6:handlers                 Core-Wizard (#184)   rxd    this none this
    #6:"@remove-handler @rmhandler @rm-handler" Core-Wizard (#184) r d any none none
    #6:@handlers                Core-Wizard (#184)   rx     any for/about any
    #6:@handlers                Core-Wizard (#184)   r      any none none
    #6:total_connect_times      Core-Wizard (#184)   rxd    this none this
    #6:_set_mail_task           Core-Wizard (#184)   rxd    this none this
    #6:add_handler              unknown hacker (#35) rxd    this none this
    #6:remove_handler           unknown hacker (#35) rxd    this none this
    #6:"set_walking_dest set_walking_task" unknown hacker (#35) rx this none this
    #6:move_by_exits            unknown hacker (#35) rxd    this none this
    #6:walking_step             unknown hacker (#35) rxd    this none this
    #6:begin_walking            unknown hacker (#35) rxd    this none this
    #6:end_walking              unknown hacker (#35) rxd    this none this
    #6:"walkto walkto_blocking" unknown hacker (#35) rxd    this none this
    #6:find_path                unknown hacker (#35) rxd    this none this
    #6:stop                     unknown hacker (#35) r d    none none none
    #6:timestamp_string         Core-Wizard (#184)   rxd    this none this
    #6:@age                     Core-Wizard (#184)   r d    any none none
    #6:+*                       Core-Wizard (#184)   rxd    any any any
    #6:lose                     unknown hacker (#35) rxd    any any any
    #6:display_current_object   Core-Wizard (#184)   rxd    this none this
    #6:current_object_string    Core-Wizard (#184)   rxd    this none this
    #6:edit_set_note_value      Core-Wizard (#184)   rxd    this none this
    #6:edit_sendmail            Core-Wizard (#184)   rxd    this none this
    #6:absent_for_page          unknown hacker (#35) rxd    this none this
    #6:send_forwarded_moomail   Core-Wizard (#184)   rxd    this none this
    #6:walking_delay            unknown hacker (#35) rxd    this none this
    #6:walk_failed              Core-Wizard (#184)   rxd    this none this
    #6:my_walk_failed           Core-Wizard (#184)   rxd    this none this
    #6:dwim_objects             Core-Wizard (#184)   rxd    this none this
    #6:"@room*# @rooms*#"       unknown hacker (#35) rxd    any any any
    #6:set_timezone             unknown hacker (#35) rxd    this none this
    #6:ctime                    unknown hacker (#35) rxd    this none this
    #6:time_sub                 unknown hacker (#35) rxd    this none this
    #6:@lastlog                 unknown hacker (#35) rxd    any none none
-------------------------------- finished ---------------------------------
Last modified Sat Nov 17 21:46:31 2007 PST by Xplat (#4014) (on Waterpoint).
#7:"move" (what)
start = what.location;
if (start != this.source)
  what:tell("You can't go that way.");
  return;
endif
unlocked = this:is_unlocked_for(what);
if (typeof(dest = this.dest) == LIST)
  dest = dest[1]:create(listdelete(dest, 1));
endif
if (unlocked)
  dest:bless_for_entry(what);
endif
start:broadcast_event_move_by_exit_attempted(what, this);
dest:broadcast_event_move_by_exit_attempted(what, this);
if (unlocked && dest:accept(what))
  if (msg = this:leave_msg(what))
    what:tell_lines(msg);
  endif
  what:moveto(dest);
  start:broadcast_event_move_by_exit_completed(what, this);
  what.location:broadcast_event_move_by_exit_completed(what, this);
  if (what.location != start || dest == start)
    // Don't print oleave messages if WHAT didn't actually go anywhere...
    // Unless the exit is actually a loop...
    msg = this:oleave_msg(what) || this:defaulting_oleave_msg(what);
    start:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg || what:verb_sub("has") + " left.");
  endif
  if (what.location == dest)
    // Don't print arrive messages if WHAT didn't really end up there...
    if (msg = this:arrive_msg(what))
      what:tell_lines(msg);
    endif
    msg = this:oarrive_msg(what) || this:defaulting_oarrive_msg(what);
    what.location:announce_all_but({what}, this.prefix_name ? what:inamec() + " " | "", msg || what:verb_sub("has") + " arrived.");
    this:sweep_for_followers(what);
  endif
else
  start:broadcast_event_move_by_exit_failed(what, this);
  what.location:broadcast_event_move_by_exit_failed(what, this);
  if (msg = this:nogo_msg(what))
    what:tell_lines(msg);
  else
    what:tell("You can't go that way.");
  endif
  if (msg = this:onogo_msg(what))
    what.location:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg);
  endif
endif
// Copied from generic exit (#7):move by Ken (#75) Tue Nov  7 19:12:28 1995 CST
// Copied from generic exit (#7):move(old) by Ken (#75) Tue Nov  7 19:32:34 1995 CST
Last modified Mon Jan  1 08:04:56 2001 PST by splat (#4014) (on Waterpoint).
#1:"moveto" this none this
// you'd think this would have a security check
set_task_perms(this.owner);
// RAISEME
return `move(this, args[1]) ! ANY';
generic player (#6)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
Set text property of the How $staff will notice people rummaging (#290).
You drop the How $staff will notice people rummaging.
That is not a valid command.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, and a How $staff will notice people rummaging here.
stormagnet is here, off in another world.
You rattle the lid, but it refuses to budge. It must be locked.
Searching for core verbs containing the string "\"refuses to budge\"" ...


Total: 0 verbs.
butler's desk (#275) [ readable ]
  Owned by stormagnet (#246).
  Child of generic openable container (#8).
  Location North Vestibule (#70).
-------------------------------- finished ---------------------------------
butler's desk (#275) [ readable ]
  Owned by stormagnet (#246).
  Child of generic openable container (#8).
  Location North Vestibule (#70).
 close_msg               stormagnet (#246)     r c    {#69, "do", {"name", "p..
 open_msg                stormagnet (#246)     r c    {#69, "do", {"dname", "..
 opaque                  unknown hack (#35)    r      1
,dark                    unknown hack (#35)    r      1
,open_fail_msg           stormagnet (#246)     r c    {#69, "do", "You rattle..
,opened                  unknown hack (#35)    r      0
,open_key                unknown hack (#35)           #276
 automatic               unknown hack (#35)    r      1
 put_fail_msg            unknown hack (#35)    r      {#69, "do", "You can't ..
 remove_fail_msg         unknown hack (#35)    r      {#69, "do", "You can't ..
 remove_msg              unknown hack (#35)    r      {#69, "do", {"dname", "..
 put_msg                 unknown hack (#35)    r      {#69, "do", {"name", "p..
 empty_msg               unknown hack (#35)    r      {#69, "do", {"pronoun",..
 integrate_sep_msg       unknown hack (#35)    r      {#69, "do", "  "}
 integration_enabled     unknown hack (#35)    r      1
 in_msg                  stormagnet (#246)     r c    {#69, "do", "in"}
,dependents              Core-Wizard (#184)    r      {}
,key                     stormagnet (#246)       c    #276
,aliases                 stormagnet (#246)     r c    {"butler's desk", "desk"}
,description             stormagnet (#246)     r c    "A black walnut butler'..
 visible                 unknown hack (#35)    r      1
,integrate_room_msg      stormagnet (#246)     r c    {#69, "do", {"name", "t..
 integrate_player_msg    stormagnet (#246)     r c    ""
 integrate_container_msg stormagnet (#246)     r c    ""
 unique                  stormagnet (#246)     r c    0
 proper                  stormagnet (#246)     r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {1458, 1366617600}
 core_names              stormagnet (#246)     r c    {"$container", "$openab..
-------------------------------- finished ---------------------------------
@integrate_room desk is "%Ti is pushed up against one of the walls."
@integrate_player desk isn't set.
@integrate_container desk isn't set.
@in desk is "in"
@put_fail desk is "You can't put %dd %tx{in} that."
@remove_fail desk is "You can't remove that."
@remove desk is "%Nd %n:(removes) %di from %id."
@put desk is "%Nd %n:(puts) %dd %tx{in} %id."
@empty desk is "%Ts %t:(is) empty."
@integrate_sep desk is "  "
@close desk is "%Nd %n:(closes) %td."
@open desk is "%Nd %n:(opens) %td."
@open_fail desk is "You rattle the lid, but it refuses to budge. It must be locked."
Searching for core verbs containing the string "open_fail" ...

#8:is_openable_by [+d unknown hacker (#35)]:    player:tell($string_utils:pronoun_sub(this:open_fail_msg()));
#121:open [+d unknown hacker (#35)]:        who.location:broadcast_event_door_open_failed(who, this);

Total: 2 verbs.
=> #8 (generic openable container)
=> #121 (generic door)
butler's desk (#275)   generic openable container (#8)   generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   Abstract class (#254)   root class (#1)
Object #275 does not define that verb, but its ancestor #8 does.
#8:"is_openable_by" this none this
if (!this:can_reach(@args))
elseif (this.open_key != 0 && !$lock_utils:eval_key(this.open_key, args[1]))
  player:tell($string_utils:pronoun_sub(this:open_fail_msg()));
else
  return 1;
endif
return 0;
Searching for core verbs containing the string ":is_openable_by" ...

#8:open [+d unknown hacker (#35)]:  elseif (this:is_openable_by(player))

Total: 1 verb.
Object #275 does not define that verb, but its ancestor #8 does.
#8:"open" this none none
if (this.opened)
  player:tell("It's already open.");
elseif (this:is_openable_by(player))
  this:set_opened(1);
  $you:say_action(this:open_msg());
endif
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#8:open this none none" name: "MOO verb: #8:open this none none" type: moo-code content*: "" _data-tag: 160188937644
#$#* 160188937644 content: if (this.opened)
#$#* 160188937644 content:   player:tell("It's already open.");
#$#* 160188937644 content: elseif (this:is_openable_by(player))
#$#* 160188937644 content:   this:set_opened(1);
#$#* 160188937644 content:   $you:say_action(this:open_msg());
#$#* 160188937644 content: endif
#$#: 160188937644
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
    #3:confunc                  unknown hacker (#35) rxd    this none this
    #3:disfunc                  unknown hacker (#35) rxd    this none this
    #3:say                      unknown hacker (#35) rxd    any any any
    #3:emote                    unknown hacker (#35) rxd    any any any
    #3:announce                 unknown hacker (#35) rxd    this none this
    #3:"match_exit match_entrance" unknown hacker (#35) rxd this none this
    #3:add_exit                 Core-Wizard (#184)   rxd    this none this
    #3:tell_contents            unknown hacker (#35) rxd    this none this
    #3:@exits                   unknown hacker (#35) rxd    any none none
    #3:add_entrance             Core-Wizard (#184)   rxd    this none this
    #3:bless_for_entry          Core-Wizard (#184)   rxd    this none this
    #3:@entrances               Core-Wizard (#184)   r d    none none none
    #3:go                       Core-Wizard (#184)   rxd    any none none
    #3:l*ook                    unknown hacker (#35) rxd    any any any
    #3:announce_all             unknown hacker (#35) rxd    this none this
    #3:announce_all_but         unknown hacker (#35) rxd    this none this
    #3:enterfunc                Core-Wizard (#184)   rxd    this none this
    #3:remove_exit              Core-Wizard (#184)   rxd    this none this
    #3:remove_entrance          Core-Wizard (#184)   rxd    this none this
    #3:"@add-exit @addexit"     Core-Wizard (#184)   r d    any none none
    #3:"@add-entrance @addentrance" Core-Wizard (#184) r d  any none none
    #3:recycle                  Core-Wizard (#184)   rxd    this none this
    #3:"e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down" unknown hacker (#35) rxd none none none
    #3:@eject                   Core-Wizard (#184)   r d    any none none
    #3:"ejection_msg oejection_msg victim_ejection_msg" unknown hacker (#35) rxd this none this
    #3:accept_for_abode         unknown hacker (#35) rxd    this none this
    #3:@resident*s              Core-Wizard (#184)   r d    any none none
    #3:@remove-exit             Core-Wizard (#184)   r d    any none none
    #3:@remove-entrance         Core-Wizard (#184)   r d    any none none
    #3:moveto                   Core-Wizard (#184)   rxd    this none this
    #3:who_location_msg         unknown hacker (#35) rxd    this none this
    #3:"exits entrances"        Core-Wizard (#184)   rxd    this none this
    #3:obvious_exits            unknown hacker (#35) rxd    this none this
    #3:here_huh                 Core-Wizard (#184)   rxd    this none this
    #3:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #3:examine_commands_ok      unknown hacker (#35) rxd    this none this
    #3:examine_key              Core-Wizard (#184)   rxd    this none this
    #3:examine_contents         unknown hacker (#35) rxd    this none this
    #3:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #3:look_self                unknown hacker (#35) rxd    this none this
    #3:description              unknown hacker (#35) rxd    this none this
    #3:where_am_i               unknown hacker (#35) rxd    this none this
    #3:"housekeeper_msg housekeeper_deposit_msg" unknown hacker (#35) rxd this none this
    #3:look_in                  unknown hacker (#35) rxd    this none this
    #3:namec_for_look_self      unknown hacker (#35) rxd    this none this
    #3:set_integrate_unknown_objects unknown hacker (#35) rx this none this
    #3:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
    #3:reconfunc                unknown hacker (#35) rxd    this none this
    #3:sit                      unknown hacker (#35) rxd    none none none
    #3:stand                    unknown hacker (#35) r d    none none none
    #3:topic_msg                unknown hacker (#35) rxd    this none this
    #3:topic                    unknown hacker (#35) r d    any any any
    #3:set_topic_sign           topic-owner (#181)   rxd    this none this
    #3:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #3:match_type_object        unknown hacker (#35) rxd    this none this
    #3:party_location           unknown hacker (#35) rxd    this none this
    #3:init_for_core            Core-Wizard (#184)   rxd    this none this
    #3:acceptable               Core-Wizard (#184)   rxd    this none this
    #3:is_public_location       Core-Wizard (#184)   rxd    this none this
    #3:objects_for_match        unknown hacker (#35) rxd    this none this
    #3:set_walking_cost         unknown hacker (#35) rxd    this none this
    #3:walking_cost             unknown hacker (#35) rxd    this none this
    #3:"can_add_exit can_add_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_remove_exit can_remove_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_read_exits can_read_entrances" Core-Wizard (#184) rxd this none this
    #3:terrain_delay            unknown hacker (#35) rxd    this none this
    #3:set_terrain_delay        unknown hacker (#35) rx     this none this
    #3:"walk_failed_source walk_failed_dest" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
Last modified Fri Jul 28 14:36:53 2000 PDT by Xeric (#999) (on Waterpoint (for core)).
#3:"announce_all_but" this none this
text = listdelete(args, 1);
contents = this.contents;
for l in (args[1])
  contents = setremove(contents, l);
endfor
for listener in (contents)
  listener:tell(@text);
endfor
-----
$YOU:SAY_ACTION
===============

$you:say_action(message [,who [, thing[, where[, dobj[, iobj]]]]]).

announce 'message' with pronoun substitution as if it were just 

  where:announce_all($string_utils:pronoun_sub(message, who, thing, where, dobj, iobj)); 

except that all involved parties get modified messages, with the appropriate use of 'you' instead of their name.

who   default player

thing default object that called this verb

where default who.location

Any of these may be lists, of the form {<list of objs>, @<args to $string_utils:english_list>}.

0 errors.
Verb programmed.
That is not a valid command.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#8:is_openable_by this none this" name: "MOO verb: #8:is_openable_by this none this" type: moo-code content*: "" _data-tag: 79483363445
#$#* 79483363445 content: if (!this:can_reach(@args))
#$#* 79483363445 content: elseif (this.open_key != 0 && !$lock_utils:eval_key(this.open_key, args[1]))
#$#* 79483363445 content:   player:tell($string_utils:pronoun_sub(this:open_fail_msg()));
#$#* 79483363445 content: else
#$#* 79483363445 content:   return 1;
#$#* 79483363445 content: endif
#$#* 79483363445 content: return 0;
#$#: 79483363445
Last modified Mon Apr 22 19:17:45 2013 PDT by Crag (#243).
#8:"open" this none none
here = this:location();
if (this.opened)
  player:tell("It's already open.");
elseif (this:is_openable_by(player))
  this:set_opened(1);
  $you:say_action(this:open_msg());
else
  player:tell($string_utils:pronoun_sub(this:open_fail_msg()));
  here:announce_all_but({player}, $string_utils:pronoun_sub(this:open_fail_others_msg()));
  here:broadcast_event_open_failed(player, this);
endif
0 errors.
Verb programmed.
generic openable container (#8) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic container (#126).
  Location generic player (#6).
.close_msg               unknown hack (#35)    r c    {#69, "do", {"name", "p..
.open_msg                unknown hack (#35)    r c    {#69, "do", {"dname", "..
.opaque                  unknown hack (#35)    r      1
.dark                    unknown hack (#35)    r      0
.open_fail_msg           unknown hack (#35)    r c    {#69, "do", "You can't ..
.opened                  unknown hack (#35)    r      1
.open_key                unknown hack (#35)           0
.automatic               unknown hack (#35)    r      1
-------------------------------- finished ---------------------------------
Property added with value 0.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, and a How $staff will notice people rummaging here.
stormagnet is here, dozing.
You rattle the lid, but it refuses to budge. It must be locked.
#8:open (this == #275), line 9:  Verb not found
(End of traceback)
Verb added [19] (18).
Now programming generic openable container:open_fail_others_msg[19](18).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
You rattle the lid, but it refuses to budge. It must be locked.
Wizard arrives from the Northern Entrance.

-----
TWO-LETTER-QR
=============

This help text is a quick reference for pronoun_sub format strings.  For explanation, see `help two-letter'[1].

General format:   %<object specifier><information specifier>

Object Specifiers
  %t - this           %d - the dobj     %l - the player location
  %n - the player     %i - the iobj
  Append `l' to refer to that object's location, or `L' for the outermost.
  Append `c' for the contents.
  %x<object specifier>{foo arg1 arg2 ...} is an object specifier meaning
  "call :obj_foo on the specified object, with the given arguments."

Information Specifiers (capitalizable)
  n - the object's name         ("Susan",   "duck",    "king and queen")
  d - definite-article          ("Susan",   "the duck","the king and queen")
  i - indefinite-article        ("Susan",   "a duck",  "a king and queen")
  o  - the objective pronoun    ("her",     "him",     "them")
  p  - possessive adjective     ("her",     "his",     "their")
  q  - possessive pronoun       ("hers",    "his",     "theirs")
  r  - reflexive pronoun        ("herself", "himself", "themselves")
  s  - subjective pronoun       ("she",     "he,       "they")
  'i - indefinite possessive    ("a duck's")
  'd - definite possessive      ("the duck's")
  'n - possessive title         ("duck's")
  #  - the object's number 
  <object specifier>x{foo arg1 arg2 ...} is an information specifier
  meaning "call :sub_foo on the object, with the given arguments."

Verbs, Nouns, Properties (capitalizable)
  :(foos) - conjugate the verb `to foo'
  '(foo)  - pluralize the noun `foo' if necessary
  .(foo)  - the object's `foo' property

Other Substitutions
  %${a,d,i,p} - the {arg,dobj,iobj,prep}str 

You set the "open_fail_others" message of the butler's desk (#275).
Wizard tried to open the butler's desk! Good thing it was locked.
That is not a valid command.
-----
`HELP CHECKPOINT' NOT FOUND
===========================

Sorry, but no help is available on `checkpoint'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

generic wizard (#51) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic programmer (#52).
  Location generic room (#3).
   #51:@chown*#                 Core-Wizard (#184)   r d    any any any
   #51:"@grant @grants*"        Core-Wizard (#184)   r d    any at/to any
   #51:@programmer              Core-Wizard (#184)   r d    any none none
   #51:@shutdown                Core-Wizard (#184)   r d    any any any
   #51:@dump-d*atabase          Core-Wizard (#184)   r d    none none none
   #51:@who-calls               Core-Wizard (#184)   r d    any any any
   #51:mcd_2                    Wizard (#2)          rxd    this none this
   #51:@toad*                   Core-Wizard (#184)   r      any any any
   #51:"@untoad @detoad"        Core-Wizard (#184)   r d    any any any
   #51:@quota                   Core-Wizard (#184)   r      any is any
   #51:@players                 Core-Wizard (#184)   r d    any any any
   #51:kill_aux_wizard_parse    Core-Wizard (#184)   rxd    this none this
   #51:"@grepcore @egrepcore"   Core-Wizard (#184)   r d    any any any
   #51:"@net-who @@who"         Core-Wizard (#184)   r      any any any
   #51:@make-player             Core-Wizard (#184)   r d    any any any
   #51:@abort-sh*utdown         Core-Wizard (#184)   r d    any any any
   #51:"toad_msg toad_victim_msg programmer_msg programmer_victim_msg newt_msg newt_victim_msg" Core-Wizard (#184) rxd this none this
   #51:moveto                   Core-Wizard (#184)   rxd    this none this
   #51:@newt                    Core-Wizard (#184)   r      any none none
   #51:"@unnewt @denewt @get-better" Core-Wizard (#184) r   any any any
   #51:@log                     Core-Wizard (#184)   r d    any any any
   #51:@guests                  Core-Wizard (#184)   r d    any none none
   #51:"@rn mail_catch_up check_mail_lists current_message set_current_message get_current_message make_current_message kill_current_message @subscribed @read-all-new @mail-all-new" Core-Wizard (#184) rxd none none none
   #51:"@blacklist @graylist @redlist @unblacklist @ungraylist @unredlist @spooflist @unspooflist" Core-Wizard (#184) r d any any any
   #51:@copyo*bject             Core-Wizard (#184)   r d    any any any
   #51:@corify                  Core-Wizard (#184)   r      any as any
   #51:@make-guest              Core-Wizard (#184)   r d    any any any
   #51:@wiz-boot                Core-Wizard (#184)   r d    any any any
   #51:"@idlers @kill-idlers @kill-useless @useless @Kill-unconnected @unconnected" Core-Wizard (#184) r d any none none
   #51:@report                  Core-Wizard (#184)   rxd    any none none
   #51:@immortal*ize            Core-Wizard (#184)   r d    any none none
   #51:@zap                     Core-Wizard (#184)   rxd    any any any
   #51:@chmod-raw               Core-Wizard (#184)   r d    any any any
   #51:"@grepjhcore @egrepjhcore" Core-Wizard (#184) r d    any any any
   #51:@make-core-db            Wizard (#2)          r d    any none none
   #51:renumber_for_core        Wizard (#2)          rxd    this none this
   #51:@check-all-owned-objects Core-Wizard (#184)   r d    none none none
   #51:dcd_5                    Wizard (#2)          rx     this none this
   #51:dcd_renumber             Wizard (#2)          rx     this none this
-------------------------------- finished ---------------------------------
-----
`HELP @DUMP-D' AMBIGUOUS
========================

Sorry, the topic `@dump-d' is ambiguous.  I don't know which of the following topics you mean:

`help @dump-database'[1]                        `help dump_database()'[2]

-----
@DUMP-DATABASE
==============

Syntax:  @dump-database

Invokes the builtin dump_database(), which requests that the server checkpoint the database at its next opportunity.  It is not normally necessary to call this function; the server automatically checkpoints the database at regular intervals; see the chapter on server assumptions about the database for details.

Dumping...
Searching for core verbs containing the string ":room_announce" ...

#178:pop [+d topic-owner (#181)]:          this:room_announce_all("The groundskeeper comes by and picks up the blank topic sign.");

Total: 1 verb.
Last modified Mon Jan  1 09:06:37 2001 PST by splat (#4014) (on Waterpoint).
#1:"room_announce*_all_but" this none this
`this.location:(verb)(@args) ! E_INVIND, E_VERBNF';
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#178:pop this none this" name: "MOO verb: #178:pop this none this" type: moo-code content*: "" _data-tag: 14854347546
#$#* 14854347546 content: if (this.stack)
#$#* 14854347546 content:   this.stack = listdelete(this.stack, length(this.stack));
#$#* 14854347546 content:   this:set_private_from_topic();
#$#* 14854347546 content:   if (!this.stack && !this.default_topic)
#$#* 14854347546 content:     fork (30)
#$#* 14854347546 content:       if ($object_utils:isa(this, $topic) && (!this.stack && !this.default_topic))
#$#* 14854347546 content:         this:room_announce_all("The groundskeeper comes by and picks up the blank topic sign.");
#$#* 14854347546 content:         $recycler:_recycle(this);
#$#* 14854347546 content:       endif
#$#* 14854347546 content:     endfork
#$#* 14854347546 content:   endif
#$#* 14854347546 content: endif
#$#: 14854347546
0 errors.
Verb programmed.
That object does not define that verb.
Verb #1:room_announce*_all_but [27] {this none this} removed.
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:location                 Crag (#243)          rxd    this none this
    #1:location_for_caller      Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Usage:  @create <parent-class> named [name:]alias,...,alias
   or:  @create <parent-class> named name-and-alias,alias,...,alias
#-1 does not exist.
You now have Generic Virtual Reality Object (aka vr_root) with object number #291 and parent root class (#1).
#-1 does not exist.
-----
CHPARENT()
==========

Syntax:  chparent (obj <object>, obj <new-parent>)   => none

Changes the parent of <object> to be <new-parent>.  If <object> is not valid, or if <new-parent> is neither valid nor equal to `#-1', then `E_INVARG' is raised.  If the programmer is neither a wizard or the owner of <object>, or if <new-parent> is not fertile (i.e., its `f' bit is not set) and the programmer is neither the owner of <new-parent> nor a wizard, then `E_PERM' is raised.  If <new-parent> is equal to `object' or one of its current ancestors, `E_RECMOVE' is raised.  If <object> or one of its descendants defines a property with the same name as one defined either on <new-parent> or on one of its ancestors, then `E_INVARG' is raised.

Changing an object's parent can have the effect of removing some properties from and adding some other properties to that object and all of its descendants (i.e., its children and its children's children, etc.).  Let <common> be the nearest ancestor that <object> and <new-parent> have in common before the parent of <object> is changed.  Then all properties defined by ancestors of <object> under <common> (that is, those ancestors of <object> that are in turn descendants of <common>) are removed from <object> and all of its descendants.  All properties defined by <new-parent> or its ancestors under <common> are added to <object> and all of its descendants.  As with `create()', the newly-added properties are given the same permission bits as they have on <new-parent>, the owner of each added property is either the owner of the object it's added to (if the `c' permissions bit is set) or the owner of that property on <new-parent>, and the value of each added property is "clear"; see the description of the built-in function `clear_property()' for details.  All properties that are not removed or added in the reparenting process are completely unchanged.

If <new-parent> is equal to `#-1', then <object> is given no parent at all; it becomes a new root of the parent/child hierarchy.  In this case, all formerly inherited properties on <object> are simply removed.

Your current object is now vr_root, a Generic Virtual Reality Object (#291).
Syntax error in initial value:  `_' unexpected
Syntax error in initial value:  bogus objectid `#vr_root'
=> #291 (Generic Virtual Reality Object)
Property added with value #259.
=> #291 (Generic Virtual Reality Object)
=> 0
=> #-1 <$nothing>
#4:@move (this == #243), line 17:  Verb not found
(End of traceback)
=> 0
=> 0
Generic Virtual Reality Object (#291) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Generic Virtual Reality Object (#291) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {86928, 1366617600}
.core_names              Core-Wizard (#184)    r c    {"$root_class"}
-------------------------------- finished ---------------------------------
No such verb, "core_names"
-------------------------------- finished ---------------------------------
Verb added [92] (91).
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#1:core_names ()" name: "MOO verb: #1:core_names ()" type: moo-code content*: "" _data-tag: 95050520947
#$#: 95050520947
-----
PROPERTIES()
============

Syntax:  properties (obj <object>)   => list

Returns a list of the names of the properties defined directly on the given <object>, not inherited from its parent.  If <object> is not valid, then `E_INVARG' is raised.  If the programmer does not have read permission on <object>, then `E_PERM' is raised.

#-1:Input to EVAL, line 4:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
GENERAL INFORMATION ON $LIST_UTILS[1]
=====================================

append            (list,list,..) => result of concatenating the given lists
flatten           (list of lists)=> list of all non-list elements
reverse           (list)         => reversed list
remove_duplicates (list)         => list with all duplicates removed
compress          (list)         => list with consecutive duplicates removed
setremove_all     (list,elt)     => list with all occurrences of elt removed
find_insert       (sortedlist,e) => index of first element > e in sortedlist
sort              (list[,keys])  => sorted list

make              (n[,e])        => list of n copies of e
range             (m,n)          => {m,m+1,...,n}

arrayset   (list,val,i[,j,k...]) => array modified so that list[i][j][k]==val

-- Mapping functions (take a list and do something to each element):

map_prop ({o...},prop)              => list of o.(prop)            for all o
map_verb ({o...},verb[,args)        => list of o:(verb)(@args)     for all o
map_arg  ([n,]obj,verb,{a...},args) => list of obj:(verb)(a,@args) for all a

-- Association list functions --

An association list (alist) is a list of pairs (2-element lists), though the following functions have been generalized for lists of n-tuples (n-element lists).  In each case i defaults to 1.

make_alist      (lists[,pad]) => alist from list of parallel lists
assoc        (targ,alist[,i]) => 1st tuple in alist whose i-th element is targ
iassoc       (targ,alist[,i]) => index of same.
assoc_prefix (targ,alist[,i]) => ... whose i-th element has targ as a prefix
iassoc_prefix(targ,alist[,i]) => index of same.
slice             (alist[,i]) => list of i-th elements
sort_alist        (alist[,i]) => alist sorted on i-th elements.

-----
GENERAL INFORMATION ON $SET_UTILS[1]
====================================

This object is useful for operations that treat lists as sets (i.e., without concern about order and assuming no duplication).

 union(set, set, ...)        => union
 intersection(set, set, ...) => intersection

 diff*erence(set 1, set 2, ..., set n)
        => result of removing all elements of sets 2..n from set 1.
 exclusive_or(set, set, set, ...)
        => all elements that are contained in exactly one of the sets

 equals(set, set, ...)
        => true if and only if all the sets are equal
 contains(set 1, set 2, ..., set n)
        => true if and only if all of sets 2..n are subsets of set 1

-----
SETADD()
========

Syntax:  setadd (list <list>, <value>)   => list
      setremove (list <list>, <value>)   => list

Returns a copy of <list> with the given <value> added or removed, as appropriate.  `setadd()' only adds <value> if it is not already an element of <list>; <list> is thus treated as a mathematical set.  <value> is added at the end of the resulting list, if at all.  Similarly, `setremove()' returns a list identical to <list> if <value> is not an element.  If <value> appears more than once in <list>, only the first occurrence is removed in the returned copy.

    setadd({1, 2, 3}, 3)         =>   {1, 2, 3}
    setadd({1, 2, 3}, 4)         =>   {1, 2, 3, 4}
    setremove({1, 2, 3}, 3)      =>   {1, 2}
    setremove({1, 2, 3}, 4)      =>   {1, 2, 3}
    setremove({1, 2, 3, 2}, 2)   =>   {1, 3, 2}

stormagnet stands up from the chaise longues.
stormagnet leaves for the n.
Usage: @addalias <alias>[,...,<alias>] to <object>
       @addalias <alias>[,...,<alias>] to <object>:<verb>
Usage: @addalias <alias>[,...,<alias>] to <object>
       @addalias <alias>[,...,<alias>] to <object>:<verb>
Alias "sm" added to stormagnet(#246).
Aliases for stormagnet(#246) are now {"stormagnet", "raine", "sm"}
(to stormagnet) Crag hugs
=> {}
=> 0
=> {0, 1}
=> {2, 1}
=> {2, 3}
#-1:Input to EVAL, line 4:  Incorrect number of arguments
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
stormagnet arrives from the Northern Entrance.
stormagnet goes north.
[the Generic Pilable Thing]
You already have that!
The verb :g is on   Crag(#243)--generic player(#6)   brown Persian rug(#257)--generic thing(#5)   detailed painting(#262)--generic container(#126)   timbered ceiling(#273)--generic container(#126)   chaise longues(#274)--generic sittable object(#80)   butler's desk(#275)--generic container(#126)   demi-lune table(#277)--generic container(#126)   Wind-Up Duck(#261)--generic thing(#5)   microphone(#282)--generic thing(#5)   porter's chair(#286)--generic sittable object(#80)   How $staff will notice people rummaging(#290)--generic thing(#5)   Wizard(#2)--generic player(#6)   Generic Pilable Thing(#255)--generic thing(#5)   Generic Nesting Decoration(#265)--generic container(#126)
    #6:"g*et take"              Core-Wizard (#184)   rxd    this none none
-------------------------------- finished ---------------------------------
Verb name changed.
The verb :g is on   brown Persian rug(#257)--generic thing(#5)   detailed painting(#262)--generic container(#126)   timbered ceiling(#273)--generic container(#126)   chaise longues(#274)--generic sittable object(#80)   butler's desk(#275)--generic container(#126)   demi-lune table(#277)--generic container(#126)   Wind-Up Duck(#261)--generic thing(#5)   microphone(#282)--generic thing(#5)   porter's chair(#286)--generic sittable object(#80)   How $staff will notice people rummaging(#290)--generic thing(#5)   Generic Pilable Thing(#255)--generic thing(#5)   Generic Nesting Decoration(#265)--generic container(#126)
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
-------------------------------- finished ---------------------------------
Verb name changed.
The verb :g is on   detailed painting(#262)--generic container(#126)   timbered ceiling(#273)--generic container(#126)   chaise longues(#274)--generic sittable object(#80)   butler's desk(#275)--generic container(#126)   demi-lune table(#277)--generic container(#126)   porter's chair(#286)--generic sittable object(#80)   Generic Nesting Decoration(#265)--generic container(#126)
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
-------------------------------- finished ---------------------------------
Verb name changed.
The verb :g is on   chaise longues(#274)--generic sittable object(#80)   porter's chair(#286)--generic sittable object(#80)
   #80:"g*et t*ake"             unknown hacker (#35) r d    this none none
-------------------------------- finished ---------------------------------
Verb name changed.
The verb :g is nowhere to be found.
That is not a valid command.
That is not a valid command.
Error programming root class:core_names[92](91).
Line 6:  syntax error
1 error(s).
Verb not programmed.
Error programming root class:core_names[92](91).
Line 6:  syntax error
1 error(s).
Verb not programmed.
You hear a quiet popping sound; Wizard has disconnected.
0 errors.
Verb programmed.
#1:core_names, line 11:  Variable not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#1:core_names this none this" name: "MOO verb: #1:core_names this none this" type: moo-code content*: "" _data-tag: 172494095448
#$#* 172494095448 content: // :core_names() => list of strings which, when prefixed with $, reference this
#$#* 172494095448 content: //                  object in code
#$#* 172494095448 content: {?node = #0, ?prefix = ""} = {#0, ""};
#$#* 172494095448 content: names = {};
#$#* 172494095448 content: for propname in (properties(node))
#$#* 172494095448 content:   name = prefix + propname;
#$#* 172494095448 content:   value = node.(propname);
#$#* 172494095448 content:   if (value == this)
#$#* 172494095448 content:     names = setadd(names, prefix + propname);
#$#* 172494095448 content:   endif
#$#* 172494095448 content:   if (valid(v))
#$#* 172494095448 content:     for name in (this:core_names(v, name + "."))
#$#* 172494095448 content:       setadd(names, name);
#$#* 172494095448 content:     endfor
#$#* 172494095448 content:   endif
#$#* 172494095448 content: endfor
#$#* 172494095448 content: return names;
#$#: 172494095448
0 errors.
Verb programmed.
#1:core_names, line 11:  Variable not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#1:core_names this none this" name: "MOO verb: #1:core_names this none this" type: moo-code content*: "" _data-tag: 59853635849
#$#* 59853635849 content: // :core_names() => list of strings which, when prefixed with $, reference this
#$#* 59853635849 content: //                  object in code
#$#* 59853635849 content: {?node = #0, ?prefix = ""} = {#0, ""};
#$#* 59853635849 content: names = {};
#$#* 59853635849 content: for propname in (properties(node))
#$#* 59853635849 content:   name = prefix + propname;
#$#* 59853635849 content:   value = node.(propname);
#$#* 59853635849 content:   if (value == this)
#$#* 59853635849 content:     names = setadd(names, prefix + propname);
#$#* 59853635849 content:   endif
#$#* 59853635849 content:   if (typeof(v) == OBJ && valid(v))
#$#* 59853635849 content:     for name in (this:core_names(v, name + "."))
#$#* 59853635849 content:       setadd(names, name);
#$#* 59853635849 content:     endfor
#$#* 59853635849 content:   endif
#$#* 59853635849 content: endfor
#$#* 59853635849 content: return names;
#$#: 59853635849
Last modified Mon Apr 22 22:54:24 2013 PDT by Crag (#243).
#1:"core_names" this none this
 1:  // :core_names() => list of strings which, when prefixed with $, reference this
 2:  //                  object in code
 3:  {?node = #0, ?prefix = ""} = {#0, ""};
 4:  names = {};
 5:  for propname in (properties(node))
 6:    name = prefix + propname;
 7:    value = node.(propname);
 8:    if (value == this)
 9:      names = setadd(names, prefix + propname);
10:    endif
11:    if (typeof(v) == OBJ && valid(v))
12:      for name in (this:core_names(v, name + "."))
13:        setadd(names, name);
14:      endfor
15:    endif
16:  endfor
17:  return names;
Objects owned by stormagnet (from #0 to #291):
  3K #246 stormagnet                 [Northern Entrance]
  5K #260 Generic Wind-Up Toy        [stormagnet]
  2K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows            *North Vestibule->Northern Entrance
  1K #267 Northern Entrance         
  1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [stormagnet]
 <1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling           *[generic room]
 <1K #273 timbered ceiling          *[North Vestibule]
  2K #274 chaise longues            *[North Vestibule]
  1K #275 butler's desk             *[North Vestibule]
 <1K #276 butler's key               [stormagnet]
  1K #277 demi-lune table           *[North Vestibule]
 <1K #278 silver salver              [demi-lune table]
 <1K #284 calling cards              [silver salver]
 <1K #285 chandelier                 [timbered ceiling]
  1K #286 porter's chair            *[North Vestibule]
  1K #287 Great Hall                
 <1K #288 south                      *North Vestibule->Great Hall
 <1K #289 generic bot                [stormagnet]
  1K #249 tracery windows            [stormagnet]
-- 22 objects.  Total bytes: 32,834.------------------------------------------
A pair of medieval tracery windows flank the doors, their delicate stone carvings belying the thickness of the walls.
In the Northern Entrance, you see stormagnet.
The tracery windows are closed.
The Northern Entrance
An elevated portico framing the main entrance at the northern front of the Manor. A flight of marble stairs leads down to the northern drive, and a smaller flight to the west leads to the port-cochere.  A pair of massive oak double doors bar the entrance, inscribed with the family crest.
stormagnet is here.
South (#283) leads to the North Vestibule (#70) via {south, s}.
stormagnet drops a tracery windows.
Invalid indirection, you see nothing.
The tracery windows is open.
tracery windows (#249) [ readable ]
  Owned by stormagnet (#246).
  Child of generic window (#179).
  Location Northern Entrance (#267).
-------------------------------- finished ---------------------------------
tracery windows (#249) [ readable ]
  Owned by stormagnet (#246).
  Child of generic window (#179).
  Location Northern Entrance (#267).
 open_msg                stormagnet (#246)     r c    {#69, "do", {"dname", "..
 close_msg               stormagnet (#246)     r c    {#69, "do", {"dname", "..
,open                    unknown hack (#35)    r      1
 opened_msg              stormagnet (#246)     r c    {#69, "do", {"dname", "..
 closed_msg              stormagnet (#246)     r c    {#69, "do", {"dname", "..
 automatic               unknown hack (#35)    r      0
 locked_msg              stormagnet (#246)     r c    {#69, "do", {"dname", "..
 other_side              unknown hack (#35)    r      #-1
 opens_msg               stormagnet (#246)     r c    {#69, "do", {"name", "p..
 closes_msg              stormagnet (#246)     r c    {#69, "do", {"name", "p..
 user_key                unknown hack (#35)    r      #-1
 unlocked_msg            stormagnet (#246)     r c    {#69, "do", {"dname", "..
 lock_msg                stormagnet (#246)     r c    {#69, "do", {"dname", "..
 unlock_msg              stormagnet (#246)     r c    {#69, "do", {"dname", "..
 locked                  unknown hack (#35)    r      0
 locks_msg               stormagnet (#246)     r c    {#69, "do", {"name", "p..
 unlocks_msg             stormagnet (#246)     r c    {#69, "do", {"name", "p..
 knock_msg               stormagnet (#246)     r c    {#69, "do", {"dname", "..
 knocks_msg              stormagnet (#246)     r c    {#69, "do", {"name", "p..
 opaque                  unknown hack (#35)    r      0
 help                    stormagnet (#246)     r c    {"Windows are just like..
 no_key_msg              stormagnet (#246)     r c    {#69, "do", "You don't ..
 close_delay             unknown hack (#35)    r      -1
 closing_task            unknown hack (#35)    r      0
 self_closes_msg         stormagnet (#246)     r c    {#69, "do", {"dname", "..
 pull_msg                stormagnet (#246)     r c    {#69, "do", {"name", "p..
 obvious                 stormagnet (#246)     r c    0
 source                  stormagnet (#246)     r c    #-1
 dest                    stormagnet (#246)     r c    #-1
 nogo_msg                stormagnet (#246)     r c    0
 onogo_msg               stormagnet (#246)     r c    0
 arrive_msg              stormagnet (#246)     r c    0
 oarrive_msg             stormagnet (#246)     r c    0
 oleave_msg              stormagnet (#246)     r c    0
 leave_msg               stormagnet (#246)     r c    0
 nothing_msg             stormagnet (#246)     r c    "nothing"
 no_one_msg              stormagnet (#246)     r c    "no one"
 prefix_name             stormagnet (#246)     r c    1
 through_msg             stormagnet (#246)     r c    {#69, "do", {"name", {"..
 walking_cost            unknown hack (#35)    r      1
,dependents              Core-Wizard (#184)    r      {}
,key                     stormagnet (#246)       c    0
,aliases                 stormagnet (#246)     r c    {"tracery windows", "wi..
 description             stormagnet (#246)     r c    {}
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      stormagnet (#246)     r c    {#69, "do", {"name", "t..
 integrate_player_msg    stormagnet (#246)     r c    ""
 integrate_container_msg stormagnet (#246)     r c    ""
 unique                  stormagnet (#246)     r c    0
 proper                  stormagnet (#246)     r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {1449, 1366696535}
 core_names              stormagnet (#246)     r c    {"$exit", "$door", "$wi..
-------------------------------- finished ---------------------------------
@integrate_room window is "%Td to %2d %t:(is) %tx{open 0}."
@integrate_player window isn't set.
@integrate_container window isn't set.
@nogo window isn't set.
@onogo window isn't set.
@arrive window isn't set.
@oarrive window isn't set.
@oleave window isn't set.
@leave window isn't set.
@nothing window is "nothing"
@no_one window is "no one"
@through window is "%xt{dest}{d {in} c}, you see %xt{dest}ci."
@open window is "%Nd %n:(opens) %td."
@close window is "%Nd %n:(closes) %td."
@opened window is "%Td %t:(is) open."
@closed window is "%Td %t:(is) closed."
@locked window is "%Td %t:(is) locked."
@opens window is "%Nd %n:(opens) %td from the other side."
@closes window is "%Nd %n:(closes) %td from the other side."
@unlocked window is "%Td %t:(is) unlocked."
@lock window is "%Nd %n:(locks) %td."
@unlock window is "%Nd %n:(unlocks) %td."
@locks window is "%Nd locks %td from the other side."
@unlocks window is "%Nd unlocks %td from the other side."
@knock window is "%Nd %n:(knocks) on %td."
@knocks window is "%Nd %n:(knocks) on %td."
@no_key window is "You don't have the key for %td."
@self_closes window is "%Td %t:(closes)."
@pull window is "%Ni %n:(reaches) through %td and %n:(pulls) %dd into %nld."
tracery windows (#249) [ readable ]
  Owned by stormagnet (#246).
  Child of generic window (#179).
  Location Northern Entrance (#267).
-------------------------------- finished ---------------------------------
 dest                    stormagnet (#246)     r c    #-1
-------------------------------- finished ---------------------------------
You see no "$exitr" here.
generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
.obvious                 Core-Wizard (#184)    r c    1
.source                  Core-Wizard (#184)    r c    #-1
.dest                    Core-Wizard (#184)    r c    #-1
.nogo_msg                Core-Wizard (#184)    r c    0
.onogo_msg               Core-Wizard (#184)    r c    0
.arrive_msg              Core-Wizard (#184)    r c    0
.oarrive_msg             Core-Wizard (#184)    r c    0
.oleave_msg              Core-Wizard (#184)    r c    0
.leave_msg               Core-Wizard (#184)    r c    0
.nothing_msg             Core-Wizard (#184)    r c    "nothing"
.no_one_msg              Core-Wizard (#184)    r c    "no one"
.prefix_name             Core-Wizard (#184)    r c    1
.through_msg             Core-Wizard (#184)    r c    {#69, "do", {"name", {"..
.walking_cost            unknown hack (#35)    r      1
-------------------------------- finished ---------------------------------
The tracery windows disappears suddenly for parts unknown, moved by stormagnet.
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, and a How $staff will notice people rummaging here.
The Northern Entrance
An elevated portico framing the main entrance at the northern front of the Manor. A flight of marble stairs leads down to the northern drive, and a smaller flight to the west leads to the port-cochere.  A pair of massive oak double doors bar the entrance, inscribed with the family crest.
stormagnet is here.
,exits                   stormagnet (#246)       c    {#283}
-------------------------------- finished ---------------------------------
Objects owned by stormagnet (from #0 to #291):
  3K #246 stormagnet                 [Northern Entrance]
  5K #260 Generic Wind-Up Toy        [stormagnet]
  2K #261 Wind-Up Duck              *[North Vestibule]
  1K #266 tracery windows            *North Vestibule->Northern Entrance
  1K #267 Northern Entrance         
  1K #268 n                          *North Vestibule->Northern Entrance
 <1K #259 generic rug                [stormagnet]
 <1K #257 brown Persian rug         *[North Vestibule]
 <1K #272 generic ceiling           *[generic room]
 <1K #273 timbered ceiling          *[North Vestibule]
  2K #274 chaise longues            *[North Vestibule]
  1K #275 butler's desk             *[North Vestibule]
 <1K #276 butler's key               [stormagnet]
  1K #277 demi-lune table           *[North Vestibule]
 <1K #278 silver salver              [demi-lune table]
 <1K #284 calling cards              [silver salver]
 <1K #285 chandelier                 [timbered ceiling]
  1K #286 porter's chair            *[North Vestibule]
  1K #287 Great Hall                
 <1K #288 south                      *North Vestibule->Great Hall
 <1K #289 generic bot                [stormagnet]
  1K #249 tracery windows            Northern Entrance->*North Vestibule
-- 22 objects.  Total bytes: 32,834.------------------------------------------
Crag | ;here.exits = {@here.exits, #249}
=> {#283, #249}
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, and a How $staff will notice people rummaging here.
=> {#283, #249}
The Northern Entrance
An elevated portico framing the main entrance at the northern front of the Manor. A flight of marble stairs leads down to the northern drive, and a smaller flight to the west leads to the port-cochere.  A pair of massive oak double doors bar the entrance, inscribed with the family crest.  The tracery windows to the North Vestibule is open.
stormagnet is here, distracted.
On the North Vestibule, you see a brown Persian rug, a detailed painting, some chaise longues, a butler's desk, a demi-lune table, Wind-Up Duck, a microphone, a porter's chair, and a How $staff will notice people rummaging.
The tracery windows is open.
-----
@LOCK
=====

Syntax:  @lock <object> with <key expression>

Set a lock on <object> to restrict its use.  See `help locking'[1] for general information about locking and `help keys'[2] for the syntax and semantics of key expressions.

N.B.  In the case of rooms, you are actually better off setting room.free_entry to 0 thus preventing teleportation and then @locking the various entrances.  The problem with @locking the room itself is that this can make it impossible to drop objects in the room.

You close the tracery windows.
Locked tracery windows to this key:
  ~Crag && !~Crag
That is not a valid command.
You can't go that way (window).
On the North Vestibule, you see a brown Persian rug, a detailed painting, some chaise longues, a butler's desk, a demi-lune table, Wind-Up Duck, a microphone, a porter's chair, and a How $staff will notice people rummaging.
The tracery windows is closed.
Crag | @lock window with me && !me
You open the tracery windows.
You can't go that way (window).
You close the tracery windows.
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {86928, 1366617600}
.core_names              Core-Wizard (#184)    r c    {"$root_class"}
-------------------------------- finished ---------------------------------
=> #291 (Generic Virtual Reality Object)
Property #291.key already exists.
Property #291.description already exists.
Property #291.visible already exists.
Property #291.integrate_room_msg already exists.
Property #291.integrate_player_msg already exists.
Property #291.integrate_container_msg already exists.
-----
@COPY
=====

Syntax:  @copy   <object>:<verb> to [<newobject>][:<newverb>]
         @copy-x <object>:<verb> to [<newobject>][:<newverb>]

Copies the code of the named verb to the new object and verbname.  Permissions, and arguments of the new verb are set to match those of the old verb in the event that the new verb does not already exist.  One of <newobject> or :<newverb> must be supplied.  If no new verbname is given, the old name is retained.  Likewise, <newobject> defaults to <object> if not given.

@copy-x is like @copy but causes any new verb to be created with its x flag reset.

Examples:
  @copy me:verbname to myobject
  @copy me:test_verb to myobject:real_verb
  @copy-x me:verbname to verbname(old)

In general, @copy'ing verbs is a bad idea.  In the vast majority of cases, the desired effect can be accomplished with parenting (i.e., having <object> be an ancestor of <newobject>), which has the advantage that if a verb is updated or fixed, this immediately becomes available to child objects that inherit this verb.  In such a case, copies that were made using @copy have to be tracked down and fixed by hand.

This facility is provided for those rare occasions where one has no choice but to actually copy the verb.  @copy-x is useful for making unusable backup copies of verbcode.

root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {86928, 1366617600}
.core_names              Core-Wizard (#184)    r c    {"$root_class"}
-------------------------------- finished ---------------------------------
Generic Virtual Reality Object (#291) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
=> {}
stormagnet goes south.
stormagnet arrives from the North Vestibule.
stormagnet goes south.
stormagnet materializes out of thin air.
stormagnet goes south.
The generic room(#3) has 33 kids.
Generic Editor (#46)   North Vestibule (#70)   Northern Entrance (#267)   Great Hall (#287)   Northeast Tower (#292)   Northwest Tower (#294)   East Hall (#296)   Atrium (#298)   Atrium (#302)   West Hall (#304)   East Foyer (#310)   Southeast Tower (#312)   South Hall (#315)   South Vestibule (#318)   Southwest Tower (#321)   Muscician's Gallery (#323)   Ballroom (#330)   Smoking Room Doorway (#332)   Dining Room Doorway (#334)   Drawing Room Doorway (#336)   Side Foyer (#338)   Refreshment Room (#346)   Card Room (#348)   Smoking Room (#350)   East Servant's Passage (#353)   Fainting Room (#357)   Smoking Room (#361)   Dining Room (#364)   Red Drawing Room (#368)   Blue Drawing Room (#374)   Solarium (#379)   Morning Room (#381)   Breakfast Room (#385)
That object does not define that verb.
The verb :@exits is on   Northern Entrance(#267)--generic room(#3)
Object #267 does not define that verb, but its ancestor #3 does.
Last modified Sat Feb  2 07:51:34 2002 PST by splat (#3024) (on JHM (for core)).
#3:"@exits" any none none
// Usage: @exits [obvious]
who = valid(caller_perms()) ? caller_perms() | player;
obvious = args && length(args) == 1 && index("obvious", args[1]) == 1;
if (args && !obvious)
  $command_utils:explain_syntax(this, verb, args);
  return E_ARGS;
endif
if (obvious || !this:can_read_exits(who))
  exits = this:obvious_exits();
  player:tell("Obvious exits:  ", $string_utils:dname_list(exits, "none"), ".");
  // player:tell("Sorry, only the owner of a room may list its exits.");
elseif (!(exits = this:exits()))
  player:tell("This room has no conventional exits.");
else
  for exit in (exits)
    // xplat 2002.01.31 -- Erik's version of the 'nowhere' thing didn't really work, so I'm trying something slightly more elaborate.
    room = `exit.dest ! E_INVIND, E_PROPNF => #-1';
    room_name = valid(room) ? $string_utils:dname_and_number(room) | "nowhere";
    exit_namec = valid(exit) ? $string_utils:dnamec_and_number(exit) | tostr("An invalid exit (", exit, ")");
    player:tell(exit_namec, " leads to ", room_name, " via {", $string_utils:from_list(`exit.aliases ! E_INVIND => {}', ", "), "}.");
  endfor
endif
That object does not define that verb.
Object #267 does not define that verb, but its ancestor #3 does.
Last modified Fri May 23 22:08:13 1997 PDT by Xythian (#199) (on Waterpoint).
#3:"can_read_exits can_read_entrances" this none this
{who} = args;
return $perm_utils:controls(who, this) || $building_group:is_member(who);
THE BUILDING GROUP
==================

Members of this group can connect topography with less hassle.

Current members: Wizard.
Building Group (#192) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic admin group (#163).
-------------------------------- finished ---------------------------------
generic admin group (#163) [ readable ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
  #163:is_member                Core-Wizard (#184)   rxd    this none this
  #163:add_member               Core-Wizard (#184)   rxd    this none this
  #163:remove_member            Core-Wizard (#184)   rxd    this none this
  #163:@add*member              Core-Wizard (#184)   rxd    any at/to this
  #163:@rm*member               Core-Wizard (#184)   rx     any out of/from inside/from this
  #163:description              unknown hacker (#35) rxd    this none this
  #163:all_members              unknown hacker (#35) rxd    this none this
  #163:connected_members        unknown hacker (#35) rxd    this none this
  #163:member_list              unknown hacker (#35) rxd    this none this
  #163:members                  Core-Wizard (#184)   rxd    this none this
  #163:match_group              unknown hacker (#35) rxd    this none this
  #163:member_set               unknown hacker (#35) rxd    this none this
  #163:initialize               unknown hacker (#35) rxd    this none this
  #163:group_match_failed       Core-Wizard (#184)   rxd    this none this
  #163:new_member_voters        Core-Wizard (#184)   rxd    this none this
  #163:@vacation                unknown hacker (#35) rxd    any out of/from inside/from this
  #163:@return                  unknown hacker (#35) rxd    any at/to this
  #163:@incognito               unknown hacker (#35) rxd    any for/about this
  #163:@reveal                  unknown hacker (#35) rxd    any for/about this
  #163:controls                 unknown hacker (#35) rxd    this none this
  #163:help_text                unknown hacker (#35) rxd    this none this
  #163:init_for_core            Core-Wizard (#184)   rxd    this none this
  #163:nominate_for_core        unknown hacker (#35) rxd    this none this
  #163:"member_term members_term" unknown hacker (#35) rxd  this none this
  #163:help_topic               unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic admin group (#163) [ readable ]
  Owned by unknown hacker (#35).
  Child of Abstract class (#254).
.members                 unknown hack (#35)    r      {#2}
.leader                  unknown hack (#35)    r      #2
.subgroups               unknown hack (#35)    r      {}
.mail_recipient          unknown hack (#35)    r      #-1
.new_member_voter_groups unknown hack (#35)    r      {}
.vacationers             unknown hack (#35)    r      {}
.incognito               unknown hack (#35)    r      {}
-------------------------------- finished ---------------------------------
 members                 unknown hacker (#35)  r      {#2}
-------------------------------- finished ---------------------------------
-----
`HELP LOCK' AMBIGUOUS
=====================

Sorry, the topic `lock' is ambiguous.  I don't know which of the following topics you mean:

`help @lock'[1]         `help @lock_for_open'[2]
`help locking'[3]       

-----
LOCKING
=======

It is frequently useful to restrict the use of some object.  For example, one might want to keep people from using a particular exit unless they're carrying a bell, a book, and a candle.  Alternatively, one might allow anyone to use the exit unless they're carrying that huge golden coffin in the corner.  LambdaMOO supports a general locking mechanism designed to make such restrictions easy to implement, usually without any programming.

Every object supports a notion of being 'locked' with respect to certain other objects.  For example, the exit above might be locked for any object that was carrying the coffin object but unlocked for all other objects.  In general, if some object 'A' is locked for another object, 'B', then 'B' is usually prevented from using 'A'.  Of course, the meaning of 'use' in this context depends upon the kind of object.

The various standard classes of objects use locking as follows:

  o  rooms[1] and containers[2] refuse to allow any object inside them if they're locked for it.
  o  exits[3] refuse to transport any object that they're locked for.
  o  things[4] (including notes[5] and letters[6]) cannot be moved to locations that they're locked for.

There are two sides to locking:

  o  How is it specified whether one object is locked for another one?
  o  What is the effect of an object being locked?

Note that these two questions are entirely independent: one could invent a brand-new way to specify locking, but the effect of an exit being locked would be unchanged.

[Note to programmers: the interface between these two sides is the verb x:is_unlocked_for(y), which is called by x to determine if it is locked for the object y.  The way in which 'is_unlocked_for' is implemented is entirely independent of the ways in which x uses its results.  Note that you can play on either side of this interface with your own objects, either defining new implementations of 'is_unlocked_for' that match your particular circumstances or having your objects interpret their being locked in new ways.]

There is a default way to specify locks on objects; the following help topics cover the relevant commands:

@lock[7]
      setting a lock on an object
@unlock[8]
      clearing the lock on an object

You now have Generic Achievement (aka chievo:achievement) with object number #445 and parent root class (#1).
You see no "achie" here.
Your current object is now #445.
The Generic Achievement has one alias: chievo:achievement.
Name of #445 (Generic Achievement) is unchanged, with aliases {"Generic Achievement"}.
Alias "chievo" added to Generic Achievement(#445).
Aliases for Generic Achievement(#445) are now {"Generic Achievement", "chievo"}
Alias "achievement" added to Generic Achievement(#445).
Aliases for Generic Achievement(#445) are now {"Generic Achievement", "chievo", "achievement"}
Verb added [1] (0).
Property added with value 0.
=> {}
Now programming Generic Achievement:is_unlocked_for[1](0).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
You now have Tested Generic Achievement with object number #448 and parent Generic Achievement (#445).
Moved.
Your current object is now #448.
Moved.
The Northern Entrance
An elevated portico framing the main entrance at the northern front of the Manor. A flight of marble stairs leads down to the northern drive, and a smaller flight to the west leads to the port-cochere.  A pair of massive oak double doors bar the entrance, inscribed with the family crest.  Through the tracery windows, you can catch a glimpse of the vestibule inside.
South (#283) leads to the North Vestibule (#70) via {south, s}.
The tracery windows (#249) leads to the North Vestibule (#70) via {tracery windows, windows}.
Locked south to this key:
  #448[Tested Generic Achievement]
You can't go that way.
=> {}
=> {#243}
You can't go that way.
=> 1
-----
LOCKING
=======

It is frequently useful to restrict the use of some object.  For example, one might want to keep people from using a particular exit unless they're carrying a bell, a book, and a candle.  Alternatively, one might allow anyone to use the exit unless they're carrying that huge golden coffin in the corner.  LambdaMOO supports a general locking mechanism designed to make such restrictions easy to implement, usually without any programming.

Every object supports a notion of being 'locked' with respect to certain other objects.  For example, the exit above might be locked for any object that was carrying the coffin object but unlocked for all other objects.  In general, if some object 'A' is locked for another object, 'B', then 'B' is usually prevented from using 'A'.  Of course, the meaning of 'use' in this context depends upon the kind of object.

The various standard classes of objects use locking as follows:

  o  rooms[1] and containers[2] refuse to allow any object inside them if they're locked for it.
  o  exits[3] refuse to transport any object that they're locked for.
  o  things[4] (including notes[5] and letters[6]) cannot be moved to locations that they're locked for.

There are two sides to locking:

  o  How is it specified whether one object is locked for another one?
  o  What is the effect of an object being locked?

Note that these two questions are entirely independent: one could invent a brand-new way to specify locking, but the effect of an exit being locked would be unchanged.

[Note to programmers: the interface between these two sides is the verb x:is_unlocked_for(y), which is called by x to determine if it is locked for the object y.  The way in which 'is_unlocked_for' is implemented is entirely independent of the ways in which x uses its results.  Note that you can play on either side of this interface with your own objects, either defining new implementations of 'is_unlocked_for' that match your particular circumstances or having your objects interpret their being locked in new ways.]

There is a default way to specify locks on objects; the following help topics cover the relevant commands:

@lock[7]
      setting a lock on an object
@unlock[8]
      clearing the lock on an object

#7:"invoke" this none this
if (typeof(this.obvious) == LIST)
  this.obvious = setadd(this.obvious, player);
endif
this:move(player);
Last modified Sat Nov 17 21:46:31 2007 PST by Xplat (#4014) (on Waterpoint).
#7:"move" (what)
start = what.location;
if (start != this.source)
  what:tell("You can't go that way.");
  return;
endif
unlocked = this:is_unlocked_for(what);
if (typeof(dest = this.dest) == LIST)
  dest = dest[1]:create(listdelete(dest, 1));
endif
if (unlocked)
  dest:bless_for_entry(what);
endif
start:broadcast_event_move_by_exit_attempted(what, this);
dest:broadcast_event_move_by_exit_attempted(what, this);
if (unlocked && dest:accept(what))
  if (msg = this:leave_msg(what))
    what:tell_lines(msg);
  endif
  what:moveto(dest);
  start:broadcast_event_move_by_exit_completed(what, this);
  what.location:broadcast_event_move_by_exit_completed(what, this);
  if (what.location != start || dest == start)
    // Don't print oleave messages if WHAT didn't actually go anywhere...
    // Unless the exit is actually a loop...
    msg = this:oleave_msg(what) || this:defaulting_oleave_msg(what);
    start:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg || what:verb_sub("has") + " left.");
  endif
  if (what.location == dest)
    // Don't print arrive messages if WHAT didn't really end up there...
    if (msg = this:arrive_msg(what))
      what:tell_lines(msg);
    endif
    msg = this:oarrive_msg(what) || this:defaulting_oarrive_msg(what);
    what.location:announce_all_but({what}, this.prefix_name ? what:inamec() + " " | "", msg || what:verb_sub("has") + " arrived.");
    this:sweep_for_followers(what);
  endif
else
  start:broadcast_event_move_by_exit_failed(what, this);
  what.location:broadcast_event_move_by_exit_failed(what, this);
  if (msg = this:nogo_msg(what))
    what:tell_lines(msg);
  else
    what:tell("You can't go that way.");
  endif
  if (msg = this:onogo_msg(what))
    what.location:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg);
  endif
endif
// Copied from generic exit (#7):move by Ken (#75) Tue Nov  7 19:12:28 1995 CST
// Copied from generic exit (#7):move(old) by Ken (#75) Tue Nov  7 19:32:34 1995 CST
=> #283 (south)
#-1:Input to EVAL, line 4:  Verb not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
You can't go that way.
=> 0
#7:move (this == #283), line 1:  Range error
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Object #283 does not define that verb, but its ancestor #7 does.
#7:"invoke" this none this
if (typeof(this.obvious) == LIST)
  this.obvious = setadd(this.obvious, player);
endif
this:move(player);
You can't go that way.
=> 0
Last modified Sat Nov 17 21:46:31 2007 PST by Xplat (#4014) (on Waterpoint).
#7:"move" (what)
start = what.location;
if (start != this.source)
  what:tell("You can't go that way.");
  return;
endif
unlocked = this:is_unlocked_for(what);
if (typeof(dest = this.dest) == LIST)
  dest = dest[1]:create(listdelete(dest, 1));
endif
if (unlocked)
  dest:bless_for_entry(what);
endif
start:broadcast_event_move_by_exit_attempted(what, this);
dest:broadcast_event_move_by_exit_attempted(what, this);
if (unlocked && dest:accept(what))
  if (msg = this:leave_msg(what))
    what:tell_lines(msg);
  endif
  what:moveto(dest);
  start:broadcast_event_move_by_exit_completed(what, this);
  what.location:broadcast_event_move_by_exit_completed(what, this);
  if (what.location != start || dest == start)
    // Don't print oleave messages if WHAT didn't actually go anywhere...
    // Unless the exit is actually a loop...
    msg = this:oleave_msg(what) || this:defaulting_oleave_msg(what);
    start:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg || what:verb_sub("has") + " left.");
  endif
  if (what.location == dest)
    // Don't print arrive messages if WHAT didn't really end up there...
    if (msg = this:arrive_msg(what))
      what:tell_lines(msg);
    endif
    msg = this:oarrive_msg(what) || this:defaulting_oarrive_msg(what);
    what.location:announce_all_but({what}, this.prefix_name ? what:inamec() + " " | "", msg || what:verb_sub("has") + " arrived.");
    this:sweep_for_followers(what);
  endif
else
  start:broadcast_event_move_by_exit_failed(what, this);
  what.location:broadcast_event_move_by_exit_failed(what, this);
  if (msg = this:nogo_msg(what))
    what:tell_lines(msg);
  else
    what:tell("You can't go that way.");
  endif
  if (msg = this:onogo_msg(what))
    what.location:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg);
  endif
endif
// Copied from generic exit (#7):move by Ken (#75) Tue Nov  7 19:12:28 1995 CST
// Copied from generic exit (#7):move(old) by Ken (#75) Tue Nov  7 19:32:34 1995 CST
Object #7 does not define that verb, but its ancestor #1 does.
#1:"is_unlocked_for" this none this
return this.key == 0 || $lock_utils:eval_key(this.key, args[1]);
=> 0
Last modified Sun Jun  1 00:14:46 1997 PDT by Xythian (#199) (on Waterpoint).
#48:"eval_key" (key, who)
type = typeof(key);
if (!(type in {LIST, OBJ}))
  return 1;
elseif (typeof(key) == OBJ)
  if ($object_utils:isa(key, $admin_group))
    return key:is_member(who);
  else
    return who == key || $object_utils:contains(who, key);
  endif
endif
op = key[1];
if (op == "!")
  return !this:eval_key(key[2], who);
elseif (op == "?")
  return key[2]:is_unlocked_for(who);
elseif (op == "&&")
  return this:eval_key(key[2], who) && this:eval_key(key[3], who);
elseif (op == "||")
  return this:eval_key(key[2], who) || this:eval_key(key[3], who);
else
  return 1 / 0;
endif
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> #448 (Tested Generic Achievement)
lock utilities (#48) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #48:init_scanner             Core-Wizard (#184)   rxd    this none this
   #48:scan_token               Core-Wizard (#184)   rxd    this none this
   #48:canonicalize_spaces      Core-Wizard (#184)   rxd    this none this
   #48:parse_keyexp             Core-Wizard (#184)   rxd    this none this
   #48:parse_E                  Core-Wizard (#184)   rxd    this none this
   #48:parse_A                  Core-Wizard (#184)   rxd    this none this
   #48:eval_key                 Core-Wizard (#184)   rxd    this none this
   #48:match_object             Core-Wizard (#184)   rxd    this none this
   #48:unparse_key              Core-Wizard (#184)   rxd    this none this
   #48:eval_key_new             Core-Wizard (#184)   rxd    this none this
   #48:parse_A_new              Core-Wizard (#184)   rxd    this none this
   #48:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Your current object is now #445.
Syntax error in initial value:  `_' unexpected
Property added with value #445.
#$#dns-org-mud-moo-simpleedit-content 269516662 reference: "#48:eval_key (key, who)" name: "MOO verb: #48:eval_key (key, who)" type: moo-code content*: "" _data-tag: 98833942850
#$#* 98833942850 content: type = typeof(key);
#$#* 98833942850 content: if (!(type in {LIST, OBJ}))
#$#* 98833942850 content:   return 1;
#$#* 98833942850 content: elseif (typeof(key) == OBJ)
#$#* 98833942850 content:   if ($object_utils:isa(key, $admin_group))
#$#* 98833942850 content:     return key:is_member(who);
#$#* 98833942850 content:   else
#$#* 98833942850 content:     return who == key || $object_utils:contains(who, key);
#$#* 98833942850 content:   endif
#$#* 98833942850 content: endif
#$#* 98833942850 content: op = key[1];
#$#* 98833942850 content: if (op == "!")
#$#* 98833942850 content:   return !this:eval_key(key[2], who);
#$#* 98833942850 content: elseif (op == "?")
#$#* 98833942850 content:   return key[2]:is_unlocked_for(who);
#$#* 98833942850 content: elseif (op == "&&")
#$#* 98833942850 content:   return this:eval_key(key[2], who) && this:eval_key(key[3], who);
#$#* 98833942850 content: elseif (op == "||")
#$#* 98833942850 content:   return this:eval_key(key[2], who) || this:eval_key(key[3], who);
#$#* 98833942850 content: else
#$#* 98833942850 content:   return 1 / 0;
#$#* 98833942850 content: endif
#$#: 98833942850
#48:"eval_key_new" (key, who)
type = typeof(key);
if (!(type in {LIST, OBJ}))
  return 1;
elseif (typeof(key) == OBJ)
  return who == key || $object_utils:contains(who, key);
endif
op = key[1];
if (op == "!")
  return !this:eval_key(key[2], who);
elseif (op == "?")
  return key[2]:is_unlocked_for(who);
elseif (op == "&&")
  return this:eval_key(key[2], who) && this:eval_key(key[3], who);
elseif (op == "||")
  return this:eval_key(key[2], who) || this:eval_key(key[3], who);
elseif (op == ".")
  if ($object_utils:has_property(who, key[2]) && who.(key[2]))
    return 1;
  else
    for thing in ($object_utils:all_contents(who))
      if ($object_utils:has_property(thing, key[2]) && thing.(key[2]))
        return 1;
      endif
    endfor
  endif
  return 0;
elseif (op == ":")
  if ($object_utils:has_verb(who, key[2]) && who:(key[2])())
    return 1;
  else
    for thing in ($object_utils:all_contents(who))
      if ($object_utils:has_verb(thing, key[2]) && thing:(key[2])())
        return 1;
      endif
    endfor
  endif
  return 0;
else
  return 1 / 0;
endif
Searching for core verbs containing the string ":eval_key_new" ...


Total: 0 verbs.
lock utilities (#48) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
-------------------------------- finished ---------------------------------
lock utilities (#48) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #48:init_scanner             Core-Wizard (#184)   rxd    this none this
   #48:scan_token               Core-Wizard (#184)   rxd    this none this
   #48:canonicalize_spaces      Core-Wizard (#184)   rxd    this none this
   #48:parse_keyexp             Core-Wizard (#184)   rxd    this none this
   #48:parse_E                  Core-Wizard (#184)   rxd    this none this
   #48:parse_A                  Core-Wizard (#184)   rxd    this none this
   #48:eval_key                 Core-Wizard (#184)   rxd    this none this
   #48:match_object             Core-Wizard (#184)   rxd    this none this
   #48:unparse_key              Core-Wizard (#184)   rxd    this none this
   #48:eval_key_new             Core-Wizard (#184)   rxd    this none this
   #48:parse_A_new              Core-Wizard (#184)   rxd    this none this
   #48:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Verb name changed.
Verb name changed.
Verb name changed.
That object has no verb matching that name + args.
Verb name changed.
#48:"parse_A_new" this none this
token = this:scan_token();
if (token == "(")
  exp = this:parse_E();
  if (typeof(exp) != STR && this:scan_token() != ")")
    return "Missing ')'";
  else
    return exp;
  endif
elseif (token == "!")
  exp = this:parse_A();
  if (typeof(exp) == STR)
    return exp;
  else
    return {"!", exp};
  endif
elseif (token == "?")
  next = this:scan_token();
  if (next in {":", ".", "(", ")", "!", "&&", "||", "?"})
    return "Missing object-name before '" + token + "'";
  elseif (next == "")
    return "Missing object-name at end of key expression";
  else
    what = this:match_object(next);
    if (typeof(what) == OBJ)
      return {"?", this:match_object(next)};
    else
      return what;
    endif
  endif
elseif (token in {":", "."})
  next = this:scan_token();
  if (next in {":", ".", "(", ")", "!", "&&", "||", "?"})
    return "Missing verb-or-property-name before '" + token + "'";
  elseif (next == "")
    return "Missing verb-or-property-name at end of key expression";
  elseif (typeof(next) != STR)
    return "Non-string verb-or-property-name at end of key expression";
  else
    return {token, next};
  endif
elseif (token in {"&&", "||"})
  return "Missing expression before '" + token + "'";
elseif (token == "")
  return "Missing expression at end of key expression";
else
  return this:match_object(token);
endif
Verb name changed.
Verb name changed.
Locked south to this key:
  ?#448[Tested Generic Achievement]
The North Vestibule
A smaller vestibule opening onto the Great Hall. The bones of the old castle are exposed here; the walls rough-hewn blocks of black basalt, the floor smoothly polished stone of the same.  A brown Persian rug lies soft underfoot.  Someone has artfully hung a detailed painting on a wall.  Some chaise longues sit under the windows.  A butler's desk is pushed up against one of the walls.  A demi-lune table stands between the doors, ready to receive calling cards.  A porter's chair stands in the middle of the room, facing the doors.  Some tracery windows are carved into the northern wall.
You see Wind-Up Duck, a microphone, and a How $staff will notice people rummaging here.
The Northern Entrance
An elevated portico framing the main entrance at the northern front of the Manor. A flight of marble stairs leads down to the northern drive, and a smaller flight to the west leads to the port-cochere.  A pair of massive oak double doors bar the entrance, inscribed with the family crest.  Through the tracery windows, you can catch a glimpse of the vestibule inside.
Unlocked south.
=> 0
*** Shutting down: shutdown() called by Crag (#243) ***
