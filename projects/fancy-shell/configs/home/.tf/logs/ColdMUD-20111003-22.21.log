 _       _             
(_) __ _| | ___   ___  
| |/ _` | |/ _ \ / _ \ 
| | (_| | | (_) | (_) |
|_|\__, |_|\___/ \___/ 
   |___/ coldmud/nunavut

        create name password            To create a new character
        connect name passsword          To connect to an existing character
        @quit                           To leave

!The user "Crag" does not exist.
*** Connected ***
Nowhere
You see nothing special.
!methodnf
!Method list_cmd not found.
!0
!opcode
!EXPR_MESSAGE
!methodnf
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
Enter text for method list_cmd.
Method compiled.
!methodnf
!Method formatted not found.
!0
!function
!find_method
!methodnf
!find_method
!#17
!#1
!28
!methodnf
!list_cmd
!#48
!#35
!43
!methoderr
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
!paramnf
!No such parameter ancname.
!0
!opcode
!GET_OBJ_VAR
!paramnf
!list_cmd
!#48
!#35
!130
!methoderr
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
Enter text for method list_cmd.
Method compiled.
@program #35.list_cmd
    arg dummy1, method, dummy2, name;
    var obj, anc, header, code;
    
    if (sender() != this())
        throw(~perm, "Sender not this.");
    
    // Find the object to show.
    method = tosym(method);
    catch ~objnf, ~perm {
        obj = .match_environment(name);
        anc = obj.find_method(method);
        code = anc.list_method(method);
    } with handler {
        switch (error()) {
            case ~objnf:
                .err("I don't see that here.");
            case ~perm:
                .err("Permission denied.");
        }
        return;
    }
    
    // List the method.
    header = toliteral(obj) + "." + tostr(method) + "() (defined on ";
    header = header + toliteral(anc) + "):";
    header = "@program " + toliteral(anc) + "." + tostr(method);
    .msg(header);
    .msg($list.indent("    ", code));
Enter text for method list_cmd.
Method compiled.
@program #35.list_cmd
    arg dummy1, method, dummy2, name;
    var obj, anc, header, code;
    
    if (sender() != this())
        throw(~perm, "Sender not this.");
    
    // Find the object to show.
    method = tosym(method);
    catch ~objnf, ~perm {
        obj = .match_environment(name);
        anc = obj.find_method(method);
        code = anc.list_method(method);
    } with handler {
        switch (error()) {
            case ~objnf:
                .err("I don't see that here.");
            case ~perm:
                .err("Permission denied.");
        }
        return;
    }
    
    // List the method.
    header = toliteral(obj) + "." + tostr(method) + "() (defined on ";
    header = header + toliteral(anc) + "):";
    header = "@program " + toliteral(anc) + "." + tostr(method);
    .msg(header);
    .msg($list.indent("    ", code));
    .msg(".");
.
--> 'programmer
!I don't see that here.
!I don't see that here.
Methods:
  init_root
  initialize
  uninitialize
  change_parents
  chparents
  will_inherit
  name
  name_str
  owners
  is_owned_by
  public
  fertile
  set_fertile
  set_name
  set_public
  set_owners
  add_owner
  del_owner
  spawn
  destroy
  add_parameter
  parameters
  del_parameter
  del_method
  methods
  parents
  children
  ancestors
  find_method
  find_next_method
  list_method
  compile
  show
  has_ancestor
  eval
--> "$programmer"
Enter text for method list_cmd.
Method compiled.
@program $programmer.list_cmd
    arg dummy1, method, dummy2, name;
    var obj, anc, header, code;
    
    if (sender() != this())
        throw(~perm, "Sender not this.");
    
    // Find the object to show.
    method = tosym(method);
    catch ~objnf, ~perm {
        obj = .match_environment(name);
        anc = obj.find_method(method);
        code = anc.list_method(method);
    } with handler {
        switch (error()) {
            case ~objnf:
                .err("I don't see that here.");
            case ~perm:
                .err("Permission denied.");
        }
        return;
    }
    
    // List the method.
    header = toliteral(obj) + "." + tostr(method) + "() (defined on ";
    header = header + toliteral(anc) + "):";
    header = "@program " + anc.name_str() + "." + tostr(method);
    .msg(header);
    .msg($list.indent("    ", code));
    .msg(".");
.
!I don't understand that.
!I don't understand that.
!I don't understand that.
--> $help_node
Methods:
  init_help_node
  uninit_help_node
  title
  set_title
  invalidate_menu
  upnode
  subnodes
  set_upnode
  add_subnode
  del_subnode
  path
  brief
  set_brief
  text
  footnote
  match_menu
  parse_line
  set_text
  create_subnode
!I don't understand that.
!I don't understand that.
--> [$admin_1, $admin, $programmer, $builder, $user, $proto_user, $person, $located, $container, $vr, $described, $has_verbs, $has_commands, $root]
!div in opcode '/: Attempt to divide 1 by zero.
!type
!'tmp_eval must be string.
!0
!opcode
!+
!type
!report_traceback
!#48
!#33
!262
!methoderr
!eval_cmd
!#48
!#35
!108
!methoderr
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
Enter text for method formatted.
Method compiled.
!range in opcode 'INDEX: Index (0) is less than one.
!type
!'formatted must be string.
!0
!opcode
!+
!type
!report_traceback
!#48
!#33
!262
!methoderr
!eval_cmd
!#48
!#35
!108
!methoderr
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
Enter text for method formatted.
Method compiled.
!range in opcode 'INDEX: Index (4) is greater than length (3)
!type
!'formatted must be string.
!0
!opcode
!+
!type
!report_traceback
!#48
!#33
!262
!methoderr
!eval_cmd
!#48
!#35
!108
!methoderr
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
@program $programmer.parse_command
    arg str;
    var err;
    
    if (!.is_owned_by(sender()))
        throw(~perm, "Sender not an owner.");
    
    // Catch errors and display a stack trace.
    catch any {
        if (programming)
            .programming_line(str);
        else
            return pass(str);
    } with handler {
        for err in (traceback())
            .err(err);
    }
.
!Line 1: syntax error
!Line 1: syntax error
--> [[~div, "Attempt to divide 1 by zero.", 0], ['opcode, '/], [~div, 'tmp_eval, $admin_1, $admin_1, 6]]
!range in opcode 'INDEX: Index (4) is greater than length (3)
!type
!'formatted must be string.
!0
!opcode
!+
!type
!report_traceback
!#48
!#33
!262
!methoderr
!eval_cmd
!#48
!#35
!108
!methoderr
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
Enter text for method formatted.
Method compiled.
--> ["Caught error ~div (Attempt to divide 1 by zero.)", "    Extra data was: 0", "    tb[2]      was: ['opcode, '/]", "  $admin_1.tmp_eval (on $admin_1): ~div"]
Caught error ~div (Attempt to divide 1 by zero.)
    Extra data was: 0
    tb[2]      was: ['opcode, '/]
  $admin_1.tmp_eval (on $admin_1): ~div
--> $admin_1
Caught error ~div (Attempt to divide 1 by zero.)
    Extra data was: 0
    tb[2]      was: ['opcode, '/]
  $admin_1.tmp_eval (on $admin_1): ~div
!I don't understand that.
!I don't understand that.
!I don't understand that.
!I don't understand that.
!I don't understand that.
!I don't understand that.
Enter text for method log_traceback.
Method compiled.
!div in opcode '/: Attempt to divide 1 by zero.
!type
!'tmp_eval must be string.
!0
!opcode
!+
!type
!report_traceback
!#48
!#33
!262
!methoderr
!eval_cmd
!#48
!#35
!108
!methoderr
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
Enter text for method report_traceback.
!Line 9: syntax error
Enter text for method report_traceback.
Method compiled.
Caught error ~div (Attempt to divide 1 by zero.)
    Extra data was: 0
    tb[2]      was: ['opcode, '/]
  $admin_1.tmp_eval (on $admin_1): ~div
  $admin_1.eval (on $root): ~methoderr
Enter text for method formatted.
Method compiled.
--> "[]"
--> "[[]]"
--> "'/"
!methodnf
!Method unparse not found.
!0
!opcode
!MESSAGE
!methodnf
!unparse
!#16
!#16
!240
!methoderr
!eval_cmd
!#48
!#35
!140
!methoderr
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
--> $root
--> "<#1, []>"
Caught error ~type (Cannot search for 1 in #[[1, 2]].)
    Extra data was: 0
    tb[2]      was: ['opcode, 'IN]
  $admin_1.tmp_eval (on $admin_1): ~type
  $root.eval (on $admin_1): ~methoderr
--> 1
!Line 1: Unknown function length.
!Line 1: Unknown function str_len.
!I don't understand that.
User Name          On For Idle  Doing
Crag                01:55   0s  
One user logged in.
@program $user.who_cmd
    arg dummy;
    var user, seconds, namestr, constr, idlestr, n, doing;
    
    if (sender() != this())
        throw(~perm, "Sender not this.");
    .msg("User Name          On For Idle  " + $sys.doing_poll());
    for user in ($user_db.connected_users()) {
        namestr = pad(user.vr_name(), 14) + "  ";
    
        // Put together the string for connect time.
        seconds = time() - user.connected_at();
        if (seconds > 86400) {
            constr = tostr(seconds / 86400);
            constr = constr + "d";
        } else {
            constr = "";
        }
        constr = pad(constr, -3);
        seconds = seconds % 86400;
        constr = constr + " " + pad(tostr(seconds / 3600), -2, "0");
        constr = constr + ":" + pad(tostr(seconds % 3600 / 60), -2, "0");
    
        // Put together the string for idle time.
        seconds = time() - user.last_command_at();
        if (seconds > 86400)
            idlestr = tostr(seconds / 86400) + "d";
        else if (seconds > 3600)
            idlestr = tostr(seconds / 3600) + "h";
        else if (seconds > 60)
            idlestr = tostr(seconds / 60) + "m";
        else
            idlestr = tostr(seconds) + "s";
        idlestr = pad(idlestr, -3) + "  ";
    
        // Get doing and truncate if neccessary.
        doing = user.doing();
        if (strlen(doing) > 46)
            doing = substr(doing, 1, 46);
    
        // Display the resulting line.
        .msg(namestr + constr + "  " + idlestr + doing);
    }
    n = listlen($user_db.connected_users());
    if (n == 1)
        .msg("One user logged in.");
    else
        .msg(tostr(n) + " users logged in.");
.
@program $list._sort
    arg lst, x, y;
    var p, i, j;
    
    switch (y - x + 1) {
        case 0, 1:
            return lst;
        case 2:
            if (lst[x] <= lst[y])
                return lst;
            p = lst[x];
            lst = replace(lst, x, lst[y]);
            lst = replace(lst, y, p);
            return lst;
        case 3:
            if (lst[x] <= lst[x + 1]) {
                if (lst[x + 1] <= lst[y]) {
                } else if (lst[x] <= lst[y]) {
                    p = lst[x + 1];
                    lst = replace(lst, x + 1, lst[y]);
                    lst = replace(lst, y, p);
                } else {
                    p = lst[x];
                    lst = replace(lst, x, lst[y]);
                    lst = replace(lst, y, lst[x + 1]);
                    lst = replace(lst, x + 1, p);
                }
            } else if (lst[x] <= lst[y]) {
                p = lst[x];
                lst = replace(lst, x, lst[x + 1]);
                lst = replace(lst, x + 1, p);
            } else if (lst[x + 1] <= lst[y]) {
                p = lst[x];
                lst = replace(lst, x, lst[x + 1]);
                lst = replace(lst, x + 1, lst[y]);
                lst = replace(lst, y, p);
            } else {
                p = lst[x];
                lst = replace(lst, x, lst[y]);
                lst = replace(lst, y, p);
            }
            return lst;
    }
    p = lst[x];
    i = x;
    j = y;
    while (1) {
        while (i < j && p <= lst[j])
            j = j - 1;
        if (i == j)
            break;
        lst = replace(lst, i, lst[j]);
        i = i + 1;
        while (i < j && p >= lst[i])
            i = i + 1;
        if (i == j)
            break;
        lst = replace(lst, j, lst[i]);
        j = j - 1;
    }
    lst = replace(lst, i, p);
    lst = ._sort(lst, x, i - 1);
    lst = ._sort(lst, i + 1, y);
    return lst;
.
!Line 1: syntax error
--> "'/"
!Line 1: syntax error
--> "'/foo"
--> "'\"/f\\\"oo\""
'"/f\"oo"
--> $admin_1
--> '123
Caught error ~paramnf (No such parameter bar.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'GET_OBJ_VAR]
  $admin_1.tmp_eval (on $admin_1): ~paramnf
  $root.eval (on $admin_1): ~methoderr
!Line 1: syntax error
--> ''
--> '_
!Line 1: syntax error
--> '-
--> '+
!Line 1: syntax error
!Line 1: syntax error
--> '""
Caught error ~namenf (Can't find object name foo.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'NAME]
  $admin_1.tmp_eval (on $admin_1): ~namenf
  $root.eval (on $admin_1): ~methoderr
--> ~foo
--> ~1
!Line 1: syntax error
--> ~-
!methodnf
!Method create_cmd not found.
!0
!function
!find_method
!methodnf
!find_method
!#48
!#1
!28
!methodnf
!list_cmd
!#48
!#35
!43
!methoderr
!parse_command
!#48
!#33
!141
!methoderr
!parse_command
!#48
!#35
!40
Enter text for method parse_command.
Method compiled.
Caught error ~paramnf (No such parameter programming.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'GET_OBJ_VAR]
  $admin_1.parse_command (on $admin_1): ~paramnf
Caught error ~paramnf (No such parameter programming.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'GET_OBJ_VAR]
  $admin_1.parse_command (on $admin_1): ~paramnf
Caught error ~paramnf (No such parameter programming.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'GET_OBJ_VAR]
  $admin_1.parse_command (on $admin_1): ~paramnf
Caught error ~paramnf (No such parameter programming.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'GET_OBJ_VAR]
  $admin_1.parse_command (on $admin_1): ~paramnf
Caught error ~paramnf (No such parameter programming.)
    Extra data was: 0
    tb[2]      was: ['opcode, 'GET_OBJ_VAR]
  $admin_1.parse_command (on $admin_1): ~paramnf
--> $admin_1
Enter text for method parse_command.
