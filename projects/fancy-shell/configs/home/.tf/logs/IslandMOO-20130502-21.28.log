Welcome to IslandMOO

Have a pleasant visit.
*** Connected ***
#$#mcp version: 2.1 to: 2.1
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the doors to the foyer.  Across the room, some setees are drawn up in a semi-circle around a tea table.  Opposite the settees, a large marble fireplace occupies the eastern wall. Around it are drawn up a couple armchairs.
stormagnet is here, asleep.
Last connected Fri Apr 26 17:24:01 2013 PDT from localhost
#$#mcp-negotiate-can 241151115 package: mcp-negotiate min-version: 1.0 max-version: 2.0
#$#mcp-negotiate-can 241151115 package: mcp-cord min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-can 241151115 package: dns-org-mud-moo-simpleedit min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-end 241151115
stormagnet's friends arrive to cart her off to bed.
The Music Room
You see nothing special.
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           Music Room                    0 seconds                         

Total: 1 person, who has been active recently.
You open the doors to the east.
The Front Parlour
A room set aside for receiving callers of a more general or unexpected variety. Well appointed, but its formality renders it a bit impersonal.  An oriental rug lies soft underfoot.  A bureau a gradin stands off to the side of the room.  A desk chair is pulled up next to the desk.  A sideboard stands against the wall next to the doors to the foyer.  Across the room, some setees are drawn up in a semi-circle around a tea table.  Opposite the settees, a large marble fireplace occupies the eastern wall. Around it are drawn up a couple armchairs.
Your current object is $mirror, a mirror (#565).
Your current object is now $mirror (#565).
Your current object is now Class (#562).
The Class(#562) has 2 kids.
Delegate (#270)   Delegator (#269)
Class (#562) [ readable ]
  Child of Blank Root (#560).
  Location Crag (#243).
  #562:audit_interfaces         Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Class (#562) [ readable ]
  Child of Blank Root (#560).
  Location Crag (#243).
.interfaces              Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
The Class(#562) has 2 kids.
Delegate (#270)   Delegator (#269)
Your current object is now #269.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_method    Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Your current object is now #270.
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:@addproperty             Wizard (#2)          r d    any any any
  #270:@addmethod               Wizard (#2)          r d    any any any
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
.__d_properties          Crag (#243)           r c    {}
.__d_methods             Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Property name changed.
#270:"@addmethod" any any any
That verb has not been programmed.
Verb #270:@addmethod [6] {any any any} removed.
#270:"@addproperty" any any any
That verb has not been programmed.
Verb #270:@addproperty [5] {any any any} removed.
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb name changed.
#270:"__d_match_message" ()
That verb has not been programmed.
No such verb, "_"
-------------------------------- finished ---------------------------------
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_method    Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Your current object is now #269.
Last modified Mon Apr 29 03:29:25 2013 PDT by Crag (#243).
#269:"__d_proxied_methods" this none this
// This method proxies for delegates. Their methods are added as aliases for this one.
// When a call comes in, all delegates are given a chance to respond to the message.
// TODO: figure out correct permissions stuff
// 
// match = this:__d_match_message(verb, args, callers());
for didx in [1..length(this.__d_delegates)]
  d = this.__d_delegates[didx];
  id = this.__d_delegate_ids[didx];
  if (match = d:__d_match_message(this, id, verb, @args))
    return match[1]:(match[2])(@match[3..$]);
  endif
endfor
raise(E_VERBNF, "No delegate found for " + tostr(this) + ":" + verb + "(...)");
-----
VERB_INFO()
===========

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

-----
CALLERS()
=========

Syntax:  callers ([<include-line-numbers>])   => list

Returns information on each of the verbs and built-in functions currently waiting to resume execution in the current task.  When one verb or function calls another verb or function, execution of the caller is temporarily suspended, pending the called verb or function returning a value.  At any given time, there could be several such pending verbs and functions: the one that called the currently executing verb, the verb or function that called that one, and so on.  The result of `callers()' is a list, each element of which gives information about one pending verb or function in the following format:

    {<this>, <verb-name>, <programmer>, <verb-loc>, <player>, <line-number>}

For verbs, <this> is the initial value of the variable `this' in that verb, <verb-name> is the name used to invoke that verb, <programmer> is the player with whose permissions that verb is running, <verb-loc> is the object on which that verb is defined, <player> is the initial value of the variable `player' in that verb, and <line-number> indicates which line of the verb's code is executing.  The <line-number> element is included only if the <include-line-numbers> argument was provided and true.

For functions, <this>, <programmer>, and <verb-loc> are all `#-1', <verb-name> is the name of the function, and <line-number> is an index used internally to determine the current state of the built-in function.  The simplest correct test for a built-in function entry is

    (VERB-LOC == #-1  &&  PROGRAMMER == #-1  &&  VERB-NAME != "")

The first element of the list returned by `callers()' gives information on the verb that called the currently-executing verb, the second element describes the verb that called that one, and so on.  The last element of the list describes the first verb called in this task.

Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_method    Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
You see no "$generic_utils" here.
string utilities (#18)   generic utilities (#146)   Abstract class (#254)   root class (#1)
,core_names              unknown hacker (#35)  r c    {}
-------------------------------- finished ---------------------------------
You see no "create #146 called Delegation Utilities" here.
You now have Delegation Utilities (aka delegation_utils) with object number #247 and parent generic utilities (#146).
The created object is now your current object.
#247:add_delegate code set.
#247:remove_delegate code set.
Last modified Mon Apr 29 03:43:08 2013 PDT by Crag (#243).
#269:"__d_get_prop" this none this
// :__d_get_prop(id, name) => value || E_PROPNF
{id, name} = args;
return this.("__d_" + tostr(id) + "_" + name);
Last modified Sun Apr 28 17:05:51 2013 PDT by Crag (#243).
#269:"__d_add_delegate" this none this
// :__d_add_delegate(delegate)
//   => raises errors on failure, otherwise returns id of delegate
// Add delegate to this. Delegate should implement $interface.delegate.
// Adds delegate:__d_methods() and delegate:__d_properties() to this.
// TODO: check permissions
// TODO: maybe break this method into multiple sub-methods
// TODO: Should we check with other delegates to see if they will clash?
{delegate} = args;
if (!$interface.delegate:implemented_by(delegate))
  return 0;
endif
methods = delegate:__d_methods();
properties = delegate:__d_properties();
for m in (methods)
  if (m in verbs(this))
    return 0;
  endif
endfor
id = this.__d_id_max = this.__d_id_max + 1;
this.__d_delegates = {@this.__d_delegates, delegate};
this.__d_delegates = {@this.__d_delegates, id};
for m in (methods)
  this:__d_add_proxied_method(m);
endfor
for p in (properties)
  {name, value, info} = p;
  name = "__d_" + tostr(id) + "_" + name;
  add_property(this, name, value, info);
endfor
Delegation Utilities (#247) [ readable ]
  Child of generic utilities (#146).
  Location Crag (#243).
  #247:add_delegate             Crag (#243)          rxd    this none this
  #247:remove_delegate          Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb #247:add_delegate [1] {this none this} removed.
Verb #247:remove_delegate [1] {this none this} removed.
Your current object is now #269.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_method   Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_method    Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb name changed.
Verb name changed.
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#269:__d_add_delegate this none this" name: "MOO verb: #269:__d_add_delegate this none this" type: moo-code content*: "" _data-tag: 248159444253
#$#* 248159444253 content: // :__d_add_delegate(delegate)
#$#* 248159444253 content: //   => raises errors on failure, otherwise returns id of delegate
#$#* 248159444253 content: // Add delegate to this. Delegate should implement $interface.delegate.
#$#* 248159444253 content: // Adds delegate:__d_methods() and delegate:__d_properties() to this.
#$#* 248159444253 content: // TODO: check permissions
#$#* 248159444253 content: // TODO: maybe break this method into multiple sub-methods
#$#* 248159444253 content: // TODO: Should we check with other delegates to see if they will clash?
#$#* 248159444253 content: {delegate} = args;
#$#* 248159444253 content: if (!$interface.delegate:implemented_by(delegate))
#$#* 248159444253 content:   return 0;
#$#* 248159444253 content: endif
#$#* 248159444253 content: methods = delegate:__d_methods();
#$#* 248159444253 content: properties = delegate:__d_properties();
#$#* 248159444253 content: for m in (methods)
#$#* 248159444253 content:   if (m in verbs(this))
#$#* 248159444253 content:     return 0;
#$#* 248159444253 content:   endif
#$#* 248159444253 content: endfor
#$#* 248159444253 content: id = this.__d_id_max = this.__d_id_max + 1;
#$#* 248159444253 content: this.__d_delegates = {@this.__d_delegates, delegate};
#$#* 248159444253 content: this.__d_delegates = {@this.__d_delegates, id};
#$#* 248159444253 content: for m in (methods)
#$#* 248159444253 content:   this:__d_add_proxied_method(m);
#$#* 248159444253 content: endfor
#$#* 248159444253 content: for p in (properties)
#$#* 248159444253 content:   {name, value, info} = p;
#$#* 248159444253 content:   name = "__d_" + tostr(id) + "_" + name;
#$#* 248159444253 content:   add_property(this, name, value, info);
#$#* 248159444253 content: endfor
#$#: 248159444253
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_verbs                Crag (#243)          rxd    this none this
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
-----
RAISE()
=======

Syntax:  raise (<code> [, str <message> [, <value>]])   => none

Raises <code> as an error in the same way as other MOO expressions, statements, and functions do.  <Message>, which defaults to the value of `tostr(<code>)', and <value>, which defaults to zero, are made available to any `try'-`except' statements that catch the error.  If the error is not caught, then <message> will appear on the first line of the traceback printed to the user.

-----
`HELP EXCEPT' NOT FOUND
=======================

Sorry, but no help is available on `except'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Error programming Delegator:__d_add_delegate[1](0).
Line 23:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
Last modified Sat May  4 14:33:48 2013 PDT by Crag (#243).
#269:"__d_add_delegate" this none this
// :__d_add_delegate(delegate)
//   => raises errors on failure, otherwise returns id of delegate
// Add delegate to this. Delegate should implement $interface.delegate.
// Adds delegate:__d_methods() and delegate:__d_properties() to this.
// TODO: check permissions
// TODO: maybe break this method into multiple sub-methods
// TODO: Should we check with other delegates to see if they will clash?
// TODO: maybe throw errors instead of returning 0?
{delegate} = args;
if (!$interface.delegate:implemented_by(delegate))
  return 0;
endif
if (!this:__d_can_add_delegate(delegate))
  return 0;
endif
id = this.__d_id_max = this.__d_id_max + 1;
try
  this.__d_delegates = {@this.__d_delegates, delegate};
  this.__d_delegates = {@this.__d_delegates, id};
  this:__d_add_properties(id, delegate);
  this:__d_add_proxies(id, delegate);
  delegate:__d_add_to_delegator(id, this);
except e (ANY)
  this:__d_delegate_leaving(delegate);
  raise(@e[1..3]);
endtry
// methods = delegate:__d_methods();
// properties = delegate:__d_properties();
// for m in (methods)
//   if (m in verbs(this))
//     return 0;
//   endif
// endfor
// for m in (methods)
//   this:__d_add_proxied_method(m);
// endfor
// for p in (properties)
//   {name, value, info} = p;
//   name = "__d_" + tostr(id) + "_" + name;
//   add_property(this, name, value, info);
// endfor
Your current object is a Delegator (#269).
Verb added [11] (10).
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_verb     Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_verb      Crag (#243)          rxd    this none this
  #269:__d_can_add_delegate     Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#269:__d_can_add_delegate ()" name: "MOO verb: #269:__d_can_add_delegate ()" type: moo-code content*: "" _data-tag: 1271740884254
#$#: 1271740884254
0 errors.
Verb programmed.
< stormagnet has connected.  Total: 2 >
stormagnet arrives from the West Foyer.
stormagnet drops a mantle.
stormagnet puts the mantle in the front parlour fireplace.
stormagnet drops an occasional table.
stormagnet drops a cabriole legs.
stormagnet gazes into a pier glass.
Last modified Sat May  4 14:35:35 2013 PDT by Crag (#243).
#269:"__d_can_add_delegate" this none this
// return false if there is any kind of interface collision between this and args[1]
return 1;
// not currently implemented :)
Last modified Sat May  4 14:33:48 2013 PDT by Crag (#243).
#269:"__d_add_delegate" this none this
// :__d_add_delegate(delegate)
//   => raises errors on failure, otherwise returns id of delegate
// Add delegate to this. Delegate should implement $interface.delegate.
// Adds delegate:__d_methods() and delegate:__d_properties() to this.
// TODO: check permissions
// TODO: maybe break this method into multiple sub-methods
// TODO: Should we check with other delegates to see if they will clash?
// TODO: maybe throw errors instead of returning 0?
{delegate} = args;
if (!$interface.delegate:implemented_by(delegate))
  return 0;
endif
if (!this:__d_can_add_delegate(delegate))
  return 0;
endif
id = this.__d_id_max = this.__d_id_max + 1;
try
  this.__d_delegates = {@this.__d_delegates, delegate};
  this.__d_delegates = {@this.__d_delegates, id};
  this:__d_add_properties(id, delegate);
  this:__d_add_proxies(id, delegate);
  delegate:__d_add_to_delegator(id, this);
except e (ANY)
  this:__d_delegate_leaving(delegate);
  raise(@e[1..3]);
endtry
// methods = delegate:__d_methods();
// properties = delegate:__d_properties();
// for m in (methods)
//   if (m in verbs(this))
//     return 0;
//   endif
// endfor
// for m in (methods)
//   this:__d_add_proxied_method(m);
// endfor
// for p in (properties)
//   {name, value, info} = p;
//   name = "__d_" + tostr(id) + "_" + name;
//   add_property(this, name, value, info);
// endfor
=> #269 (Delegator)
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_verb     Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_verb      Crag (#243)          rxd    this none this
  #269:__d_can_add_delegate     Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb added [12] (11).
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#269:__d_add_properties ()" name: "MOO verb: #269:__d_add_properties ()" type: moo-code content*: "" _data-tag: 681372894262
#$#: 681372894262
0 errors.
Verb programmed.
Verb added [13] (12).
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#269:__d_add_proxies ()" name: "MOO verb: #269:__d_add_proxies ()" type: moo-code content*: "" _data-tag: 1489937728263
#$#: 1489937728263
That object does not define that verb.
-----
VERB_INFO()
===========

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

-----
ADD_VERB()
==========

Syntax:  add_verb (obj <object>, list <info>, list <args>)   => none

Defines a new verb on the given <object>.  The new verb's owner, permission bits and name(s) are given by <info> in the same format as is returned by `verb_info()'.  The new verb's direct-object, preposition, and indirect-object specifications are given by <args> in the same format as is returned by `verb_args()'.  The new verb initially has the empty program associated with it; this program does nothing but return an unspecified value.

If <object> is not valid, or <info> does not specify a valid owner and well-formed permission bits and verb names, or <args> is not a legitimate syntax specification, then `E_INVARG' is raised.  If the programmer does not have write permission on <object> or if the owner specified by <info> is not the programmer and the programmer is not a wizard, then `E_PERM' is raised.

-----
SET_VERB_CODE()
===============

Syntax:  verb_code (obj <object>, str <verb-desc> [, <fully-paren> [, <indent>]])   => list
     set_verb_code (obj <object>, str <verb-desc>, list <code>)   => list

These functions get and set (respectively) the MOO-code program associated with the verb as specified by <verb-desc> on <object>.  The program is represented as a list of strings, one for each line of the program; this is the kind of value returned by `verb_code()' and expected as the third argument to `set_verb_code()'.  For `verb_code()', the expressions in the returned code are usually written with the minimum-necessary parenthesization; if <full-paren> is true, then all expressions are fully parenthesized.  Also for `verb_code()', the lines in the returned code are usually not indented at all; if <indent> is true, each line is indented to better show the nesting of statements.

If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_code()' (`set_verb_code()') raises `E_PERM'.  If the programmer is not, in fact. a programmer, then `E_PERM' is raised.

For `set_verb_code()', the result is a list of strings, the error messages generated by the MOO-code compiler during processing of <code>.  If the list is non-empty, then `set_verb_code()' did not install <code>; the program associated with the verb in question is unchanged.

=> "#243"
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
.__d_delegates           Crag (#243)           r c    {}
.__d_delegate_ids        Crag (#243)           r c    {}
.__d_id_max              Crag (#243)           r c    0
-------------------------------- finished ---------------------------------
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_verbs                Crag (#243)          rxd    this none this
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb name changed.
Verb added [6] (5).
0 errors.
Verb programmed.
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_verb     Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_verb      Crag (#243)          rxd    this none this
  #269:__d_can_add_delegate     Crag (#243)          rxd    this none this
  #269:__d_add_properties       Crag (#243)          rxd    this none this
  #269:__d_add_proxies          Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#269:__d_add_delegate this none this" name: "MOO verb: #269:__d_add_delegate this none this" type: moo-code content*: "" _data-tag: 6792761264
#$#* 6792761264 content: // :__d_add_delegate(delegate)
#$#* 6792761264 content: //   => raises errors on failure, otherwise returns id of delegate
#$#* 6792761264 content: // Add delegate to this. Delegate should implement $interface.delegate.
#$#* 6792761264 content: // Adds delegate:__d_methods() and delegate:__d_properties() to this.
#$#* 6792761264 content: // TODO: check permissions
#$#* 6792761264 content: // TODO: maybe break this method into multiple sub-methods
#$#* 6792761264 content: // TODO: Should we check with other delegates to see if they will clash?
#$#* 6792761264 content: // TODO: maybe throw errors instead of returning 0?
#$#* 6792761264 content: {delegate} = args;
#$#* 6792761264 content: if (!$interface.delegate:implemented_by(delegate))
#$#* 6792761264 content:   return 0;
#$#* 6792761264 content: endif
#$#* 6792761264 content: if (!this:__d_can_add_delegate(delegate))
#$#* 6792761264 content:   return 0;
#$#* 6792761264 content: endif
#$#* 6792761264 content: id = this.__d_id_max = this.__d_id_max + 1;
#$#* 6792761264 content: try
#$#* 6792761264 content:   this.__d_delegates = {@this.__d_delegates, delegate};
#$#* 6792761264 content:   this.__d_delegates = {@this.__d_delegates, id};
#$#* 6792761264 content:   this:__d_add_properties(id, delegate);
#$#* 6792761264 content:   this:__d_add_proxies(id, delegate);
#$#* 6792761264 content:   delegate:__d_add_to_delegator(id, this);
#$#* 6792761264 content: except e (ANY)
#$#* 6792761264 content:   this:__d_delegate_leaving(delegate);
#$#* 6792761264 content:   raise(@e[1..3]);
#$#* 6792761264 content: endtry
#$#* 6792761264 content: // methods = delegate:__d_methods();
#$#* 6792761264 content: // properties = delegate:__d_properties();
#$#* 6792761264 content: // for m in (methods)
#$#* 6792761264 content: //   if (m in verbs(this))
#$#* 6792761264 content: //     return 0;
#$#* 6792761264 content: //   endif
#$#* 6792761264 content: // endfor
#$#* 6792761264 content: // for m in (methods)
#$#* 6792761264 content: //   this:__d_add_proxied_method(m);
#$#* 6792761264 content: // endfor
#$#* 6792761264 content: // for p in (properties)
#$#* 6792761264 content: //   {name, value, info} = p;
#$#* 6792761264 content: //   name = "__d_" + tostr(id) + "_" + name;
#$#* 6792761264 content: //   add_property(this, name, value, info);
#$#* 6792761264 content: // endfor
#$#: 6792761264
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:__d_properties           Crag (#243)          rxd    this none this
  #270:__d_receive_proxied_call Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Warning:  Verb `__d_add_to_delegator' already defined on that object.
Verb added [7] (6).
That object does not define that verb.
Verb #270:__d_add_to_delegator [7] {this none this} removed.
0 errors.
Verb programmed.
Last modified Sun May  5 16:32:17 2013 PDT by Crag (#243).
#269:"__d_add_delegate" this none this
// :__d_add_delegate(delegate)
//   => raises errors on failure, otherwise returns id of delegate
// Add delegate to this. Delegate should implement $interface.delegate.
// Adds delegate:__d_methods() and delegate:__d_properties() to this.
// TODO: check permissions
// TODO: maybe break this method into multiple sub-methods
// TODO: Should we check with other delegates to see if they will clash?
// TODO: maybe throw errors instead of returning 0?
{delegate} = args;
if (!$interface.delegate:implemented_by(delegate))
  return 0;
endif
if (!this:__d_can_add_delegate(delegate))
  return 0;
endif
id = this.__d_id_max = this.__d_id_max + 1;
try
  this.__d_delegates = {@this.__d_delegates, delegate};
  this.__d_delegates = {@this.__d_delegates, id};
  this:__d_add_properties(id, delegate);
  this:__d_add_proxies(id, delegate);
  delegate:__d_add_to_delegator(id, this);
except e (ANY)
  this:__d_delegate_leaving(delegate);
  raise(@e[1..3]);
endtry
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_proxied_methods      Crag (#243)          rxd    this none this
  #269:__d_add_proxied_verb     Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_verb      Crag (#243)          rxd    this none this
  #269:__d_can_add_delegate     Crag (#243)          rxd    this none this
  #269:__d_add_properties       Crag (#243)          rxd    this none this
  #269:__d_add_proxies          Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Mon Apr 29 03:29:25 2013 PDT by Crag (#243).
#269:"__d_proxied_methods" this none this
// This method proxies for delegates. Their methods are added as aliases for this one.
// When a call comes in, all delegates are given a chance to respond to the message.
// TODO: figure out correct permissions stuff
// 
// match = this:__d_match_message(verb, args, callers());
for didx in [1..length(this.__d_delegates)]
  d = this.__d_delegates[didx];
  id = this.__d_delegate_ids[didx];
  if (match = d:__d_match_message(this, id, verb, @args))
    return match[1]:(match[2])(@match[3..$]);
  endif
endfor
raise(E_VERBNF, "No delegate found for " + tostr(this) + ":" + verb + "(...)");
Verb #269:__d_proxied_methods [8] {this none this} removed.
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#269:__d_add_proxies this none this" name: "MOO verb: #269:__d_add_proxies this none this" type: moo-code content*: "" _data-tag: 130043940265
#$#* 130043940265 content: {delegate} = args;
#$#* 130043940265 content: methods = delegate:__d_methods();
#$#* 130043940265 content: for m in (methods)
#$#* 130043940265 content:   add_verb(this, @m);
#$#* 130043940265 content:   set_verb_code(this, m[1][3], {"return " + tostr(delegate) + ":__d_receive_proxied_call(@args);"});
#$#* 130043940265 content: endfor
#$#: 130043940265
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:__d_properties           Crag (#243)          rxd    this none this
  #270:__d_receive_proxied_call Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#270:__d_receive_proxied_call ()" name: "MOO verb: #270:__d_receive_proxied_call ()" type: moo-code content*: "" _data-tag: 1329186518266
#$#: 1329186518266
Last modified Sun May  5 16:34:38 2013 PDT by Crag (#243).
#269:"__d_add_proxies" this none this
{id, delegate} = args;
methods = delegate:__d_methods();
for m in (methods)
  add_verb(this, @m);
  set_verb_code(this, m[1][3], {"return " + tostr(delegate) + ":__d_receive_proxied_call(id, @args);"});
endfor
0 errors.
Verb programmed.
Verb #270:__d_receive_proxied_call [6] {this none this} removed.
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#269:__d_add_proxies this none this" name: "MOO verb: #269:__d_add_proxies this none this" type: moo-code content*: "" _data-tag: 40879313267
#$#* 40879313267 content: {id, delegate} = args;
#$#* 40879313267 content: methods = delegate:__d_methods();
#$#* 40879313267 content: for m in (methods)
#$#* 40879313267 content:   add_verb(this, @m);
#$#* 40879313267 content:   set_verb_code(this, m[1][3], {"return " + tostr(delegate) + ":__d_receive_proxied_call(id, @args);"});
#$#* 40879313267 content: endfor
#$#: 40879313267
-----
VERB_INFO()
===========

Syntax:  verb_info (obj <object>, str <verb-desc>)              => list
     set_verb_info (obj <object>, str <verb-desc>, list <info>) => none

These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises `E_PERM'.  Verb info has the following form:

    {<owner>, <perms>, <names>}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  `set_verb_info()' raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises `E_PERM' if <owner> is not the programmer and the programmer is not a wizard.

-----
VERB_ARGS()
===========

Syntax:  verb_args (obj <object>, str <verb-desc>)              => list
     set_verb_args (obj <object>, str <verb-desc>, list <args>) => none

These two functions get and set (respectively) the direct-object, preposition, and indirect-object specifications for the verb as specified by <verb-desc> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_args()' (`set_verb_args()') raises `E_PERM'.  Verb args specifications have the following form:

    {<dobj>, <prep>, <iobj>}

where <dobj> and <iobj> are strings drawn from the set `"this"', `"none"', and `"any"', and <prep> is a string that is either `"none"', `"any"', or one of the prepositional phrases listed much earlier in the description of verbs in the first chapter.  This is the kind of value returned by `verb_args()' and expected as the third argument to `set_verb_args()'.  Note that for `set_verb_args()', <prep> must be only one of the prepositional phrases, not (as is shown in that table) a set of such phrases separated by `/' characters.  `set_verb_args' raises `E_INVARG' if any of the <dobj>, <prep>, or <iobj> strings is illegal.

    verb_args($container, "take")
                        =>   {"any", "out of/from inside/from", "this"}
    set_verb_args($container, "take", {"any", "from", "this"})

-----
`HELP VERBSTR' NOT FOUND
========================

Sorry, but no help is available on `verbstr'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP SYNTAX' NOT FOUND
=======================

Sorry, but no help is available on `syntax'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
PROGRAMMING
===========

MOO contains a rich programming language for the creation of interesting rooms, exits, and other objects.  Help is available on the following topics concerning programming in MOO:

language[1]
      a brief reference for the syntax and semantics of the MOO language
tasks[2]
      a brief description of MOO tasks and their resource limits

@property[3]
      adding a property to an object
@rmproperty[4]
      removing a property from an object

@verb[5]
      adding a verb to an object
@rmverb[6]
      removing a verb from an object
@args[7]
      changing the syntax of a verb
@copy[8]
      copying a verb from one object to another

@program[9]
      entering the program for a verb
@list[10]
      printing a listing of the program for a verb
@edit[11]
      editing verb code
eval[12]
      executing MOO statements and expressions without writing a verb

@show[13]
      looking at all the details of an object, a property, or a verb
@display[14]
      a different way to look at those details

@parents[15]
      listing the ancestors of an object
@kids[16]
      listing the children of an object
@chparent[17]
      changing the parent of an object

@contents[18]
      listing the contents of an object
@chmod[19]
      changing the permissions on an object, a property, or a verb
@rename[20]
      changing the name of a verb or object
@currentobject[21]
      specify an object to work with

-----
LANGUAGE
========

The MOO programming language is described in excruciating detail in the LambdaMOO Programmer's Manual, available for FTP from parcftp.xerox.com in the file pub/MOO/ProgrammersManual.txt.  The online help consists of a few quick reference guides here in the help system under the following topics:

statements[1]
      the syntax and semantics of the various kinds of MOO statements
expressions[2]
      the same for the various kinds of MOO expressions
functions[3]
      a list of the primitive functions available to MOO programs

-----
EXPRESSIONS
===========

The following kinds of expressions exist in the MOO programming language:

Literals
========

        number
        # number
        # - number
        "character string"
        error-name

Literal expressions return the obvious values: numbers, object numbers, strings, and errors.

List construction
=================

        { expression , expression , ... , expression }

The list-construction expression evaluates the each of the expressions in turn and returns a list whose elements are the results of those expressions.  Any of the expressions may be prefixed with an at-sign ('@'); in this case, that expression must return a list and, rather than that list becoming an element of the final list, its elements are spliced into the final list.

Variables
=========

        name

Variable expressions return the current value of the named variable.  Variable names must start with a letter or underscore ('_') and contain only letters, digits, and underscores.  The following variables are predefined:

            OBJ, STR, LIST, ERR, NUM
            player, caller, this, verb, args
            argstr, dobj, dobjstr, prepstr, iobj, iobjstr

Their initial values are described in detail in the LambdaMOO Programmer's Manual.

Property reading
================

        expression . name
        expression . ( expression )
        $ name

Property-reading expressions return the current value of a named property on the object that is the value of the first subexpression.  In the second form, the second subexpression must return a string, the name of the property to be read.  The third form is an abbreviation for '#0.name'.

Verb calls
==========

        expression : name ( arguments )
        expression : ( expression ) ( arguments )

Verb-call expressions invoke a named verb on the object that is the value of the first subexpression, passing the given arguments.  In the second form, the second subexpression must return a string, the name of the verb to invoke.  The syntax and semantics of arguments is exactly as in the list-construction expression but no initial or final curly-braces ('{' or '}') are used.

Primitive functions
===================

        function ( arguments )

The function-call expression invokes one of the MOO primitive functions, as listed in `help functions'[1], passing the given arguments.

List indexing
=============

        expression [ expression ]

The indexing expression first evaluates the two subexpressions; call their values S and N, respectively.  S must be a string or a list and N must be a number between 1 and the length of S, inclusive.  The Nth element of S is returned.  The elements of a string are themselves one-character strings.

        expression [ expression .. expression ]

The subsequence expression first evaluates the three subexpressions; call their values S, N1, and N2, respecitively.  S must be a string or a list and N1 and N2 must be numbers.  If N1 <= N2, then both must be between 1 and the length of S, inclusive; the subsequence of S beginning at index N1 and continuing through index N2 is returned.  If N1 > N2, the empty sequence of the same type as S is returned, either "" or {}.

Assignment
==========

        name = expression
        expression . name = expression
        expression . ( expression ) = expression
        $ name = expression

Assignment expressions give new values to variables and object properties.  For the second and third forms, the expressions on the left-hand side of the '=' are evaluated first.  Then the right-hand side expression is evaluated and result is stored in the indicated variable or object property.

Arithemetic
===========

        expression + expression
        expression - expression
        expression * expression
        expression / expression
        expression % expression
        - expression

The arithmetic expressions evaluate the subexpressions, all of which must return numbers, and then perform addition, subtraction, multiplication, division, remaindering, or negation, respectively.  For addition, the subexpressions may both return strings as well; in this case, the result is the concatenation of the two strings.

Comparisons
===========

        expression == expression
        expression != expression
        expression < expression
        expression <= expression
        expression > expression
        expression >= expression

The comparison expressions evaluate the subexpressions and then test whether or not the first result is equal to, unequal to, less than, less than or equal to, greater than, or greater than or equal to the second result, respectively.  If the indicated relation holds then they return 1 and otherwise they return 0.  Comparisons of strings are performed case-insensitively, those of lists are performed on an element-by-element basis, objects are compared by their object numbers, and errors by an ordering given in the LambdaMOO Programmer's Manual.

Logical expressions
===================

        expression ? expression | expression
        expression && expression
        expression || expression
        ! expression

The logical expressions each return results based upon the truth value of their first subexpression; call the value of this expression X.  The first of these returns the value of the second subexpression if X is a true value and that of the third expression if X is a false value; the unused subexpression is not evaluated.  The definitions of 'true value' and 'false value' are given in `help truth'[2].  The expression 'E1 && E2' is an abbreviation for 'E1 ? E2 | E1' except that E1 is only evaluated once.  The expression 'E1 || E2' is an abbreviation for 'E1 ? E1 | E2' except that E1 is only evaluated once.  The expression '! E' is an abbreviation for 'E ? 0 | 1'.

List membership
===============

        expression IN expression

The list-membership expression first evaluates both subexpressions; call their values E and L, respectively.  L must be a list.  If E is an element of L, then the index of the first occurence of E in L is returned.  If E is not an element of L, then 0 is returned.

The method for disambiguating the meaning of a complex MOO expression in the absence of sufficient parentheses is described in `help precedence'[3].

0 errors.
Verb programmed.
Last modified Sun May  5 16:40:15 2013 PDT by Crag (#243).
#269:"__d_add_proxies" this none this
{id, delegate} = args;
methods = delegate:__d_methods();
for m in (methods)
  {info, args, proxy_method} = m;
  add_verb(this, info, args);
  set_verb_code(this, m[1][3], this:__d_proxy_code(delegate, proxy_method, id));
  // {"return " + tostr(delegate) + ":(\"" + proxy_method + "\")(" + tostr(id) + ", verb, @args);"}
  // return del:proxy_method(id, verb, @args);
endfor
Verb added [13] (12).
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#269:__d_proxy_code ()" name: "MOO verb: #269:__d_proxy_code ()" type: moo-code content*: "" _data-tag: 1425180797268
#$#: 1425180797268
0 errors.
Verb programmed.
=> {"return #270:(\"callback\")(1, verb, @args);"}
{list}
=> 0
return #270:("callback")(1, verb, @args);
=> 0
Delegator (#269) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #269:__d_add_delegate         Crag (#243)          rxd    this none this
  #269:__d_delegate_leaving     Crag (#243)          rxd    this none this
  #269:__d_get_prop             Crag (#243)          rxd    this none this
  #269:__d_set_prop             Crag (#243)          rxd    this none this
  #269:@add-delegate            Crag (#243)          r d    any at/to this
  #269:@delegates               Crag (#243)          r d    none on top of/on/onto/upon this
  #269:@rm-delegate             Crag (#243)          r d    any out of/from inside/from this
  #269:__d_add_proxied_verb     Crag (#243)          rxd    this none this
  #269:__d_rm_proxied_verb      Crag (#243)          rxd    this none this
  #269:__d_can_add_delegate     Crag (#243)          rxd    this none this
  #269:__d_add_properties       Crag (#243)          rxd    this none this
  #269:__d_add_proxies          Crag (#243)          rxd    this none this
  #269:__d_proxy_code           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Verb #269:__d_add_proxied_verb [8] {this none this} removed.
Verb #269:__d_rm_proxied_verb [8] {this none this} removed.
Verb added [12] (11).
Verb added [13] (12).
Your current object is now #270.
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_match_message        Crag (#243)          rxd    this none this
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
.__d_properties          Crag (#243)           r c    {}
.__d_verbs               Crag (#243)           r c    {}
-------------------------------- finished ---------------------------------
Property added with value {}.
#270:"__d_methods" ()
That verb has not been programmed.
Verb #270:__d_match_message [1] {this none this} removed.
#$#dns-org-mud-moo-simpleedit-content 241151115 reference: "#270:__d_add_to_delegator ()" name: "MOO verb: #270:__d_add_to_delegator ()" type: moo-code content*: "" _data-tag: 92938267269
#$#: 92938267269
Last modified Sun May  5 16:32:17 2013 PDT by Crag (#243).
#269:"__d_add_delegate" this none this
// :__d_add_delegate(delegate)
//   => raises errors on failure, otherwise returns id of delegate
// Add delegate to this. Delegate should implement $interface.delegate.
// Adds delegate:__d_methods() and delegate:__d_properties() to this.
// TODO: check permissions
// TODO: maybe break this method into multiple sub-methods
// TODO: Should we check with other delegates to see if they will clash?
// TODO: maybe throw errors instead of returning 0?
{delegate} = args;
if (!$interface.delegate:implemented_by(delegate))
  return 0;
endif
if (!this:__d_can_add_delegate(delegate))
  return 0;
endif
id = this.__d_id_max = this.__d_id_max + 1;
try
  this.__d_delegates = {@this.__d_delegates, delegate};
  this.__d_delegates = {@this.__d_delegates, id};
  this:__d_add_properties(id, delegate);
  this:__d_add_proxies(id, delegate);
  delegate:__d_add_to_delegator(id, this);
except e (ANY)
  this:__d_delegate_leaving(delegate);
  raise(@e[1..3]);
endtry
#-1:Input to EVAL, line 4:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
Delegate (#270) [ readable ]
  Child of Class (#562).
  Location Crag (#243).
  #270:__d_add_to_delegator     Crag (#243)          rxd    this none this
  #270:__d_remove_from_delegator Crag (#243)         rxd    this none this
  #270:__d_methods              Crag (#243)          rxd    this none this
  #270:__d_properties           Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
