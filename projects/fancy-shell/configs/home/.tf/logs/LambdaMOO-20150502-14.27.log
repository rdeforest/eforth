                          ***************************
                          *  Welcome to LambdaMOO!  *
                          ***************************
                                       
                     Running Version 1.8.3+47 of LambdaMOO

PLEASE NOTE:
   LambdaMOO is a new kind of society, where thousands of people voluntarily
come together from all over the world.  What these people say or do may not
always be to your liking; as when visiting any international city, it is wise
to be careful who you associate with and what you say.
   The operators of LambdaMOO have provided the materials for the buildings of
this community, but are not responsible for what is said or done in them.  In
particular, you must assume responsibility if you permit minors or others to
access LambdaMOO through your facilities.  The statements and viewpoints
expressed here are not necessarily those of the wizards, Pavel Curtis,
or Roger Crew, and those parties disclaim any responsibility for them.

NOTICE FOR JOURNALISTS AND RESEARCHERS:
  The citizens of LambdaMOO request that you ask for permission from all
direct participants before quoting any material collected here.

For assistance either now or later, type `help'.
The lag is low; there are 53 connected.
*** Connected ***
Verb Editor

Do a 'look' to get the list of commands, or 'help' for assistance.

Last connected Sat May  2 14:04:53 2015 PDT from 63.224.54.239
I don't understand that.
Storage room
Boxes, crates, scraps of stuff, and a dead rat are strewn about this small room. The air and everything else are dusty. Cough, cough. A hammock has been strung between two walls, and a single 60 watt bulb casts a dim light about the place.

You note that the 60 watt incandescent bulb implies that the owner either doesn't care about the environment, or hasn't changed anything since compact flourestent lights became affordable.
Sorry, but no help is available on `mcp'.
Sorry, but the topic-name `edit' is ambiguous.  I don't know which of the following topics you mean:
   @edit               @edit-options       @editoptions        editors
Syntax:  @edit-option
         @edit-option <option>

Synonym:  @editoption

The edit options customize the behavior of the various editors (mail editor, verb editor, etc...) to your particular taste.  The first form of this command displays all of your edit options.  The second form displays just that one option, one of the flags listed below.

The remaining forms of this command are for setting your edit options:

         @edit-option +<flag>
         @edit-option -<flag>
         @edit-option !<flag>           (equivalent to -<flag>)

These respectively set and reset the specified flag

-quiet_insert    insert (") and append (:) echo back the line numbers
+quiet_insert    insert (") and append (:) produce no output
-eval_subs       (VERB EDITOR) ignore .eval_subs when compiling verbs
+eval_subs       (VERB EDITOR) apply .eval_subs to verbs being compiled
-local           Use in-MOO text editors.
+local           Ship text to client for local editing.
-no_parens       include all parentheses in verb code.
+no_parens       include only necessary parentheses in verb code.

+parens        is a synonym for -no_parens
+noisy_insert  is a synonym for -quiet_insert
I don't understand that.
Options allow you to customize the behavior of various commands.  Options are grouped into separate option packages that each affects a given class of related commands.  Each has its own help topic:

  @mail-options    --- mail commands (@mail, @read, @next, @prev, @send...)
  @edit-options    --- editing commands (@edit and commands within the editor)
  @build-options   --- building commands (@create, @dig, @recycle)

  @petition-options --- petition/ballot commands (@petitions, @ballots, ...)

  @prog-options    --- programming commands (@list, @verb, ...)
  @display-options --- @display (*)
Crag (#58746) [ (player) programmer ]
  Child of generic programmer (#217).
  Location Storage room (#27242).
  Size: 9,695 bytes at Wed Apr 29 01:03:13 2015 PDT
#58746:hello-world              Crag (#58746)        r d    any any any
#58746:eval*-d                  Crag (#58746)        r d    any any any
-------------------------------- finished ---------------------------------
#58746:eval*-d   any any any
 1:  "Copied from generic programmer (#217):eval [verb author Haakon (#2)] at Sat May  2 14:26:53 2015 PDT";
 2:  "A MOO-code evaluator.  Type `;CODE' or `eval CODE'.";
 3:  "Calls player:eval_cmd_string to first transform CODE in any way appropriate (e.g., prefixing .eval_env) and then do the actual evaluation.  See documentation for this:eval_cmd_string";
 4:  "If you set your .eval_time property to 1, you find out how many ticks and seconds you used.";
 5:  "If eval-d is used, the evaluation is performed as if the debug flag were unset.";
 6:  if (player != this)
 7:    player:tell("I don't understand that.");
 8:    return;
 9:  elseif (!player.programmer)
10:    player:tell("You need to be a programmer to eval code.");
11:    return;
12:  endif
13:  set_task_perms(player);
14:  result = player:eval_cmd_string(argstr, verb != "eval-d");
15:  if (result[1])
16:    player:notify(this:eval_value_to_string(result[2]));
17:    if (player:prog_option("eval_time") && !`output_delimiters(player)[2] ! ANY')
18:      player:notify(tostr("[used ", result[3], " tick", result[3] != 1 ? "s, " | ", ", result[4], " second", result[4] != 1 ? "s" | "", ".]"));
19:    endif
20:  else
21:    player:notify_lines(result[2]);
22:    nerrors = length(result[2]);
23:    player:notify(tostr(nerrors, " error", nerrors == 1 ? "." | "s."));
24:  endif
#-1:Input to EVAL, line 3:  Property not found
... called from built-in function eval()
... called from #217:eval_cmd_string (this == #58746), line 19
... called from #58746:eval*-d, line 14
(End of traceback)
Verb #58746:eval*-d (2) {any any any} removed.
Crag (#58746) [ (player) programmer ]
  Child of generic programmer (#217).
  Location Storage room (#27242).
  Size: 9,695 bytes at Wed Apr 29 01:03:13 2015 PDT
#58746:hello-world              Crag (#58746)        r d    any any any
-------------------------------- finished ---------------------------------
#217:eval_cmd_string   this none this
 1:  ":eval_cmd_string(string[,debug])";
 2:  "Evaluates the string the way this player would normally expect to see it evaluated if it were typed on the command line.  debug (defaults to 1) indicates how the debug flag should be set during the evaluation.";
 3:  " => {@eval_result, ticks, seconds}";
 4:  "where eval_result is the result of the actual eval() call.";
 5:  "";
 6:  "For the case where string is an expression, we need to prefix `return ' and append `;' to string before passing it to eval().  However this is not appropriate for statements, where it is assumed an explicit return will be provided somewhere or that the return value is irrelevant.  The code below assumes that string is an expression unless it either begins with a semicolon `;' or one of the MOO language statement keywords.";
 7:  "Next, the substitutions described by this.eval_subs, which should be a list of pairs {string, sub}, are performed on string";
 8:  "Finally, this.eval_env is prefixed to the beginning while this.eval_ticks is subtracted from the eventual tick count.  This allows string to refer to predefined variables like `here' and `me'.";
 9:  set_task_perms(caller_perms());
10:  {program, ?debug = 1} = args;
11:  program = program + ";";
12:  debug = debug ? 33 | 0;
13:  if (!match(program, "^ *%(;%|%(if%|fork?%|return%|while%|try%)[^a-z0-9A-Z_]%)"))
14:    program = "return " + program;
15:  endif
16:  program = tostr(this.eval_env, ";", $code_utils:substitute(program, this.eval_subs));
17:  ticks = ticks_left() - 48 - this.eval_ticks + debug;
18:  seconds = seconds_left();
19:  value = debug ? eval(program) | $code_utils:eval_d(program);
20:  seconds = seconds - seconds_left();
21:  ticks = ticks - ticks_left();
22:  return {@value, ticks, seconds};
#-1:Input to EVAL, line 3:  Property not found
... called from built-in function eval()
... called from #217:eval_cmd_string (this == #58746), line 19
... called from #217:eval*-d (this == #58746), line 13
(End of traceback)
Sorry, but no help is available on `eval-d'.
Syntax:  eval <MOO-code>
         ; <MOO-code>
         eval-d <MOO-code>

Evaluates the given piece of MOO code and prints the resulting value.  If the MOO code begins with one of the MOO language keywords ('if', 'for', 'while', 'fork', or 'return') or with the character ';', then the entire piece of code is treated as the program for a verb, with ';' appended to the end.  Otherwise, 'return' is appended to the front and ';' is appended to the end and that string is treated as the code for a verb.  In either case, the resulting verb is invoked and whatever value it returns is printed.

For programmers, this is such a mind-bogglingly useful thing to do that there is a simple abbreviation for this command; any command beginning with a semicolon (';') is treated as a use of 'eval'.

Eval treats specially a duplicated semicolon at the beginning.  It enables you to make multi-statement programs within eval (but does not by default print the return value).

Eval-d (no ";" abbreviation for this) evaluates the following text exactly as eval, except that the "d" debug flag (see programmer's manual for explanation) is turned off.  Thus errors will cause an error return value rather than a traceback.

If you set the programmer option `eval_time' to 1 (see `help @prog-options'), then eval will print out how many ticks and seconds the program required.

Examples:
   eval 3 + 4
   =>  7
   ;3+4
   =>  7
   ;for x in (player.aliases) player:tell(x); endfor
   Haakon
   Wizard
   ArchWizard
   =>  0
   ;;l = {}; for i in [1..10] l = {@l, i}; endfor return l
   =>  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
   eval-d 8 + "foo"
   => E_TYPE  (Type mismatch)

You may customize your evaluation environment.  The player property .eval_env may contain statements to be executed prior to any evaluated program.  Two caveats:  This will throw off the tick count.  You can account for additional ticks inserted by your environment with the .eval_ticks property; just set it to the number of ticks you'd like subtracted from the total.  Additionally, if you make a syntax error in your program, the line reported will be wrong (it will count those initial statements), and if you make an error in the eval_env itself, you can be in deep trouble.  Despite these drawbacks, the eval_env property can be quite useful.  The following is a sample:

Eval_env:    "me=player;here=player.location;"
eval_ticks:  3

See also @setenv.

You can also define textual substitutions in a separate property, called eval_subs.  These are discouraged, however, for anything that can be done with variable assignments, because the overhead of replacing the strings in the evaluated program is significant.  However, some things, such as substituting characters which can't be typed easily on one keyboard (e.g. "[]" is difficult to type on some IBM keyboards), can only be done by textual substitutions.  Note that the eval substitutions are also interpreted by the verb editor when "eval_subs" is selected in your .edit_options property (see `help editors').  This adds to their overhead, but again, makes it possible for people to program who otherwise can't type the full character set.  Remember:  Don't use eval_subs unless you really have to!
Syntax:  @setenv <environment string>

Defines the environment for eval (property player.eval_env).  See "help eval"
for more information.

Example:

  @setenv me=player;here=player.location;
Usage:  @setenv <environment string>
I don't understand that.
#-1:Input to EVAL, line 3:  Property not found
... called from built-in function eval()
... called from #217:eval_cmd_string (this == #58746), line 19
... called from #217:eval*-d (this == #58746), line 13
(End of traceback)
#217:eval_cmd_string   this none this
 1:  ":eval_cmd_string(string[,debug])";
 2:  "Evaluates the string the way this player would normally expect to see it evaluated if it were typed on the command line.  debug (defaults to 1) indicates how the debug flag should be set during the evaluation.";
 3:  " => {@eval_result, ticks, seconds}";
 4:  "where eval_result is the result of the actual eval() call.";
 5:  "";
 6:  "For the case where string is an expression, we need to prefix `return ' and append `;' to string before passing it to eval().  However this is not appropriate for statements, where it is assumed an explicit return will be provided somewhere or that the return value is irrelevant.  The code below assumes that string is an expression unless it either begins with a semicolon `;' or one of the MOO language statement keywords.";
 7:  "Next, the substitutions described by this.eval_subs, which should be a list of pairs {string, sub}, are performed on string";
 8:  "Finally, this.eval_env is prefixed to the beginning while this.eval_ticks is subtracted from the eventual tick count.  This allows string to refer to predefined variables like `here' and `me'.";
 9:  set_task_perms(caller_perms());
10:  {program, ?debug = 1} = args;
11:  program = program + ";";
12:  debug = debug ? 33 | 0;
13:  if (!match(program, "^ *%(;%|%(if%|fork?%|return%|while%|try%)[^a-z0-9A-Z_]%)"))
14:    program = "return " + program;
15:  endif
16:  program = tostr(this.eval_env, ";", $code_utils:substitute(program, this.eval_subs));
17:  ticks = ticks_left() - 48 - this.eval_ticks + debug;
18:  seconds = seconds_left();
19:  value = debug ? eval(program) | $code_utils:eval_d(program);
20:  seconds = seconds - seconds_left();
21:  ticks = ticks - ticks_left();
22:  return {@value, ticks, seconds};
,eval_env                Statistician (#64259) r      "me=player;here=me.location;data = me.data;"
-------------------------------- finished ---------------------------------
Syntax error in initial value:  `i' unexpected
Property added with value {}.
=> 0
[used 2 ticks, 0 seconds.]
=> #58746  (Crag)
[used 3 ticks, 0 seconds.]
=> 1
[used 3 ticks, 0 seconds.]
#128:@permute-verbs   any none none
"Syntax:  @permute-verbs <object>";
"";
"prints out a tableau whose lines you can rearrange to get the verbs of a particular object in the order that you want them.  Concatenating these lines and executing the resulting expression carries out the permutation.";
"";
set_task_perms(valid(caller_perms()) ? caller_perms() | player);
object = $string_utils:match_object(dobjstr, player.location);
if ($command_utils:object_match_failed(object, dobjstr))
  return;
endif
player:notify(";$list_utils:slice({");
for v in [1..length(vbs = verbs(object))]
  player:notify(tostr("{", v, ", \"", vbs[v], "\"},"));
endfor
player:notify("})");
player:notify(tostr(";", this, ":permute_verbs(", object, ",)"));
*** Redirecting connection to new port ***
