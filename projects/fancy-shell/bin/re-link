#!/usr/bin/perl

# Update symlinks in ~ to point to $project_root/home
# Linking functions all have same arg order as ln -s, ie ln -s existingObject linkName

use strict;
use warnings;

use File::Basename;
use Cwd;
use YAML;

my $config = YAML->from "$ENV{HOME}/.fancy-env/config.pm";

my $verbosity = 1;

my $projectRoot = getProjectRoot();

relinkDir($projectRoot . "/home", $ENV{HOME});

sub vLog {
  my ($level, $message) = @_;

  if (!$message) {
    ($level, $message) = (1, $level);
  }

  if ($level <= $verbosity) {
    print $message;
  }
}

# Assumes script is in $root/bin or something
sub getProjectRoot {
    return Cwd::realpath(dirname($0) . "/..");
}

sub relinkItem {
    my ($item, $link) = @_;

    if ($item =~ qr{/\..?$}) {
      vLog("Skipping item ending in one or two dots: $item\n");
      return;
    }

    vLog(2, "relinkItem($item, $link)\n");

    if (-d $item) {
        relinkDir($item, $link);
    } else {
        relinkFile($item, $link);
    }
}

sub relinkFile {
    my ($file, $link) = @_;

    if (-e $link && !-l $link) {
        warn "skipping file $link: exists and isn't a link\n";
    }

    unlink $link;
    symlink $file, $link;
}

sub relinkDir {
    my ($dir, $link) = @_;

    vLog("Updating $link from $dir\n");

    if (-l $dir) {
        if (-e $link && !-l $link) {
          warn "Skipped $link: expected symlink.\n";
          return;
        }

        unlink $link;
        symlink $dir, $link;
        return;
    }

    if (!-e $link) {
        mkdir $link;
    }

    if (!-d $link) {
        warn "Skipped $link: expected directory.\n";
        return;
    }

    opendir(my $dh, $dir);
    while(my $item = readdir($dh)) {
        next if $item eq "." or $item eq "..";
        relinkItem("$dir/$item", "$link/$item");
    }
}
