// Generated by CoffeeScript 1.10.0
var cardLibrary, cardLinks, getCard, j, len, linkIntensifies, matchCard, menu, menuItem, menuItems, persistObject, persistantProp, processPage, queryCard, ref, rule, ss, styleSheet, toggle, upsertCard,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

$(document.head).append($("<style>"));

ss = document.styleSheets;

styleSheet = ss[ss.length - 1];

ref = [" div.intensified {\n  border: solid black 1px;\n} ", " div.active {\n  border-color: red;\n}", " div.intensified .menu {\n  display: none;\n}", " div.active .menu {\n  display: inline-block;\n} "];
for (j = 0, len = ref.length; j < len; j++) {
  rule = ref[j];
  styleSheet.insertRule(rule);
}

cardLinks = function() {
  return $('.article-table a').filter(function(idx, el) {
    var cardName, href;
    href = $(el).attr('href');
    cardName = el.innerText;
    cardName.replace(" ", "_");
    return decodeURIComponent(href === '/wiki/' + cardName);
  });
};

$("span.mw-headline span.button").each(function(i, e) {
  return e.click();
});

persistantProp = function(name, prop) {
  return {
    get: function() {
      return (JSON.parse(localStorage[name]))[prop];
    },
    set: function(newValue) {
      var data;
      data = JSON.parse(localStorage[name]);
      data[prop] = newValue;
      return localStorage[name] = JSON.stringify(data);
    }
  };
};

persistObject = function(name, defaults) {
  var data, exists, k, newObj, ref1, v;
  if (defaults == null) {
    defaults = {};
  }
  newObj = {};
  if (exists = localStorage[name]) {
    data = JSON.parse(exists);
  }
  for (k in defaults) {
    v = defaults[k];
    Object.defineProperty(newObj, k, persistantProp(name, k));
    newObj[k] = v;
  }
  for (k in data) {
    v = data[k];
    if (ref1 = !k, indexOf.call(Object.keys(defaults), ref1) >= 0) {
      Object.defineProperty(newObj, k, persistantProp(name, k));
    }
    newObj[k] = v;
  }
  return newObj;
};

cardLibrary = persistObject('cardLibrary', {
  name: {},
  id: {},
  url: {},
  have: {},
  deck1: {},
  deck2: {},
  deck3: {}
});

matchCard = function(card) {
  var found, k, maybe, v;
  maybe = [];
  for (k in cardLibrary) {
    v = cardLibrary[k];
    if (found = v[card[k]]) {
      maybe.push(found);
    }
  }
  return maybe;
};

upsertCard = function(card) {
  var cardExists;
  cardExists = matchCard(card);
  if (cardExists.length === 0) {
    return addCard(card);
  }
  if (cardExists.length === 1) {
    updateCard(cardExists[0].id, card);
  }
  throw new Error("upsertCard(" + card + "): ambiguous match (" + cardExists + ")");
};

menuItem = function(el, label, fn, card) {
  var link;
  link = $("<a>" + label + "</a> ");
  link.on('click', fn(card));
  if (cardLibrary[label][card.id]) {
    return link.addClass(label);
  }
};

toggle = function(info) {
  var bin, card, l, len1, results;
  results = [];
  for (card = l = 0, len1 = info.length; l < len1; card = ++l) {
    bin = info[card];
    results.push(cardLibrary[bin][card.id] = !cardLibrary[bin][card.id]);
  }
  return results;
};

menuItems = {
  have: function(card) {
    return toggle({
      have: card
    });
  },
  deck1: function(card) {
    return toggle({
      deck1: card
    });
  },
  deck2: function(card) {
    return toggle({
      deck2: card
    });
  },
  deck3: function(card) {
    return toggle({
      deck3: card
    });
  }
};

processPage = function(page, callback) {};

queryCard = function(cardName, callback) {
  var iframe, url;
  cardName.replace(' ', '_');
  cardName = encodeURIComponent(cardName);
  cardName.replace('\'', '%27');
  url = '/wiki/' + cardName;
  iframe = $("<iframe src=\"" + url + "\">");
  iframe.style.display = "none";
  iframe.on('load', processPage(iframe.contents(), callback));
  return $(document.body).append(iFrame);
};

getCard = function(info, callback) {
  var known;
  known = matchCard(info);
  if (known.length !== 1) {
    return queryCard(cardName, callback);
  } else {
    return callback(known[0]);
  }
};

menu = function(el) {
  return getCard({
    name: el.innerText
  }, function(card) {
    var fn, label, results;
    results = [];
    for (label in menuItems) {
      fn = menuItems[label];
      results.push(menuItem(el, label, fn, card));
    }
    return results;
  });
};

linkIntensifies = function(el) {
  var div, ref1;
  $(el.parentElement).append(div = $("<div>"));
  div.append(el);
  return (ref1 = div.on('mouseenter', function() {
    return $(div).addClass('active');
  }).on('mouseleave', function() {
    return $(div).removeClass('active');
  }).addClass('intensified')).append.apply(ref1, menu(el));
};

cardLinks().each(function(idx, el) {
  return linkIntensifies(el);
});

window.laa = {
  cardLibrary: cardLibrary,
  cardLinks: cardLinks,
  revealMenu: revealMenu,
  linkIntensifies: linkIntensifies,
  styleSheet: styleSheet
};
