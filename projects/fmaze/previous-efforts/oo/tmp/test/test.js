// Generated by CoffeeScript 1.9.3
(function() {
  var Maze, Path, Pin, assert, ref;

  assert = require('assert');

  ref = require('../maze'), Maze = ref.Maze, Pin = ref.Pin, Path = ref.Path;

  describe('Maze', function() {
    it('should construct', function() {
      var maze;
      return maze = new Maze;
    });
    it('should canonize pin input', function() {
      var maze, noMaze, number, ref1, withMaze;
      maze = new Maze;
      ref1 = maze.canonical('example', {
        maze: 'pin'
      }, 1), noMaze = ref1[0], withMaze = ref1[1], number = ref1[2];
      assert.equal(noMaze.name, 'example');
      assert.equal(withMaze.name, 'pin');
      assert.equal(withMaze.maze, 'maze');
      return assert.equal(number.name, '1');
    });
    it('should canonize multi-string pin input', function() {
      var first, maze, ref1, second;
      maze = new Maze;
      ref1 = maze.canonical('first', 'second'), first = ref1[0], second = ref1[1];
      assert.equal(first.name, 'first');
      return assert.equal(second.name, 'second');
    });
    it('should generate pins and wires via the .connect interface', function() {
      var maze;
      (maze = new Maze).connect('zero', 'one');
      return assert(maze.pins.zero.connected(maze.pins.one));
    });
    it('should propagate connections', function() {
      var maze, ref1;
      (ref1 = (maze = new Maze)).connect.apply(ref1, "beginning to end".split(' '));
      return assert(maze.pins.beginning.connected(maze.pins.end));
    });
    it('should connect through submazes', function() {
      var maze;
      maze = new Maze;
      maze.connect(1, 2).connect('plus', {
        subMaze: 1
      }).connect({
        subMaze: 2
      }, 'minus');
      return assert(maze.pins.plus.connected(maze.pins.minus));
    });
    it('should connect through connected submazes', function() {
      maze.connect({
        a: 3,
        b: 1
      }).connect({
        b: 2
      }, 'bMinus');
      return assert(maze.plus.connected(maze.bMinus));
    });
    return it('should connect through outer-self-connected submazes', function() {
      maze.connect({
        b: 3,
        b: 4
      }).connect(4, 5).connect({
        b: 5
      }, "cMinus");
      return assert(maze.plus.connected(maze.cMinus));
    });
  });

}).call(this);
