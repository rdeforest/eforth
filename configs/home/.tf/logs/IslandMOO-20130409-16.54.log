Welcome to IslandMOO

Have a pleasant visit.
*** Connected ***
#$#mcp version: 2.1 to: 2.1
The First Room
This is all there is right now.  A leather couch is here.
Last connected Sun Apr  7 16:22:35 2013 PDT from localhost
#$#mcp-negotiate-can 756740960 package: mcp-negotiate min-version: 1.0 max-version: 2.0
#$#mcp-negotiate-can 756740960 package: mcp-cord min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-can 756740960 package: dns-org-mud-moo-simpleedit min-version: 1.0 max-version: 1.0
#$#mcp-negotiate-end 756740960
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Fri Apr  2 19:28:52 2004 PST by Xplat (#4014) (on Waterpoint).
#3:"say" any any any
 1:  "OLDER VERSION";
 2:  "player:tell(\"You say, \\\"\", argstr, \"\\\"\");";
 3:  "return this:announce($string_utils:pronoun_sub(this.say_msg, player, this));";
 4:  "OLD VERSION";
 5:  "this:announce(player:dnamec(), \" says, \\\"\", argstr, \"\\\"\");";
 6:  "thd = player:misc_option(\"third_person\");";
 7:  "player:tell(thd ? player:dnamec() | \"You\", \" \", thd ? \"says\" | \"say\", \", \\\"\", argstr, \"\\\"\");";
 8:  "return;";
 9:  "i miss pronouns";
10:  return $you:say_action(this.say_msg, player, this, this, $nothing, $nothing);
11:  "DOUG'S VERSION";
12:  event = {{"speaker", player}, {"speech", argstr}, {"default_handler", this.default_handler_event_speech}};
13:  return this:broadcast_event_speech(event);
14:  "Copied from generic room (#3):say by Xplat (#4014) Thu Apr  1 17:05:03 2004 PST";
15:  "Copied from generic room (#3):say(core) by Xplat (#4014) Fri Apr  2 19:28:52 2004 PST";
Line 1:  syntax error
1 error.
Last modified Sun Aug 18 10:03:56 2002 PDT by Marn (#2) (on CoreEditMOO).
#34:"say_action" (msg, @p_s_args)
 1:  "$you:say_action(message [,who [, thing[, where[, dobj[, iobj]]]]]).";
 2:  "announce 'message' with pronoun substitution as if it were just ";
 3:  "  where:announce_all($string_utils:pronoun_sub(message, who, thing, where, dobj, iobj)); ";
 4:  "except that all involved parties get modified messages, with the appropriate use of 'you' instead of their name.";
 5:  "who   default player";
 6:  "thing default object that called this verb";
 7:  "where default who.location";
 8:  "Any of these may be lists, of the form {<list of objs>, @<args to $string_utils:english_list>}.";
11:  parties = $pronoun_sub:parse_parties(p_s_args, caller);
12:  wheres = parties[3][1];
13:  {msg, parties} = $pronoun_sub:flatten_message(msg, parties);
14:  tell = $string_utils:pronoun_sub(msg, @parties);
15:  party_set = $set_utils:union(@$list_utils:slice(parties));
16:  for where in (wheres)
17:    `where:announce_all_but(party_set, tell) ! E_VERBNF';
18:  endfor
19:  for p in (party_set)
20:    this:say(msg, p, parties);
21:  endfor
22:  "Copied from you (#36):say_action(new) by splat (#3024) Sat Apr 27 00:40:34 1996 EDT";
23:  "Made +d by Marn.";
 say_msg                 unknown hacker (#35)  r c    {#69, "do", {"name", "player", {"dc"}}, " ", {"verb", "player", "says"}, ", \"", {"string", "argstr", 0}, "\""}
-------------------------------- finished ---------------------------------
=> ""
#34:"say" (msg, target, parties)
 1:  "say(msg, target, parties)";
 5:  for i in [1..length(parties)]
 6:    for j in [1..length(parties[i][1])]
 7:      if (parties[i][1][j] == target)
 8:        parties[i][1][j] = this:_you(target);
 9:      endif
10:    endfor
11:  endfor
12:  tell = $string_utils:pronoun_sub(msg, @parties);
13:  target:tell(tell);
Object #70 does not define that verb, but its ancestor #3 does.
#3:"l*ook" any any any
 1:  if (dobjstr == "" && !prepstr)
 2:    this:look_self();
 3:  elseif ($code_utils:short_prep(prepstr) != "in" && prepstr != "on")
 4:    if (!dobjstr && prepstr == "at")
 5:      dobjstr = iobjstr;
 6:      iobjstr = "";
 7:    else
 8:      dobjstr = dobjstr + (prepstr && (dobjstr && " ") + prepstr);
 9:      dobjstr = dobjstr + (iobjstr && (dobjstr && " ") + iobjstr);
10:    endif
11:    dobj = this:match_object(dobjstr);
12:    if (!$command_utils:object_match_failed(dobj, dobjstr))
13:      dobj:look_self();
14:    endif
15:  elseif (!iobjstr)
16:    player:tell(verb, " ", prepstr, " what?");
17:  else
18:    iobj = this:match_object(iobjstr);
19:    if (!$command_utils:object_match_failed(iobj, iobjstr))
20:      iobj:look_in(dobjstr);
21:    endif
22:  endif
Object #70 does not define that verb, but its ancestor #3 does.
#3:"look_self" this none this
 1:  brief = args && args[1];
 2:  player:tell(this:namec_for_look_self(brief));
 3:  things = this:visible_of(setremove(this:contents(), player));
 4:  integrate = {};
 5:  if (this.integration_enabled)
 6:    for i in (things)
 7:      if (this:ok_to_integrate(i) && (!brief || !is_player(i)))
 8:        integrate = {@integrate, i};
 9:        things = setremove(things, i);
10:      endif
11:    endfor
12:    "for i in (this:obvious_exits(player))";
13:    for i in (this:exits())
14:      if (this:ok_to_integrate(i))
15:        integrate = setadd(integrate, i);
16:        "changed so prevent exits from being integrated twice in the case of doors and the like";
17:      endif
18:    endfor
19:  endif
20:  if (!brief)
21:    desc = this:description(integrate);
22:    if (desc)
23:      player:tell_lines(desc);
24:    else
25:      player:tell("You see nothing special.");
26:    endif
27:  endif
28:  "there's got to be a better way to do this, but.";
29:  if (topic = this:topic_msg())
30:    if (0)
31:      this.topic_sign:show_topic();
32:    else
33:      player:tell(this.topic_sign:integrate_room_msg());
34:    endif
35:  endif
36:  "this:tell_contents(things, this.ctype);";
37:  this:tell_contents(things);
-----
@LIST
=====

Usage:  @list <object>:<verb>
              [with|without parentheses|numbers]
              [<dobj> <prep> <iobj>] | [(<named args>)]
              [all]
              [ranges]
        @list# <object>:<verb-number>
              [with|without parentheses|numbers] [all] [ranges]

Prints out the code for the MOO program associated with the named verb on the named object.  

Normally, the code is shown with each line numbered and with only those parentheses that are necessary to show the meaning of the program.  You can e.g., specify `without numbers' to have the numbers omitted or `with parentheses' to include all parentheses or even `with parentheses without numbers' to do both.

Type `@list $room:@move' to see the code for the `@move' command, or even `@list $prog:@list' to see the code implementing @list itself...

Giving an args (dobj/prep/iobj) specification indicates that verbs whose verb_args do not matching that specification are to be ignored.

The `@list#' form of the command is available for specifying a verb by number, in case you have an object with inaccessible verbs (e.g,. say the 3rd verb is named "*" and you want to view the 4th).  For example

    @list# object:2

lists the second verb on `object'.

Specifying `all', indicates that all verbs on <object> or its ancestors matching the given name (and args specification, if given) should be listed.

One may also specify one or more ranges of the form <number>..<number> to indicate that only particular subranges of the lines of the verb code should be listed.

These may combined in any order, e.g.,

  @list frobule:burfle this in front of any without numbers all

which would be useful if `frobule' had more than one `burfle' verb and we are only interested in those that have `this' `in front of' `any' as its respective dobj/prep/iobj specifiers, and we want to see ALL such verbs on frobule or its ancestors.

Object #70 does not define that verb, but its ancestor #3 does.
#3:"look_self" this none this
brief = args && args[1];
player:tell(this:namec_for_look_self(brief));
things = this:visible_of(setremove(this:contents(), player));
integrate = {};
if (this.integration_enabled)
  for i in (things)
    if (this:ok_to_integrate(i) && (!brief || !is_player(i)))
      integrate = {@integrate, i};
      things = setremove(things, i);
    endif
  endfor
  "for i in (this:obvious_exits(player))";
  for i in (this:exits())
    if (this:ok_to_integrate(i))
      integrate = setadd(integrate, i);
      "changed so prevent exits from being integrated twice in the case of doors and the like";
    endif
  endfor
endif
if (!brief)
  desc = this:description(integrate);
  if (desc)
    player:tell_lines(desc);
  else
    player:tell("You see nothing special.");
  endif
endif
"there's got to be a better way to do this, but.";
if (topic = this:topic_msg())
  if (0)
    this.topic_sign:show_topic();
  else
    player:tell(this.topic_sign:integrate_room_msg());
  endif
endif
"this:tell_contents(things, this.ctype);";
this:tell_contents(things);
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {84909, 1365408000}
-------------------------------- finished ---------------------------------
=> #-1 <$nothing>
=> #70 (first room)
=> {#245, #243}
The First Room
This is all there is right now.  A leather couch is here.
leather couch (#245) [ readable ]
  Child of generic piece of furniture (#81).
  Location first room (#70).
-------------------------------- finished ---------------------------------
generic piece of furniture (#81) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic sittable object (#80).
  Location generic room (#3).
-------------------------------- finished ---------------------------------
generic piece of furniture (#81) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic sittable object (#80).
  Location generic room (#3).
   #81:sit                      unknown hacker (#35) rxd    any on top of/on/onto/upon this
   #81:"stand get"              unknown hacker (#35) rxd    any out of/from inside/from this
   #81:"sh*ove pu*sh"           unknown hacker (#35) rxd    any out of/from inside/from this
   #81:description              unknown hacker (#35) rxd    this none this
   #81:integrate_room_msg       unknown hacker (#35) rxd    this none this
   #81:"stand_msg squeeze_msg sit_msg fall_msg shove_msg also_shove_msg next_to_msg already_sitting_msg" unknown hacker (#35) rxd this none this
   #81:next_to                  unknown hacker (#35) rx     this none this
   #81:delete_sitting           unknown hacker (#35) rx     this none this
   #81:insert_sitting           unknown hacker (#35) rxd    this none this
   #81:moveto                   unknown hacker (#35) rxd    this none this
   #81:visible                  unknown hacker (#35) rxd    this none this
   #81:empty_message_integrate_room unknown hacker (#35) rxd this none this
   #81:help_verbs               Core-Wizard (#184)   rxd    this none this
   #81:obvious_seat_for         Core-Wizard (#184)   rxd    this none this
   #81:move_next_to             unknown hacker (#35) rxd    this none this
   #81:shoving_policy           unknown hacker (#35) rxd    this none this
   #81:modname_occupied         Core-Wizard (#184)   rxd    this none this
   #81:desc_sitting_text        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
The verb :sit is on   Crag(#243)--generic player(#6)   first room(#70)--generic room(#3)   leather couch(#245)--generic piece of furniture(#81)
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Tue Jun 25 12:09:45 1996 PDT by Erik (#74) (on JHM).
#6:"sit" none (with/using) this
 1:  "Usage:  sit with <someone>";
 2:  "        sit on <seat>";
 3:  "        sit";
 4:  "";
 5:  "Tries to sit down next to this person.";
 6:  for o in (this.location.contents)
 7:    if ($object_utils:isa(o, $furniture) && this in o.sitting)
 8:      return o:sit();
 9:    endif
10:  endfor
11:  player:tell(this:dnamec(), " doesn't seem to be sitting down.");
Object #245 does not define that verb, but its ancestor #81 does.
#81:"sit" any (on top of/on/onto/upon) this
 1:  if (!valid(caller_perms()) && dobjstr && dobjstr != "down")
 2:    player:tell("You can't do that.");
 3:    return;
 4:  endif
 5:  if (player in this.sitting)
 6:    player:tell($string_utils:pronoun_sub(this:already_sitting_msg()));
 7:  elseif (player == this.location)
 8:    player:tell("Perhaps you should put it down first.");
 9:  elseif (player.location != this.location)
10:    player:tell("From that distance? Don't stuff about with my ", this:name(), ".");
11:  elseif (this.squeeze < 0 && length(this.sitting) >= this.seats)
12:    player:tell($string_utils:pronoun_sub(this.nosqueeze_msg));
13:  else
14:    p = random(1 + length(this.sitting));
15:    this:insert_sitting(player, p);
16:    if (length(this.sitting) >= this.seats + random(1 + max(this.squeeze, 0)))
17:      if (random(2) == 1)
18:        who = this.sitting[1];
19:      else
20:        who = this.sitting[length(this.sitting)];
21:      endif
22:      this:delete_sitting(who, this:squeeze_msg(who));
23:    endif
24:  endif
You now have generic group (aka group) with object number #244 and parent root class (#1).
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
$LOCAL:@REG
===========

@register <object> on $local

Add a property to $local with the name as you specify on the command line and the value the matching object.  The name should be a legal MOO identifier so that no quoting is necessary when refering to it from verbs.  You may have to give the object an additional suitable alias before registering it.

That is not a valid command.
Usage:  @register [<someone>]
        @register <someone> as <email-address>[ <commentary>]
Registered the generic group (#244) as $local.group.
=> #193 (Local Namespace)
Your current object is now group, a generic group (#244).
Moved.
=> #-1 <$nothing>
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> #-1 <$nothing>
-----
@VERB
=====

Syntax:  @verb <object>:<verb-name(s)>
         @verb <object>:<verb-name(s)> <dobj> [<prep> [<iobj>]]
         @verb <object>:<verb-name(s)> (<named args>)

Adds a new verb with the given name(s) to the named object.  If there are multiple names, they should be separated by spaces and all enclosed in quotes:

        @verb foo:"bar baz mum*ble"

The direct and indirect object specifiers (<dobj> and <iobj>) must be either 'none', 'this', or 'any'; their meaning is discussed in the LambdaMOO Programmer's Manual.  The preposition specifier (<prep>) must be either 'none', 'any', or one of the prepositional phrases listed in `help prepositions'[1] (a prepositional phrase with more than one word must be enclosed in quotes ("")).  All three specifiers default to 'none'.

It is also possible to specify the new verb's permissions and owner as part of the same command (rather than having to issue separate @chmod/@chown commands)

     @verb <object>:<verb-name(s)> <dobj> <prep> <iobj> <permissions>
     @verb <object>:<verb-name(s)> <dobj> <prep> <iobj> <permissions> <owner>

<permissions> are as with @chmod, i.e., must be some subset of "rwxd".  They default to "rd" (specifying "w" for a verb is highly inadvisable).  The owner defaults to the player typing the command; only members of the Core Group can create verbs with owners other than themselves.

You may also use "tnt" in place of "this none this" for the dobj prep iobj arguments.  "this none this" is used to indicate non-command verbs, since the parser can't possibly interpret a command as "this none this".  For these verbs, the permissions default to "rxd"; the "x" bit is set so that they can be called from other programs.  (If they couldn't be used as commands, and they couldn't be called from programs, they wouldn't be good for anything!)

Verb added [1] (0).
-----
@CHMOD
======

Syntax:  @chmod <object> <object-permissions>
         @chmod <object>.<prop-name> <property-permissions>
         @chmod <object>:<verb-name> <verb-permissions>
         @chmod# <object>:<verb-number> <verb-permissions>

Changes the permissions of an object, property or verb, to those given.  The following table shows what permission bits are allowed for each form of the command:

        <object-permissions>        r, w, f
        <property-permissions>      r, w, c
        <verb-permissions>          r, w, x, d

See the LambdaMOO Programmer's Manual for their meanings.

To clear all of the permissions for an object, verb, or property, use "" as the second argument.

leather couch (#245) [ readable ]
  Child of generic piece of furniture (#81).
  Location first room (#70).
-------------------------------- finished ---------------------------------
generic piece of furniture (#81) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic sittable object (#80).
  Location generic room (#3).
   #81:sit                      unknown hacker (#35) rxd    any on top of/on/onto/upon this
   #81:"stand get"              unknown hacker (#35) rxd    any out of/from inside/from this
   #81:"sh*ove pu*sh"           unknown hacker (#35) rxd    any out of/from inside/from this
   #81:description              unknown hacker (#35) rxd    this none this
   #81:integrate_room_msg       unknown hacker (#35) rxd    this none this
   #81:"stand_msg squeeze_msg sit_msg fall_msg shove_msg also_shove_msg next_to_msg already_sitting_msg" unknown hacker (#35) rxd this none this
   #81:next_to                  unknown hacker (#35) rx     this none this
   #81:delete_sitting           unknown hacker (#35) rx     this none this
   #81:insert_sitting           unknown hacker (#35) rxd    this none this
   #81:moveto                   unknown hacker (#35) rxd    this none this
   #81:visible                  unknown hacker (#35) rxd    this none this
   #81:empty_message_integrate_room unknown hacker (#35) rxd this none this
   #81:help_verbs               Core-Wizard (#184)   rxd    this none this
   #81:obvious_seat_for         Core-Wizard (#184)   rxd    this none this
   #81:move_next_to             unknown hacker (#35) rxd    this none this
   #81:shoving_policy           unknown hacker (#35) rxd    this none this
   #81:modname_occupied         Core-Wizard (#184)   rxd    this none this
   #81:desc_sitting_text        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Mon Jun  4 11:24:28 2001 PDT by Xplat (#4014) (on Waterpoint (for core)).
#0:"do_out_of_band_command" this none this
 1:  if (callers())
 2:    return E_PERM;
 3:  elseif (!valid(player))
 4:    return;
 5:  endif
 6:  return $mcp:(verb)(@args);
MCP 2.1 (#213) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
  #213:create_session           unknown hacker (#35) rxd    this none this
  #213:destroy_session          unknown hacker (#35) rxd    this none this
  #213:initialize_connection    Core-Wizard (#184)   rxd    this none this
  #213:finalize_connection      Core-Wizard (#184)   rxd    this none this
  #213:parse_version            Core-Wizard (#184)   rxd    this none this
  #213:compare_version_range    Core-Wizard (#184)   rxd    this none this
  #213:compare_version          Core-Wizard (#184)   rxd    this none this
  #213:unparse_version          Core-Wizard (#184)   rxd    this none this
  #213:session_for              Core-Wizard (#184)   rxd    this none this
  #213:"user_created user_connected user_reconnected" Core-Wizard (#184) rxd this none this
  #213:"user_disconnected user_client_disconnected" Core-Wizard (#184) rxd this none this
  #213:do_out_of_band_command   Core-Wizard (#184)   rxd    this none this
  #213:"package_name match_package packges" unknown hacker (#35) rxd this none this
  #213:wait_for_package         unknown hacker (#35) rxd    this none this
  #213:nominate_for_core        Core-Wizard (#184)   rxd    this none this
  #213:handles_package          unknown hacker (#35) rxd    this none this
  #213:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
-----
MCP
===

Rewritten from `help mcp-spec'[1] June 7, 1994 by Jay Carlson.  Comments solicited; send mail to the `@proj usability client MCP' mailing list, moo-cows, or private email to j@io.com.

The MOO Client Protocol is a standard for transmitting structured "requests" between MUD clients and servers.  The original specification is available as `help mcp-spec'[2], but the skeleton of a rewrite is here:

mcp-goals[3]
      History and goals of the MCP protocol
mcp-syntax[4]
      Syntactic description of MCP requests
mcp-semantics[5]
      Semantics of MCP requests
mcp-requests[6]
      Documented request types

That is not a valid command.
-----
`HELP @MCP' AMBIGUOUS
=====================

Sorry, the topic `@mcp' is ambiguous.  I don't know which of the following topics you mean:

`help mcp'[1]           `help mcp-authentication'[2]
`help mcp-display-url'[3]                       `help mcp-edit'[4]
`help mcp-ftp'[5]       `help mcp-goals'[6]     `help mcp-gopher'[7]
`help mcp-index'[8]     `help mcp-requests'[9]  `help mcp-semantics'[10]
`help mcp-spec'[11]     `help mcp-syntax'[12]   `help mcp-x-audio'[13]

-----
MCP EDIT* REQUESTS
==================

A multi-line request for the client to invoke a local editor on the attached text, and later send the edited text to the server.

KEYWORDS
--------

type:
=====

Optional.  Suggested values include program, text, string, value and mail.  The client may be able to use this information to provide a specialized editing mode.

name:
=====

Optional.  A human-readable descriptive name for what's being edited.

In existing Emacs clients, this is used for the buffer name.  In tkmoo, name: is used as the window and icon title for the workspace editing the text.

upload:
=======

Required.  Specifies a line to prefix the edited text with before sending to the server.  When the text is sent to the server, it is followed by a line of a single period.

NOTES
-----

Typically the upload: value will be a command that starts reading input from the player, like @paste or @qsend; the MOO will use $command_utils:read_lines() to consume the uploaded lines.

Proposal: Every known use of #$#edit requires "." as its final line sent back to the server.  Worse, it's not defined that dot-quoting should be performed on the uploaded text, which $command_utils:read_lines() expects.  We should either explicitly state these things, or we should use multi-line MCP requests to send the text back to the server.

EXAMPLES
--------

A request to provide an editing session for a property:

  #$#edit* 12345678 type: text name: Dave.test upload: "@set-note-text #75.test"
  @@@This is a test.
  @@@
  #$#END

A request to provide an editing session for a verb:

  #$#edit* 12345678 type: program name: Dave:test upload: "@program #75:test none none none"
  @@@player:tell("This is a test.");
  #$#END

-----
MCP
===

Rewritten from `help mcp-spec'[1] June 7, 1994 by Jay Carlson.  Comments solicited; send mail to the `@proj usability client MCP' mailing list, moo-cows, or private email to j@io.com.

The MOO Client Protocol is a standard for transmitting structured "requests" between MUD clients and servers.  The original specification is available as `help mcp-spec'[2], but the skeleton of a rewrite is here:

mcp-goals[3]
      History and goals of the MCP protocol
mcp-syntax[4]
      Syntactic description of MCP requests
mcp-semantics[5]
      Semantics of MCP requests
mcp-requests[6]
      Documented request types

-----
MCP REQUEST SYNTAX
==================

Input and output to and from client and server is presumed to be divided into records (called `lines' hereafter).

An MCP request is of the general form:

  #$#<request-name>[*][ <auth-key>][ <keyword>: <value>]...
 

"#$#" must be the first three characters in the line.

<request-name> is a string of one or more printable ASCII characters.  It may not contain spaces, double-quotes, backslashes or asterisks.

Proposal: require <request-name> to start with a letter.  This reserves a substantial part of the namespace for private out-of-band protocols, or other protocol extensions.

<auth-key> is a string of one or more printable ASCII characters.  It may not contain spaces, double-quotes, colons or backslashes.

<keyword> is a string of one or more printable ASCII characters.  It may not contain spaces, double-quotes, colons, or backslashes.

<value> is 

  o  a string of one or more printable ASCII characters not containing spaces, double-quotes or backslashes 
  o  OR is a string of zero or more printable ASCII characters, enclosed in double-quotes, with double-quotes and backslashes inside the string `quoted' by preceding them with a backslash.

Note that the empty string must be quoted.  Also, the ASCII TAB character is not allowed in <value>s, at all.

Proposal: disallow unquoted <value>s with colons in them.  This is not strictly necessary, but it could detect some bugs in MCP request generators.

If the asterisk after <request-name> is present, this line starts a `multi-line request'.  Zero or more lines of data associated with the request follow, prepended with "@@@".  These lines are terminated with a single line of the form "#$#END".

Note that the 1.7.7 LambdaMOO server cannot properly handle multi-line requests sent by a client if OUT_OF_BAND_PREFIX is defined as "#$#".

Proposal: multi-line requests, in their current form, should be deprecated in favor of some other construct providing this functionality.

Category  Command            Used for
--------  -------            --------
edit      @edit-options      the editors
mail      @mail-options      the mail system
who       @who-options       the @who command
misc      @misc-options      assorted preferences
client    @client-options    client capabilities
parse     @parse-options     command parsing
building  @building-options  options for building
list      @list-options      the @list command
display   @display-options   the @display command
eval      @eval-options      the eval command
--------  -------            --------
Current client options:

-edit          Your client can't do local editing.
-ftp           Your client can't fetch FTP documents.
-gopher        Your client can't handle gopher requests locally.
-help-urls     The help system should display help as jtext.
-urls          Your client won't fetch and display URLs locally.
-mcp-edit      Your client can't do MCP standard editing.
+edit          Your client can do local editing.
+mcp-edit      Your client can do MCP standard editing.
The Note Editor

Do a 'look' to get the list of commands, or 'help' for assistance.

Now editing "Crag"(#243).description.  [string mode]
The First Room
This is all there is right now.  A leather couch is here.
-----
`HELP @MCP-OPTIONS' NOT FOUND
=============================

Sorry, but no help is available on `@mcp-options'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
@OPTIONS
========

Usage:  @options
        @options <category>
        @options all
        @options <category> <option>

There are a number of variations you can request in the way the MOO interacts with you.  For example, you can specify that you want your email address to be generally available to other people's MOO programs.  The options system allows you to view and set these preferences.

The @options command with no arguments will give you a list of different option categories available.  Each shows a category name (which you can use as a <category> argument to @options), a command (which you can use instead of `@options <category>'), and a very brief explanation of what the category is about.

`@options <category>' displays the options for the given category.  Each option is shown with its current setting, and a brief explanation of what the current setting means.  `@options all' shows all the options for all the categories.

`@options <category> <option>' either shows or sets the given option in the given category.  Each option has a name; the ways you can use this name in an @options command are as follows:

  o  <name> alone shows you the current setting, with a brief explanation.
  o  +<name> and -<name> turn most options on or off.  Obviously, this only works for simple on/off options.
  o  <name>=<value> sets a more complicated option.  For an example, see the manymsgs option in `help mail-options'[1].

Category  Command            Used for
--------  -------            --------
edit      @edit-options      the editors
mail      @mail-options      the mail system
who       @who-options       the @who command
misc      @misc-options      assorted preferences
client    @client-options    client capabilities
parse     @parse-options     command parsing
building  @building-options  options for building
list      @list-options      the @list command
display   @display-options   the @display command
eval      @eval-options      the eval command
--------  -------            --------
Current display options:

-blank-tnt     Treat `this none this' verbs like the others.
-shortprep     Display prepositions in full.
-firstancestor ./: will not show ancestor properties/verbs.
Current edit options:

-quiet-insert       Report line numbers on insert or append.
-eval-subs          Ignore .eval_subs when compiling verbs.
-local              Use in-MOO text editors.
+local              Ship text to client for local editing.
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "str:#243.description" name: Crag.description type: string content*: "" _data-tag: 18962113990
#$#* 18962113990 content: An anachronistic cliche barbarian. He may wish to axe you a question.
#$#: 18962113990
Set description property of Crag (#243).
An anachronistic cliche barbarian. He may wish to axe you a question.
He is awake and looks alert.
No such verb, "do_command"
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {84909, 1365408000}
-------------------------------- finished ---------------------------------
0 (#244) [ readable ]
  Child of root class (#1).
  #244:*                        Crag (#243)          rx     any any any
-------------------------------- finished ---------------------------------
Verb #244:* [1] {any any any} removed.
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
You sit on the leather couch.
leather couch (#245) [ readable ]
  Child of generic piece of furniture (#81).
  Location first room (#70).
-------------------------------- finished ---------------------------------
leather couch (#245) [ readable ]
  Child of generic piece of furniture (#81).
  Location first room (#70).
 squeeze                 Crag (#243)           r c    0
,seats                   Crag (#243)           r c    3
 sit_msg                 Crag (#243)           r c    {#69, "do", {"name", "p..
 squeeze_msg             Crag (#243)           r c    {#69, "do", {"name", "d..
 stand_msg               Crag (#243)           r c    {#69, "do", {"name", "d..
 fall_msg                Crag (#243)           r c    {#69, "do", {"name", "d..
 shove_msg               Crag (#243)           r c    {#69, "do", {"dname", "..
 also_shove_msg          Crag (#243)           r c    {#69, "do", {"dname", "..
 nosqueeze_msg           Crag (#243)           r c    {#69, "do", "There's no..
 integrate_empty_msg     Crag (#243)           r c    {#69, "do", {"name", "t..
 integrate_sitters_msg   Crag (#243)           r c    {#69, "do", "  ", {"nam..
 next_to_msg             Crag (#243)           r c    {#69, "do", " ", {"noun..
 obvious_seat            Crag (#243)           r c    1
 already_sitting_msg     Crag (#243)           r c    {#69, "do", "You are al..
 move_next_to_msg        Crag (#243)           r c    {#69, "do", {"name", "p..
 help_text               Crag (#243)           r c    {"Users can sit on, sho..
 desc_sitting_msg        Crag (#243)           r c    ""
 desc_empty_msg          Crag (#243)           r c    ""
,sitting                 unknown hack (#35)    r      {#243}
 empty_msg               Crag (#243)           r c    {#69, "do"}
 sitting_msg             Crag (#243)           r c    {#69, "do", "sitting"}
 on_msg                  Crag (#243)           r c    {#69, "do", "on"}
 desc_along_with_msg     Crag (#243)           r c    {#69, "do", "along with"}
 drop_failed_msg         Crag (#243)           r c    {#69, "do", "You can't ..
 drop_succeeded_msg      Crag (#243)           r c    {#69, "do", "You drop "..
 odrop_failed_msg        Crag (#243)           r c    {#69, "do", {"verb", "p..
 odrop_succeeded_msg     Crag (#243)           r c    {#69, "do", {"verb", "p..
 otake_succeeded_msg     Crag (#243)           r c    {#69, "do", {"verb", "p..
 otake_failed_msg        Crag (#243)           r c    ""
 take_succeeded_msg      Crag (#243)           r c    {#69, "do", "You take "..
 take_failed_msg         Crag (#243)           r c    {#69, "do", "You can't ..
,key                     Crag (#243)             c    0
,aliases                 Crag (#243)           r c    {"leather couch", "couc..
 description             Crag (#243)           r c    "A generic piece of fur..
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Crag (#243)           r c    ""
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
 unique                  Crag (#243)           r c    0
 proper                  Crag (#243)           r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {1314, 1365580800}
-------------------------------- finished ---------------------------------
Your current object is now _, a generic group (#244).
leather couch (#245) [ readable ]
  Child of generic piece of furniture (#81).
  Location first room (#70).
-------------------------------- finished ---------------------------------
=> {}
Generic Feature Object (#65) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
.feature_verbs           unknown hack (#35)    r c    {"using"}
.feature_ok              unknown hack (#35)    r      0
.commands                unknown hack (#35)    r      {"@reg*ister @unreg*ist..
.registry                unknown hack (#35)    r      #151
.help_text               unknown hack (#35)    r c    "The Generic Feature Ob..
-------------------------------- finished ---------------------------------
Generic Feature Object (#65) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
   #65:look_self                unknown hacker (#35) rxd    this none this
   #65:"using this"             unknown hacker (#35) rxd    this none this
   #65:examine_commands_ok      unknown hacker (#35) rxd    this none this
   #65:"@fix-commands @fix_commands" Core-Wizard (#184) rx  this none none
   #65:set_commands             unknown hacker (#35) rx     this none this
   #65:match_command            unknown hacker (#35) rx     this none this
   #65:moveto                   unknown hacker (#35) rxd    this none this
   #65:initialize               unknown hacker (#35) rx     this none this
   #65:set_feature_ok           unknown hacker (#35) rxd    this none this
   #65:obvious_verbs            Core-Wizard (#184)   rxd    this none this
   #65:examine_verb_ok          unknown hacker (#35) rxd    this none this
   #65:"@reg*ister @unreg*ister" Core-Wizard (#184)  rxd    this none none
   #65:match_type_object        unknown hacker (#35) rxd    this none this
   #65:nominate_for_core        Core-Wizard (#184)   rx     this none this
   #65:help_text                unknown hacker (#35) rx     this none this
   #65:recycle                  Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Object #3 does not define that verb, but its ancestor #1 does.
#1:"huh" this none this
cp = caller_perms();
if (!valid(cp))
  if (cp == $nothing)
    cp = player;
  else
    $error:raise(E_PERM);
  endif
endif
set_task_perms(cp);
$command_utils:do_huh(verb, args);
That is not a valid command.
Category  Command            Used for
--------  -------            --------
edit      @edit-options      the editors
mail      @mail-options      the mail system
who       @who-options       the @who command
misc      @misc-options      assorted preferences
client    @client-options    client capabilities
parse     @parse-options     command parsing
building  @building-options  options for building
list      @list-options      the @list command
display   @display-options   the @display command
eval      @eval-options      the eval command
--------  -------            --------
#50:"do_huh" this none this
 1:  ":do_huh(verb,args)  what :huh should do by default.";
 2:  set_task_perms(cp = caller_perms());
 3:  verb = args[1];
 4:  args = args[2];
 5:  bad = "That is not a valid command";
 6:  notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
 7:  if (valid(player.location))
 8:    dobj = player.location:match_object(dobjstr);
 9:    iobj = player.location:match_object(iobjstr);
10:  endif
11:  if (player:my_huh(verb, args))
12:    "... the player found something funky to do ...";
13:  elseif (caller:here_huh(verb, args))
14:    "... the room found something funky to do ...";
15:  elseif (this:extra_huh(verb, args))
16:    "... we found something on dobj or iobj";
17:  elseif (player:last_huh(verb, args))
18:    "... player's second round found something to do ...";
19:    "elseif ($mistake_tracker:handle_failed_command(player, verb, argstr, dobjstr, prepstr, iobjstr, dobj, iobj))";
20:    "... experimental mistake learner found something to do ...";
21:  elseif (dobj == $ambiguous_match)
22:    "... from here on, it's all error-reporting.";
23:    if (iobj == $ambiguous_match)
24:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
25:    else
26:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" is an ambiguous name)."));
27:    endif
28:  elseif (iobj == $ambiguous_match)
29:    player:(notify)(tostr(bad, " (\"", iobjstr, "\" is an ambiguous name)."));
30:  else
31:    player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args)) || player:(notify)(bad + ".");
32:  endif
leather couch (#245) [ readable ]
  Child of generic piece of furniture (#81).
  Location first room (#70).
-------------------------------- finished ---------------------------------
generic piece of furniture (#81) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic sittable object (#80).
  Location generic room (#3).
   #81:sit                      unknown hacker (#35) rxd    any on top of/on/onto/upon this
   #81:"stand get"              unknown hacker (#35) rxd    any out of/from inside/from this
   #81:"sh*ove pu*sh"           unknown hacker (#35) rxd    any out of/from inside/from this
   #81:description              unknown hacker (#35) rxd    this none this
   #81:integrate_room_msg       unknown hacker (#35) rxd    this none this
   #81:"stand_msg squeeze_msg sit_msg fall_msg shove_msg also_shove_msg next_to_msg already_sitting_msg" unknown hacker (#35) rxd this none this
   #81:next_to                  unknown hacker (#35) rx     this none this
   #81:delete_sitting           unknown hacker (#35) rx     this none this
   #81:insert_sitting           unknown hacker (#35) rxd    this none this
   #81:moveto                   unknown hacker (#35) rxd    this none this
   #81:visible                  unknown hacker (#35) rxd    this none this
   #81:empty_message_integrate_room unknown hacker (#35) rxd this none this
   #81:help_verbs               Core-Wizard (#184)   rxd    this none this
   #81:obvious_seat_for         Core-Wizard (#184)   rxd    this none this
   #81:move_next_to             unknown hacker (#35) rxd    this none this
   #81:shoving_policy           unknown hacker (#35) rxd    this none this
   #81:modname_occupied         Core-Wizard (#184)   rxd    this none this
   #81:desc_sitting_text        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           First room                    0 seconds                         

Total: 1 person, who has been active recently.
Object #3 does not define that verb, but its ancestor #1 does.
#1:"huh" this none this
 1:  cp = caller_perms();
 2:  if (!valid(cp))
 3:    if (cp == $nothing)
 4:      cp = player;
 5:    else
 6:      $error:raise(E_PERM);
 7:    endif
 8:  endif
 9:  set_task_perms(cp);
10:  $command_utils:do_huh(verb, args);
#50:"do_huh" this none this
 1:  ":do_huh(verb,args)  what :huh should do by default.";
 2:  set_task_perms(cp = caller_perms());
 3:  verb = args[1];
 4:  args = args[2];
 5:  bad = "That is not a valid command";
 6:  notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
 7:  if (valid(player.location))
 8:    dobj = player.location:match_object(dobjstr);
 9:    iobj = player.location:match_object(iobjstr);
10:  endif
11:  if (player:my_huh(verb, args))
12:    "... the player found something funky to do ...";
13:  elseif (caller:here_huh(verb, args))
14:    "... the room found something funky to do ...";
15:  elseif (this:extra_huh(verb, args))
16:    "... we found something on dobj or iobj";
17:  elseif (player:last_huh(verb, args))
18:    "... player's second round found something to do ...";
19:    "elseif ($mistake_tracker:handle_failed_command(player, verb, argstr, dobjstr, prepstr, iobjstr, dobj, iobj))";
20:    "... experimental mistake learner found something to do ...";
21:  elseif (dobj == $ambiguous_match)
22:    "... from here on, it's all error-reporting.";
23:    if (iobj == $ambiguous_match)
24:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
25:    else
26:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" is an ambiguous name)."));
27:    endif
28:  elseif (iobj == $ambiguous_match)
29:    player:(notify)(tostr(bad, " (\"", iobjstr, "\" is an ambiguous name)."));
30:  else
31:    player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args)) || player:(notify)(bad + ".");
32:  endif
Last modified Thu Jul 24 10:07:00 2008 PDT by Xplat (#4014) (on Waterpoint).
#3:"here_huh" this none this
 1:  ":here_huh(verb,args)  -- room-specific :huh processing.  This should return 1 if it finds something interesting to do and 0 otherwise; see $command_utils:do_huh.";
 2:  "For the generic room, we check for the case of the caller specifying an exit for which a corresponding verb was never defined.";
 3:  "If that fails, we check to see if the verb is defined on an exit or other object which can match with player:my_match_object() in the room.";
 4:  set_task_perms(caller_perms());
 5:  verb = args[1];
 6:  if (args[2] || $failed_match == (exit = this:match_exit(verb)))
 7:    "... okay, it's not an exit.  see if it's a verb defined on an exit ...";
 8:    if ($server_options.support_numeric_verbname_strings && (!verb || $string_utils:is_numeric(verb)))
 9:      "don't allow numeric verbs below, cuz it's not matching on verb name";
10:      "splat 2002.01.29 -- don't allow null verbs either, although you can't enter them anyway at the moment";
11:      player:tell("That is not a valid command.");
12:      return 1;
13:    endif
14:    dobj = this:match_object(dobjstr);
15:    iobj = this:match_object(iobjstr);
16:    for o in ({this, dobj, iobj})
17:      if (typeof(o) == OBJ && valid(o) && (where = $object_utils:has_callable_verb(o, verb)))
18:        vargs = verb_args(where[1], verb);
19:        if (vargs[2] == "any" || (!prepstr && vargs[2] == "none") || index("/" + vargs[2] + "/", "/" + prepstr + "/"))
20:          if (vargs[1] == "any" || (!dobjstr && vargs[1] == "none") || (dobj == o && vargs[1] == "this"))
21:            if (vargs[3] == "any" || (!iobjstr && vargs[3] == "none") || (iobj == o && vargs[3] == "this"))
22:              o:(verb)(@args[2]);
23:              return 1;
24:            endif
25:          endif
26:        endif
27:      endif
28:    endfor
29:    "... okay it's not a verb defined on an exit either.  we give up ...";
30:    return 0;
31:  elseif (valid(exit))
32:    exit:invoke();
33:  elseif (exit == $ambiguous_match)
34:    "... ambiguous exit ...";
35:    player:tell("Which direction `", verb, "' do you mean?");
36:  endif
37:  return 1;
Last modified Thu Jul 24 10:07:00 2008 PDT by Xplat (#4014) (on Waterpoint).
#3:"here_huh" this none this
":here_huh(verb,args)  -- room-specific :huh processing.  This should return 1 if it finds something interesting to do and 0 otherwise; see $command_utils:do_huh.";
"For the generic room, we check for the case of the caller specifying an exit for which a corresponding verb was never defined.";
"If that fails, we check to see if the verb is defined on an exit or other object which can match with player:my_match_object() in the room.";
set_task_perms(caller_perms());
verb = args[1];
if (args[2] || $failed_match == (exit = this:match_exit(verb)))
  "... okay, it's not an exit.  see if it's a verb defined on an exit ...";
  if ($server_options.support_numeric_verbname_strings && (!verb || $string_utils:is_numeric(verb)))
    "don't allow numeric verbs below, cuz it's not matching on verb name";
    "splat 2002.01.29 -- don't allow null verbs either, although you can't enter them anyway at the moment";
    player:tell("That is not a valid command.");
    return 1;
  endif
  dobj = this:match_object(dobjstr);
  iobj = this:match_object(iobjstr);
  for o in ({this, dobj, iobj})
    if (typeof(o) == OBJ && valid(o) && (where = $object_utils:has_callable_verb(o, verb)))
      vargs = verb_args(where[1], verb);
      if (vargs[2] == "any" || (!prepstr && vargs[2] == "none") || index("/" + vargs[2] + "/", "/" + prepstr + "/"))
        if (vargs[1] == "any" || (!dobjstr && vargs[1] == "none") || (dobj == o && vargs[1] == "this"))
          if (vargs[3] == "any" || (!iobjstr && vargs[3] == "none") || (iobj == o && vargs[3] == "this"))
            o:(verb)(@args[2]);
            return 1;
          endif
        endif
      endif
    endif
  endfor
  "... okay it's not a verb defined on an exit either.  we give up ...";
  return 0;
elseif (valid(exit))
  exit:invoke();
elseif (exit == $ambiguous_match)
  "... ambiguous exit ...";
  player:tell("Which direction `", verb, "' do you mean?");
endif
return 1;
#47:"has_callable_verb" this none this
"Usage:  has_callable_verb(object, verb)";
"See if an object has a verb that can be called by another verb (i.e., that has its x permission bit set).";
"Return {location}, where location is the object that defines the verb, or 0 if the object doesn't have the verb.";
{object, verbname} = args;
while (valid(object))
  if (`index(verb_info(object, verbname)[2], "x") ! E_VERBNF => 0' && verb_code(object, verbname))
    return {object};
  endif
  object = parent(object);
endwhile
return 0;
#50:"do_huh" this none this
":do_huh(verb,args)  what :huh should do by default.";
set_task_perms(cp = caller_perms());
verb = args[1];
args = args[2];
bad = "That is not a valid command";
notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
if (valid(player.location))
  dobj = player.location:match_object(dobjstr);
  iobj = player.location:match_object(iobjstr);
endif
if (player:my_huh(verb, args))
  "... the player found something funky to do ...";
elseif (caller:here_huh(verb, args))
  "... the room found something funky to do ...";
elseif (this:extra_huh(verb, args))
  "... we found something on dobj or iobj";
elseif (player:last_huh(verb, args))
  "... player's second round found something to do ...";
  "elseif ($mistake_tracker:handle_failed_command(player, verb, argstr, dobjstr, prepstr, iobjstr, dobj, iobj))";
  "... experimental mistake learner found something to do ...";
elseif (dobj == $ambiguous_match)
  "... from here on, it's all error-reporting.";
  if (iobj == $ambiguous_match)
    player:(notify)(tostr(bad, " (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
  else
    player:(notify)(tostr(bad, " (\"", dobjstr, "\" is an ambiguous name)."));
  endif
elseif (iobj == $ambiguous_match)
  player:(notify)(tostr(bad, " (\"", iobjstr, "\" is an ambiguous name)."));
else
  player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args)) || player:(notify)(bad + ".");
endif
That object does not define that verb.
command utilities (#50) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #50:object_match_failed      Core-Wizard (#184)   rxd    this none this
   #50:"player_match_result player_match_failed" Core-Wizard (#184) rxd this none this
   #50:read                     Core-Wizard (#184)   rx     this none this
   #50:read_lines               Core-Wizard (#184)   rx     this none this
   #50:yes_or_no                Core-Wizard (#184)   rx     this none this
   #50:read_lines_escape        Core-Wizard (#184)   rxd    this none this
   #50:suspend                  Core-Wizard (#184)   rxd    this none this
   #50:running_out_of_time      unknown hacker (#35) rxd    this none this
   #50:suspend_if_needed        Core-Wizard (#184)   rxd    this none this
   #50:dump_lines               unknown hacker (#35) rxd    this none this
   #50:explain_syntax           Core-Wizard (#184)   rxd    this none this
   #50:do_huh                   Core-Wizard (#184)   rx     this none this
   #50:task_info                Core-Wizard (#184)   rxd    this none this
   #50:room_match_failed        Core-Wizard (#184)   rxd    this none this
   #50:_suspend                 Core-Wizard (#184)   rxd    this none this
   #50:_resume                  Core-Wizard (#184)   rxd    this none this
   #50:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#50:"_suspend" this none this
 1:  "_suspend -- suspends a task until resumed via $command_utils:_resume or time exceeds allotment (E_RANGE returned)";
 2:  "Usage: $command_utils:_suspend();";
 3:  if (length(args) > 1)
 4:    return E_ARGS;
 5:  elseif (length(args) == 1 && typeof(args[1]) != NUM)
 6:    return E_INVARG;
 7:  else
 8:    me = task_id();
 9:    this.suspenders = {@this.suspenders, me};
10:    timeout = args ? args[1] + time() | $maxint;
11:    while (1)
12:      for pair in ({{0, 5}, {1, 5}, {2, 999999999}})
13:        seconds = pair[1];
14:        times = pair[2];
15:        for i in [1..times]
16:          suspend(seconds);
17:          if (time() > timeout)
18:            $error:raise(E_RANGE);
19:            return;
20:          endif
21:          j = me in this.resumers;
22:          if (j)
23:            result = this.resume_values[j];
24:            this.resumers[j..j] = {};
25:            this.resume_values[j..j] = {};
26:            return result;
27:          endif
28:        endfor
29:      endfor
30:    endwhile
31:  endif
#50:"do_huh" this none this
":do_huh(verb,args)  what :huh should do by default.";
set_task_perms(cp = caller_perms());
verb = args[1];
args = args[2];
bad = "That is not a valid command";
notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
if (valid(player.location))
  dobj = player.location:match_object(dobjstr);
  iobj = player.location:match_object(iobjstr);
endif
if (player:my_huh(verb, args))
  "... the player found something funky to do ...";
elseif (caller:here_huh(verb, args))
  "... the room found something funky to do ...";
elseif (this:extra_huh(verb, args))
  "... we found something on dobj or iobj";
elseif (player:last_huh(verb, args))
  "... player's second round found something to do ...";
  "elseif ($mistake_tracker:handle_failed_command(player, verb, argstr, dobjstr, prepstr, iobjstr, dobj, iobj))";
  "... experimental mistake learner found something to do ...";
elseif (dobj == $ambiguous_match)
  "... from here on, it's all error-reporting.";
  if (iobj == $ambiguous_match)
    player:(notify)(tostr(bad, " (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
  else
    player:(notify)(tostr(bad, " (\"", dobjstr, "\" is an ambiguous name)."));
  endif
elseif (iobj == $ambiguous_match)
  player:(notify)(tostr(bad, " (\"", iobjstr, "\" is an ambiguous name)."));
else
  player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args)) || player:(notify)(bad + ".");
endif
That is not a valid command.
#50:"do_huh" this none this
":do_huh(verb,args)  what :huh should do by default.";
set_task_perms(cp = caller_perms());
verb = args[1];
args = args[2];
bad = "That is not a valid command";
notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
if (valid(player.location))
  dobj = player.location:match_object(dobjstr);
  iobj = player.location:match_object(iobjstr);
endif
if (player:my_huh(verb, args))
  "... the player found something funky to do ...";
elseif (caller:here_huh(verb, args))
  "... the room found something funky to do ...";
elseif (this:extra_huh(verb, args))
  "... we found something on dobj or iobj";
elseif (player:last_huh(verb, args))
  "... player's second round found something to do ...";
  "elseif ($mistake_tracker:handle_failed_command(player, verb, argstr, dobjstr, prepstr, iobjstr, dobj, iobj))";
  "... experimental mistake learner found something to do ...";
elseif (dobj == $ambiguous_match)
  "... from here on, it's all error-reporting.";
  if (iobj == $ambiguous_match)
    player:(notify)(tostr(bad, " (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
  else
    player:(notify)(tostr(bad, " (\"", dobjstr, "\" is an ambiguous name)."));
  endif
elseif (iobj == $ambiguous_match)
  player:(notify)(tostr(bad, " (\"", iobjstr, "\" is an ambiguous name)."));
else
  player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args)) || player:(notify)(bad + ".");
endif
-----
CALLER_PERMS()
==============

Syntax:  caller_perms ()   => obj

Returns the permissions in use by the verb that called the currently-executing verb.  If the currently-executing verb was not called by another verb (i.e., it is the first verb called in a command or server task), then `caller_perms()' returns `#-1'.

Object #70 does not define that verb, but its ancestor #1 does.
#1:"match_object" this none this
 1:  ":match_object(string [,who])";
 2:  args[2..1] = {this};
 3:  return $string_utils:match_object(@args);
Last modified Tue Jan  2 12:12:27 2001 PST by splat (#4014) (on Waterpoint).
#18:"match_object" this none this
 1:  ":match_object(string,location[,someone])";
 2:  "Returns the object matching the given string for someone, on the assumption that s/he is in the given location.  `someone' defaults to player.";
 3:  "This first tries :literal_object(string), \"me\"=>someone,\"here\"=>location, then player:match(string) and finally location:match(string) if location is valid.";
 4:  "This is the default algorithm for use by room :match_object() and player :my_match_object() verbs.  Player verbs that are calling this directly should probably be calling :my_match_object instead.";
 5:  {string, here, ?who = player} = args;
 6:  if ($failed_match != (object = this:literal_object(string)))
 7:    return object;
 8:  elseif (string == "_" && typeof(co = `who.current_object[1] ! ANY') == OBJ)
 9:    return co;
10:  elseif (string == "me")
11:    return who;
12:  elseif (string == "here")
13:    return here;
14:  elseif (valid(pobject = who:match(string)) && string in {@pobject.aliases, pobject:name()} || !valid(here))
15:    "...exact match in player or room is bogus...";
16:    return pobject;
17:  elseif (valid(hobject = here:match(string)) && string in {@hobject.aliases, hobject:name()})
18:    "...exact match in room or match in player failed completely...";
19:    return hobject;
20:  elseif (pobject != $failed_match)
21:    return pobject;
22:  elseif (hobject != $failed_match)
23:    return hobject;
24:  elseif (arrow = rindex(string, "->"))
25:    guardian = this:match_object(string[1..arrow - 1], @listdelete(args, 1));
26:    if (valid(guardian))
27:      o = guardian:match_type_object(string[arrow + 2..$]);
28:      return typeof(o) == OBJ ? o | $failed_match;
29:    else
30:      return $failed_match;
31:    endif
32:  elseif (typeof(number = $code_utils:tonum(string)) == NUM)
33:    " if (((number > 0) && (number <= length(who.contributed_links))) && ((jaddress = who.contributed_links[number])[1] == $jaddress.object))";
34:    "   return this:literal_object($jaddress:extract(\"objnum\", jaddress)[2]);";
35:    " (now works with other addresses)";
36:    if (`number > 0 && number <= length(who.contributed_links) && (jaddress_obj = $jaddress:extract("objnum", who.contributed_links[number])) ! E_PROPNF')
37:      return this:literal_object(jaddress_obj[2]);
38:    else
39:      return $failed_match;
40:    endif
41:  elseif ((first = string[1..(space = index(string, " ")) - 1]) == "my")
42:    return who:match(string[space + 1..$]);
43:  elseif (subs = match(string, "%([^ ]*%)%('s%|s'%) +%(.*%)$"))
44:    if (valid(whose = $string_utils:match_object(@listset(args, substitute("%1", subs), 1))))
45:      return whose:match(substitute("%3", subs));
46:    else
47:      return $failed_match;
48:    endif
49:  elseif (subs = match(string, "^%(a%|an%|the%) +%([^ ].*%)$"))
50:    return this:match_object(substitute("%2", subs), here, who);
51:  elseif (subs = match(string, "^%([0-9]+%) +%([^ ].*%)$"))
52:    return this:match_object(substitute("%2", subs), here, who);
53:  else
54:    return $failed_match;
55:  endif
Objects owned by Crag (from #0 to #247):
  4K #243 Crag                      *[first room]
  1K #245 leather couch             *[first room]
 <1K #244 generic group              [Nowhere]
-- 3 objects.  Total bytes: 6,414.--------------------------------------------
Your current object is _, a generic group (#244).
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "str:#244.description" name: "generic group.description" type: string content*: "" _data-tag: 3442261031
#$#* 3442261031 content: 
#$#: 3442261031
Set description property of the generic group (#244).
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
    #5:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
#5:"g*et t*ake" this none none
 1:  "Usage: get/take <thing>";
 2:  "  This allows you to pick up things.";
 3:  set_task_perms(callers() ? caller_perms() | player);
 4:  if (this.location == player)
 5:    player:tell("You already have that!");
 6:  elseif (this.location != player.location)
 7:    player:tell("That's not here.");
 8:  else
 9:    this:moveto(player);
10:    if (this.location == player)
11:      player:tell_lines(this:take_succeeded_msg() || "Taken.");
12:      if (msg = this:otake_succeeded_msg())
13:        player.location:announce(player:dnamec(), " ", msg);
14:      endif
15:    else
16:      player:tell_lines(this:take_failed_msg() || "You can't pick that up.");
17:      if (msg = this:otake_failed_msg())
18:        player.location:announce(player:dnamec(), " ", msg);
19:      endif
20:    endif
21:  endif
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
-----
@CREATE
=======

Syntax:  @create <parent-object> named "<names>"

The main command for creating objects other than rooms and exits (for them, see `help @dig'[1]; it's much more convenient).

The first argument specifies the 'parent' of the new object: loosely speaking, the 'kind' of object you're creating.  You can use a `class name' such as $note, $letter, $thing, or $container; you can also specify a parent object by object number or just by name, if it's nearby.

The <names> are given in the same format as in the @rename command:

        <name-and-alias>,<alias>,...,<alias> [preferred]
        <name>:<alias>,...,<alias>           [not preferred]

See `help @rename' for a discussion of the difference between a name and an alias.
See `help naming' for a discussion of names and articles.

You now have Generic Pile (aka pile) with object number #242 and parent generic group (#244).
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
.legal_name_regexp       unknown hack (#35)    r      "^[a-z_][a-z0-9_]*$"
.free_addition           unknown hack (#35)    r      0
.group                   Crag (#243)           r      #244
-------------------------------- finished ---------------------------------
"pile" is not the name of any player.
Registered the Generic Pile (#242) as $local.pile.
=> #244 (generic group)
=> #242 (Generic Pile)
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
    #5:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic containing object (#145) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic event dispatching object (#110).
  Location generic container (#126).
-------------------------------- finished ---------------------------------
generic containing object (#145) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic event dispatching object (#110).
  Location generic container (#126).
  #145:enterfunc                Core-Wizard (#184)   rxd    this none this
  #145:exitfunc                 Core-Wizard (#184)   rxd    this none this
  #145:tell_contents            unknown hacker (#35) rxd    this none this
  #145:"empty_msg in_msg"       unknown hacker (#35) rx     this none this
  #145:in_name                  unknown hacker (#35) rxd    this none this
  #145:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #145:look_self                unknown hacker (#35) rxd    this none this
  #145:look_in                  unknown hacker (#35) rxd    this none this
  #145:visible_of               unknown hacker (#35) rxd    this none this
  #145:contents_for_integration unknown hacker (#35) rxd    this none this
  #145:ok_to_integrate          unknown hacker (#35) rxd    this none this
  #145:acceptable               unknown hacker (#35) rxd    this none this
  #145:in_namec                 unknown hacker (#35) rxd    this none this
  #145:modname_in               unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic event dispatching object (#110) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #110:add_dependent            Core-Wizard (#184)   rxd    this none this
  #110:remove_dependent         Core-Wizard (#184)   rxd    this none this
  #110:"@rm-dep*endent @rmdep*endent" Core-Wizard (#184) r d any out of/from inside/from this
  #110:"@add-dep*endent @adddep*endent" Core-Wizard (#184) r d any at/to this
  #110:initialize               Core-Wizard (#184)   rxd    this none this
  #110:broadcast_event_*        unknown hacker (#35) rx     this none this
  #110:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #110:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
-----
HELP ON THE GENERIC EVENT DISPATCHING OBJECT
============================================

No help found.

That object does not define that verb.
#110:"initialize" this none this
 1:  this.dependents = {};
 2:  return pass(@args);
#110:"broadcast_event_*" this none this
 1:  ":broadcast_event_<type>(@event-args) -- broadcasts the event <type> with args `event-args' to all objects listening to this dispatcher.";
 2:  "if (!$perm_utils:controls(caller_perms(), this))";
 3:  "  return E_PERM;";
 4:  "endif";
 5:  name = verb[11..length(verb)];
 6:  retlist = {};
 7:  for o in (this:("dependents_" + name)(@args))
 8:    ret = o:(name)(@args);
 9:    if (ret)
10:      retlist = {@retlist, ret};
11:    endif
12:  endfor
13:  return retlist;
#110:"dependents dependents_event_*" this none this
 1:  "Copied from event dispatcher (#1751):dependents by Doug (#444) Mon Apr 25 01:08:30 1994 EDT";
 2:  ":dependents:  give the list of all dependents, to which all events could presumably be passed.";
 3:  "By default this simply returns a list.";
 4:  return this.dependents;
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
-------------------------------- finished ---------------------------------
generic containing object (#145) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic event dispatching object (#110).
  Location generic container (#126).
  #145:enterfunc                Core-Wizard (#184)   rxd    this none this
  #145:exitfunc                 Core-Wizard (#184)   rxd    this none this
  #145:tell_contents            unknown hacker (#35) rxd    this none this
  #145:"empty_msg in_msg"       unknown hacker (#35) rx     this none this
  #145:in_name                  unknown hacker (#35) rxd    this none this
  #145:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #145:look_self                unknown hacker (#35) rxd    this none this
  #145:look_in                  unknown hacker (#35) rxd    this none this
  #145:visible_of               unknown hacker (#35) rxd    this none this
  #145:contents_for_integration unknown hacker (#35) rxd    this none this
  #145:ok_to_integrate          unknown hacker (#35) rxd    this none this
  #145:acceptable               unknown hacker (#35) rxd    this none this
  #145:in_namec                 unknown hacker (#35) rxd    this none this
  #145:modname_in               unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
.legal_name_regexp       unknown hack (#35)    r      "^[a-z_][a-z0-9_]*$"
.free_addition           unknown hack (#35)    r      0
.group                   Crag (#243)           r      #244
.pile                    Crag (#243)           r      #242
-------------------------------- finished ---------------------------------
-----
@CREATE
=======

Syntax:  @create <parent-object> named "<names>"

The main command for creating objects other than rooms and exits (for them, see `help @dig'[1]; it's much more convenient).

The first argument specifies the 'parent' of the new object: loosely speaking, the 'kind' of object you're creating.  You can use a `class name' such as $note, $letter, $thing, or $container; you can also specify a parent object by object number or just by name, if it's nearby.

The <names> are given in the same format as in the @rename command:

        <name-and-alias>,<alias>,...,<alias> [preferred]
        <name>:<alias>,...,<alias>           [not preferred]

See `help @rename' for a discussion of the difference between a name and an alias.
See `help naming' for a discussion of names and articles.

  ** property not found, "alias" **
-------------------------------- finished ---------------------------------
,aliases                 Crag (#243)           r c    {"group"}
-------------------------------- finished ---------------------------------
,description             Crag (#243)           r c    {"Generic Groups implement the Composite and Decorator patterns to provide group behavior functionality.", "", "Imagine a dog with a collar which is attached to a stake in the ground with a rope. The \"stake-rope-collar\" relationship is a grouping which mostly behaves like three different things. Players can probably interact with any of the contained items in the same way they would interact with them if they were not attached. The collar-dog relationship is it's own grouping which allows a player to interact with the dog or collar as if they were not attached, but still associates them with each other so that where one goes, the other goes. All the interaction with the components is mediated by the group.", "", "Besides group dissimilar items as above, groups also implement enumerated sets of objects. Some stacks of coins are represented by a Stacks Group object containing one Stack object for each kind of coin present. Those Stack objects know what kind of object they are stacki..
-------------------------------- finished ---------------------------------
Generic Groups implement the Composite and Decorator patterns to provide group behavior functionality.

Imagine a dog with a collar which is attached to a stake in the ground with a rope. The "stake-rope-collar" relationship is a grouping which mostly behaves like three different things. Players can probably interact with any of the contained items in the same way they would interact with them if they were not attached. The collar-dog relationship is it's own grouping which allows a player to interact with the dog or collar as if they were not attached, but still associates them with each other so that where one goes, the other goes. All the interaction with the components is mediated by the group.

Besides group dissimilar items as above, groups also implement enumerated sets of objects. Some stacks of coins are represented by a Stacks Group object containing one Stack object for each kind of coin present. Those Stack objects know what kind of object they are stacking and how many are in the stack. Players in a room containing some stacks of nickles and dimes can "count nickles" without removing them from the set.
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location first room (#70).
-------------------------------- finished ---------------------------------
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location first room (#70).
 newt_victim_msg         Crag (#243)           r c    ""
 newt_msg                Crag (#243)           r c    {#69, "do", {"name", "p..
 public_identity         Crag (#243)           r c    #-1
 programmer_msg          Crag (#243)           r c    {#69, "do", {"dname", "..
 programmer_victim_msg   Crag (#243)           r c    "You are now a programm..
 toad_victim_msg         Crag (#243)           r c    "Have a nice life..."
 toad_msg                Crag (#243)           r c    {#69, "do", {"dname", "..
 mail_identity           Crag (#243)             c    #-1
 boot_player_msg         Crag (#243)           r c    {#69, "do", {"dname", "..
 display_options         Crag (#243)           r c    {}
 list_options            Crag (#243)           r c    {}
 eval_options            Crag (#243)           r c    {{"ticks", 6}, {"env", ..
 recreate_enabled        Crag (#243)           r c    1
 building_options        Crag (#243)           r c    {}
 features                unknown hack (#35)    r      {#67, #68}
,previous_connection     Core-Wizard (#184)           {1365376955, "localhost"}
 mail_lists              Crag (#243)           r c    {}
 email_address           Core-Wizard (#184)           ""
,last_disconnect_time    Core-Wizard (#184)    r      1365551645
,help                    Crag (#243)           r c    0
 linetask                unknown hack (#35)    r      {0, 0}
 linesleft               unknown hack (#35)    r      0
 linebuffer              unknown hack (#35)           {}
 pagelen                 unknown hack (#35)    r      0
 _mail_task              Crag (#243)           r c    0
,owned_objects           Quota (#185)          r      {#243, #245, #244, #242}
 linelen                 unknown hack (#35)    r      -79
,current_folder          Crag (#243)             c    #243
,all_connect_places      Core-Wizard (#184)           {"localhost"}
,last_connect_place      Core-Wizard (#184)           "port 7777 from localho..
 dict                    Crag (#243)           r c    {}
 messages_going          Crag (#243)             c    {}
,responsible             Crag (#243)             c    {}
 lines                   Crag (#243)             c    20
 page_absent_msg         Crag (#243)           r c    {#69, "do", {"dname", "..
 page_origin_msg         Crag (#243)           r c    ""
 page_echo_msg           Crag (#243)           r c    0
 mail_notify             Crag (#243)           r c    {}
 mail_forward            Crag (#243)           r c    {}
,edit_options            Crag (#243)           r c    {"local"}
 mail_options            Crag (#243)           r c    {}
,current_message         Crag (#243)             c    {0, 0}
 messages                Crag (#243)             c    {}
,last_connect_time       Core-Wizard (#184)    r      1365551649
,ownership_quota         Quota (#185)                 -10000
,gender                  Crag (#243)           r c    #156
 home                    unknown hack (#35)    r      #70
,password                Core-Wizard (#184)           "pVyQLU2dxtTzA"
 gaglist                 Crag (#243)           r c    {}
 paranoid                Crag (#243)           r c    0
 spoof_attribution_msg   Crag (#243)           r c    "     --"
 pronoun_sub_style       Crag (#243)           r c    #78
 last_player_paged       unknown hack (#35)    r      "Everyman"
,contributed_line        Core-Wizard (#184)    r      ""
,contributed_links       Core-Wizard (#184)    r      {{#131, {{"subject", "@..
,followers               unknown hack (#35)    r      {}
 followable              unknown hack (#35)    r      1
 integrate_sep_msg       Crag (#243)           r c    "  "
 integration_enabled     Crag (#243)           r c    1
 jtext_form              Core-Wizard (#184)    r      "linemode"
,focus_object            Core-Wizard (#184)    r      #243
 misc_options            Crag (#243)           r c    {{"fstamp", "[ $o:$M $p..
,authentication_key      Core-Wizard (#184)           0
,client_options          Crag (#243)           r c    {"mcp_edit", "edit"}
,link_shepherd           unknown hack (#35)    r      #-1
 walking_task            unknown hack (#35)    r      0
 temp_brief              Crag (#243)           r c    0
,jaddress_stack          unknown hack (#35)    r      {{#131, {{"subject", "m..
 total_started           Core-Wizard (#184)           0
,total_connect_time      Core-Wizard (#184)           802406
,started_keeping_total   Core-Wizard (#184)           1364748609
,current_object          Core-Wizard (#184)    r      {#244, "_"}
 current_object_stack    Core-Wizard (#184)    r      {}
 following               unknown hack (#35)    r      {}
 walk_randomness         Core-Wizard (#184)    r      {1, 8}
 client_features         Crag (#243)           r c    {}
 client_authkey          Crag (#243)           r c    ""
 client_disfuncs         Crag (#243)           r c    {}
 client_debug            Crag (#243)           r c    0
 remote_emote_prefix_msg Crag (#243)           r c    {#69, "do", "(from ", {..
 who_options             Core-Wizard (#184)    r      {{"columns", {"name", "..
 last_entrance_time      Core-Wizard (#184)    r      768064450
 dozing_msg              Crag (#243)           r c    {#69, "do", "idling"}
 idle_start_time         Crag (#243)           r c    0
 idle_msg                Crag (#243)           r c    {#69, "do", "real life ..
 idle_string             Crag (#243)           r c    ""
 dozing_string           Crag (#243)           r c    ""
,doing_string            unknown hack (#35)    r      ""
 doing_msg               Core-Wizard (#184)    r      {#69, "do"}
,disconnect_task         Core-Wizard (#184)    r      774423181
 last_password_time      Core-Wizard (#184)           0
 last_timestamp          Core-Wizard (#184)    r      830677321
,size_quota              Quota (#185)                 {0, 6839, 1365753600, 0}
 shout_msg               Crag (#243)           r c    {#69, "do", {"name", "p..
 contributed_document    Core-Wizard (#184)           E_NONE
 walking_dest            unknown hack (#35)    r      #-1
 use_do_command          Crag (#243)           r c    0
,first_connect_time      Core-Wizard (#184)    r      1364748609
,out_of_band_session     unknown hack (#35)    r      #247
 parse_options           Crag (#243)           r c    {"guess_object", "repor..
 timezone                unknown hack (#35)    r      #39
 queued_task_limit       Core-Wizard (#184)    r      -1
 in_msg                  Crag (#243)           r c    {#69, "do", "in"}
,dependents              Core-Wizard (#184)    r      {}
,key                     Crag (#243)             c    0
,aliases                 Core-Wizard (#184)    r      {"Crag"}
,description             Crag (#243)           r c    "An anachronistic clich..
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Crag (#243)           r c    ""
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
 unique                  Core-Wizard (#184)    r      1
 proper                  Core-Wizard (#184)    r      1
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {4560, 1365753600}
-------------------------------- finished ---------------------------------
=> {"Generic Groups implement the Composite and Decorator patterns to provide group behavior functionality.", "", "Imagine a dog with a collar which is attached to a stake in the ground with a rope. The \"stake-rope-collar\" relationship is a grouping which mostly behaves like three different things. Players can probably interact with any of the contained items in the same way they would interact with them if they were not attached. The collar-dog relationship is it's own grouping which allows a player to interact with the dog or collar as if they were not attached, but still associates them with each other so that where one goes, the other goes. All the interaction with the components is mediated by the group.", "", "Besides group dissimilar items as above, groups also implement enumerated sets of objects. Some stacks of coins are represented by a Stacks Group object containing one Stack object for each kind of coin present. Those Stack objects know what kind of object they are stacking and how many are in the stack. Players in a room containing some stacks of nickles and dimes can \"count nickles\" without removing them from the set."}
You say, "; 1+2"
=> 3
Line 1:  syntax error
1 error.
You say, "Testing TinyFugue /load""
=> 3
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
generic group (#244) [ readable ]
  Child of root class (#1).
,key                     Crag (#243)             c    0
,aliases                 Crag (#243)           r c    {"group"}
,description             Crag (#243)           r c    {"Generic Groups implem..
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Crag (#243)           r c    ""
 integrate_player_msg    Crag (#243)           r c    ""
 integrate_container_msg Crag (#243)           r c    ""
,unique                  Crag (#243)           r c    0
 proper                  Crag (#243)           r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {524, 1365840000}
-------------------------------- finished ---------------------------------
The generic group(#244) has 1 kid.
Generic Pile (#242)
-----
@CO
===

Usage:  @current-object
        @current-object <ref>[..]
        @current-object <base>[<ref>[..]]

The @current-object (@co) command is used to set your current object--an object referred to as _ in commands.  For more information on how to use the current object, see `help current-object'[1].

With no arguments, the command just tells you what your current object is.

If an argument is given, it indicates the object to go to, beginning with an optional `base object' and continuing with a series of references.  (If a base is given, no references need follow.)  The base object, if present, is matched as an ordinary object.  For example, "@co $jtext" would set your current object to the Jtext Dispatcher.

The <ref> segments are mostly properties.  For example, "@co $jtext.link" would set your object to the Link Dispatcher Tag.

If no base is identified, the current object you're already using is used as the base.  For example, after typing the previous command, you could type "@co .preceding" to change your current object to $jtext.link.root, the generic preceding link tag.

In addition to property references, there are two special kinds of <ref> segments for navigation through the object hierarchy.  One of them is ".<", and it works by retracing the steps by which your current object was determined.  For example, again following the preceding commands, "@co .<" would take you back to the Link Dispatcher Tag.

Finally, the ".^" <ref> segment gets you the parent of the current object.  Continuing the example, "@co .^" would bring you to the root class, the parent of the link dispatcher tag.

As indicated, any number of references can be combined; for example, "@co $jtext.link.preceding.<.<.<.string_utils.^" would be an exceedingly complicated way to get your current object to be the generic utilities.

Verb added [90] (89).
Now programming root class:clear_for_rebuild[90](89).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
-----
THROW
=====

Syntax:  drop <object>
         throw <object>

Remove an object you are carrying from your inventory and put it in your current room.  Occasionally you may find that the owner of the room won't allow you to do this.

-----
`HELP THROW()' NOT FOUND
========================

Sorry, but no help is available on `throw()'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP EXCEPTIONS' NOT FOUND
===========================

Sorry, but no help is available on `exceptions'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP EXCEPTION' NOT FOUND
==========================

Sorry, but no help is available on `exception'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
ERRORS
======

The complete list of error codes:

    E_NONE         No error
    E_TYPE         Type mismatch
    E_DIV          Division by zero
    E_PERM         Permission denied
    E_PROPNF       Property not found
    E_VERBNF       Verb not found
    E_VARNF        Variable not found
    E_INVIND       Invalid indirection
    E_RECMOVE      Recursive move
    E_MAXREC       Too many verb calls
    E_RANGE        Range error
    E_ARGS         Incorrect number of arguments
    E_NACC         Move refused by destination
    E_INVARG       Invalid argument
    E_QUOTA        Resource limit exceeded
    E_FLOAT        Floating-point arithmetic error

#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#1:clear_for_rebuild ()" name: "MOO verb: #1:clear_for_rebuild ()" type: moo-code content*: "" _data-tag: 12073862322
#$#: 12073862322
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#1:clear_for_rebuild ()" name: "MOO verb: #1:clear_for_rebuild ()" type: moo-code content*: "" _data-tag: 15815739623
#$#* 15815739623 content: "Not yet implemented";
#$#: 15815739623
0 errors.
Verb programmed.
-----
@LIST
=====

Usage:  @list <object>:<verb>
              [with|without parentheses|numbers]
              [<dobj> <prep> <iobj>] | [(<named args>)]
              [all]
              [ranges]
        @list# <object>:<verb-number>
              [with|without parentheses|numbers] [all] [ranges]

Prints out the code for the MOO program associated with the named verb on the named object.  

Normally, the code is shown with each line numbered and with only those parentheses that are necessary to show the meaning of the program.  You can e.g., specify `without numbers' to have the numbers omitted or `with parentheses' to include all parentheses or even `with parentheses without numbers' to do both.

Type `@list $room:@move' to see the code for the `@move' command, or even `@list $prog:@list' to see the code implementing @list itself...

Giving an args (dobj/prep/iobj) specification indicates that verbs whose verb_args do not matching that specification are to be ignored.

The `@list#' form of the command is available for specifying a verb by number, in case you have an object with inaccessible verbs (e.g,. say the 3rd verb is named "*" and you want to view the 4th).  For example

    @list# object:2

lists the second verb on `object'.

Specifying `all', indicates that all verbs on <object> or its ancestors matching the given name (and args specification, if given) should be listed.

One may also specify one or more ranges of the form <number>..<number> to indicate that only particular subranges of the lines of the verb code should be listed.

These may combined in any order, e.g.,

  @list frobule:burfle this in front of any without numbers all

which would be useful if `frobule' had more than one `burfle' verb and we are only interested in those that have `this' `in front of' `any' as its respective dobj/prep/iobj specifiers, and we want to see ALL such verbs on frobule or its ancestors.

-----
@DUMP
=====

Syntax:  @dump <object> [with [id=#<id>] [noprops] [noverbs] [create]]

This spills out all the properties and verbs on an object, calling suspend at appropriate intervals.

  o  id=#<id> -- specifies an idnumber to use in place of the object's actual id (for porting to another MOO)
  o  noprops  -- don't show properties.
  o  noverbs  -- don't show verbs.
  o  create   -- indicates that a @create command should be generated and all of the verbs be introduced with @verb rather than @args; the default assumption is that the object already exists and you're just doing this to have a look at it.

-----
@LIST
=====

Usage:  @list <object>:<verb>
              [with|without parentheses|numbers]
              [<dobj> <prep> <iobj>] | [(<named args>)]
              [all]
              [ranges]
        @list# <object>:<verb-number>
              [with|without parentheses|numbers] [all] [ranges]

Prints out the code for the MOO program associated with the named verb on the named object.  

Normally, the code is shown with each line numbered and with only those parentheses that are necessary to show the meaning of the program.  You can e.g., specify `without numbers' to have the numbers omitted or `with parentheses' to include all parentheses or even `with parentheses without numbers' to do both.

Type `@list $room:@move' to see the code for the `@move' command, or even `@list $prog:@list' to see the code implementing @list itself...

Giving an args (dobj/prep/iobj) specification indicates that verbs whose verb_args do not matching that specification are to be ignored.

The `@list#' form of the command is available for specifying a verb by number, in case you have an object with inaccessible verbs (e.g,. say the 3rd verb is named "*" and you want to view the 4th).  For example

    @list# object:2

lists the second verb on `object'.

Specifying `all', indicates that all verbs on <object> or its ancestors matching the given name (and args specification, if given) should be listed.

One may also specify one or more ranges of the form <number>..<number> to indicate that only particular subranges of the lines of the verb code should be listed.

These may combined in any order, e.g.,

  @list frobule:burfle this in front of any without numbers all

which would be useful if `frobule' had more than one `burfle' verb and we are only interested in those that have `this' `in front of' `any' as its respective dobj/prep/iobj specifiers, and we want to see ALL such verbs on frobule or its ancestors.

Last modified Sat Apr 13 23:47:16 2013 PDT by Crag (#243).
#1:"clear_for_rebuild" ()
 1:  "Not yet implemented";
 2:  "Once it IS implemented, it will remove verbs and props from the object";
=> #1 (root class)
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
@PROP
=====

Syntax:  @property <object>.<prop-name>
         @property <object>.<prop-name> <initial-value>

Adds a new property named <prop-name> to the named object.  The initial value is given by the second argument, if present; it defaults to 0.  

Normally, a property is created with permissions 'rc' and owned by whoever types the command.  However, you may also specify these explicitly

         @property <object>.<prop-name> <initial-value> <permissions>
         @property <object>.<prop-name> <initial-value> <permissions> <owner>

Only members of the DB Group can create properties with owners other than themselves.

'@property' can be abbreviated as '@prop'.

Property added with value #1.
-----
@RMPROPERTY
===========

Syntax:  @rmproperty <object>.<prop-name>

Removes the named property from the named object.  '@rmproperty' may be abbreviated as '@rmprop'.

Crag foo
Crag bar
Name           Location                      Idle Time   Doing/Idle            
----           --------                      ---------   ----------            
Crag           First room                    0 seconds                         

Total: 1 person, who has been active recently.
Crag  doing stuff
Crag  so much stuff
=> 3
=> 3
Crag is experimenting    with /cat
=> "multi line stringends here"
=> "multi line string ends here"
-----
`HELP RMVERB()' NOT FOUND
=========================

Sorry, but no help is available on `rmverb()'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP RMVERB' AMBIGUOUS
=======================

Sorry, the topic `rmverb' is ambiguous.  I don't know which of the following topics you mean:

`help @rmverb'[1]       `help @rmverb#'[2]      

-----
@RMVERB
=======

Syntax:  @rmverb  <object>:<verb-name>
         @rmverb  <object>:<verb-name>  <dobj> <prep> <iobj>
         @rmverb# <object>:<verb-number>

Removes the named verb from the named object.

If there is more than one verb matching the given verb-name, this removes the most recently defined one. With the 2nd form of the command the verb removed is the most recent one matching both the given verb-name *and* the given dobj/prep/iobj specifiers.

The 3rd form is useful for removing verbs that are otherwise inaccessible by name (say, the 3rd verb on an object is named "*" and you want to remove the 4th verb).  verb-number> is the (1-based) number of the verb to be removed, i.e., `@rmverb# object:1' removes the first verb on `object', etc...

Object #243 does not define that verb, but its ancestor #52 does.
#52:"@rmverb @rmverb#" any any any
 1:  set_task_perms(player);
 2:  if (!(args && (spec = $code_utils:parse_verbref(args[1]))))
 3:    player:notify(tostr("Usage:  ", verb, " <object>:<verb>"));
 4:  elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
 5:    "...bogus object...";
 6:  elseif (typeof(argspec = $code_utils:parse_argspec(@listdelete(args, 1))) != LIST)
 7:    player:notify(tostr(argspec));
 8:  elseif (argspec[2])
 9:    player:notify($string_utils:from_list(argspec[2], " ") + "??");
10:  elseif (length(argspec = argspec[1]) in {1, 2})
11:    player:notify({"Missing preposition", "Missing iobj specification"}[length(argspec)]);
12:  else
13:    verbname = spec[2];
14:    if (verb == "@rmverb#")
15:      loc = $code_utils:tonum(verbname);
16:      if (E_TYPE == loc || loc < 1)
17:        player:notify(tostr(verbname, " is not a (1-based) verb number."));
18:        return;
19:      elseif (loc > length(verbs(object)))
20:        player:notify(tostr(object, " does not have that many verbs."));
21:        return;
22:      endif
23:    else
24:      if (index(verbname, "*") > 1)
25:        verbname = strsub(verbname, "*", "");
26:      endif
27:      loc = $code_utils:find_last_verb_named_1_based(object, verbname);
28:      if (argspec)
29:        argspec = argspec[1..3];
30:        argspec[2] = $code_utils:full_prep(argspec[2]) || argspec[2];
31:        while (loc && `verb_args(object, loc) != argspec ! E_PERM => 1')
32:          loc = $code_utils:find_last_verb_named_1_based(object, verbname, loc);
33:        endwhile
34:      endif
35:      if (!loc)
36:        player:notify(tostr("That object does not define that verb", argspec ? " with those args." | "."));
37:        return;
38:      endif
39:    endif
40:    info = `verb_info(object, loc) ! E_PERM';
41:    vargs = `verb_args(object, loc) ! E_PERM';
42:    try
43:      delete_verb(object, loc);
44:    except e (ANY)
45:      player:notify(e[2]);
46:      return;
47:    endtry
48:    if (info)
49:      player:notify(tostr("Verb ", object, ":", info[3], " [", loc, "] {", $string_utils:from_list(vargs, " "), "} removed."));
50:    else
51:      player:notify(tostr("Unreadable verb ", loc, " on ", object, " removed."));
52:    endif
53:  endif
-----
DELETE_VERB()
=============

Syntax:  delete_verb (obj <object>, str <verb-desc>)   => none

Removes the verb as specified by <verb-desc> from the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If the programmer does not have write permission on <object>, then `E_PERM' is raised.  If <object> does not define a verb as specified by <verb-desc>, then `E_VERBNF' is raised.

generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Verb added [1] (0).
=> 0
-----
VERBS()
=======

Syntax:  verbs (obj <object>)   => list

Returns a list of the names of the verbs defined directly on the given <object>, not inherited from its parent.  If <object> is not valid, then `E_INVARG' is raised.  If the programmer does not have read permission on <object>, then `E_PERM' is raised.

=> {}
-----
WHILE()
=======

The following kinds of statements exist in the MOO programming language:

Null
====

        ;

The null statement does nothing.

Expressions
===========

        expression ;

The expression statement evaluates the expression and then discards the value.

Conditional
===========

        IF ( expression ) statements ENDIF
        IF ( expression ) statements ELSE statements ENDIF
        IF ( expression )
          statements
        ELSEIF ( expression )
          statements
        ...
        ELSE
          statements
        ENDIF

The conditional statement evaluates each expression in turn and executes the statements associated with the first one to return a true value; the ELSE statements are executed if none of the expressions returns a true value.  There can be any number of ELSEIF clauses and the ELSE part is optional.  See `help truth'[1] for the definition of 'true value'.

List iteration
==============

        FOR name IN ( expression ) statements ENDFOR

The list iteration statement first evaluates the expression, which must return a list.  It then executes the statements once for each element of that list, each time with the named variable having the value of the corresponding list element.

Numeric iteration
=================

        FOR name IN [ expression .. expression ] statements ENDFOR

The numeric iteration statement first evaluates the two expressions, both of which must return numbers; call those numbers N1 and N2, respectively.  The statements are then executed once for each integer I such that N1 <= I <= N2, in increasing order; each time, the named variable has the corresponding value of I.

Indefinite iteration
====================

        WHILE ( expression ) statements ENDWHILE

The indefinite iteration statement repeatedly evaluates the expression and, each time it returns a true value, executes the statements.  The loop stops the first time that the expression returns a false value.  The definitions of 'true' and 'false' values is in `help truth'[2].

Return
======

        RETURN ;
        RETURN expression ;

The return statement evalautes the expression, if any, and returns the resulting value (or 0 if there is no expression) to the verb that called the current one.  Execution of the current verb is immediately terminated.

Fork
====

        FORK ( expression ) statements ENDFORK
        FORK name ( expression ) statements ENDFORK

The fork statement first executes the expression, which must return a number; call that number N.  It then creates a new MOO task that will, after at least N seconds, execute the statements.  When the new task begins, all variables will have the values they had at the time the FORK statement was executed.  The task executing the FORK statement immediately continues execution.  If a variable name is given after the FORK keyword, then it is assigned the 'queue ID' of the newly-created task.  The value of this variable is visible both to the task executing the fork statement and to the statements in the newly-created task.  See `help tasks'[3] for more information about forked tasks.

generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Property added with value 1.
=> {"temp"}
#-1:Input to EVAL, line 4:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
DELETE_PROPERTY()
=================

Syntax:  delete_property (obj <object>, str <prop-name>)   => none

Removes the property named <prop-name> from the given <object> and all of its descendants.  If <object> is not valid, then `E_INVARG' is raised.  If the programmer does not have write permission on <object>, then `E_PERM' is raised.  If <object> does not directly define a property named <prop-name> (as opposed to inheriting one from its parent), then `E_PROPNF' is raised.

Property removed.
Property added with value #1.
Verb #1:clear_for_rebuild [90] {this none this} removed.
Verb added [90] (89).
Now programming root class:clear_for_rebuild[90](89).
[Type lines of input; use `.' to end or `@abort' to abort the command.]
0 errors.
Verb programmed.
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
generic group (#244) [ readable ]
  Child of root class (#1).
.temp                    Crag (#243)           r c    1
-------------------------------- finished ---------------------------------
Verb added [1] (0).
=> #244 (generic group)
=> 0
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
.legal_name_regexp       unknown hack (#35)    r      "^[a-z_][a-z0-9_]*$"
.free_addition           unknown hack (#35)    r      0
.group                   Crag (#243)           r      #244
.pile                    Crag (#243)           r      #242
-------------------------------- finished ---------------------------------
-----
@CREATE
=======

Syntax:  @create <parent-object> named "<names>"

The main command for creating objects other than rooms and exits (for them, see `help @dig'[1]; it's much more convenient).

The first argument specifies the 'parent' of the new object: loosely speaking, the 'kind' of object you're creating.  You can use a `class name' such as $note, $letter, $thing, or $container; you can also specify a parent object by object number or just by name, if it's nearby.

The <names> are given in the same format as in the @rename command:

        <name-and-alias>,<alias>,...,<alias> [preferred]
        <name>:<alias>,...,<alias>           [not preferred]

See `help @rename' for a discussion of the difference between a name and an alias.
See `help naming' for a discussion of names and articles.

generic group (#244) [ readable ]
  Child of root class (#1).
-------------------------------- finished ---------------------------------
The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   generic thing (#5)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)
syslog (#183) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #183:log                      Core-Wizard (#184)   rxd    this none this
  #183:can_write                Core-Wizard (#184)   rxd    this none this
  #183:_log                     Core-Wizard (#184)   rxd    this none this
  #183:"watch unwatch ignore"   Core-Wizard (#184)   r d    any in/inside/into this
  #183:can_read                 Core-Wizard (#184)   rxd    this none this
  #183:announce                 Core-Wizard (#184)   rxd    this none this
  #183:read                     Core-Wizard (#184)   r d    any in/inside/into this
  #183:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
syslog (#183) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
.names                   Core-Wizard (#184)    r      {{"startup", {{"caller"..
._startup_log            Core-Wizard (#184)           {}
._checkpoint_log         Core-Wizard (#184)           {{1365897251, "Checkpoi..
._startup_size           Core-Wizard (#184)    r c    50
._checkpoint_size        Core-Wizard (#184)    r c    50
._watchers_startup       Core-Wizard (#184)    r c    {}
._watchers_checkpoint    Core-Wizard (#184)    r c    {}
._checkpoint_watchers    Core-Wizard (#184)    r c    {}
._startup_watchers       Core-Wizard (#184)    r c    {}
-------------------------------- finished ---------------------------------
-----
HELP ON THE SYSLOG
==================

No help found.

#183:"log" (server_log, name, message)
 1:  "Usage:  :log(server_log, name, message)";
 2:  "";
 6:  who = caller_perms();
 7:  what = caller;
 8:  if (this:can_write(who, what, name))
 9:    this:_log(who, what, server_log, name, message);
10:  endif
That is not a valid command.
A namespace for local (non-core) objects and values.

See `help $local:@register' and `help $local:@unregister'.

The local namespace contains:
$local.free_addition = 0
$local.group = #244 (generic group)
$local.legal_name_regexp = "^[a-z_][a-z0-9_]*$"
$local.pile = #242 (Generic Pile)
You see nothing special.
-----
@DESCRIBE
=========

Syntax:  @describe <object> as <description>

Sets the description string of <object> to <description>.  This is the string that is printed out whenever someone uses the 'look' command on <object>.  To describe yourself, use 'me' as the <object>.

Example:

Munchkin types this:
  @describe me as "A very fine fellow, if a bit on the short side."
People who type 'look Munchkin' now see this:
  A very fine fellow, if a bit on the short side.

Note for programmers
====================

The description of an object is kept in its .description property.  For descriptions of more than one paragraph, .description can be a list of strings.

-----
@RECREATE
=========

Usage: @recreate <object> as <parent> named <name spec>

This is a combination of @create and @chparent.  It takes an existing object, completely strips it of any verbs, properties, and values for inherited properties.  This object is then reshaped into a child of the parent specified, as though @create had been called, but retaining the same object number as the original.

The <parent> and <name spec> arguments are as in @create.  See `help @create'[1] and `help @chparent'[2].

-----
`HELP BUILD' AMBIGUOUS
======================

Sorry, the topic `build' is ambiguous.  I don't know which of the following topics you mean:

`help builder-policy'[1]                        `help building'[2]
`help Building Group'[3]                        `help @building-options'[4]
`help @buildingoptions'[5]                      

-----
@RECYCLE
========

Syntax:  @recycle <object-name-or-number>

Destroys the indicated object utterly and irretrievably.  Naturally, you may only do this to objects that you own.


Of course, wizards are allowed to @recycle anything at all.

There is, however, a block (in $player:recycle) against recycling actual players, i.e., descendants of $player that have the player flag set.  This is mainly to prevent stupid mistakes.  If, for some reason, you want to recycle a player, you need to @toad it first.

Object #243 does not define that verb, but its ancestor #4 does.
Last modified Mon Sep  2 07:52:47 2002 PDT by Xythian (#199) (on Waterpoint).
#4:"@recycle" any none none
 1:  set_task_perms(player);
 2:  dobj = player:my_match_object(dobjstr);
 3:  if (dobj == $nothing)
 4:    player:notify(tostr("Usage:  ", verb, " <object>"));
 5:  elseif ($command_utils:object_match_failed(dobj, dobjstr))
 6:    "...bogus object...";
 7:  elseif (player == dobj)
 8:    player:notify("I'll bet that you don't *really* want to commit suicide, do you?  If so, then get a wizard to kill you or program it yourself; there will be no state-sanctioned self-destruction on *this* MOO...");
 9:  elseif (dobj.owner != player && !player.wizard)
10:    player:notify("It would be rude to recycle that, it's not yours.");
11:  elseif (is_player(dobj))
12:    player:notify("Players cannot be @recycled; they must be @toaded first.");
13:  else
14:    nv = length(verbs(dobj));
15:    if (nv)
16:      prompt = tostr(dobj:dnamec(), " (", dobj, ") has ", nv, " verb", nv == 1 ? "" | "s", ".  Sure you want to recycle it?");
17:    else
18:      prompt = tostr("Sure you want to recycle ", dobj:dname(), " (", dobj, ")?");
19:    endif
20:    if ($command_utils:yes_or_no(prompt))
21:      name = dobj:dnamec();
22:      try
23:        result = player:_recycle(dobj);
24:        if (typeof(result) == ERR)
25:          player:notify(tostr(name, " (", dobj, ") not recycled: ", result));
26:        else
27:          player:notify(tostr(name, " (", dobj, ") recycled."));
28:        endif
29:      except v (ANY)
30:        if (typeof(v[1]) == ERR)
31:          msg = v[2];
32:        elseif (v[2] != "" && v[2] != v[1])
33:          msg = tostr(v[1], ": ", toliteral(v[2]));
34:        else
35:          msg = tostr(v[1]);
36:        endif
37:        player:notify(tostr(name, " (", dobj, ") not recycled: ", msg));
38:      endtry
39:    else
40:      player:notify("Okay.");
41:    endif
42:  endif
Object #243 does not define that verb, but its ancestor #4 does.
#4:"@recreate" any as any
 1:  "@recreate <object> as <parent-class> named [name:]alias,alias,...";
 2:  "  effectively recycles and creates <object> all over again.";
 3:  if (player != this)
 4:    player:tell("Sorry, you can't do that.");
 5:    return E_PERM;
 6:  endif
 7:  set_task_perms(player);
 8:  named = "named" in args;
 9:  as = prepstr in args;
10:  if (named <= as + 1 || named == length(args))
11:    player:notify(tostr("Usage:  ", verb, " <object> as <parent-class> named [name:]alias,...,alias"));
12:    return;
13:  elseif ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
14:    return;
15:  elseif (is_player(dobj))
16:    player:notify("You really *don't* want to do that!");
17:    return;
18:  endif
19:  parentstr = $string_utils:from_list(args[as + 1..named - 1], " ");
20:  namestr = $string_utils:from_list(args[named + 1..length(args)], " ");
21:  parent = player:my_match_object(parentstr);
22:  if (parentstr[1] == "$" && !valid(parent))
23:    player:notify(tostr("\"", parentstr, "\" does not name an object."));
24:    return;
25:  elseif ($command_utils:object_match_failed(parent, parentstr))
26:    return;
27:  endif
28:  if (!(e = $building_utils:recreate(dobj, parent)))
29:    player:notify(tostr(e));
30:    return;
31:  endif
32:  move(dobj, player);
33:  $building_utils:set_names(dobj, namestr);
34:  if ((other_names = setremove(dobj.aliases, dobj.name)) != {})
35:    aka = " (aka " + $string_utils:english_list(other_names) + ")";
36:  else
37:    aka = "";
38:  endif
39:  player:notify(tostr("Object number ", dobj, " is now ", dobj.name, aka, " with parent ", parent:name(), " (", parent, ")."));
You say, "Hello World."
The verb :@recreate is on   Crag(#243)--generic builder(#4)
Retrieving #243:@recreate --> Verb not found
#51:@create-or-recreate code set.
generic wizard (#51) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic programmer (#52).
  Location generic room (#3).
   #51:@chown*#                 Core-Wizard (#184)   r d    any any any
   #51:"@grant @grants*"        Core-Wizard (#184)   r d    any at/to any
   #51:@programmer              Core-Wizard (#184)   r d    any none none
   #51:@shutdown                Core-Wizard (#184)   r d    any any any
   #51:@dump-d*atabase          Core-Wizard (#184)   r d    none none none
   #51:@who-calls               Core-Wizard (#184)   r d    any any any
   #51:mcd_2                    Wizard (#2)          rxd    this none this
   #51:@toad*                   Core-Wizard (#184)   r      any any any
   #51:"@untoad @detoad"        Core-Wizard (#184)   r d    any any any
   #51:@quota                   Core-Wizard (#184)   r      any is any
   #51:@players                 Core-Wizard (#184)   r d    any any any
   #51:kill_aux_wizard_parse    Core-Wizard (#184)   rxd    this none this
   #51:"@grepcore @egrepcore"   Core-Wizard (#184)   r d    any any any
   #51:"@net-who @@who"         Core-Wizard (#184)   r      any any any
   #51:@make-player             Core-Wizard (#184)   r d    any any any
   #51:@abort-sh*utdown         Core-Wizard (#184)   r d    any any any
   #51:"toad_msg toad_victim_msg programmer_msg programmer_victim_msg newt_msg newt_victim_msg" Core-Wizard (#184) rxd this none this
   #51:moveto                   Core-Wizard (#184)   rxd    this none this
   #51:@newt                    Core-Wizard (#184)   r      any none none
   #51:"@unnewt @denewt @get-better" Core-Wizard (#184) r   any any any
   #51:@log                     Core-Wizard (#184)   r d    any any any
   #51:@guests                  Core-Wizard (#184)   r d    any none none
   #51:"@rn mail_catch_up check_mail_lists current_message set_current_message get_current_message make_current_message kill_current_message @subscribed @read-all-new @mail-all-new" Core-Wizard (#184) rxd none none none
   #51:"@blacklist @graylist @redlist @unblacklist @ungraylist @unredlist @spooflist @unspooflist" Core-Wizard (#184) r d any any any
   #51:@copyo*bject             Core-Wizard (#184)   r d    any any any
   #51:@corify                  Core-Wizard (#184)   r      any as any
   #51:@make-guest              Core-Wizard (#184)   r d    any any any
   #51:@wiz-boot                Core-Wizard (#184)   r d    any any any
   #51:"@idlers @kill-idlers @kill-useless @useless @Kill-unconnected @unconnected" Core-Wizard (#184) r d any none none
   #51:@report                  Core-Wizard (#184)   rxd    any none none
   #51:@immortal*ize            Core-Wizard (#184)   r d    any none none
   #51:@zap                     Core-Wizard (#184)   rxd    any any any
   #51:@chmod-raw               Core-Wizard (#184)   r d    any any any
   #51:"@grepjhcore @egrepjhcore" Core-Wizard (#184) r d    any any any
   #51:@make-core-db            Wizard (#2)          r d    any none none
   #51:renumber_for_core        Wizard (#2)          rxd    this none this
   #51:@check-all-owned-objects Core-Wizard (#184)   r d    none none none
   #51:dcd_5                    Wizard (#2)          rx     this none this
   #51:dcd_renumber             Wizard (#2)          rx     this none this
   #51:@create-or-recreate      Core-Wizard (#184)   r d    any as any
-------------------------------- finished ---------------------------------
Last modified Sun Apr 14 14:09:54 2013 PDT by Crag (#243).
#51:"@create-or-recreate" any as any
 1:  "@recreate <object> as <parent-class> named [name:]alias,alias,...";
 2:  "  effectively recycles and creates <object> all over again.";
 3:  if (player != this)
 4:    player:tell("Sorry, you can't do that.");
 5:    return E_PERM;
 6:  endif
 7:  set_task_perms(player);
 8:  named = "named" in args;
 9:  as = prepstr in args;
10:  if (named <= as + 1 || named == length(args))
11:    player:notify(tostr("Usage:  ", verb, " <object> as <parent-class> named [name:]alias,...,alias"));
12:    return;
13:  elseif ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
14:    return;
15:  elseif (is_player(dobj))
16:    player:notify("You really *don't* want to do that!");
17:    return;
18:  endif
19:  parentstr = $string_utils:from_list(args[as + 1..named - 1], " ");
20:  namestr = $string_utils:from_list(args[named + 1..length(args)], " ");
21:  parent = player:my_match_object(parentstr);
22:  if (parentstr[1] == "$" && !valid(parent))
23:    player:notify(tostr("\"", parentstr, "\" does not name an object."));
24:    return;
25:  elseif ($command_utils:object_match_failed(parent, parentstr))
26:    return;
27:  endif
28:  if (!(e = $building_utils:recreate(dobj, parent)))
29:    player:notify(tostr(e));
30:    return;
31:  endif
32:  move(dobj, player);
33:  $building_utils:set_names(dobj, namestr);
34:  if ((other_names = setremove(dobj.aliases, dobj.name)) != {})
35:    aka = " (aka " + $string_utils:english_list(other_names) + ")";
36:  else
37:    aka = "";
38:  endif
39:  player:notify(tostr("Object number ", dobj, " is now ", dobj.name, aka, " with parent ", parent:name(), " (", parent, ")."));
40:  "Copied from generic builder (#4):@recreate by Crag (#243) Sun Apr 14 14:09:54 2013 PDT";
Last modified Sun Apr 14 14:09:54 2013 PDT by Crag (#243).
#51:"@create-or-recreate" any as any
"@recreate <object> as <parent-class> named [name:]alias,alias,...";
"  effectively recycles and creates <object> all over again.";
if (player != this)
  player:tell("Sorry, you can't do that.");
  return E_PERM;
endif
set_task_perms(player);
named = "named" in args;
as = prepstr in args;
if (named <= as + 1 || named == length(args))
  player:notify(tostr("Usage:  ", verb, " <object> as <parent-class> named [name:]alias,...,alias"));
  return;
elseif ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
  return;
elseif (is_player(dobj))
  player:notify("You really *don't* want to do that!");
  return;
endif
parentstr = $string_utils:from_list(args[as + 1..named - 1], " ");
namestr = $string_utils:from_list(args[named + 1..length(args)], " ");
parent = player:my_match_object(parentstr);
if (parentstr[1] == "$" && !valid(parent))
  player:notify(tostr("\"", parentstr, "\" does not name an object."));
  return;
elseif ($command_utils:object_match_failed(parent, parentstr))
  return;
endif
if (!(e = $building_utils:recreate(dobj, parent)))
  player:notify(tostr(e));
  return;
endif
move(dobj, player);
$building_utils:set_names(dobj, namestr);
if ((other_names = setremove(dobj.aliases, dobj.name)) != {})
  aka = " (aka " + $string_utils:english_list(other_names) + ")";
else
  aka = "";
endif
player:notify(tostr("Object number ", dobj, " is now ", dobj.name, aka, " with parent ", parent:name(), " (", parent, ")."));
"Copied from generic builder (#4):@recreate by Crag (#243) Sun Apr 14 14:09:54 2013 PDT";
Usage:  @rmverb <object>:<verb>
You see no player:notify(tostr(Object or number here.
Verb #51:@create-or-recreate [40] {any as any} removed.
-----
@CREATE
=======

Syntax:  @create <parent-object> named "<names>"

The main command for creating objects other than rooms and exits (for them, see `help @dig'[1]; it's much more convenient).

The first argument specifies the 'parent' of the new object: loosely speaking, the 'kind' of object you're creating.  You can use a `class name' such as $note, $letter, $thing, or $container; you can also specify a parent object by object number or just by name, if it's nearby.

The <names> are given in the same format as in the @rename command:

        <name-and-alias>,<alias>,...,<alias> [preferred]
        <name>:<alias>,...,<alias>           [not preferred]

See `help @rename' for a discussion of the difference between a name and an alias.
See `help naming' for a discussion of names and articles.

You say, "Testing TinyFugue /load""
=> 3
You say, "Testing TinyFugue /load""
=> 3
You say, "Testing TinyFugue /load""
=> 3
Crag | /abort
You say, "" "foo"
You say, "" bar"
Crag | "foo
You say, " " foo"
-----
@CREATE
=======

Syntax:  @create <parent-object> named "<names>"

The main command for creating objects other than rooms and exits (for them, see `help @dig'[1]; it's much more convenient).

The first argument specifies the 'parent' of the new object: loosely speaking, the 'kind' of object you're creating.  You can use a `class name' such as $note, $letter, $thing, or $container; you can also specify a parent object by object number or just by name, if it's nearby.

The <names> are given in the same format as in the @rename command:

        <name-and-alias>,<alias>,...,<alias> [preferred]
        <name>:<alias>,...,<alias>           [not preferred]

See `help @rename' for a discussion of the difference between a name and an alias.
See `help naming' for a discussion of names and articles.

-----
@RECREATE
=========

Usage: @recreate <object> as <parent> named <name spec>

This is a combination of @create and @chparent.  It takes an existing object, completely strips it of any verbs, properties, and values for inherited properties.  This object is then reshaped into a child of the parent specified, as though @create had been called, but retaining the same object number as the original.

The <parent> and <name spec> arguments are as in @create.  See `help @create'[1] and `help @chparent'[2].

http (#87) [ readable ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
generic player(#6) has 6 kids.
generic builder (#4)   nobody (#36)   J. Text (#176)   topic-owner (#181)   Quota (#185)   generic guest (#31)
-----
`HELP HTTP' NOT FOUND
=====================

Sorry, but no help is available on `http'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP SERVER' AMBIGUOUS
=======================

Sorry, the topic `server' is ambiguous.  I don't know which of the following topics you mean:

`help server_log()'[1]  `help server_version()'[2]

-----
Available Help Indices
======================

wiz-index[1]
      Wizard Help Topics
prog-index[2]
      Programmer Help Topics
builtin-index[3]
      Server Built-in Functions
core-index[4]
      Core Utility Help Topics
jtext-index[5]
      Jtext Help Topics
mcp-index[6]
      MCP help topics
tkmoo-index[7]
      tkmoo help topics
unicode-index[8]
      Server Unicode Built-in Functions
policy-index[9]
      policy help database
admin-index[10]
      administration group help
gen-index[11]
      General Help Topics

full-index[12]
      EVERYTHING

-----
CORE UTILITY HELP TOPICS
========================

$biglist_utils[1]       $building_utils[2]      $code_utils[3]
$command_utils[4]       $english[5]             $english_utils[6]
$exit[7]                $gender_utils[8]        $generic_db[9]
$generic_editor[10]     $generic_help[11]       $generic_options[12]
$help[13]               $housekeeper[14]        $integration_utils[15]
$list_utils[16]         $lock_utils[17]         $login[18]
$mail_agent[19]         $mail_recipient[20]     $math_utils[21]
$name_utils[22]         $no_one[23]             $object_utils[24]
$openable_container[25]                         $parse_utils[26]
$perm_utils[27]         $player_db[28]          $quota_utils[29]
$room[30]               $room_matching_utils[31]
$seq_utils[32]          $set_utils[33]          $string_utils[34]
$time_utils[35]         $trig_utils[36]         $walking_utils[37]
$who_utils[38]          $wiz_utils[39]          core-index[40]
mail-format[41]         mail-recipient[42]      mail-resolve[43]
mail-system[44]         MR-access[45]           MR-naming[46]
MR-reading[47]          MR-searching[48]        MR-sequences[49]
MR-subscribing[50]      MR-writing[51]          object-matching[52]
receiving-mail[53]      sending-mail[54]        

-----
FULL INDEX
==========

WIZARD HELP (#23)
-----------------

$site_db[1]             @@who[2]                @abort-shutdown[3]
blacklist[4]            @blacklist[5]           @chmod-raw[6]
@chown[7]               @denewt[8]              @detoad[9]
@dump-database[10]      @egrep[11]              @grant[12]
graylist[13]            @graylist[14]           @grep[15]
@grepcore[16]           @guests[17]             @log[18]
make-core-database[19]  @make-guest[20]         @make-player[21]
@net-who[22]            @newt[23]               @players[24]
@programmer[25]         @quota[26]              @recycle[27]
redlist[28]             @redlist[29]            @shout[30]
@shutdown[31]           @toad[32]               @unnewt[33]
@untoad[34]             @who-calls[35]          wiz-index[36]

PROGRAMMER HELP (#22)
---------------------

#[37]                   ;[38]                   @add-feature[39]
@addalias#[40]          @addfeature[41]         aliases[42]
@args[43]               @args#[44]              @check-chparent[45]
@check-property[46]     @chmod[47]              @chparent[48]
@clearproperty[49]      @copy[50]               @copy-x[51]
@d[52]                  @dbsize[53]             @disinherit[54]
@disown[55]             @display[56]            @display-options[57]
@displayoptions[58]     @egrep[59]              errors[60]
eval[61]                @eval-options[62]       events[63]
exam[64]                examine[65]             expressions[66]
features[67]            for[68]                 fork()[69]
@forked[70]             functions[71]           @grep[72]
help[73]                integrate[74]           integration[75]
@kids[76]               @kill[77]               language[78]
@list[79]               @list#[80]              @list-options[81]
listen()[82]            @listoptions[83]        mpl[84]
named[85]               named-args[86]          named-arguments[87]
precedence[88]          prepositions[89]        prog-index[90]
@program[91]            .program[92]            @program#[93]
programming[94]         @prop[95]               @property[96]
@prospectus[97]         regexps[98]             regular-expressions[99]
@remove-feature[100]    @rename#[101]           return[102]
@rmalias#[103]          @rmproperty[104]        @rmverb[105]
@rmverb#[106]           @setenv[107]            @show[108]
statements[109]         tasks[110]              truth[111]
unlisten()[112]         utilities[113]          valid()[114]
@verb[115]              while()[116]            

BUILTIN FUNCTION HELP (1.8.0) (#28)
-----------------------------------

abs()[117]              acos()[118]             add_property()[119]
add_verb()[120]         asin()[121]             atan()[122]
binary_hash()[123]      boot_player()[124]      buffered_output_length()[125]
builtin-index[126]      call_function()[127]    caller_perms()[128]
callers()[129]          ceil()[130]             children()[131]
chparent()[132]         clear_property()[133]   connected_players()[134]
connected_seconds()[135]                        connection_name()[136]
connection_option()[137]                        connection_options()[138]
cos()[139]              cosh()[140]             create()[141]
crypt()[142]            ctime()[143]            db_disk_size()[144]
decode_binary()[145]    delete_property()[146]  delete_verb()[147]
disassemble()[148]      dump_database()[149]    encode_binary()[150]
equal()[151]            eval()[152]             exp()[153]
floatstr()[154]         floor()[155]            flush_input()[156]
force_input()[157]      function_info()[158]    idle_seconds()[159]
index()[160]            is_clear_property()[161]
is_member()[162]        is_player()[163]        kill_task()[164]
length()[165]           listappend()[166]       listdelete()[167]
listen()[168]           listeners()[169]        listinsert()[170]
listset()[171]          log()[172]              log10()[173]
match()[174]            max()[175]              max_object()[176]
memory_usage()[177]     min()[178]              move()[179]
notify()[180]           object_bytes()[181]     open_network_connection()[182]
output_delimiters()[183]                        parent()[184]
pass()[185]             players()[186]          properties()[187]
property_info()[188]    queue_info()[189]       queued_tasks()[190]
raise()[191]            random()[192]           read()[193]
recycle()[194]          renumber()[195]         reset_max_object()[196]
resume()[197]           rindex()[198]           rmatch()[199]
seconds_left()[200]     server_log()[201]       server_version()[202]
set_connection_option()[203]                    set_player_flag()[204]
set_property_info()[205]                        set_task_perms()[206]
set_verb_args()[207]    set_verb_code()[208]    set_verb_info()[209]
setadd()[210]           setremove()[211]        shutdown()[212]
sin()[213]              sinh()[214]             sqrt()[215]
strcmp()[216]           string_hash()[217]      strsub()[218]
substitute()[219]       suspend()[220]          tan()[221]
tanh()[222]             task_id()[223]          task_stack()[224]
ticks_left()[225]       time()[226]             tofloat()[227]
toint()[228]            toliteral()[229]        tonum()[230]
toobj()[231]            tostr()[232]            trunc()[233]
typeof()[234]           unlisten()[235]         valid()[236]
value_bytes()[237]      value_hash()[238]       verb_args()[239]
verb_code()[240]        verb_info()[241]        verbs()[242]

CORE UTILITY HELP (#21)
-----------------------

$biglist_utils[243]     $building_utils[244]    $code_utils[245]
$command_utils[246]     $english[247]           $english_utils[248]
$exit[249]              $gender_utils[250]      $generic_db[251]
$generic_editor[252]    $generic_help[253]      $generic_options[254]
$help[255]              $housekeeper[256]       $integration_utils[257]
$list_utils[258]        $lock_utils[259]        $login[260]
$mail_agent[261]        $mail_recipient[262]    $math_utils[263]
$name_utils[264]        $no_one[265]            $object_utils[266]
$openable_container[267]                        $parse_utils[268]
$perm_utils[269]        $player_db[270]         $quota_utils[271]
$room[272]              $room_matching_utils[273]
$seq_utils[274]         $set_utils[275]         $string_utils[276]
$time_utils[277]        $trig_utils[278]        $walking_utils[279]
$who_utils[280]         $wiz_utils[281]         core-index[282]
mail-format[283]        mail-recipient[284]     mail-resolve[285]
mail-system[286]        MR-access[287]          MR-naming[288]
MR-reading[289]         MR-searching[290]       MR-sequences[291]
MR-subscribing[292]     MR-writing[293]         object-matching[294]
receiving-mail[295]     sending-mail[296]       

JTEXT HELP DATABASE (#152)
--------------------------

coordinators[297]       dispatchers[298]        jaddress-types[299]
jaddresses[300]         jtext[301]              jtext-addressing[302]
jtext-construction[303]                         jtext-document[304]
jtext-forms[305]        jtext-index[306]        jtext-input[307]
jtext-intro[308]        jtext-output[309]       jtext-timeline[310]
tagged-lists[311]       targets[312]            

MCP HELP (#186)
---------------

mcp[313]                mcp-authentication[314]
mcp-display-url[315]    mcp-edit[316]           mcp-ftp[317]
mcp-goals[318]          mcp-gopher[319]         mcp-index[320]
mcp-requests[321]       mcp-semantics[322]      mcp-spec[323]
mcp-syntax[324]         mcp-x-audio[325]        

TKMOO HELP (#187)
-----------------

tkmoo[326]              tkmoo-goals[327]        tkmoo-index[328]
tkmoo-installation[329]                         tkmoo-internals[330]
tkmoo-setup[331]        tkmoo-usage[332]        tkmoo-versions[333]

UNICODE BUILTINS HELP (#241)
----------------------------

charname()[334]         clip()[335]             decode_chars()[336]
encode_chars()[337]     ord()[338]              tochar()[339]
unicode-index[340]      

BUILDER HELP (#155)
-------------------

@building-options[341]  @buildingoptions[342]   @create[343]
@dig[344]               furniture[345]          @measure[346]
naming[347]             @newmessage[348]        pronoun-example[349]
pronoun-internals[350]  pronoun-literals[351]   pronoun-substitution[352]
@recreate[353]          substitution[354]       two-letter[355]
two-letter-qr[356]      two-letter-spec[357]    @unmessage[358]
@who[359]               

POLICY HELP DATABASE (#235)
---------------------------

admin[360]              admin-policy[361]       administrator-policy[362]
administrators[363]     builder-policy[364]     manners[365]
objective[366]          point[367]              policy-index[368]
programmer-policy[369]  programming-policy[370]
purpose[371]            quota-policy[372]       steering-committee[373]
user-policy[374]        

ADMINISTRATION GROUP HELP (#238)
--------------------------------

admin-index

[375]                   Building-Group[376]     Community-Group[377]
DB-Group[378]           documentation-group[379]
Programming-Group[380]  Steering-Committee[381]
Tech-Group[382]         Unix-Group[383]         

JHCORE HELP DB (#237)
---------------------

copyright[384]          core-copyright[385]     core-license[386]

MAIN HELP DATABASE (#54)
------------------------

![387]                  "[388]                  '[389]
+[390]                  ++[391]                 @911[392]
:[393]                  ::[394]                 ?[395]
_[396]                  @add-entrance[397]      @add-exit[398]
@add-feature[399]       @add-owned[400]         @addalias[401]
@administrators[402]    @admins[403]            alias[404]
aliases[405]            @aliases[406]           @answer[407]
@audit[408]             @auditdb[409]           author_feature[410]
@boot[411]              @boot![412]             @bug[413]
building[414]           character[415]          characters[416]
@check[417]             @co[418]                commands[419]
@comment[420]           common_quota[421]       communication[422]
communications[423]     container-messages[424]
containers[425]         @contents[426]          @count[427]
creation[428]           current-object[429]     @current-object[430]
@currentobject[431]     decrypt[432]            delete[433]
@describe[434]          descriptions[435]       doing[436]
drop[437]               @dump[438]              @edit[439]
@edit-options[440]      @edito[441]             @editoptions[442]
editors[443]            @eject[444]             email[445]
emote[446]              encrypt[447]            @entrances[448]
erase[449]              examine[450]            @examine[451]
exit-messages[452]      @exits[453]             features[454]
@features[455]          following[456]          @forward[457]
@forward-me[458]        full-index[459]         @gag[460]
@gagged[461]            gagging[462]            @gaglist[463]
gen-index[464]          gender[465]             @gender[466]
get[467]                getting-started[468]    give[469]
go[470]                 @go[471]                @grant[472]
@gripe[473]             hand[474]               help[475]
help-format[476]        @helpme[477]            home[478]
@idea[479]              idle[480]               idling[481]
index[482]              information[483]        insert[484]
introduction[485]       inventory[486]          join[487]
@join[488]              key-representation[489]
keys[490]               known_dbs[491]          @lastlog[492]
@linelength[493]        @listgag[494]           @locations[495]
@lock[496]              @lock_for_open[497]     locking[498]
look[499]               mail[500]               @mail[501]
mail-forwarding[502]    @mail-options[503]      @mailoptions[504]
manipulation[505]       me[506]                 @memory[507]
message-sequences[508]  messages[509]           @messages[510]
miscellaneous[511]      @more[512]              @move[513]
movement[514]           name[515]               naming[516]
@netforward[517]        news[518]               @next[519]
@nn[520]                @notedit[521]           notes[522]
@opacity[523]           @options[524]           page[525]
@pagelength[526]        @paranoid[527]          @parents[528]
@password[529]          @peek[530]              @popo[531]
@popobject[532]         @prev[533]              privacy[534]
programming[535]        pronouns[536]           @pusho[537]
@pushobject[538]        put[539]                @qsend[540]
@quicksend[541]         @quit[542]              @quota[543]
read[544]               @read[545]              @recycle[546]
@register[547]          registration[548]       reidle[549]
remove[550]             @remove-entrance[551]   @remove-exit[552]
@remove-feature[553]    @rename[554]            @renumber[555]
@reply[556]             @resend[557]            @resident[558]
@rmalias[559]           @rmmail[560]            @rn[561]
room-messages[562]      rooms[563]              say[564]
security[565]           @send[566]              @sethome[567]
@skip[568]              @sort-owned[569]        spoofing[570]
@subscribe[571]         @subscribed[572]        @suggest[573]
summary[574]            @swapo[575]             @swapobject[576]
@sweep[577]             take[578]               teleportation[579]
thing-messages[580]     throw[581]              time-stamp[582]
time-stamping[583]      time-stamps[584]        timestamping[585]
timestamps[586]         topics[587]             topology[588]
tstamp[589]             two-letter-spec[590]    @typo[591]
@ungag[592]             @unlock[593]            @unlock_for_open[594]
@unrmmail[595]          @unsubscribe[596]       @unsubscribed[597]
@uptime[598]            @verify-owned[599]      @version[600]
walk[601]               whereis[602]            whisper[603]
@who[604]               @who-options[605]       @whooptions[606]
wizard-list[607]        wizards[608]            @wrap[609]
write[610]              zombie-messages[611]    

-----
`HELP PROGRAMMER' AMBIGUOUS
===========================

Sorry, the topic `programmer' is ambiguous.  I don't know which of the following topics you mean:

`help @programmer'[1]   `help programmer-policy'[2]
`help Programming Group'[3]                     

-----
Available Help Indices
======================

wiz-index[1]
      Wizard Help Topics
prog-index[2]
      Programmer Help Topics
builtin-index[3]
      Server Built-in Functions
core-index[4]
      Core Utility Help Topics
jtext-index[5]
      Jtext Help Topics
mcp-index[6]
      MCP help topics
tkmoo-index[7]
      tkmoo help topics
unicode-index[8]
      Server Unicode Built-in Functions
policy-index[9]
      policy help database
admin-index[10]
      administration group help
gen-index[11]
      General Help Topics

full-index[12]
      EVERYTHING

-----
PROGRAMMER HELP TOPICS
======================

#[1]                    ;[2]                    @add-feature[3]
@addalias#[4]           @addfeature[5]          aliases[6]
@args[7]                @args#[8]               @check-chparent[9]
@check-property[10]     @chmod[11]              @chparent[12]
@clearproperty[13]      @copy[14]               @copy-x[15]
@d[16]                  @dbsize[17]             @disinherit[18]
@disown[19]             @display[20]            @display-options[21]
@displayoptions[22]     @egrep[23]              errors[24]
eval[25]                @eval-options[26]       events[27]
exam[28]                examine[29]             expressions[30]
features[31]            for[32]                 fork()[33]
@forked[34]             functions[35]           @grep[36]
help[37]                integrate[38]           integration[39]
@kids[40]               @kill[41]               language[42]
@list[43]               @list#[44]              @list-options[45]
listen()[46]            @listoptions[47]        mpl[48]
named[49]               named-args[50]          named-arguments[51]
precedence[52]          prepositions[53]        prog-index[54]
@program[55]            .program[56]            @program#[57]
programming[58]         @prop[59]               @property[60]
@prospectus[61]         regexps[62]             regular-expressions[63]
@remove-feature[64]     @rename#[65]            return[66]
@rmalias#[67]           @rmproperty[68]         @rmverb[69]
@rmverb#[70]            @setenv[71]             @show[72]
statements[73]          tasks[74]               truth[75]
unlisten()[76]          utilities[77]           valid()[78]
@verb[79]               while()[80]             

Login Commands (#10) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
-----
$LOGIN
======

This object manages command parsing for unconnected players and governs the initiation of an actual connection.  There are verbs pertaining to registration, controlling player creation, and doing site-locks (see `help blacklist'[1] on $wiz_help).

COMMANDS FOR UNCONNECTED PLAYERS
--------------------------------

Recall that for each line that an unconnected player types, the server parses that line into words (the same way normal commands are parsed into a list of words that is then assigned to `args') and then #0:do_login_command is called.

  :parse_command (@args) => {verb, @args}
    given the sequence of arguments that were fed to #0:do_login_command
    this returns the name of a verb on $login to be called together with a 
    list of arguments to be passed to it.

By default this just returns args iff args[1] names an actual verb on $login that is +x and has args {"any","none","any"}.  Otherwise, it returns one of

  .blank_command   -- verb to call if command line is empty
  .bogus_command   -- verb to call if command line otherwise unintelligible

In both cases :parse_command returns a verbname followed by the entire args list passed to it (including the would-be verb at the beginning if any).

Currently the following verbs are availabe to non-connected players

  h*elp @h*elp       -- print .welcome_message
  ?                  -- print a short list of available commands
  w*ho @w*ho         -- print a list of logged in players (excluding wizards)
  co*nnect @co*nnect -- connect to an existing player
  cr*eate @cr*eate   -- create a new player
  up*time @up*time   -- tell how long the server has been running
  version @version   -- tell which version of the server is running
  q*uit @q*uit       -- logoff

Adding a new command is fairly straightforward; just create a verb on $login, making sure a previous verb doesn't already match the name you want to give it.  Then give it args of "any" "none "any" and make sure it is +x.  Such a verb should begin with `if (caller != #0) return E_PERM; ...' so as to prevent anyone other from a not-logged-in player from making use of it.

CUSTOMIZATIONS
--------------

  .welcome_message 
    -- the message for "help" to print.
  .create_enabled 
    == 0 => @create prints .registration_string if one tries to use it
    == 1 => anyone from a non-blacklisted site (see `help blacklist')
            may use @create to make a new player

  .registration_address
    -- an email address for character creation requests
  .registration_string  
    -- string to print to players to give them information about how to get 
       a character created for them, .registration_address is substituted 
       for %e, % for %%
  .newt_registration_string
    -- string to print to @newted players (see `help @newt').
       same substitutions as for .registration_string.

  .sitematch_guests
    -- use $country_db to connect guests from ".fr" as "French guest", etc.

OTHER VERBS
-----------

   :registration_string()      => .registration_string with substitutions
   :newt_registration_string() => .newt_registration_string with substitutions
   :player_creation_enabled(connection) 
       decides whether someone on connection should be allowed to create 
       a player.  If you decide this shouldn't depend strictly on the blacklist
       and on the value of .create_enabled, here's where the extra code can go.
   :check_for_shutdown()
       prints a warning message to append to the login banner in the event 
       that the server will be going down soon.
   :check_player_db()
       prints a warning message to append to the login banner in the event 
       that $player_db is being reloaded to warn players that their character
       names might not be recognized.

SITE LOCKS
----------

See `help blacklist'[2].

Login Commands (#10) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
The Login Commands(#10) has no kids.
The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   generic thing (#5)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)
startup handler (#189) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
startup handler (#189) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #189:schedule_checkpoint      Core-Wizard (#184)   rxd    this none this
  #189:start_services           Core-Wizard (#184)   rxd    this none this
  #189:server_started           Core-Wizard (#184)   rxd    this none this
  #189:add_service              Core-Wizard (#184)   rxd    this none this
  #189:remove_service           Core-Wizard (#184)   rxd    this none this
  #189:set_services             Core-Wizard (#184)   rx     this none this
  #189:log                      Core-Wizard (#184)   rxd    this none this
  #189:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Thu May  9 13:11:30 1996 PDT by Ken (#75) (on JHM).
#189:"start_services" this none this
 1:  "Usage:  :start_services()";
 2:  "";
 3:  if (caller_perms().wizard)
 4:    for service in (this.services)
 5:      try
 6:        this:log("Service ", service:name(), " started: ", service:service_start());
 7:      except v (ANY)
 8:        this:log("Service ", service:name(), " traced back...");
 9:        for line in ($code_utils:format_traceback(v[4], v[1]))
10:          this:log("  ", line);
11:        endfor
12:      endtry
13:    endfor
14:  endif
15:  return;
startup handler (#189) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
.services                Core-Wizard (#184)    r      {}
-------------------------------- finished ---------------------------------
You see no "$service" here.
-----
`HELP SERVICE' NOT FOUND
========================

Sorry, but no help is available on `service'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
Available Help Indices
======================

wiz-index[1]
      Wizard Help Topics
prog-index[2]
      Programmer Help Topics
builtin-index[3]
      Server Built-in Functions
core-index[4]
      Core Utility Help Topics
jtext-index[5]
      Jtext Help Topics
mcp-index[6]
      MCP help topics
tkmoo-index[7]
      tkmoo help topics
unicode-index[8]
      Server Unicode Built-in Functions
policy-index[9]
      policy help database
admin-index[10]
      administration group help
gen-index[11]
      General Help Topics

full-index[12]
      EVERYTHING

-----
GENERAL HELP TOPICS
===================

![1]                    "[2]                    '[3]
+[4]                    ++[5]                   @911[6]
:[7]                    ::[8]                   ?[9]
_[10]                   @add-entrance[11]       @add-exit[12]
@add-feature[13]        @add-owned[14]          @addalias[15]
@administrators[16]     @admins[17]             alias[18]
aliases[19]             @aliases[20]            @answer[21]
@audit[22]              @auditdb[23]            author_feature[24]
@boot[25]               @boot![26]              @bug[27]
building[28]            character[29]           characters[30]
@check[31]              @co[32]                 commands[33]
@comment[34]            common_quota[35]        communication[36]
communications[37]      container-messages[38]  containers[39]
@contents[40]           @count[41]              creation[42]
current-object[43]      @current-object[44]     @currentobject[45]
decrypt[46]             delete[47]              @describe[48]
descriptions[49]        doing[50]               drop[51]
@dump[52]               @edit[53]               @edit-options[54]
@edito[55]              @editoptions[56]        editors[57]
@eject[58]              email[59]               emote[60]
encrypt[61]             @entrances[62]          erase[63]
examine[64]             @examine[65]            exit-messages[66]
@exits[67]              features[68]            @features[69]
following[70]           @forward[71]            @forward-me[72]
full-index[73]          @gag[74]                @gagged[75]
gagging[76]             @gaglist[77]            gen-index[78]
gender[79]              @gender[80]             get[81]
getting-started[82]     give[83]                go[84]
@go[85]                 @grant[86]              @gripe[87]
hand[88]                help[89]                help-format[90]
@helpme[91]             home[92]                @idea[93]
idle[94]                idling[95]              index[96]
information[97]         insert[98]              introduction[99]
inventory[100]          join[101]               @join[102]
key-representation[103]                         keys[104]
known_dbs[105]          @lastlog[106]           @linelength[107]
@listgag[108]           @locations[109]         @lock[110]
@lock_for_open[111]     locking[112]            look[113]
mail[114]               @mail[115]              mail-forwarding[116]
@mail-options[117]      @mailoptions[118]       manipulation[119]
me[120]                 @memory[121]            message-sequences[122]
messages[123]           @messages[124]          miscellaneous[125]
@more[126]              @move[127]              movement[128]
name[129]               naming[130]             @netforward[131]
news[132]               @next[133]              @nn[134]
@notedit[135]           notes[136]              @opacity[137]
@options[138]           page[139]               @pagelength[140]
@paranoid[141]          @parents[142]           @password[143]
@peek[144]              @popo[145]              @popobject[146]
@prev[147]              privacy[148]            programming[149]
pronouns[150]           @pusho[151]             @pushobject[152]
put[153]                @qsend[154]             @quicksend[155]
@quit[156]              @quota[157]             read[158]
@read[159]              @recycle[160]           @register[161]
registration[162]       reidle[163]             remove[164]
@remove-entrance[165]   @remove-exit[166]       @remove-feature[167]
@rename[168]            @renumber[169]          @reply[170]
@resend[171]            @resident[172]          @rmalias[173]
@rmmail[174]            @rn[175]                room-messages[176]
rooms[177]              say[178]                security[179]
@send[180]              @sethome[181]           @skip[182]
@sort-owned[183]        spoofing[184]           @subscribe[185]
@subscribed[186]        @suggest[187]           summary[188]
@swapo[189]             @swapobject[190]        @sweep[191]
take[192]               teleportation[193]      thing-messages[194]
throw[195]              time-stamp[196]         time-stamping[197]
time-stamps[198]        timestamping[199]       timestamps[200]
topics[201]             topology[202]           tstamp[203]
two-letter-spec[204]    @typo[205]              @ungag[206]
@unlock[207]            @unlock_for_open[208]   @unrmmail[209]
@unsubscribe[210]       @unsubscribed[211]      @uptime[212]
@verify-owned[213]      @version[214]           walk[215]
whereis[216]            whisper[217]            @who[218]
@who-options[219]       @whooptions[220]        wizard-list[221]
wizards[222]            @wrap[223]              write[224]
zombie-messages[225]    

=> "1.8.3+?_ad_hoc_??"
-----
`HELP CONNECT' AMBIGUOUS
========================

Sorry, the topic `connect' is ambiguous.  I don't know which of the following topics you mean:

`help connected_players()'[1]                   `help connected_seconds()'[2]
`help connection_name()'[3]                     `help connection_option()'[4]
`help connection_options()'[5]                  

-----
OPEN_NETWORK_CONNECTION()
=========================

Syntax:  open_network_connection (<value>, ...)   => obj

Establishes a network connection to the place specified by the arguments and more-or-less pretends that a new, normal player connection has been established from there.  The new connection, as usual, will not be logged in initially and will have a negative object number associated with it for use with `read()', `notify()', and `boot_player()'.  This object number is the value returned by this function.

If the programmer is not a wizard or if the `OUTBOUND_NETWORK' compilation option was not used in building the server, then `E_PERM' is raised.  If the network connection cannot be made for some reason, then other errors will be returned, depending upon the particular network implementation in use.

For the TCP/IP network implementations (the only ones as of this writing that support outbound connections), there must be two arguments, a string naming a host (possibly using the numeric Internet syntax) and an integer specifying a TCP port.  If a connection cannot be made because the host does not exist, the port does not exist, the host is not reachable or refused the connection, `E_INVARG' is raised.  If the connection cannot be made for other reasons, including resource limitations, then `E_QUOTA' is raised.

The outbound connection process involves certain steps that can take quite a long time, during which the server is not doing anything else, including responding to user commands and executing MOO tasks.  See the chapter on server assumptions about the database for details about how the server limits the amount of time it will wait for these steps to successfully complete.

It is worth mentioning one tricky point concerning the use of this function.  Since the server treats the new connection pretty much like any normal player connection, it will naturally try to parse any input from that connection as commands in the usual way.  To prevent this treatment, you should use `set_connection_option()' to set the `"hold-input"' option true on the connection.

Your current object is _, a generic group (#244).
The generic group(#244) has 1 kid.
Generic Pile (#242)
That is not a valid command.
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "str:#242.description" name: "Generic Pile.description" type: string-list content*: "" _data-tag: 18853051134
#$#* 18853051134 content: Generic Groups implement the Composite and Decorator patterns to provide group behavior functionality.
#$#* 18853051134 content: 
#$#* 18853051134 content: Imagine a dog with a collar which is attached to a stake in the ground with a rope. The "stake-rope-collar" relationship is a grouping which mostly behaves like three different things. Players can probably interact with any of the contained items in the same way they would interact with them if they were not attached. The collar-dog relationship is it's own grouping which allows a player to interact with the dog or collar as if they were not attached, but still associates them with each other so that where one goes, the other goes. All the interaction with the components is mediated by the group.
#$#* 18853051134 content: 
#$#* 18853051134 content: Besides group dissimilar items as above, groups also implement enumerated sets of objects. Some stacks of coins are represented by a Stacks Group object containing one Stack object for each kind of coin present. Those Stack objects know what kind of object they are stacking and how many are in the stack. Players in a room containing some stacks of nickles and dimes can "count nickles" without removing them from the set.
#$#: 18853051134
Set description property of the Generic Pile (#242).
Usage:  @dump something [with [id=...] [noprops] [noverbs] [create]]
@create #244 named Generic Pile:pile
;#242.("key") = 0
;#242.("aliases") = {"pile"}
;#242.("description") = {"Piles are groups of things. Piles are created when a person does a \"pile foo with bar\". This creates a pile containing foo and bar. Interaction with foo and bar can then only happen when someone removes them from the pile."}
;#242.("offered") = #-1
;#242.("object_size") = {425, 1365900662}

"***finished***
@building-option +create-set-co
@create #244 named Generic Pile:pile
;_.("key") = 0
;_.("aliases") = {"pile"}
;_.("description") = {"Piles are groups of things. Piles are created when a person does a \"pile foo with bar\". This creates a pile containing foo and bar. Interaction with foo and bar can then only happen when someone removes them from the pile."}
;_.("offered") = #-1
;_.("object_size") = {425, 1365900662}

"***finished***
-----
@RECREATE
=========

Usage: @recreate <object> as <parent> named <name spec>

This is a combination of @create and @chparent.  It takes an existing object, completely strips it of any verbs, properties, and values for inherited properties.  This object is then reshaped into a child of the parent specified, as though @create had been called, but retaining the same object number as the original.

The <parent> and <name spec> arguments are as in @create.  See `help @create'[1] and `help @chparent'[2].

generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
    #5:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   generic thing (#5)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#243:dump-kids any none none" name: "MOO verb: #243:dump-kids any none none" type: moo-code content*: "" _data-tag: 16815782295
#$#: 16815782295
Object #243 does not define that verb, but its ancestor #52 does.
Last modified Wed Aug 17 14:07:45 2005 PDT by Xplat (#4014) (on Waterpoint).
#52:"@d*isplay" any none none
 1:  "@display <object>[.[property]]*[,[inherited_property]]*[:[verb]]*[;[inherited_verb]]*";
 2:  "null names for properties and verbs are interpreted as meaning all of them.";
 3:  if (player != this)
 4:    "yet another bandaid for the @shout bug ... :(  --*";
 5:    player:tell(E_PERM);
 6:    return E_PERM;
 7:  endif
 8:  opivu = {{}, {}, {}, {}, {}};
 9:  string = "";
10:  punc = 1;
11:  literal = 0;
12:  for jj in [1..length(argstr)]
13:    j = argstr[jj];
14:    if (literal)
15:      string = string + j;
16:      literal = 0;
17:    elseif (j == "\\")
18:      literal = 1;
19:    elseif (y = index(".,:;", j))
20:      opivu[punc] = {@opivu[punc], string};
21:      punc = 1 + y;
22:      string = "";
23:    else
24:      string = string + j;
25:    endif
26:  endfor
27:  opivu[punc] = {@opivu[punc], string};
28:  objname = opivu[1][1];
29:  it = this:my_match_object(objname);
30:  if ($command_utils:object_match_failed(it, objname))
31:    return;
32:  endif
33:  readable = it.owner == this || (it.r || this.wizard);
34:  cant = {};
35:  if ("" in opivu[2])
36:    if (readable)
37:      prop = properties(it);
38:    else
39:      prop = {};
40:      cant = setadd(cant, it);
41:    endif
42:    if (this:display_option("firstancestor"))
43:      what = it;
44:      while (!prop && valid(what = parent(what)))
45:        if (what.owner == this || (what.r || this.wizard))
46:          prop = properties(what);
47:        else
48:          cant = setadd(cant, what);
49:        endif
50:      endwhile
51:    endif
52:  else
53:    prop = opivu[2];
54:  endif
55:  if ("" in opivu[3])
56:    inh = {};
57:    for what in ({it, @$object_utils:ancestors(it)})
58:      if (what.owner == this || what.r || this.wizard)
59:        inh = {@inh, @properties(what)};
60:      else
61:        cant = setadd(cant, what);
62:      endif
63:    endfor
64:  else
65:    inh = opivu[3];
66:  endif
67:  for q in (inh)
68:    if (q in properties(it))
69:      prop = setadd(prop, q);
70:      inh = setremove(inh, q);
71:    endif
72:  endfor
73:  vrb = {};
74:  if ("" in opivu[4])
75:    if (readable)
76:      vrbs = verbs(it);
77:    else
78:      vrbs = {};
79:      cant = setadd(cant, it);
80:    endif
81:    what = it;
82:    if (this:display_option("firstancestor"))
83:      while (!vrbs && valid(what = parent(what)))
84:        if (what.owner == this || (what.r || this.wizard))
85:          vrbs = verbs(what);
86:        else
87:          cant = setadd(cant, what);
88:        endif
89:      endwhile
90:    endif
91:    for n in [1..length(vrbs)]
92:      vrb = setadd(vrb, {what, n});
93:    endfor
94:  else
95:    for w in (opivu[4])
96:      if (y = $object_utils:has_verb(it, w))
97:        vrb = setadd(vrb, {y[1], w});
98:      else
99:        this:notify(tostr("No such verb, \"", w, "\""));
100:      endif
101:    endfor
102:  endif
103:  if ("" in opivu[5])
104:    for z in ({it, @$object_utils:ancestors(it)})
105:      if (this == z.owner || z.r || this.wizard)
106:        for n in [1..length(verbs(z))]
107:          vrb = setadd(vrb, {z, n});
108:        endfor
109:      else
110:        cant = setadd(cant, z);
111:      endif
112:    endfor
113:  else
114:    for w in (opivu[5])
115:      if (typeof(y = $object_utils:has_verb(it, w)) == LIST)
116:        vrb = setadd(vrb, {y[1], w});
117:      else
118:        this:notify(tostr("No such verb, \"", w, "\""));
119:      endif
120:    endfor
121:  endif
122:  if ({""} in opivu || opivu[2..5] == {{}, {}, {}, {}})
123:    this:notify(tostr(it:name(), " (", it, ") [ ", it.r ? "readable " | "", it.w ? "writeable " | "", it.f ? "fertile " | "", is_player(it) ? "(player) " | "", it.programmer ? "programmer " | "", it.wizard ? "wizard " | "", "]"));
124:    if (it.owner != (is_player(it) ? it | this))
125:      this:notify(tostr("  Owned by ", valid(p = it.owner) ? p:name() | "** extinct **", " (", p, ")."));
126:    endif
127:    this:notify(tostr("  Child of ", valid(p = parent(it)) ? p:name() | "** none **", " (", p, ")."));
128:    if (it.location != $nothing)
129:      this:notify(tostr("  Location ", valid(p = it.location) ? p:name() | "** unplace (tell a wizard, fast!) **", " (", p, ")."));
130:    endif
131:  endif
132:  set_task_perms(this.owner);
133:  blankargs = this:display_option("blank_tnt") ? {"this", "none", "this"} | #-1;
134:  for b in (vrb)
135:    $command_utils:suspend_if_needed(0);
136:    {where, q} = b;
137:    short = typeof(q) == NUM ? q | strsub((y = index(q, " ")) ? q[1..y - 1] | q, "*", "");
138:    inf = verb_info(where, short);
139:    if (typeof(inf) == LIST || inf == E_PERM)
140:      name = typeof(inf) == LIST ? inf[3] | q;
141:      name = index(name, " ") ? "\"" + name + "\"" | name;
142:      line = $string_utils:left(tostr($string_utils:right(tostr(where), 6), ":", name, " "), 32);
143:      if (inf == E_PERM)
144:        line = line + "   ** unreadable **";
145:      else
146:        line = $string_utils:left(tostr(line, inf[1]:name(), " (", inf[1], ") "), 53) + ((i = inf[2] in {"x", "xd", "d", "rd"}) ? {" x", " xd", "  d", "r d"}[i] | inf[2]);
147:        vargs = verb_args(where, short);
148:        if (vargs != blankargs)
149:          if (this:display_option("shortprep") && !(vargs[2] in {"any", "none"}))
150:            vargs[2] = $code_utils:short_prep(vargs[2]);
151:          endif
152:          line = $string_utils:left(line + " ", 60) + $string_utils:from_list(vargs, " ");
153:        endif
154:      endif
155:      this:notify(line);
156:    elseif (inf == E_VERBNF)
157:      this:notify(tostr(inf));
158:      this:notify(tostr("  ** no such verb, \"", short, "\" **"));
159:    else
160:      this:notify("This shouldn't ever happen. @display is buggy.");
161:    endif
162:  endfor
163:  all = {@prop, @inh};
164:  max = length(all) < 4 ? 999 | abs(this.linelen) - 54;
165:  depth = length(all) < 4 ? -1 | 1;
166:  truncate_owner_names = length(all) > 1;
167:  for q in (all)
168:    $command_utils:suspend_if_needed(0);
169:    inf = property_info(it, q);
170:    if (inf == E_PROPNF)
171:      if (q in $code_utils.builtin_props)
172:        this:notify(tostr($string_utils:left("," + q, 25), "Built in property ", length(y = $string_utils:from_value(it.(q), 1, depth)) > max ? y[1..max] + ".." | y));
173:      else
174:        this:notify(tostr("  ** property not found, \"", q, "\" **"));
175:      endif
176:    else
177:      pname = $string_utils:left(tostr(q in properties(it) ? "." | (is_clear_property(it, q) ? " " | ","), q, " "), 25);
178:      if (inf == E_PERM)
179:        this:notify(pname + "   ** unreadable **");
180:      else
181:        oname = inf[1]:name();
182:        truncate_owner_names && (length(oname) > 12 && (oname = oname[1..12]));
183:        inf[2][1] != "r" && (inf[2][1..0] = " ");
184:        inf[2][2] != "w" && (inf[2][2..1] = " ");
185:        this:notify($string_utils:left(tostr($string_utils:left(tostr(pname, oname, " (", inf[1], ") "), 47), inf[2], " "), 54) + $string_utils:print_truncated(it.(q), max, ".."));
186:      endif
187:    endif
188:  endfor
189:  if (cant)
190:    failed = {};
191:    for k in (cant)
192:      failed = listappend(failed, tostr(k:name(), " (", k, ")"));
193:    endfor
194:    this:notify($string_utils:centre(tostr(" no permission to read ", $string_utils:english_list(failed, ", ", " or ", " or "), ". "), 75, "-"));
195:  else
196:    this:notify($string_utils:centre(" finished ", 75, "-"));
197:  endif
The verb :take is on   Crag(#243)--generic player(#6)   leather couch(#245)--generic sittable object(#80)
Object #243 does not define that verb, but its ancestor #6 does.
#6:"g*et take" this none none
 1:  player:tell("This is not a pick-up joint!");
 2:  this:tell(player:dnamec(), " tried to pick you up!");
0 errors.
Verb programmed.
Verb #243:dump-kids [1] {any none none} removed.
Verb added [91] (90).
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#1:@dump-kids this none none" name: "MOO verb: #1:@dump-kids this none none" type: moo-code content*: "" _data-tag: 2829412046
#$#: 2829412046
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Fri Aug 13 13:16:06 1999 PDT by Xeric (#999) (on Waterpoint).
#6:"tell" this none this
 1:  if (!$network:is_connected(this))
 2:    return;
 3:  endif
 4:  if (this.gaglist || this.paranoid)
 5:    "Check the above first, default case, to save ticks.  Paranoid gaggers are cost an extra three or so ticks by this, probably a net savings.";
 6:    if (g = this:gag_p())
 7:      return;
 8:    endif
 9:    if (this.paranoid == 2)
10:      z = this:whodunnit({@callers(), {player, "", player}}, {this, $no_one}, {})[3];
11:      args = {"(", z:name(), " ", z, ") ", @args};
12:    elseif (this.paranoid == 1)
13:      this.responsible = {@this.responsible, {{@callers(), {player, "<cmd-line>", player}}, args}};
14:      if ((len = length(this.responsible)) * 2 > this.lines * 3)
15:        this.responsible = this.responsible[len - this.lines + 1..len];
16:      endif
17:    else
18:      this.responsible = {};
19:    endif
20:  endif
21:  if ((v = this:misc_option("tstamp")) < 0)
22:    if (time() - this.last_timestamp > abs(v * 60) && !($login_watcher in $list_utils:slice(callers(), 4)))
23:      this:notify(this:timestamp_string());
24:    endif
25:  endif
26:  pass(@args);
27:  if (v > 0)
28:    if (time() - this.last_timestamp > v * 60 && !($login_watcher in $list_utils:slice(callers(), 4)))
29:      this:notify(this:timestamp_string());
30:    endif
31:  endif
-----
DATABASE OF PLAYERS
===================

This is an instance of the Generic Database ($generic_db) that holds the {name/alias,#objectid} pairs for every name and alias of every player in the MOO.

Verbs supplied include

  :find(string)        => player or $ambiguous_match or $failed_match
  :find_exact(string)  => player or $failed_match (does not do partial matches)
  :find_all(string)    => list of all matching players

  :insert(string,player) 
       records that string is now a name or alias of player
  :delete(string) 
       removes string from the db
  :available(string)
       returns 1 if string is available as a player name or alias,
       an object if string is in use, or 0 if string is otherwise unavailable.
  :load()
       resets the db, inserting all current player names and aliases.

The internal representation and all of the above verbs (except :load() and :available()) are as described for $generic_db.

It should be noted that for any application that involves resolving a player name from a command line, you should be using $string_utils:match_player() rather than $player_db:find(), since the former will deal correctly with other ways of referring to players apart from their names and aliases (e.g., literal object numbers, "me", "$no_one"...).

:load() needs to be done periodically as it is possible for the player db to get out of synch with reality.  In particular, there is currently no way to block someone writing his own player :recycle() verb that neglects to remove his names from the player db.

While a :load() is in progress the .frozen property is set to 1 to indicate that any results of :find*() are not to be trusted.

-----
HELP ON GENERIC PLAYER
======================

No help found.

-----
CHILDREN()
==========

Syntax:  parent (obj <object>)   => obj
       children (obj <object>)   => list

These functions return the parent and a list of the children of <object>, respectively.  If <object> is not valid, then `E_INVARG' is raised.

=> #1 (root class)
Object #243 does not define that verb, but its ancestor #4 does.
#4:"@kids" any none none
 1:  "'@kids <obj>' - List the children of an object. This is handy for seeing whether anybody's actually using your carefully-wrought public objects.";
 2:  thing = player:my_match_object(dobjstr);
 3:  if (!$command_utils:object_match_failed(thing, dobjstr))
 4:    kids = children(thing);
 5:    if (kids)
 6:      player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
 7:      player:notify(tostr($string_utils:names_of(kids)));
 8:    else
 9:      player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
10:    endif
11:  endif
command utilities (#50) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #50:object_match_failed      Core-Wizard (#184)   rxd    this none this
   #50:"player_match_result player_match_failed" Core-Wizard (#184) rxd this none this
   #50:read                     Core-Wizard (#184)   rx     this none this
   #50:read_lines               Core-Wizard (#184)   rx     this none this
   #50:yes_or_no                Core-Wizard (#184)   rx     this none this
   #50:read_lines_escape        Core-Wizard (#184)   rxd    this none this
   #50:suspend                  Core-Wizard (#184)   rxd    this none this
   #50:running_out_of_time      unknown hacker (#35) rxd    this none this
   #50:suspend_if_needed        Core-Wizard (#184)   rxd    this none this
   #50:dump_lines               unknown hacker (#35) rxd    this none this
   #50:explain_syntax           Core-Wizard (#184)   rxd    this none this
   #50:do_huh                   Core-Wizard (#184)   rx     this none this
   #50:task_info                Core-Wizard (#184)   rxd    this none this
   #50:room_match_failed        Core-Wizard (#184)   rxd    this none this
   #50:_suspend                 Core-Wizard (#184)   rxd    this none this
   #50:_resume                  Core-Wizard (#184)   rxd    this none this
   #50:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
-----
$COMMAND_UTILS:SUSPEND_IF_NEEDED
================================

Usage:  $command_utils:suspend_if_needed(<time>[, @<announcement>])

See if we're running out of ticks or seconds, and if so suspend(<time>) and return true.  If more than one arg is given, print the remainder with player:tell.

The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   generic thing (#5)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)
Object #243 does not define that verb, but its ancestor #4 does.
#4:"@kids" any none none
 1:  "'@kids <obj>' - List the children of an object. This is handy for seeing whether anybody's actually using your carefully-wrought public objects.";
 2:  thing = player:my_match_object(dobjstr);
 3:  if (!$command_utils:object_match_failed(thing, dobjstr))
 4:    kids = children(thing);
 5:    if (kids)
 6:      player:notify(tostr(thing:dnamec(), "(", thing, ") has ", length(kids), " kid", length(kids) == 1 ? "" | "s", "."));
 7:      player:notify(tostr($string_utils:names_of(kids)));
 8:    else
 9:      player:notify(tostr(thing:dnamec(), "(", thing, ") has no kids."));
10:    endif
11:  endif
#18:"names_of" this none this
 1:  "Return a string of the names and object numbers of the objects in a list.";
 2:  return this:name_and_number_list(args[1], "", "   ", "   ", "");
#18:"name_and_number_list iname_and_number_list dname_and_number_list" this none this
 1:  "name_and_number_list(<list>[, @<args>])";
 2:  "<list> is a list of objects; an english list will be constructed of their names and numbers in the form \"Munchkin (#xxx)\".  <args> are the same as the optional args to $string_utils:english_list.";
 3:  return $string_utils:english_list($list_utils:map_arg($string_utils, verb[1..rindex(verb, "_") - 1], args[1]), @args[2..length(args)]);
=> "root class"
=> "root class (#1)"
Error programming root class:@dump-kids[91](90).
Line 5:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
That is not a valid command.
    #1:@dump-kids               Crag (#243)          r d    this none none
-------------------------------- finished ---------------------------------
Usage:  @chmod <object-or-property-or-verb> <permissions>
Verb permissions set to "rdx".
root class (#1) generic group (#244)
#1:@dump-kids (this == #244), line 4:  Incorrect number of arguments
... called from #3:here_huh (this == #70), line 22
... called from #50:do_huh, line 13
... called from #1:huh (this == #70), line 10
(End of traceback)
Object #243 does not define that verb, but its ancestor #1 does.
Last modified Sun Apr 14 15:27:33 2013 PDT by Crag (#243).
#1:"@dump-kids" this none none
 1:  parentinfo = parent(this):name_and_number();
 2:  thisinfo = this:name_and_number();
 3:  player:tell(parentinfo, " ", thisinfo);
 4:  for child in (children())
 5:    child:("@dump-kids")();
 6:    $command_utils:suspend_if_needed(0);
 7:  endfor
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#243:@dump-kids this none none" name: "MOO verb: #243:@dump-kids this none none" type: moo-code content*: "" _data-tag: 17818019737
#$#* 17818019737 content: Crag (#243) does not define a :@dump-kids verb.  The following code is from its ancestor, the root class (#1).
#$#* 17818019737 content: parentinfo = parent(this):name_and_number();
#$#* 17818019737 content: thisinfo = this:name_and_number();
#$#* 17818019737 content: player:tell(parentinfo, " ", thisinfo);
#$#* 17818019737 content: for child in (children())
#$#* 17818019737 content:   child:("@dump-kids")();
#$#* 17818019737 content:   $command_utils:suspend_if_needed(0);
#$#* 17818019737 content: endfor
#$#: 17818019737
That object has no verb matching that name + args.
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#1:@dump-kids this none none" name: "MOO verb: #1:@dump-kids this none none" type: moo-code content*: "" _data-tag: 6286545298
#$#* 6286545298 content: parentinfo = parent(this):name_and_number();
#$#* 6286545298 content: thisinfo = this:name_and_number();
#$#* 6286545298 content: player:tell(parentinfo, " ", thisinfo);
#$#* 6286545298 content: for child in (children())
#$#* 6286545298 content:   child:("@dump-kids")();
#$#* 6286545298 content:   $command_utils:suspend_if_needed(0);
#$#* 6286545298 content: endfor
#$#: 6286545298
0 errors.
Verb programmed.
root class (#1) generic group (#244)
generic group (#244) Generic Pile (#242)
#1:@dump-kids, line 1:  Invalid indirection
(End of traceback)
#1:@dump-kids, line 1:  Invalid indirection
... called from #3:here_huh (this == #70), line 22
... called from #50:do_huh, line 13
... called from #1:huh (this == #70), line 10
(End of traceback)
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#1:@dump-kids this none none" name: "MOO verb: #1:@dump-kids this none none" type: moo-code content*: "" _data-tag: 14457677399
#$#* 14457677399 content: parentinfo = parent(this):name_and_number();
#$#* 14457677399 content: thisinfo = this:name_and_number();
#$#* 14457677399 content: player:tell(parentinfo, " ", thisinfo);
#$#* 14457677399 content: for child in (children(this))
#$#* 14457677399 content:   child:("@dump-kids")();
#$#* 14457677399 content:   $command_utils:suspend_if_needed(0);
#$#* 14457677399 content: endfor
#$#: 14457677399
0 errors.
Verb programmed.
root class (#1) Login Commands (#10)
You must give the name of some object.
root class (#1) Guest Log (#12)
root class (#1) Limbo (#15)
root class (#1) Generic Help Database (#30)
Generic Help Database (#30) Generic Core Help Database (#197)
Generic Core Help Database (#197) Verb Help (#20)
Verb Help (#20) feature object help database (#100)
Generic Core Help Database (#197) Core Utility Help (#21)
Generic Core Help Database (#197) Programmer Help (#22)
Generic Core Help Database (#197) Wizard Help (#23)
Generic Core Help Database (#197) Builtin Function Help (1.8.0) (#28)
Generic Core Help Database (#197) Editor Help (#40)
Generic Core Help Database (#197) main help database (#54)
Generic Core Help Database (#197) Object Help Database (#173)
Generic Core Help Database (#197) last resort help database (#127)
Generic Core Help Database (#197) Builder Help (#155)
Generic Core Help Database (#197) guest help database (#168)
Generic Core Help Database (#197) policy help database (#235)
Generic Core Help Database (#197) administration group help (#238)
Generic Core Help Database (#197) JHCore Help DB (#237)
Generic Core Help Database (#197) jtext help database (#152)
Generic Core Help Database (#197) MCP help (#186)
Generic Core Help Database (#197) tkmoo help (#187)
Generic Core Help Database (#197) generic personal help database (#115)
Generic Help Database (#30) Unicode Builtins Help (#241)
root class (#1) New Generic Database (#79)
New Generic Database (#79) Registration Database (#16)
New Generic Database (#79) Site DB (#25)
New Generic Database (#79) Player Database (#37)
New Generic Database (#79) Country Database (#94)
root class (#1) Generic Mail Recipient (#41)
Generic Mail Recipient (#41) Generic Large-Capacity Mail Recipient (#14)
Generic Large-Capacity Mail Recipient (#14) Player-Creation-Log (#17)
Generic Mail Recipient (#41) News (#141)
Generic Mail Recipient (#41) Generic Administrators Mailing List (#107)
Generic Administrators Mailing List (#107) New-Prog-Log (#29)
Generic Administrators Mailing List (#107) Quota-Log (#33)
Generic Administrators Mailing List (#107) Community-Group (#106)
Generic Administrators Mailing List (#107) Site-Locks (#62)
Generic Administrators Mailing List (#107) security (#105)
Generic Administrators Mailing List (#107) Steering-Committee (#135)
Generic Administrators Mailing List (#107) Bug-reports (#140)
Generic Mail Recipient (#41) Boot-Log (#85)
root class (#1) Mail Distribution Center (#42)
root class (#1) generic thing (#5)
generic thing (#5) generic note (#9)
generic thing (#5) Recycling Center (#55)
generic thing (#5) network utils (#82)
generic thing (#5) generic sittable object (#80)
generic sittable object (#80) generic piece of furniture (#81)
generic piece of furniture (#81) leather couch (#245)
generic thing (#5) Registrar (#108)
generic thing (#5) topic sign (#178)
generic thing (#5) old FTP (#234)
generic thing (#5) generic module (#203)
generic module (#203) module system module (#202)
generic module (#203) MCP 2.1 module (#214)
generic module (#203) simpleedit module (#220)
generic module (#203) SMTP module (#226)
generic module (#203) listeners module (#228)
generic module (#203) core feature objects (#233)
generic thing (#5) feature object registry (#151)
root class (#1) Generic Option Package (#60)
Generic Option Package (#60) Mail Options (#57)
Generic Option Package (#60) Edit Options (#58)
Generic Option Package (#60) Display Options (#59)
Generic Option Package (#60) List Options (#61)
Generic Option Package (#60) Miscellaneous Options (#112)
Generic Option Package (#60) Client Options (#116)
Generic Option Package (#60) building options (#122)
Generic Option Package (#60) Who Options (#89)
Generic Option Package (#60) Eval Options (#136)
Generic Option Package (#60) Parsing Options (#191)
Generic Option Package (#60) login watcher options (#76)
root class (#1) Error Generator (#66)
root class (#1) Generic Feature Object (#65)
Generic Feature Object (#65) login watcher mark 2 (#83)
Generic Feature Object (#65) Stage-Talk Feature (#67)
Generic Feature Object (#65) Thinking Feature (#68)
Generic Feature Object (#65) documentation feature (#169)
Generic Feature Object (#65) generic secure group-command-feature (#150)
generic secure group-command-feature (#150) Community Group Commands (#149)
root class (#1) pronoun substitution (#69)
root class (#1) everything (#139)
root class (#1) all (#103)
root class (#1) generic admin group (#163)
generic admin group (#163) Steering Committee (#137)
generic admin group (#163) Community Group (#165)
generic admin group (#163) Tech Group (#164)
Tech Group (#164) DB Group (#148)
Tech Group (#164) Unix Group (#147)
Tech Group (#164) Programming Group (#124)
generic admin group (#163) Building Group (#192)
generic admin group (#163) documentation group (#232)
root class (#1) generic event dispatching object (#110)
generic event dispatching object (#110) generic exit (#7)
generic exit (#7) generic door (#121)
generic door (#121) generic window (#179)
generic event dispatching object (#110) generic containing object (#145)
generic containing object (#145) generic player (#6)
generic player (#6) generic builder (#4)
generic builder (#4) generic programmer (#52)
generic programmer (#52) unknown hacker (#35)
generic programmer (#52) generic wizard (#51)
generic wizard (#51) Core-Wizard (#184)
generic wizard (#51) Wizard (#2)
generic wizard (#51) Crag (#243)
generic wizard (#51) stormagnet (#246)
generic programmer (#52) housekeeper (#63)
generic programmer (#52) generic testing player (#99)
generic player (#6) nobody (#36)
generic player (#6) J. Text (#176)
generic player (#6) topic-owner (#181)
generic player (#6) Quota (#185)
generic player (#6) generic guest (#31)
generic containing object (#145) generic container (#126)
generic container (#126) generic openable container (#8)
generic containing object (#145) generic room (#3)
generic room (#3) Generic Editor (#46)
Generic Editor (#46) Mail Room (#43)
Generic Editor (#46) Note Editor (#44)
Note Editor (#44) help text editor (#171)
Generic Editor (#46) Verb Editor (#45)
generic room (#3) first room (#70)
root class (#1) generic utilities (#146)
generic utilities (#146) Generic BigList Utilities (#13)
generic utilities (#146) wizard utilities (#24)
generic utilities (#146) math utilities (#26)
generic utilities (#146) set utilities (#27)
generic utilities (#146) sequence utilities (#32)
generic utilities (#146) gender utilities (#38)
generic utilities (#146) time utilities (#39)
generic utilities (#146) object utilities (#47)
generic utilities (#146) lock utilities (#48)
generic utilities (#146) list utilities (#49)
generic utilities (#146) command utilities (#50)
generic utilities (#146) code utilities (#53)
generic utilities (#146) permissions utilities (#130)
generic utilities (#146) building utilities (#19)
generic utilities (#146) string utilities (#18)
generic utilities (#146) English Utilities (#72)
generic utilities (#146) integration utils (#74)
generic utilities (#146) Name Utilities (#177)
generic utilities (#146) Parsing Utilities (#117)
generic utilities (#146) walking utils (#182)
generic utilities (#146) room matching utilities (#190)
generic utilities (#146) Generic Quota Utils Parent (#88)
Generic Quota Utils Parent (#88) Byte Quota Utilities (#174)
Generic Quota Utils Parent (#88) Object Quota Utilities (#113)
root class (#1) generic event handler (#133)
root class (#1) generic gender object (#64)
generic gender object (#64) you (#34)
you (#34) you (#161)
generic gender object (#64) they (#71)
generic gender object (#64) it (#154)
it (#154) he (#156)
it (#154) she (#157)
it (#154) e (#158)
it (#154) s/he (#162)
it (#154) *e (#166)
it (#154) none (#167)
generic gender object (#64) I (#160)
generic gender object (#64) we (#159)
root class (#1) administration (#170)
root class (#1) server options (#188)
root class (#1) checkpointer (#175)
root class (#1) startup handler (#189)
root class (#1) syslog (#183)
root class (#1) Generic BigList Resident (#75)
root class (#1) http (#87)
root class (#1) generic property farm (#206)
generic property farm (#206) builtin function definitions (#153)
builtin function definitions (#153) System Object (#0)
generic property farm (#206) Jtext Dispatcher (#92)
generic property farm (#206) Jaddress Dispatcher (#111)
generic property farm (#206) module registry (#205)
generic property farm (#206) Local Namespace (#193)
root class (#1) SMTP (#212)
root class (#1) Cord Dispatcher (#223)
root class (#1) MCP 2.1 (#213)
root class (#1) FTP (#230)
root class (#1) link dispatcher tag (#123)
root class (#1) Generic Pronoun_sub Translator (#73)
Generic Pronoun_sub Translator (#73) LambdaCore Pronoun_sub Translator (#77)
Generic Pronoun_sub Translator (#73) Two-Letter Pronoun_Sub Translator (#78)
root class (#1) here (#180)
root class (#1) Tag Root (#91)
Tag Root (#91) Title Tag (#96)
Tag Root (#91) Vgroup Tag (#97)
Tag Root (#91) Header Tag (#102)
Tag Root (#91) Paragraph Tag (#101)
Tag Root (#91) Index Tag (#120)
Tag Root (#91) Plaintext Tag (#128)
Tag Root (#91) Horizontal Rule Tag (#134)
Tag Root (#91) Hgroup Tag (#93)
Tag Root (#91) Definition List Tag (#98)
Tag Root (#91) Link Tag (#104)
Link Tag (#104) generic preceding link tag (#142)
Link Tag (#104) Browser Link Tag (#95)
Tag Root (#91) String Tag (#84)
Tag Root (#91) List Of Strings Tag (#86)
Tag Root (#91) List Tag (#129)
Tag Root (#91) Itemize Tag (#138)
Itemize Tag (#138) Unnumbered Itemization Tag (#114)
Unnumbered Itemization Tag (#114) Numbered Itemization Tag (#125)
Tag Root (#91) ISINDEX Tag (#119)
root class (#1) Address Root (#109)
Address Root (#109) Resolved Help Address (#172)
Address Root (#109) Help Address (#131)
Address Root (#109) Browser Object Address (#90)
Address Root (#109) Note Address (#118)
Address Root (#109) Browser Verb Address (#143)
Address Root (#109) Browser Inherited Properties Address (#144)
root class (#1) name-subbing dummy object (#132)
root class (#1) generic cord stub (#222)
root class (#1) generic MCP 2.1 session (#204)
generic MCP 2.1 session (#204) session for #243 (#247)
root class (#1) MCP package registry (#209)
root class (#1) MCP 2.1 parser (#221)
root class (#1) generic name builder (#240)
generic name builder (#240) namebuilder_i for #1 (#227)
generic name builder (#240) namebuilder_d for #1 (#239)
generic name builder (#240) dummy name builder (#236)
root class (#1) generic source or sink (#196)
generic source or sink (#196) generic source (#200)
generic source (#200) http source (#194)
generic source (#200) read() player source (#198)
generic source (#200) ftp source (#229)
generic source or sink (#196) generic sink (#207)
generic sink (#207) FTP URL sink (#231)
generic sink (#207) generic gather-then-spam sink (#199)
generic gather-then-spam sink (#199) spam-player sink (#208)
generic gather-then-spam sink (#199) generate note sink (#195)
root class (#1) generic message dispatch object (#219)
generic message dispatch object (#219) generic cord type (#218)
generic message dispatch object (#219) generic MCP package (#216)
generic MCP package (#216) mcp-negotiate (#215)
generic MCP package (#216) mcp-cord (#217)
generic MCP package (#216) dns-org-mud-moo-simpleedit (#201)
root class (#1) generic listener (#224)
generic listener (#224) generic daemon listener (#211)
generic daemon listener (#211) generic daemon listener with flood control (#225)
root class (#1) generic daemon service handler (#210)
root class (#1) generic group (#244)
generic group (#244) Generic Pile (#242)
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#1:@dump-kids this none none" name: "MOO verb: #1:@dump-kids this none none" type: moo-code content*: "" _data-tag: 22960431310
#$#* 22960431310 content: if (valid(parent(this)))
#$#* 22960431310 content:   parentinfo = parent(this):name_and_number();
#$#* 22960431310 content:   thisinfo = this:name_and_number();
#$#* 22960431310 content:   player:tell(parentinfo, " ", thisinfo);
#$#* 22960431310 content: endif
#$#* 22960431310 content: for child in (children(this))
#$#* 22960431310 content:   child:("@dump-kids")();
#$#* 22960431310 content:   $command_utils:suspend_if_needed(0);
#$#* 22960431310 content: endfor
#$#: 22960431310
-----
PROGRAMMING
===========

MOO contains a rich programming language for the creation of interesting rooms, exits, and other objects.  Help is available on the following topics concerning programming in MOO:

language[1]
      a brief reference for the syntax and semantics of the MOO language
tasks[2]
      a brief description of MOO tasks and their resource limits

@property[3]
      adding a property to an object
@rmproperty[4]
      removing a property from an object

@verb[5]
      adding a verb to an object
@rmverb[6]
      removing a verb from an object
@args[7]
      changing the syntax of a verb
@copy[8]
      copying a verb from one object to another

@program[9]
      entering the program for a verb
@list[10]
      printing a listing of the program for a verb
@edit[11]
      editing verb code
eval[12]
      executing MOO statements and expressions without writing a verb

@show[13]
      looking at all the details of an object, a property, or a verb
@display[14]
      a different way to look at those details

@parents[15]
      listing the ancestors of an object
@kids[16]
      listing the children of an object
@chparent[17]
      changing the parent of an object

@contents[18]
      listing the contents of an object
@chmod[19]
      changing the permissions on an object, a property, or a verb
@rename[20]
      changing the name of a verb or object
@currentobject[21]
      specify an object to work with

-----
LANGUAGE
========

The MOO programming language is described in excruciating detail in the LambdaMOO Programmer's Manual, available for FTP from parcftp.xerox.com in the file pub/MOO/ProgrammersManual.txt.  The online help consists of a few quick reference guides here in the help system under the following topics:

statements[1]
      the syntax and semantics of the various kinds of MOO statements
expressions[2]
      the same for the various kinds of MOO expressions
functions[3]
      a list of the primitive functions available to MOO programs

-----
STATEMENTS
==========

The following kinds of statements exist in the MOO programming language:

Null
====

        ;

The null statement does nothing.

Expressions
===========

        expression ;

The expression statement evaluates the expression and then discards the value.

Conditional
===========

        IF ( expression ) statements ENDIF
        IF ( expression ) statements ELSE statements ENDIF
        IF ( expression )
          statements
        ELSEIF ( expression )
          statements
        ...
        ELSE
          statements
        ENDIF

The conditional statement evaluates each expression in turn and executes the statements associated with the first one to return a true value; the ELSE statements are executed if none of the expressions returns a true value.  There can be any number of ELSEIF clauses and the ELSE part is optional.  See `help truth'[1] for the definition of 'true value'.

List iteration
==============

        FOR name IN ( expression ) statements ENDFOR

The list iteration statement first evaluates the expression, which must return a list.  It then executes the statements once for each element of that list, each time with the named variable having the value of the corresponding list element.

Numeric iteration
=================

        FOR name IN [ expression .. expression ] statements ENDFOR

The numeric iteration statement first evaluates the two expressions, both of which must return numbers; call those numbers N1 and N2, respectively.  The statements are then executed once for each integer I such that N1 <= I <= N2, in increasing order; each time, the named variable has the corresponding value of I.

Indefinite iteration
====================

        WHILE ( expression ) statements ENDWHILE

The indefinite iteration statement repeatedly evaluates the expression and, each time it returns a true value, executes the statements.  The loop stops the first time that the expression returns a false value.  The definitions of 'true' and 'false' values is in `help truth'[2].

Return
======

        RETURN ;
        RETURN expression ;

The return statement evalautes the expression, if any, and returns the resulting value (or 0 if there is no expression) to the verb that called the current one.  Execution of the current verb is immediately terminated.

Fork
====

        FORK ( expression ) statements ENDFORK
        FORK name ( expression ) statements ENDFORK

The fork statement first executes the expression, which must return a number; call that number N.  It then creates a new MOO task that will, after at least N seconds, execute the statements.  When the new task begins, all variables will have the values they had at the time the FORK statement was executed.  The task executing the FORK statement immediately continues execution.  If a variable name is given after the FORK keyword, then it is assigned the 'queue ID' of the newly-created task.  The value of this variable is visible both to the task executing the fork statement and to the statements in the newly-created task.  See `help tasks'[3] for more information about forked tasks.

-----
`HELP ARGS' AMBIGUOUS
=====================

Sorry, the topic `args' is ambiguous.  I don't know which of the following topics you mean:

`help @args'[1]         `help @args#'[2]        

=> {}
0 errors.
Verb programmed.
$playergeneric containing object (#145) generic player (#6)
$player  generic player (#6) generic builder (#4)
$player    generic builder (#4) generic programmer (#52)
$player      generic programmer (#52) unknown hacker (#35)
$player      generic programmer (#52) generic wizard (#51)
$player        generic wizard (#51) Core-Wizard (#184)
$player        generic wizard (#51) Wizard (#2)
$player        generic wizard (#51) Crag (#243)
$player        generic wizard (#51) stormagnet (#246)
$player      generic programmer (#52) housekeeper (#63)
$player      generic programmer (#52) generic testing player (#99)
$player  generic player (#6) nobody (#36)
$player  generic player (#6) J. Text (#176)
$player  generic player (#6) topic-owner (#181)
$player  generic player (#6) Quota (#185)
$player  generic player (#6) generic guest (#31)
-----
TYPEOF()
========

Syntax:  typeof (<value>)   => int

Takes any MOO value and returns an integer representing the type of <value>.  The result is the same as the initial value of one of these built-in variables: `INT', `FLOAT', `STR', `LIST', `OBJ', or `ERR'.  Thus, one usually writes code like this:

    if (typeof(x) == LIST) ...

and not like this:

    if (typeof(x) == 3) ...

because the former is much more readable than the latter.

0 errors.
Verb programmed.
#1:@dump-kids (this == #6), line 2:  Variable not found
... called from #3:here_huh (this == #70), line 22
... called from #50:do_huh, line 13
... called from #1:huh (this == #70), line 10
(End of traceback)
0 errors.
Verb programmed.
generic containing object (#145) generic player (#6)
generic player (#6) generic builder (#4)
generic builder (#4) generic programmer (#52)
generic programmer (#52) unknown hacker (#35)
generic programmer (#52) generic wizard (#51)
generic wizard (#51) Core-Wizard (#184)
generic wizard (#51) Wizard (#2)
generic wizard (#51) Crag (#243)
generic wizard (#51) stormagnet (#246)
generic programmer (#52) housekeeper (#63)
generic programmer (#52) generic testing player (#99)
generic player (#6) nobody (#36)
generic player (#6) J. Text (#176)
generic player (#6) topic-owner (#181)
generic player (#6) Quota (#185)
generic player (#6) generic guest (#31)
0 errors.
Verb programmed.
$playergeneric containing object (#145) generic player (#6)
$player  generic player (#6) generic builder (#4)
$player    generic builder (#4) generic programmer (#52)
$player      generic programmer (#52) unknown hacker (#35)
$player      generic programmer (#52) generic wizard (#51)
$player        generic wizard (#51) Core-Wizard (#184)
$player        generic wizard (#51) Wizard (#2)
$player        generic wizard (#51) Crag (#243)
$player        generic wizard (#51) stormagnet (#246)
$player      generic programmer (#52) housekeeper (#63)
$player      generic programmer (#52) generic testing player (#99)
$player  generic player (#6) nobody (#36)
$player  generic player (#6) J. Text (#176)
$player  generic player (#6) topic-owner (#181)
$player  generic player (#6) Quota (#185)
$player  generic player (#6) generic guest (#31)
-----
STRING_HASH()
=============

Syntax:  string_hash (str <text>)       => str
         binary_hash (str <bin-string>) => str

Returns a 32-character hexadecimal string encoding the result of applying the MD5 cryptographically secure hash function to the contents of the string <text> or the binary string <bin-string>.  MD5, like other such functions, has the property that, if
    string_hash(<x>) == string_hash(<y>)
then, almost certainly,
    equal(<x>, <y>)
This can be useful, for example, in certain networking applications: after sending a large piece of text across a connection, also send the result of applying `string_hash()' to the text; if the destination site also applies `string_hash()' to the text and gets the same result, you can be quite confident that the large text has arrived unchanged.

-----
FUNCTIONS
=========

There are many, many built-in functions available to MOO programmers.  The following list gives a brief summary of the arguments and purpose of each function; for more information, see the LambdaMOO Programmer's Manual.  

pass(arg, ...)              -- call same verb defined on this object's parent
raise(code[, msg[, value]]) -- raise code as an error

typeof(value)      -- determine the data type of value
 tostr(value, ...) -- concatenate values into a string
 tonum(value)      -- convert non-list value into a integer
 toint(value)      == tonum(value)
 tofloat(value)    -- convert non-list value into a float
 toobj(value)      -- convert non-list value into an object
floatstr(float, precision, scientific?)
                   -- convert float value to string
encode_binary(value, ...)      -- values to binary string
decode_binary(bstring[, full]) -- binary string to list of values

binary_hash(bstring) -- MD5 hash value of binary string
string_hash(string)  -- MD5 hash value of string
value_hash(value)    == string_hash(toliteral(value))

value_bytes(value)   --- number of bytes required to store value
object_bytes(object) --- number of bytes required to store object

eval(string)       -- parse and execute string as MOO code
toliteral(value)   -- convert value to a string that evaluates to it
call_function(func[, arg, ...]) == func([arg, ...])

function_info([func]) -- builtin function desc (or list of all of them)

length(list/string) -- returns the length of a string or list
listappend(list, value [, index]) -- adding an element at the end of a list
listinsert(list, value [, index]) -- adding an element at the head of a list
   listset(list, value, index)    -- updating a list at some index
listdelete(list, index)           -- removing an element from a list
    setadd(list, element) -- adding an element to a set represented as a list
 setremove(list, element) -- removing an element from such a set
is_member(element, list) -- case-sensitive version of (element IN list)
equal(v1,v2)             -- case-sensitive version of (v1 == v2)

min(n1, n2, ...) -- minimum of n1,n2,...
max(n1, n2, ...) -- maximum of n1,n2,...
random(n)        -- random integer between 1 and n inclusive
 time()          -- current time in seconds since midnight GMT, 1 Jan 70
ctime([time])    -- time (or current time) converted to a human-readable string

  abs(n) -- absolute value of n
floor(x) -- truncate x towards minus infinity
trunc(x) -- truncate x towards zero
 ceil(x) -- truncate x towards plus infinity
 sqrt(n) -- square root of n
  exp(x) -- e to the x
  log(x) -- natural log
log10(x) -- base 10 log
 sin(a),  cos(a),  tan(a)     -- circular trignometric functions
asin(y), acos(x), atan(x[,y]) -- inverse circular trignometric functions
 sinh(a), cosh(a), tanh(a)    -- hyperbolic trigonometric functions

 index(str1, str2 [, case-matters]) -- index of first str2 in str1
rindex(str1, str2 [, case-matters]) -- index of last  str2 in str1
strcmp(str1, str2) -- case-sensitive string comparison
strsub(subject, what, with [, case-matters]) -- substitution in a string
crypt(string [, salt]) -- one-way string encryption
 match(str1, str2 [, case-matters]) -- match first pattern str2 in str1
rmatch(str1, str2 [, case-matters]) -- match last  pattern str2 in str1
substitute(template, subs) -- perform substitutions on template

   valid(object)             -- testing whether an object exists
  create(parent [, owner(*)])-- creating a new MOO object
 recycle(object)             -- destroying a MOO object
    move(object, where)      -- altering the object-containment hierarchy
chparent(object, new-parent) -- altering the object-inheritance hierarchy
  parent(object)             -- object's parent   in the inheritance hierarchy
children(object)             -- object's children in the inheritance hierarchy
max_object()       -- the highest-numbered object in the MOO
renumber(obj)      -- changes an object's number to lowest available one (*)
reset_max_object() -- resets max_object() to the largest valid object (*)

     properties(object) -- a list of the properties defined on an object
   add_property(object, prop-name, value, info) -- add a new property
delete_property(object, prop-name)              -- remove a property
    property_info(object, prop-name)       -- {owner, perms} info on a property
set_property_info(object, prop-name, info) -- setting same
is_clear_property(object, prop-name) -- find out if a property is "clear"
   clear_property(object, prop-name) -- make a property "clear"

      verbs(object) -- a list of the verbs defined on an object
   add_verb(object, info, args)  -- add a verb to an object
delete_verb(object, verb-name)   -- remove a verb from an object
    verb_info(object, verb-name) -- {owner, perms, names} info for a verb defn.
    verb_args(object, verb-name) -- {dobj, prep, iobj} argument info for a verb
    verb_code(object, verb-name [, fully-paren [, indent]]) -- program listing
set_verb_info(object, verb-name, {owner, perms, names})
set_verb_args(object, verb-name, {dobj, prep, iobj})   
set_verb_code(object, verb-name, {line, line, ...})
  disassemble(object, verb-name) -- moo bytecode for verb

notify(conn, string[, noflush])      -- output string to connection
read([conn])                         -- read input line from connection (*)
flush_input(conn[, showmsg?])        -- flush pending input on connection (*)
force_input(conn, line[, at-front?]) -- insert line as pending input (*)

        is_player(object) -- testing whether or not object is a player
          players()       -- a list of all players, active or not
connected_players()       -- a list of all currently-connected players
     idle_seconds(player) -- seconds since given player typed anything
connected_seconds(player) -- seconds given player has been logged in
    boot_player(player)        -- disconnect player from the MOO immediately(*)
set_player_flag(player, value) -- set/clear player bit; boot player if clear(*)
connection_name(player)   -- a server-assigned name for player's connection
open_network_connection(@args) -- open a connection to another network site
connection_option(conn,option)           -- setting of option for connection
connection_options(conn)                 -- list of {option, value}
set_connection_option(conn,option,value) -- change setting of option
output_delimiters(player)      -- {prefix,suffix} set by PREFIX/SUFFIX cmds
buffered_output_length([conn]) -- number of bytes currently buffered on output

caller_perms()         -- the player whose permissions your caller was using
set_task_perms(player) -- changing permissions of the running task (*)
callers([lineno?])  -- stack: list of {obj, verb, owner, vloc, player[,line]}
task_stack(taskid[,lineno?]) -- callers() stack for suspended task

seconds_left() -- number of seconds left in the current task
ticks_left()   -- number of ticks   left in the current task
task_id()              -- id number for the currently-running task
suspend(secs)          -- suspend current task for a number of seconds
resume(taskid[,value]) -- resume the specified task
kill_task(taskid)      -- delete one of your tasks from the queue
queued_tasks()         -- list of {taskid,start,,,owner,obj,verb,line,this}
queue_info([player])   -- number of tasks for player or list of tasking players

server_version()   -- a string of three numbers "major.minor.release"
server_log(string) -- add a comment to the server log file (*)
listen(obj, point[, msgs?]) -- start listening, return canonicalized point (*)
unlisten(canonpoint)        -- stop listening at canonpoint (*)
listeners() -- list of {object, canonpoint, msgs?} listening points (*)
shutdown(msg)    -- print msg and kill the server (*)
dump_database()  -- what it says (*)
db_disk_size()   -- size in bytes of database disk file
memory_usage()   -- {{blocksize, nused, nfree}, ...}, the server's memory stats

(*) => as you might have expected, these usually require wizard permissions.

=> 0
=> 1
$playergeneric containing object (#145) generic player (#6)
$player  generic player (#6) generic builder (#4)
$player    generic builder (#4) generic programmer (#52)
$player      generic programmer (#52) unknown hacker (#35)
$player      generic programmer (#52) generic wizard (#51)
$player        generic wizard (#51) Core-Wizard (#184)
$player        generic wizard (#51) Wizard (#2)
$player        generic wizard (#51) Crag (#243)
$player        generic wizard (#51) stormagnet (#246)
$player      generic programmer (#52) housekeeper (#63)
$player      generic programmer (#52) generic testing player (#99)
$player  generic player (#6) nobody (#36)
$player  generic player (#6) J. Text (#176)
$player  generic player (#6) topic-owner (#181)
$player  generic player (#6) Quota (#185)
$player  generic player (#6) generic guest (#31)
0 errors.
Verb programmed.
generic containing object (#145) generic player (#6)
  generic player (#6) generic builder (#4)
    generic builder (#4) generic programmer (#52)
      generic programmer (#52) unknown hacker (#35)
      generic programmer (#52) generic wizard (#51)
        generic wizard (#51) Core-Wizard (#184)
        generic wizard (#51) Wizard (#2)
        generic wizard (#51) Crag (#243)
        generic wizard (#51) stormagnet (#246)
      generic programmer (#52) housekeeper (#63)
      generic programmer (#52) generic testing player (#99)
  generic player (#6) nobody (#36)
  generic player (#6) J. Text (#176)
  generic player (#6) topic-owner (#181)
  generic player (#6) Quota (#185)
  generic player (#6) generic guest (#31)
  root class (#1) Login Commands (#10)
You must give the name of some object.
  root class (#1) Guest Log (#12)
  root class (#1) Limbo (#15)
  root class (#1) Generic Help Database (#30)
    Generic Help Database (#30) Generic Core Help Database (#197)
      Generic Core Help Database (#197) Verb Help (#20)
        Verb Help (#20) feature object help database (#100)
      Generic Core Help Database (#197) Core Utility Help (#21)
      Generic Core Help Database (#197) Programmer Help (#22)
      Generic Core Help Database (#197) Wizard Help (#23)
      Generic Core Help Database (#197) Builtin Function Help (1.8.0) (#28)
      Generic Core Help Database (#197) Editor Help (#40)
      Generic Core Help Database (#197) main help database (#54)
      Generic Core Help Database (#197) Object Help Database (#173)
      Generic Core Help Database (#197) last resort help database (#127)
      Generic Core Help Database (#197) Builder Help (#155)
      Generic Core Help Database (#197) guest help database (#168)
      Generic Core Help Database (#197) policy help database (#235)
      Generic Core Help Database (#197) administration group help (#238)
      Generic Core Help Database (#197) JHCore Help DB (#237)
      Generic Core Help Database (#197) jtext help database (#152)
      Generic Core Help Database (#197) MCP help (#186)
      Generic Core Help Database (#197) tkmoo help (#187)
      Generic Core Help Database (#197) generic personal help database (#115)
    Generic Help Database (#30) Unicode Builtins Help (#241)
  root class (#1) New Generic Database (#79)
    New Generic Database (#79) Registration Database (#16)
    New Generic Database (#79) Site DB (#25)
    New Generic Database (#79) Player Database (#37)
    New Generic Database (#79) Country Database (#94)
  root class (#1) Generic Mail Recipient (#41)
    Generic Mail Recipient (#41) Generic Large-Capacity Mail Recipient (#14)
      Generic Large-Capacity Mail Recipient (#14) Player-Creation-Log (#17)
    Generic Mail Recipient (#41) News (#141)
    Generic Mail Recipient (#41) Generic Administrators Mailing List (#107)
      Generic Administrators Mailing List (#107) New-Prog-Log (#29)
      Generic Administrators Mailing List (#107) Quota-Log (#33)
      Generic Administrators Mailing List (#107) Community-Group (#106)
      Generic Administrators Mailing List (#107) Site-Locks (#62)
      Generic Administrators Mailing List (#107) security (#105)
      Generic Administrators Mailing List (#107) Steering-Committee (#135)
      Generic Administrators Mailing List (#107) Bug-reports (#140)
    Generic Mail Recipient (#41) Boot-Log (#85)
  root class (#1) Mail Distribution Center (#42)
  root class (#1) generic thing (#5)
    generic thing (#5) generic note (#9)
    generic thing (#5) Recycling Center (#55)
    generic thing (#5) network utils (#82)
    generic thing (#5) generic sittable object (#80)
      generic sittable object (#80) generic piece of furniture (#81)
        generic piece of furniture (#81) leather couch (#245)
    generic thing (#5) Registrar (#108)
    generic thing (#5) topic sign (#178)
    generic thing (#5) old FTP (#234)
    generic thing (#5) generic module (#203)
      generic module (#203) module system module (#202)
      generic module (#203) MCP 2.1 module (#214)
      generic module (#203) simpleedit module (#220)
      generic module (#203) SMTP module (#226)
      generic module (#203) listeners module (#228)
      generic module (#203) core feature objects (#233)
    generic thing (#5) feature object registry (#151)
  root class (#1) Generic Option Package (#60)
    Generic Option Package (#60) Mail Options (#57)
    Generic Option Package (#60) Edit Options (#58)
    Generic Option Package (#60) Display Options (#59)
    Generic Option Package (#60) List Options (#61)
    Generic Option Package (#60) Miscellaneous Options (#112)
    Generic Option Package (#60) Client Options (#116)
    Generic Option Package (#60) building options (#122)
    Generic Option Package (#60) Who Options (#89)
    Generic Option Package (#60) Eval Options (#136)
    Generic Option Package (#60) Parsing Options (#191)
    Generic Option Package (#60) login watcher options (#76)
  root class (#1) Error Generator (#66)
  root class (#1) Generic Feature Object (#65)
    Generic Feature Object (#65) login watcher mark 2 (#83)
    Generic Feature Object (#65) Stage-Talk Feature (#67)
    Generic Feature Object (#65) Thinking Feature (#68)
    Generic Feature Object (#65) documentation feature (#169)
    Generic Feature Object (#65) generic secure group-command-feature (#150)
      generic secure group-command-feature (#150) Community Group Commands (#149)
  root class (#1) pronoun substitution (#69)
  root class (#1) everything (#139)
  root class (#1) all (#103)
  root class (#1) generic admin group (#163)
    generic admin group (#163) Steering Committee (#137)
    generic admin group (#163) Community Group (#165)
    generic admin group (#163) Tech Group (#164)
      Tech Group (#164) DB Group (#148)
      Tech Group (#164) Unix Group (#147)
      Tech Group (#164) Programming Group (#124)
    generic admin group (#163) Building Group (#192)
    generic admin group (#163) documentation group (#232)
  root class (#1) generic event dispatching object (#110)
    generic event dispatching object (#110) generic exit (#7)
      generic exit (#7) generic door (#121)
        generic door (#121) generic window (#179)
    generic event dispatching object (#110) generic containing object (#145)
      generic containing object (#145) generic player (#6)
        generic player (#6) generic builder (#4)
          generic builder (#4) generic programmer (#52)
            generic programmer (#52) unknown hacker (#35)
            generic programmer (#52) generic wizard (#51)
              generic wizard (#51) Core-Wizard (#184)
              generic wizard (#51) Wizard (#2)
              generic wizard (#51) Crag (#243)
              generic wizard (#51) stormagnet (#246)
            generic programmer (#52) housekeeper (#63)
            generic programmer (#52) generic testing player (#99)
        generic player (#6) nobody (#36)
        generic player (#6) J. Text (#176)
        generic player (#6) topic-owner (#181)
        generic player (#6) Quota (#185)
        generic player (#6) generic guest (#31)
      generic containing object (#145) generic container (#126)
        generic container (#126) generic openable container (#8)
      generic containing object (#145) generic room (#3)
        generic room (#3) Generic Editor (#46)
          Generic Editor (#46) Mail Room (#43)
          Generic Editor (#46) Note Editor (#44)
            Note Editor (#44) help text editor (#171)
          Generic Editor (#46) Verb Editor (#45)
        generic room (#3) first room (#70)
  root class (#1) generic utilities (#146)
    generic utilities (#146) Generic BigList Utilities (#13)
    generic utilities (#146) wizard utilities (#24)
    generic utilities (#146) math utilities (#26)
    generic utilities (#146) set utilities (#27)
    generic utilities (#146) sequence utilities (#32)
    generic utilities (#146) gender utilities (#38)
    generic utilities (#146) time utilities (#39)
    generic utilities (#146) object utilities (#47)
    generic utilities (#146) lock utilities (#48)
    generic utilities (#146) list utilities (#49)
    generic utilities (#146) command utilities (#50)
    generic utilities (#146) code utilities (#53)
    generic utilities (#146) permissions utilities (#130)
    generic utilities (#146) building utilities (#19)
    generic utilities (#146) string utilities (#18)
    generic utilities (#146) English Utilities (#72)
    generic utilities (#146) integration utils (#74)
    generic utilities (#146) Name Utilities (#177)
    generic utilities (#146) Parsing Utilities (#117)
    generic utilities (#146) walking utils (#182)
    generic utilities (#146) room matching utilities (#190)
    generic utilities (#146) Generic Quota Utils Parent (#88)
      Generic Quota Utils Parent (#88) Byte Quota Utilities (#174)
      Generic Quota Utils Parent (#88) Object Quota Utilities (#113)
  root class (#1) generic event handler (#133)
  root class (#1) generic gender object (#64)
    generic gender object (#64) you (#34)
      you (#34) you (#161)
    generic gender object (#64) they (#71)
    generic gender object (#64) it (#154)
      it (#154) he (#156)
      it (#154) she (#157)
      it (#154) e (#158)
      it (#154) s/he (#162)
      it (#154) *e (#166)
      it (#154) none (#167)
    generic gender object (#64) I (#160)
    generic gender object (#64) we (#159)
  root class (#1) administration (#170)
  root class (#1) server options (#188)
  root class (#1) checkpointer (#175)
  root class (#1) startup handler (#189)
  root class (#1) syslog (#183)
  root class (#1) Generic BigList Resident (#75)
  root class (#1) http (#87)
  root class (#1) generic property farm (#206)
    generic property farm (#206) builtin function definitions (#153)
      builtin function definitions (#153) System Object (#0)
    generic property farm (#206) Jtext Dispatcher (#92)
    generic property farm (#206) Jaddress Dispatcher (#111)
    generic property farm (#206) module registry (#205)
    generic property farm (#206) Local Namespace (#193)
  root class (#1) SMTP (#212)
  root class (#1) Cord Dispatcher (#223)
  root class (#1) MCP 2.1 (#213)
  root class (#1) FTP (#230)
  root class (#1) link dispatcher tag (#123)
  root class (#1) Generic Pronoun_sub Translator (#73)
    Generic Pronoun_sub Translator (#73) LambdaCore Pronoun_sub Translator (#77)
    Generic Pronoun_sub Translator (#73) Two-Letter Pronoun_Sub Translator (#78)
  root class (#1) here (#180)
  root class (#1) Tag Root (#91)
    Tag Root (#91) Title Tag (#96)
    Tag Root (#91) Vgroup Tag (#97)
    Tag Root (#91) Header Tag (#102)
    Tag Root (#91) Paragraph Tag (#101)
    Tag Root (#91) Index Tag (#120)
    Tag Root (#91) Plaintext Tag (#128)
    Tag Root (#91) Horizontal Rule Tag (#134)
    Tag Root (#91) Hgroup Tag (#93)
    Tag Root (#91) Definition List Tag (#98)
    Tag Root (#91) Link Tag (#104)
      Link Tag (#104) generic preceding link tag (#142)
      Link Tag (#104) Browser Link Tag (#95)
    Tag Root (#91) String Tag (#84)
    Tag Root (#91) List Of Strings Tag (#86)
    Tag Root (#91) List Tag (#129)
    Tag Root (#91) Itemize Tag (#138)
      Itemize Tag (#138) Unnumbered Itemization Tag (#114)
        Unnumbered Itemization Tag (#114) Numbered Itemization Tag (#125)
    Tag Root (#91) ISINDEX Tag (#119)
  root class (#1) Address Root (#109)
    Address Root (#109) Resolved Help Address (#172)
    Address Root (#109) Help Address (#131)
    Address Root (#109) Browser Object Address (#90)
    Address Root (#109) Note Address (#118)
    Address Root (#109) Browser Verb Address (#143)
    Address Root (#109) Browser Inherited Properties Address (#144)
  root class (#1) name-subbing dummy object (#132)
  root class (#1) generic cord stub (#222)
  root class (#1) generic MCP 2.1 session (#204)
    generic MCP 2.1 session (#204) session for #243 (#247)
  root class (#1) MCP package registry (#209)
  root class (#1) MCP 2.1 parser (#221)
  root class (#1) generic name builder (#240)
    generic name builder (#240) namebuilder_i for #1 (#227)
    generic name builder (#240) namebuilder_d for #1 (#239)
    generic name builder (#240) dummy name builder (#236)
  root class (#1) generic source or sink (#196)
    generic source or sink (#196) generic source (#200)
      generic source (#200) http source (#194)
      generic source (#200) read() player source (#198)
      generic source (#200) ftp source (#229)
    generic source or sink (#196) generic sink (#207)
      generic sink (#207) FTP URL sink (#231)
      generic sink (#207) generic gather-then-spam sink (#199)
        generic gather-then-spam sink (#199) spam-player sink (#208)
        generic gather-then-spam sink (#199) generate note sink (#195)
  root class (#1) generic message dispatch object (#219)
    generic message dispatch object (#219) generic cord type (#218)
    generic message dispatch object (#219) generic MCP package (#216)
      generic MCP package (#216) mcp-negotiate (#215)
      generic MCP package (#216) mcp-cord (#217)
      generic MCP package (#216) dns-org-mud-moo-simpleedit (#201)
  root class (#1) generic listener (#224)
    generic listener (#224) generic daemon listener (#211)
      generic daemon listener (#211) generic daemon listener with flood control (#225)
  root class (#1) generic daemon service handler (#210)
  root class (#1) generic group (#244)
    generic group (#244) Generic Pile (#242)
=> #11 (Player Last_huh Verbs)
=> "Player Last_huh Verbs (#11)"
=> #1 (root class)
0 errors.
Verb programmed.
=> "Player Last_huh Verbs (#11)"
The System Object(#0) has no kids.
System Object (#0)   builtin function definitions (#153)   generic property farm (#206)   root class (#1)
Your current object is now a builtin function definitions (#153).
builtin function definitions (#153) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic property farm (#206).
.builtins                Core-Wizard (#184)    r      #153
-------------------------------- finished ---------------------------------
builtin function definitions (#153) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic property farm (#206).
  #153:bf_add_verb              Core-Wizard (#184)   rxd    this none this
  #153:bf_set_verb_info         Core-Wizard (#184)   rxd    this none this
  #153:bf_set_verb_code         Core-Wizard (#184)   rxd    this none this
  #153:bf_verb_code             Core-Wizard (#184)   rxd    this none this
  #153:verb_metadata            Core-Wizard (#184)   rxd    this none this
  #153:set_verb_metadata        Core-Wizard (#184)   rxd    this none this
  #153:metadata_to_code         unknown hacker (#35) rxd    this none this
  #153:metadata_from_code       unknown hacker (#35) rxd    this none this
  #153:metadata_begin_index     unknown hacker (#35) rxd    this none this
  #153:metadata_item            unknown hacker (#35) rxd    this none this
  #153:set_metadata_item        unknown hacker (#35) rxd    this none this
  #153:"bf_recycle bf_chparent" Core-Wizard (#184)   rxd    this none this
  #153:_protect_recycle         Core-Wizard (#184)   rxd    this none this
  #153:_protect_chparent        Core-Wizard (#184)   rxd    this none this
  #153:set_verb_metadata_item   Core-Wizard (#184)   rxd    this none this
  #153:verb_metadata_item       Core-Wizard (#184)   rxd    this none this
  #153:delete_metadata_item     Core-Wizard (#184)   rxd    this none this
  #153:delete_verb_metadata_item Core-Wizard (#184)  rxd    this none this
-------------------------------- finished ---------------------------------
builtin function definitions (#153) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic property farm (#206).
  #153:bf_add_verb              Core-Wizard (#184)   rxd    this none this
  #153:bf_set_verb_info         Core-Wizard (#184)   rxd    this none this
  #153:bf_set_verb_code         Core-Wizard (#184)   rxd    this none this
  #153:bf_verb_code             Core-Wizard (#184)   rxd    this none this
  #153:verb_metadata            Core-Wizard (#184)   rxd    this none this
  #153:set_verb_metadata        Core-Wizard (#184)   rxd    this none this
  #153:metadata_to_code         unknown hacker (#35) rxd    this none this
  #153:metadata_from_code       unknown hacker (#35) rxd    this none this
  #153:metadata_begin_index     unknown hacker (#35) rxd    this none this
  #153:metadata_item            unknown hacker (#35) rxd    this none this
  #153:set_metadata_item        unknown hacker (#35) rxd    this none this
  #153:"bf_recycle bf_chparent" Core-Wizard (#184)   rxd    this none this
  #153:_protect_recycle         Core-Wizard (#184)   rxd    this none this
  #153:_protect_chparent        Core-Wizard (#184)   rxd    this none this
  #153:set_verb_metadata_item   Core-Wizard (#184)   rxd    this none this
  #153:verb_metadata_item       Core-Wizard (#184)   rxd    this none this
  #153:delete_metadata_item     Core-Wizard (#184)   rxd    this none this
  #153:delete_verb_metadata_item Core-Wizard (#184)  rxd    this none this
-------------------------------- finished ---------------------------------
-----
_
=

Your `current object' is an object that you can refer to in most commands without using its name, just by using the symbol "_".  It's intended primarily for programming.

For example, you can type

   @co $jtext.link
   @d _:

and get a list of verbs defined on the link dispatcher tag.

In addition, if your .eval_env property (see `help eval'[1]) sets _ to player.current_object, you can use it in evaluations.  The default .eval_env includes this binding.  So, to continue the example:

   >;_:dname()
   => "the link dispatcher tag"

A stack is kept of the current objects you've been using, so you can change your current object for a while and then switch back to the previous one without needing to identify it again.

To find out how to set or view your current object, read the following help topics:

@currentobject[2]
      Set current object, or find out what it is.
@pushobject[3]
      Push a current object onto the stack.
@popobject[4]
      Return to the previous current object.
@swapobject[5]
      Switch between current and previous object.

-----
HELP ON THE BUILTIN FUNCTION DEFINITIONS
========================================

No help found.

That is not a valid command.
There are currently no links for you to pick.
-----
_
=

Your `current object' is an object that you can refer to in most commands without using its name, just by using the symbol "_".  It's intended primarily for programming.

For example, you can type

   @co $jtext.link
   @d _:

and get a list of verbs defined on the link dispatcher tag.

In addition, if your .eval_env property (see `help eval'[1]) sets _ to player.current_object, you can use it in evaluations.  The default .eval_env includes this binding.  So, to continue the example:

   >;_:dname()
   => "the link dispatcher tag"

A stack is kept of the current objects you've been using, so you can change your current object for a while and then switch back to the previous one without needing to identify it again.

To find out how to set or view your current object, read the following help topics:

@currentobject[2]
      Set current object, or find out what it is.
@pushobject[3]
      Push a current object onto the stack.
@popobject[4]
      Return to the previous current object.
@swapobject[5]
      Switch between current and previous object.

-----
@POPOBJECT
==========

Usage:  @popobject

The @popobject (@popo) command returns you to a previous current object (see `help current-object'[1]) by popping the present one off the stack.

See also `help @pushobject'[2] and `help @swapobject'[3] for information on manipulating the current object stack.

Your current object stack is empty.
Your current object is now $local.group, a generic group (#244).
Your current object is now $local.pile (#242).
Your current object is now #82.
-----
_
=

Your `current object' is an object that you can refer to in most commands without using its name, just by using the symbol "_".  It's intended primarily for programming.

For example, you can type

   @co $jtext.link
   @d _:

and get a list of verbs defined on the link dispatcher tag.

In addition, if your .eval_env property (see `help eval'[1]) sets _ to player.current_object, you can use it in evaluations.  The default .eval_env includes this binding.  So, to continue the example:

   >;_:dname()
   => "the link dispatcher tag"

A stack is kept of the current objects you've been using, so you can change your current object for a while and then switch back to the previous one without needing to identify it again.

To find out how to set or view your current object, read the following help topics:

@currentobject[2]
      Set current object, or find out what it is.
@pushobject[3]
      Push a current object onto the stack.
@popobject[4]
      Return to the previous current object.
@swapobject[5]
      Switch between current and previous object.

-----
HELP ON THE NETWORK UTILS
=========================

sendmail
========

sendmail(to, subject, @lines)

g*et t*ake
==========

Usage: get/take <thing>
  This allows you to pick up things.

d*rop
=====

Usage: drop <thing>
 This drops things in the room the dropper is in.

gi*ve ha*nd
===========

Usage: give <thing> to <person>
This lets you experience the joy of giving things to others.

No help found on @dump-kids.

----

0 errors.
Verb programmed.
-----
HELP ON THE NETWORK UTILS
=========================

sendmail
========

sendmail(to, subject, @lines)

g*et t*ake
==========

Usage: get/take <thing>
  This allows you to pick up things.

d*rop
=====

Usage: drop <thing>
 This drops things in the room the dropper is in.

gi*ve ha*nd
===========

Usage: give <thing> to <person>
This lets you experience the joy of giving things to others.

@dump-kids
==========

Usage: @dump-kids <parent>
Lists the object hierarchy from parent down

----

root class (#1) generic thing (#5)
  generic thing (#5) generic note (#9)
  generic thing (#5) Recycling Center (#55)
  generic thing (#5) network utils (#82)
  generic thing (#5) generic sittable object (#80)
    generic sittable object (#80) generic piece of furniture (#81)
      generic piece of furniture (#81) leather couch (#245)
  generic thing (#5) Registrar (#108)
  generic thing (#5) topic sign (#178)
  generic thing (#5) old FTP (#234)
  generic thing (#5) generic module (#203)
    generic module (#203) module system module (#202)
    generic module (#203) MCP 2.1 module (#214)
    generic module (#203) simpleedit module (#220)
    generic module (#203) SMTP module (#226)
    generic module (#203) listeners module (#228)
    generic module (#203) core feature objects (#233)
  generic thing (#5) feature object registry (#151)
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:@dump-kids               Crag (#243)          rxd    this none none
-------------------------------- finished ---------------------------------
-----
GENERAL INFORMATION ON $OBJECT_UTILS[1]
=======================================

These routines are useful for finding out information about individual objects.

Examining everything an object has defined on it:
  all_verbs          (object) => like it says
  all_properties     (object) => likewise
  findable_properties(object) => tests to see if caller can "find" them
  owned_properties   (object[, owner]) => tests for ownership

Investigating inheritance:
  ancestors(object[,object...]) => all ancestors
  descendants      (object)     => all descendants
  ordered_descendants(object)   => descendants, in a different order
  leaves           (object)     => descendants with no children
  branches         (object)     => descendants with children 
  isa        (object,class) => true iff object is a descendant of class (or ==)

Considering containment:
  contains      (obj1, obj2) => Does obj1 contain obj2 (nested)?
  all_contents      (object) => return all the (nested) contents of object

Verifying verbs and properties:
  has_property(object,pname) => false/true   according as object.(pname) exists
  has_verb    (object,vname) => false/{#obj} according as object:(vname) exists
  has_callable_verb          => same, but verb must be callable from a program
  match_verb  (object,vname) => false/{location, newvname}
                               (identify location and usable name of verb)
Suspending:
  Many of the above verbs have ..._suspended versions to assist with very large object hierarchies.  The following exist:
   descendants_suspended              
   branches_suspended                 
   leaves_suspended                   
   all_properties_suspended           
   descendants_with_property_suspended

generic thing (#5)
generic utilities (#146)
News (#141)
Boot-Log (#85)
Player-Creation-Log (#17)
New-Prog-Log (#29)
Quota-Log (#33)
Community-Group (#106)
Site-Locks (#62)
security (#105)
Steering-Committee (#135)
Bug-reports (#140)
generic note (#9)
generic sittable object (#80)
generic piece of furniture (#81)
leather couch (#245)
generic containing object (#145)
generic player (#6)
generic container (#126)
generic builder (#4)
nobody (#36)
J. Text (#176)
topic-owner (#181)
Quota (#185)
generic guest (#31)
generic programmer (#52)
unknown hacker (#35)
generic wizard (#51)
housekeeper (#63)
generic testing player (#99)
Core-Wizard (#184)
Wizard (#2)
Crag (#243)
stormagnet (#246)
generic openable container (#8)
help text editor (#171)
System Object (#0)
Definition List Tag (#98)
Generic Pile (#242)
=> 0
generic thing (#5) generic room (#3)
generic utilities (#146) generic containing object (#145)
News (#141) Mail Distribution Center (#42)
Boot-Log (#85) Mail Distribution Center (#42)
Player-Creation-Log (#17) Mail Distribution Center (#42)
New-Prog-Log (#29) Mail Distribution Center (#42)
Quota-Log (#33) Mail Distribution Center (#42)
Community-Group (#106) Mail Distribution Center (#42)
Site-Locks (#62) Mail Distribution Center (#42)
security (#105) Mail Distribution Center (#42)
Steering-Committee (#135) Mail Distribution Center (#42)
Bug-reports (#140) Mail Distribution Center (#42)
generic note (#9) generic room (#3)
generic sittable object (#80) generic room (#3)
generic piece of furniture (#81) generic room (#3)
leather couch (#245) first room (#70)
generic containing object (#145) generic container (#126)
generic player (#6) generic room (#3)
generic container (#126) generic openable container (#8)
generic builder (#4) generic room (#3)
nobody (#36) Limbo (#15)
J. Text (#176) Limbo (#15)
topic-owner (#181) Limbo (#15)
Quota (#185) Limbo (#15)
generic guest (#31) generic room (#3)
generic programmer (#52) generic room (#3)
unknown hacker (#35) Limbo (#15)
generic wizard (#51) generic room (#3)
housekeeper (#63) Limbo (#15)
generic testing player (#99) generic room (#3)
Core-Wizard (#184) Limbo (#15)
Wizard (#2) Limbo (#15)
Crag (#243) first room (#70)
stormagnet (#246) Limbo (#15)
generic openable container (#8) generic player (#6)
help text editor (#171) unknown hacker (#35)
System Object (#0) generic room (#3)
Definition List Tag (#98) J. Text (#176)
Generic Pile (#242) Crag (#243)
=> 0
Please note that your destination would not have accepted you if you were a non-wizard.
The Generic Room
A generic piece of furniture is here.  A generic guest, generic player, generic builder, generic programmer, and generic wizard are sitting on it.
You see a generic guest, generic programmer, generic wizard, generic player, generic builder, generic testing player, a generic sittable object, a generic note, a generic thing, and the System Object here.
Moved.
The Generic Room
A generic piece of furniture is here.  A generic guest, generic player, generic builder, generic programmer, and generic wizard are sitting on it.
You see a generic guest, generic programmer, generic wizard, generic player, generic builder, generic testing player, a generic sittable object, a generic note, a generic thing, and the System Object here.
There are no open seats.
This is a Comfy Couch. It is likely to contain change, remotes and small animals.
This is a Comfy Couch. It is likely to contain change, remotes and small animals.
Objects owned by Crag (from #0 to #247):
  4K #243 Crag                      *[generic room]
  1K #245 leather couch             *[first room]
 <1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
-- 4 objects.  Total bytes: 6,674.--------------------------------------------
A generic piece of furniture. See `help $furniture' for more information.
=> "This is a Comfy Couch. It is likely to contain change, remotes and small animals."
=> "The Known Universe aka The, Known, Universe, and #0."
The Known Universe aka The, Known, Universe, and #0.
The Generic Room
A generic piece of furniture is here.  A generic guest, generic player, generic builder, generic programmer, and generic wizard are sitting on it.
You see a generic guest, generic programmer, generic wizard, generic player, generic builder, generic testing player, a generic sittable object, a generic note, a generic thing, and the System Object here.
The generic room(#3) has 2 kids.
Generic Editor (#46)   first room (#70)
The First Room
This is all there is right now.  A leather couch is here.
Moved.
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
-------------------------------- finished ---------------------------------
Local Namespace (#193) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic property farm (#206).
.legal_name_regexp       unknown hack (#35)    r      "^[a-z_][a-z0-9_]*$"
.free_addition           unknown hack (#35)    r      0
.group                   Crag (#243)           r      #244
.pile                    Crag (#243)           r      #242
-------------------------------- finished ---------------------------------
The generic property farm(#206) has 5 kids.
builtin function definitions (#153)   Jtext Dispatcher (#92)   Jaddress Dispatcher (#111)   module registry (#205)   Local Namespace (#193)
0 errors.
Verb programmed.
That is not a valid command.
generic room (#3)
  Generic Editor (#46)
    Mail Room (#43)
    Note Editor (#44)
      help text editor (#171)
    Verb Editor (#45)
  first room (#70)
The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   generic thing (#5)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)
System Object (#0)   builtin function definitions (#153)   generic property farm (#206)   root class (#1)
generic property farm (#206)
  builtin function definitions (#153)
    System Object (#0)
  Jtext Dispatcher (#92)
  Jaddress Dispatcher (#111)
  module registry (#205)
  Local Namespace (#193)
-----
HELP ON JTEXT DISPATCHER
========================

The jtext dispatcher is the registry for jtags as well as the entity responsible for dispatching jtags (see `help dispatchers[1]).

$jtext.dlist[2]         $jtext.header[3]        $jtext.hgroup[4]
$jtext.hr[5]            $jtext.index[6]         $jtext.isindex[7]
$jtext.itemize[8]       $jtext.itemize_numbered[9]
$jtext.itemize_unnumbered[10]                   $jtext.link[11]
$jtext.list[12]         $jtext.list_of_strings[13]
$jtext.paragraph[14]    $jtext.plaintext[15]    $jtext.root[16]
$jtext.string[17]       $jtext.title[18]        $jtext.vgroup[19]

-----
HELP
====

Syntax:  help
         help <topic>
         help index

Print out entries from the online documentation system.  The commands `?' and `information' (usually abbreviated `info') are synonyms for `help'.

The first form prints out a summary table of contents for the entire help system.  

The second form prints out the documentation available on the given topic.  Many help system entries contain references to other entries accessible in this way.  The topic name may be abbreviated; if there is no topic exactly matching the name you give, the help system checks for topics for which the name is a prefix, perhaps with the addition or omission of an initial `@', or perhaps with some confusion beween dashes (-) and underscores (_), e.g., 

      `bui' instead of `building', 
      `who' instead of `@who', 
     `@wri' instead of `write',
  `add_ent' instead of `@add-entrance',
 `unlock-'  instead of `@unlock_for_open'

If the abbreviation you give is ambiguous, you will be presented with a list of the matching complete topic names.

The `help index'[1] commands prints out a list of indices for the various help databases.  Each index gives a list of topics available on that database.  It is sometimes easier to find the topics you're interested in this way, rather than tracing through the chain of cross references.

For programmers, the help system provides the following additional forms:

  help object:verbname   -- prints any documentation strings that are present
                            at the beginning of the program for that verb.
  help $<whatever>_utils -- prints general information about one of the 
                            $..._utils objects (e.g., $string_utils, 
                            $list_utils, etc...), which are all libraries 
                            of generally used verbs.
  help builtin()         -- prints documentation from the programmers manual
                            about the named primitive, for example length()

For information about how the help system itself works and about how to associate local help databases with specific rooms or player classes, see `help $help'[2].

generic property farm (#206)
  builtin function definitions (#153)
    System Object (#0)
  Jtext Dispatcher (#92)
  Jaddress Dispatcher (#111)
  module registry (#205)
  Local Namespace (#193)
module registry (#205) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic property farm (#206).
.module                  Core-Wizard (#184)    r      #202
.mcp                     Core-Wizard (#184)    r      #214
.simpleedit              Core-Wizard (#184)    r      #220
.smtp                    Core-Wizard (#184)    r      #226
.listeners               Core-Wizard (#184)    r c    #228
.core_features           Core-Wizard (#184)    r c    #233
-------------------------------- finished ---------------------------------
-----
HELP ON THE MODULE REGISTRY
===========================

No help found.

-----
`HELP CORE' AMBIGUOUS
=====================

Sorry, the topic `core' is ambiguous.  I don't know which of the following topics you mean:

`help core-copyright'[1]                        `help core-index'[2]
`help core-license'[3]  

-----
CORE UTILITY HELP TOPICS
========================

$biglist_utils[1]       $building_utils[2]      $code_utils[3]
$command_utils[4]       $english[5]             $english_utils[6]
$exit[7]                $gender_utils[8]        $generic_db[9]
$generic_editor[10]     $generic_help[11]       $generic_options[12]
$help[13]               $housekeeper[14]        $integration_utils[15]
$list_utils[16]         $lock_utils[17]         $login[18]
$mail_agent[19]         $mail_recipient[20]     $math_utils[21]
$name_utils[22]         $no_one[23]             $object_utils[24]
$openable_container[25]                         $parse_utils[26]
$perm_utils[27]         $player_db[28]          $quota_utils[29]
$room[30]               $room_matching_utils[31]
$seq_utils[32]          $set_utils[33]          $string_utils[34]
$time_utils[35]         $trig_utils[36]         $walking_utils[37]
$who_utils[38]          $wiz_utils[39]          core-index[40]
mail-format[41]         mail-recipient[42]      mail-resolve[43]
mail-system[44]         MR-access[45]           MR-naming[46]
MR-reading[47]          MR-searching[48]        MR-sequences[49]
MR-subscribing[50]      MR-writing[51]          object-matching[52]
receiving-mail[53]      sending-mail[54]        

object utilities (#47)   generic utilities (#146)   root class (#1)
generic utilities (#146)
  Generic BigList Utilities (#13)
  wizard utilities (#24)
  math utilities (#26)
  set utilities (#27)
  sequence utilities (#32)
  gender utilities (#38)
  time utilities (#39)
  object utilities (#47)
  lock utilities (#48)
  list utilities (#49)
  command utilities (#50)
  code utilities (#53)
  permissions utilities (#130)
  building utilities (#19)
  string utilities (#18)
  English Utilities (#72)
  integration utils (#74)
  Name Utilities (#177)
  Parsing Utilities (#117)
  walking utils (#182)
  room matching utilities (#190)
  Generic Quota Utils Parent (#88)
    Byte Quota Utilities (#174)
    Object Quota Utilities (#113)
code utilities (#53) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic utilities (#146).
   #53:eval_d                   Core-Wizard (#184)   rxd    any any any
   #53:1                        Core-Wizard (#184)   rx     this none this
   #53:tonum                    unknown hacker (#35) rxd    this none this
   #53:toobj                    unknown hacker (#35) rxd    this none this
   #53:toerr                    unknown hacker (#35) rxd    this none this
   #53:error_name               unknown hacker (#35) rxd    this none this
   #53:show_object              Core-Wizard (#184)   rx     this none this
   #53:show_property            Core-Wizard (#184)   rx     this none this
   #53:show_verbdef             Core-Wizard (#184)   rxd    this none this
   #53:explain_verb_syntax      Core-Wizard (#184)   rxd    this none this
   #53:"verb_p*erms verb_permi*ssions" Core-Wizard (#184) rxd this none this
   #53:verb_loc*ation           unknown hacker (#35) rxd    this none this
   #53:verb_documentation       Core-Wizard (#184)   rxd    this none this
   #53:set_verb_documentation   Core-Wizard (#184)   rxd    this none this
   #53:parse_propref            Core-Wizard (#184)   rxd    this none this
   #53:parse_verbref            Core-Wizard (#184)   rxd    this none this
   #53:parse_argspec            unknown hacker (#35) rxd    this none this
   #53:prepositions             unknown hacker (#35) rxd    this none this
   #53:short_prep               unknown hacker (#35) rxd    this none this
   #53:full_prep                unknown hacker (#35) rxd    this none this
   #53:get_prep                 unknown hacker (#35) rxd    this none this
   #53:_fix_preps               unknown hacker (#35) rx     this at/to this
   #53:"find_verb_named find_verb_named_0_based" Core-Wizard (#184) rx this none this
   #53:"find_last_verb_named find_last_verb_named_0_based" Core-Wizard (#184) rx this none this
   #53:"find_callable_verb_named find_callable_verb_named_0_based" Core-Wizard (#184) rx this none this
   #53:verbname_match(new)      unknown hacker (#35) rxd    this none this
   #53:find_verbs_containing    Core-Wizard (#184)   rxd    this none this
   #53:_find_verbs_containing   Core-Wizard (#184)   rx     this none this
   #53:find_verbs_matching      Core-Wizard (#184)   rxd    this none this
   #53:_find_verbs_matching     Core-Wizard (#184)   rx     this none this
   #53:_grep_verb_code          Core-Wizard (#184)   rxd    this none this
   #53:_egrep_verb_code         Core-Wizard (#184)   rxd    this none this
   #53:_parse_audit_args        unknown hacker (#35) rxd    this none this
   #53:help_db_list             Core-Wizard (#184)   rx     this none this
   #53:help_db_search           unknown hacker (#35) rx     this none this
   #53:corify_object            unknown hacker (#35) rx     this none this
   #53:substitute               Core-Wizard (#184)   rxd    this none this
   #53:inside_quotes            Core-Wizard (#184)   rxd    this none this
   #53:verb_or_property         Core-Wizard (#184)   rx     this none this
   #53:task_valid               Core-Wizard (#184)   rx     this none this
   #53:task_owner               Core-Wizard (#184)   rxd    this none this
   #53:argstr                   Core-Wizard (#184)   rxd    this none this
   #53:verbname_match           unknown hacker (#35) rxd    this none this
   #53:show_who_listing         Core-Wizard (#184)   rx     this none this
   #53:_egrep_verb_code_all     Core-Wizard (#184)   rxd    this none this
   #53:_grep_verb_code_all      Core-Wizard (#184)   rxd    this none this
   #53:standard_set_property    Core-Wizard (#184)   r d    this none this
   #53:verb_usage               Core-Wizard (#184)   rx     this none this
   #53:connected_players        unknown hacker (#35) rxd    this none this
   #53:players                  unknown hacker (#35) rxd    this none this
   #53:safe_eval                unknown hacker (#35) rxd    this none this
   #53:verb_frame               unknown hacker (#35) rxd    this none this
   #53:verb_all_frames          unknown hacker (#35) rxd    this none this
   #53:parse_named_args         unknown hacker (#35) rxd    this none this
   #53:split_verb_code          unknown hacker (#35) rxd    this none this
   #53:named_args_to_usage      unknown hacker (#35) rxd    this none this
   #53:commentify               unknown hacker (#35) rxd    this none this
   #53:uncommentify             Core-Wizard (#184)   rxd    this none this
   #53:named_args_list          unknown hacker (#35) rxd    this none this
   #53:named_args_from_code     unknown hacker (#35) rxd    this none this
   #53:named_args_to_code       unknown hacker (#35) rxd    this none this
   #53:gensym                   unknown hacker (#35) rxd    this none this
   #53:"verbs verbs_as_nobody"  Core-Wizard (#184)   rxd    this none this
   #53:rename_property          Core-Wizard (#184)   rxd    this none this
   #53:format_traceback         unknown hacker (#35) rxd    this none this
   #53:_format_traceback_frame  unknown hacker (#35) rxd    this none this
   #53:find_verb_named_1_based  Core-Wizard (#184)   rxd    this none this
   #53:find_last_verb_named_1_based Core-Wizard (#184) rxd  this none this
   #53:find_callable_verb_named_1_based Core-Wizard (#184) rxd this none this
   #53:callers_before_pass      unknown hacker (#35) rxd    this none this
   #53:frame_before_pass        unknown hacker (#35) rx     this none this
   #53:caller_before_pass       unknown hacker (#35) rx     this none this
   #53:caller_perms_before_pass unknown hacker (#35) rx     this none this
   #53:disassemble_code         unknown hacker (#35) rxd    this none this
   #53:check_syntax             unknown hacker (#35) rxd    this none this
   #53:init_for_core            Core-Wizard (#184)   rxd    this none this
   #53:_verb_code_temporary     unknown hacker (#35)        this none this
-------------------------------- finished ---------------------------------
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#243:core_objects ()" name: "MOO verb: #243:core_objects ()" type: moo-code content*: "" _data-tag: 114739973711
#$#: 114739973711
=> {1, 2}
Error programming Crag:core_objects[1](0).
Line 6:  syntax error
1 error(s).
Verb not programmed.
Error programming Crag:core_objects[1](0).
Line 6:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
#243:core_objects, line 3:  Incorrect number of arguments
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Last modified Sun Apr 14 16:36:59 2013 PDT by Crag (#243).
#243:"core_objects" this none this
 1:  "Find all objects with core names (like $local)";
 2:  {o} = {@args, #0};
 3:  {p} = {@args, "$", "$"};
 4:  for p in (properties(o))
 5:    if (valid(o.(p)))
 6:      player:tell(pfx + p + " => " + o:name_and_number());
 7:      this:core_objects(o, pfx + p + ".");
 8:    endif
 9:  endfor
#-1:Input to EVAL, line 4:  Incorrect number of arguments
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
`HELP SHIFT' NOT FOUND
======================

Sorry, but no help is available on `shift'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

-----
`HELP POP' AMBIGUOUS
====================

Sorry, the topic `pop' is ambiguous.  I don't know which of the following topics you mean:

`help @popo'[1]         `help @popobject'[2]    

-----
`HELP FUNCTION' AMBIGUOUS
=========================

Sorry, the topic `function' is ambiguous.  I don't know which of the following topics you mean:

`help function_info()'[1]                       `help functions'[2]

-----
FUNCTIONS
=========

There are many, many built-in functions available to MOO programmers.  The following list gives a brief summary of the arguments and purpose of each function; for more information, see the LambdaMOO Programmer's Manual.  

pass(arg, ...)              -- call same verb defined on this object's parent
raise(code[, msg[, value]]) -- raise code as an error

typeof(value)      -- determine the data type of value
 tostr(value, ...) -- concatenate values into a string
 tonum(value)      -- convert non-list value into a integer
 toint(value)      == tonum(value)
 tofloat(value)    -- convert non-list value into a float
 toobj(value)      -- convert non-list value into an object
floatstr(float, precision, scientific?)
                   -- convert float value to string
encode_binary(value, ...)      -- values to binary string
decode_binary(bstring[, full]) -- binary string to list of values

binary_hash(bstring) -- MD5 hash value of binary string
string_hash(string)  -- MD5 hash value of string
value_hash(value)    == string_hash(toliteral(value))

value_bytes(value)   --- number of bytes required to store value
object_bytes(object) --- number of bytes required to store object

eval(string)       -- parse and execute string as MOO code
toliteral(value)   -- convert value to a string that evaluates to it
call_function(func[, arg, ...]) == func([arg, ...])

function_info([func]) -- builtin function desc (or list of all of them)

length(list/string) -- returns the length of a string or list
listappend(list, value [, index]) -- adding an element at the end of a list
listinsert(list, value [, index]) -- adding an element at the head of a list
   listset(list, value, index)    -- updating a list at some index
listdelete(list, index)           -- removing an element from a list
    setadd(list, element) -- adding an element to a set represented as a list
 setremove(list, element) -- removing an element from such a set
is_member(element, list) -- case-sensitive version of (element IN list)
equal(v1,v2)             -- case-sensitive version of (v1 == v2)

min(n1, n2, ...) -- minimum of n1,n2,...
max(n1, n2, ...) -- maximum of n1,n2,...
random(n)        -- random integer between 1 and n inclusive
 time()          -- current time in seconds since midnight GMT, 1 Jan 70
ctime([time])    -- time (or current time) converted to a human-readable string

  abs(n) -- absolute value of n
floor(x) -- truncate x towards minus infinity
trunc(x) -- truncate x towards zero
 ceil(x) -- truncate x towards plus infinity
 sqrt(n) -- square root of n
  exp(x) -- e to the x
  log(x) -- natural log
log10(x) -- base 10 log
 sin(a),  cos(a),  tan(a)     -- circular trignometric functions
asin(y), acos(x), atan(x[,y]) -- inverse circular trignometric functions
 sinh(a), cosh(a), tanh(a)    -- hyperbolic trigonometric functions

 index(str1, str2 [, case-matters]) -- index of first str2 in str1
rindex(str1, str2 [, case-matters]) -- index of last  str2 in str1
strcmp(str1, str2) -- case-sensitive string comparison
strsub(subject, what, with [, case-matters]) -- substitution in a string
crypt(string [, salt]) -- one-way string encryption
 match(str1, str2 [, case-matters]) -- match first pattern str2 in str1
rmatch(str1, str2 [, case-matters]) -- match last  pattern str2 in str1
substitute(template, subs) -- perform substitutions on template

   valid(object)             -- testing whether an object exists
  create(parent [, owner(*)])-- creating a new MOO object
 recycle(object)             -- destroying a MOO object
    move(object, where)      -- altering the object-containment hierarchy
chparent(object, new-parent) -- altering the object-inheritance hierarchy
  parent(object)             -- object's parent   in the inheritance hierarchy
children(object)             -- object's children in the inheritance hierarchy
max_object()       -- the highest-numbered object in the MOO
renumber(obj)      -- changes an object's number to lowest available one (*)
reset_max_object() -- resets max_object() to the largest valid object (*)

     properties(object) -- a list of the properties defined on an object
   add_property(object, prop-name, value, info) -- add a new property
delete_property(object, prop-name)              -- remove a property
    property_info(object, prop-name)       -- {owner, perms} info on a property
set_property_info(object, prop-name, info) -- setting same
is_clear_property(object, prop-name) -- find out if a property is "clear"
   clear_property(object, prop-name) -- make a property "clear"

      verbs(object) -- a list of the verbs defined on an object
   add_verb(object, info, args)  -- add a verb to an object
delete_verb(object, verb-name)   -- remove a verb from an object
    verb_info(object, verb-name) -- {owner, perms, names} info for a verb defn.
    verb_args(object, verb-name) -- {dobj, prep, iobj} argument info for a verb
    verb_code(object, verb-name [, fully-paren [, indent]]) -- program listing
set_verb_info(object, verb-name, {owner, perms, names})
set_verb_args(object, verb-name, {dobj, prep, iobj})   
set_verb_code(object, verb-name, {line, line, ...})
  disassemble(object, verb-name) -- moo bytecode for verb

notify(conn, string[, noflush])      -- output string to connection
read([conn])                         -- read input line from connection (*)
flush_input(conn[, showmsg?])        -- flush pending input on connection (*)
force_input(conn, line[, at-front?]) -- insert line as pending input (*)

        is_player(object) -- testing whether or not object is a player
          players()       -- a list of all players, active or not
connected_players()       -- a list of all currently-connected players
     idle_seconds(player) -- seconds since given player typed anything
connected_seconds(player) -- seconds given player has been logged in
    boot_player(player)        -- disconnect player from the MOO immediately(*)
set_player_flag(player, value) -- set/clear player bit; boot player if clear(*)
connection_name(player)   -- a server-assigned name for player's connection
open_network_connection(@args) -- open a connection to another network site
connection_option(conn,option)           -- setting of option for connection
connection_options(conn)                 -- list of {option, value}
set_connection_option(conn,option,value) -- change setting of option
output_delimiters(player)      -- {prefix,suffix} set by PREFIX/SUFFIX cmds
buffered_output_length([conn]) -- number of bytes currently buffered on output

caller_perms()         -- the player whose permissions your caller was using
set_task_perms(player) -- changing permissions of the running task (*)
callers([lineno?])  -- stack: list of {obj, verb, owner, vloc, player[,line]}
task_stack(taskid[,lineno?]) -- callers() stack for suspended task

seconds_left() -- number of seconds left in the current task
ticks_left()   -- number of ticks   left in the current task
task_id()              -- id number for the currently-running task
suspend(secs)          -- suspend current task for a number of seconds
resume(taskid[,value]) -- resume the specified task
kill_task(taskid)      -- delete one of your tasks from the queue
queued_tasks()         -- list of {taskid,start,,,owner,obj,verb,line,this}
queue_info([player])   -- number of tasks for player or list of tasking players

server_version()   -- a string of three numbers "major.minor.release"
server_log(string) -- add a comment to the server log file (*)
listen(obj, point[, msgs?]) -- start listening, return canonicalized point (*)
unlisten(canonpoint)        -- stop listening at canonpoint (*)
listeners() -- list of {object, canonpoint, msgs?} listening points (*)
shutdown(msg)    -- print msg and kill the server (*)
dump_database()  -- what it says (*)
db_disk_size()   -- size in bytes of database disk file
memory_usage()   -- {{blocksize, nused, nfree}, ...}, the server's memory stats

(*) => as you might have expected, these usually require wizard permissions.

-----
`HELP LIST' AMBIGUOUS
=====================

Sorry, the topic `list' is ambiguous.  I don't know which of the following topics you mean:

`help @list'[1]         `help @list#'[2]        `help @list-options'[3]
`help listappend()'[4]  `help listdelete()'[5]  `help listen()'[6]
`help listeners()'[7]   `help @listgag'[8]      `help listinsert()'[9]
`help @listoptions'[10]                         `help listset()'[11]

0 errors.
Verb programmed.
#243:core_objects, line 6:  Variable not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
$builder => System Object (#0)
$builder.builder => System Object (#0)
$builder.builder.builder => System Object (#0)
$builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
$builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder.builder => System Object (#0)
#60:get (this == #112), line 8:  Too many verb calls
... called from #6:misc_option client_option who_option parse_option (this == #243), line 4
... called from #6:tell (this == #243), line 21
... called from #243:core_objects, line 6
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #243:core_objects, line 7
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
FUNCTIONS
=========

There are many, many built-in functions available to MOO programmers.  The following list gives a brief summary of the arguments and purpose of each function; for more information, see the LambdaMOO Programmer's Manual.  

pass(arg, ...)              -- call same verb defined on this object's parent
raise(code[, msg[, value]]) -- raise code as an error

typeof(value)      -- determine the data type of value
 tostr(value, ...) -- concatenate values into a string
 tonum(value)      -- convert non-list value into a integer
 toint(value)      == tonum(value)
 tofloat(value)    -- convert non-list value into a float
 toobj(value)      -- convert non-list value into an object
floatstr(float, precision, scientific?)
                   -- convert float value to string
encode_binary(value, ...)      -- values to binary string
decode_binary(bstring[, full]) -- binary string to list of values

binary_hash(bstring) -- MD5 hash value of binary string
string_hash(string)  -- MD5 hash value of string
value_hash(value)    == string_hash(toliteral(value))

value_bytes(value)   --- number of bytes required to store value
object_bytes(object) --- number of bytes required to store object

eval(string)       -- parse and execute string as MOO code
toliteral(value)   -- convert value to a string that evaluates to it
call_function(func[, arg, ...]) == func([arg, ...])

function_info([func]) -- builtin function desc (or list of all of them)

length(list/string) -- returns the length of a string or list
listappend(list, value [, index]) -- adding an element at the end of a list
listinsert(list, value [, index]) -- adding an element at the head of a list
   listset(list, value, index)    -- updating a list at some index
listdelete(list, index)           -- removing an element from a list
    setadd(list, element) -- adding an element to a set represented as a list
 setremove(list, element) -- removing an element from such a set
is_member(element, list) -- case-sensitive version of (element IN list)
equal(v1,v2)             -- case-sensitive version of (v1 == v2)

min(n1, n2, ...) -- minimum of n1,n2,...
max(n1, n2, ...) -- maximum of n1,n2,...
random(n)        -- random integer between 1 and n inclusive
 time()          -- current time in seconds since midnight GMT, 1 Jan 70
ctime([time])    -- time (or current time) converted to a human-readable string

  abs(n) -- absolute value of n
floor(x) -- truncate x towards minus infinity
trunc(x) -- truncate x towards zero
 ceil(x) -- truncate x towards plus infinity
 sqrt(n) -- square root of n
  exp(x) -- e to the x
  log(x) -- natural log
log10(x) -- base 10 log
 sin(a),  cos(a),  tan(a)     -- circular trignometric functions
asin(y), acos(x), atan(x[,y]) -- inverse circular trignometric functions
 sinh(a), cosh(a), tanh(a)    -- hyperbolic trigonometric functions

 index(str1, str2 [, case-matters]) -- index of first str2 in str1
rindex(str1, str2 [, case-matters]) -- index of last  str2 in str1
strcmp(str1, str2) -- case-sensitive string comparison
strsub(subject, what, with [, case-matters]) -- substitution in a string
crypt(string [, salt]) -- one-way string encryption
 match(str1, str2 [, case-matters]) -- match first pattern str2 in str1
rmatch(str1, str2 [, case-matters]) -- match last  pattern str2 in str1
substitute(template, subs) -- perform substitutions on template

   valid(object)             -- testing whether an object exists
  create(parent [, owner(*)])-- creating a new MOO object
 recycle(object)             -- destroying a MOO object
    move(object, where)      -- altering the object-containment hierarchy
chparent(object, new-parent) -- altering the object-inheritance hierarchy
  parent(object)             -- object's parent   in the inheritance hierarchy
children(object)             -- object's children in the inheritance hierarchy
max_object()       -- the highest-numbered object in the MOO
renumber(obj)      -- changes an object's number to lowest available one (*)
reset_max_object() -- resets max_object() to the largest valid object (*)

     properties(object) -- a list of the properties defined on an object
   add_property(object, prop-name, value, info) -- add a new property
delete_property(object, prop-name)              -- remove a property
    property_info(object, prop-name)       -- {owner, perms} info on a property
set_property_info(object, prop-name, info) -- setting same
is_clear_property(object, prop-name) -- find out if a property is "clear"
   clear_property(object, prop-name) -- make a property "clear"

      verbs(object) -- a list of the verbs defined on an object
   add_verb(object, info, args)  -- add a verb to an object
delete_verb(object, verb-name)   -- remove a verb from an object
    verb_info(object, verb-name) -- {owner, perms, names} info for a verb defn.
    verb_args(object, verb-name) -- {dobj, prep, iobj} argument info for a verb
    verb_code(object, verb-name [, fully-paren [, indent]]) -- program listing
set_verb_info(object, verb-name, {owner, perms, names})
set_verb_args(object, verb-name, {dobj, prep, iobj})   
set_verb_code(object, verb-name, {line, line, ...})
  disassemble(object, verb-name) -- moo bytecode for verb

notify(conn, string[, noflush])      -- output string to connection
read([conn])                         -- read input line from connection (*)
flush_input(conn[, showmsg?])        -- flush pending input on connection (*)
force_input(conn, line[, at-front?]) -- insert line as pending input (*)

        is_player(object) -- testing whether or not object is a player
          players()       -- a list of all players, active or not
connected_players()       -- a list of all currently-connected players
     idle_seconds(player) -- seconds since given player typed anything
connected_seconds(player) -- seconds given player has been logged in
    boot_player(player)        -- disconnect player from the MOO immediately(*)
set_player_flag(player, value) -- set/clear player bit; boot player if clear(*)
connection_name(player)   -- a server-assigned name for player's connection
open_network_connection(@args) -- open a connection to another network site
connection_option(conn,option)           -- setting of option for connection
connection_options(conn)                 -- list of {option, value}
set_connection_option(conn,option,value) -- change setting of option
output_delimiters(player)      -- {prefix,suffix} set by PREFIX/SUFFIX cmds
buffered_output_length([conn]) -- number of bytes currently buffered on output

caller_perms()         -- the player whose permissions your caller was using
set_task_perms(player) -- changing permissions of the running task (*)
callers([lineno?])  -- stack: list of {obj, verb, owner, vloc, player[,line]}
task_stack(taskid[,lineno?]) -- callers() stack for suspended task

seconds_left() -- number of seconds left in the current task
ticks_left()   -- number of ticks   left in the current task
task_id()              -- id number for the currently-running task
suspend(secs)          -- suspend current task for a number of seconds
resume(taskid[,value]) -- resume the specified task
kill_task(taskid)      -- delete one of your tasks from the queue
queued_tasks()         -- list of {taskid,start,,,owner,obj,verb,line,this}
queue_info([player])   -- number of tasks for player or list of tasking players

server_version()   -- a string of three numbers "major.minor.release"
server_log(string) -- add a comment to the server log file (*)
listen(obj, point[, msgs?]) -- start listening, return canonicalized point (*)
unlisten(canonpoint)        -- stop listening at canonpoint (*)
listeners() -- list of {object, canonpoint, msgs?} listening points (*)
shutdown(msg)    -- print msg and kill the server (*)
dump_database()  -- what it says (*)
db_disk_size()   -- size in bytes of database disk file
memory_usage()   -- {{blocksize, nused, nfree}, ...}, the server's memory stats

(*) => as you might have expected, these usually require wizard permissions.

0 errors.
Verb programmed.
$builder => System Object (#0)
#243:core_objects, line 6:  Type mismatch
... called from #243:core_objects, line 9
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
-----
IS_MEMBER()
===========

Syntax:  is_member (<value>, list <list>)   => int

Returns true if there is an element of <list> that is completely indistinguishable from <value>.  This is much the same operation as ```<value> in <list>''' except that, unlike `in', the `is_member()' function does not treat upper- and lower-case characters in strings as equal.

    "Foo" in {1, "foo", #24}            =>   2
    is_member("Foo", {1, "foo", #24})   =>   0
    is_member("Foo", {1, "Foo", #24})   =>   2

0 errors.
Verb programmed.
$builder => System Object (#0)
#243:core_objects, line 6:  Type mismatch
... called from #243:core_objects, line 9
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
0 errors.
Verb programmed.
-----
IS_MEMBER()
===========

Syntax:  is_member (<value>, list <list>)   => int

Returns true if there is an element of <list> that is completely indistinguishable from <value>.  This is much the same operation as ```<value> in <list>''' except that, unlike `in', the `is_member()' function does not treat upper- and lower-case characters in strings as equal.

    "Foo" in {1, "foo", #24}            =>   2
    is_member("Foo", {1, "foo", #24})   =>   0
    is_member("Foo", {1, "Foo", #24})   =>   2

-----
IS_MEMBER()
===========

Syntax:  is_member (<value>, list <list>)   => int

Returns true if there is an element of <list> that is completely indistinguishable from <value>.  This is much the same operation as ```<value> in <list>''' except that, unlike `in', the `is_member()' function does not treat upper- and lower-case characters in strings as equal.

    "Foo" in {1, "foo", #24}            =>   2
    is_member("Foo", {1, "foo", #24})   =>   0
    is_member("Foo", {1, "Foo", #24})   =>   2

Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location first room (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
$builder => generic builder (#4)
#243:core_objects, line 6:  Type mismatch
... called from #243:core_objects, line 9
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
=> 0
0 errors.
Verb programmed.
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => first room (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => first room (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
$jtext.link.browser => Browser Link Tag (#95)
$jtext.root => Tag Root (#91)
$jtext.vgroup => Vgroup Tag (#97)
$jtext.header => Header Tag (#102)
$jtext.title => Title Tag (#96)
$jtext.string => String Tag (#84)
$jtext.list_of_strings => List Of Strings Tag (#86)
$jtext.paragraph => Paragraph Tag (#101)
$jtext.dlist => Definition List Tag (#98)
$jtext.plaintext => Plaintext Tag (#128)
$jtext.list => List Tag (#129)
$jtext.index => Index Tag (#120)
$jtext.itemize => Itemize Tag (#138)
$jtext.itemize_unnumbered => Unnumbered Itemization Tag (#114)
$jtext.itemize_numbered => Numbered Itemization Tag (#125)
$jtext.isindex => ISINDEX Tag (#119)
$jtext.hr => Horizontal Rule Tag (#134)
$feature_help => feature object help database (#100)
$jaddress => Jaddress Dispatcher (#111)
$jaddress.root => Address Root (#109)
$jaddress.help => Help Address (#131)
$jaddress.browser_object => Browser Object Address (#90)
$jaddress.note => Note Address (#118)
$jaddress.browser_verb => Browser Verb Address (#143)
$jaddress.browser_inherited_properties => Browser Inherited Properties Address (#144)
$jaddress.resolved_help => Resolved Help Address (#172)
$misc_options => Miscellaneous Options (#112)
$client_options => Client Options (#116)
$building_options => building options (#122)
$it => it (#154)
$furniture => generic piece of furniture (#81)
$sittable => generic sittable object (#80)
$I => I (#160)
$everything => everything (#139)
$all => all (#103)
$admin_group => generic admin group (#163)
$admin_group.leader => Wizard (#2)
$steering_committee => Steering Committee (#137)
$db_group => DB Group (#148)
$unix_group => Unix Group (#147)
$community_group => Community Group (#165)
$community_group.feature => Community Group Commands (#149)
$tech_group => Tech Group (#164)
$admin_mail_recipient => Generic Administrators Mailing List (#107)
$registrar => Registrar (#108)
$event_dispatcher => generic event dispatching object (#110)
$prog_group => Programming Group (#124)
$openable_container => generic openable container (#8)
$containing_object => generic containing object (#145)
$utils => generic utilities (#146)
$boot_log => Boot-Log (#85)
$help_editor => help text editor (#171)
$object_help => Object Help Database (#173)
$tester => generic testing player (#99)
$failed_help => last resort help database (#127)
$failed_help.help_recipient => Bug-reports (#140)
$who_options => Who Options (#89)
$event_handler => generic event handler (#133)
$eval_options => Eval Options (#136)
$he => he (#156)
$she => she (#157)
$e => e (#158)
$we => we (#159)
$plural_you => you (#161)
$either => s/he (#162)
$splat => *e (#166)
$gender => generic gender object (#64)
$none => none (#167)
$topic => topic sign (#178)
$builder_help => Builder Help (#155)
$name_utils => Name Utilities (#177)
$name_utils.dummy => name-subbing dummy object (#132)
$name_utils.dummy_builder => dummy name builder (#236)
$guest_help => guest help database (#168)
$parse_utils => Parsing Utilities (#117)
$admin => administration (#170)
$core_wizard => Core-Wizard (#184)
$first_wizard => Wizard (#2)
$door => generic door (#121)
$ftp => old FTP (#234)
$quota_utils => Byte Quota Utilities (#174)
$quota_utils.working => Quota (#185)
$window => generic window (#179)
$server_options => server options (#188)
$walking_utils => walking utils (#182)
$checkpointer => checkpointer (#175)
$startup => startup handler (#189)
$syslog => syslog (#183)
$generic_biglist_home => Generic BigList Resident (#75)
$http => http (#87)
$module => generic module (#203)
$property_farm => generic property farm (#206)
$modules => module registry (#205)
$modules.module => module system module (#202)
$modules.module.obj_sink_player => spam-player sink (#208)
$modules.module.obj_sink_note => generate note sink (#195)
$modules.module.obj_source_generic => generic source (#200)
$modules.module.obj_source_http => http source (#194)
$modules.module.obj_source_player => read() player source (#198)
$modules.module.obj_sink_generic_spam => generic gather-then-spam sink (#199)
$modules.module.obj_sink_generic => generic sink (#207)
$modules.module.obj_generic_source_or_sink => generic source or sink (#196)
$modules.module.obj_ftp_sink => FTP URL sink (#231)
$modules.module.obj_ftp_source => ftp source (#229)
$modules.mcp => MCP 2.1 module (#214)
$modules.mcp.obj_mcp => MCP 2.1 (#213)
$modules.mcp.obj_mcp.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp.session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp.package => generic MCP package (#216)
$modules.mcp.obj_mcp.negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp.registry => MCP package registry (#209)
$modules.mcp.obj_mcp.cord => mcp-cord (#217)
$modules.mcp.obj_mcp_parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp_package => generic MCP package (#216)
$modules.mcp.obj_mcp_negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp_cord => mcp-cord (#217)
$modules.mcp.obj_cord_stub => generic cord stub (#222)
$modules.mcp.obj_type_root => generic cord type (#218)
$modules.mcp.obj_message_dispatcher => generic message dispatch object (#219)
$modules.simpleedit => simpleedit module (#220)
$modules.simpleedit.obj_simpleedit_package => dns-org-mud-moo-simpleedit (#201)
$modules.smtp => SMTP module (#226)
$modules.smtp.obj_smtp => SMTP (#212)
$modules.listeners => listeners module (#228)
$modules.listeners.obj_listener => generic listener (#224)
$modules.listeners.obj_daemon => generic daemon listener (#211)
$modules.listeners.obj_daemon_handler => generic daemon service handler (#210)
$modules.listeners.obj_redlist_daemon => generic daemon listener with flood control (#225)
$modules.core_features => core feature objects (#233)
$modules.core_features.obj_stage_talk => Stage-Talk Feature (#67)
$modules.core_features.obj_thinking => Thinking Feature (#68)
$smtp => SMTP (#212)
$cord => Cord Dispatcher (#223)
$cord.root => generic cord stub (#222)
$cord.type_root => generic cord type (#218)
$mcp => MCP 2.1 (#213)
$mcp.parser => MCP 2.1 parser (#221)
$mcp.session => generic MCP 2.1 session (#204)
$mcp.package => generic MCP package (#216)
$mcp.negotiate => mcp-negotiate (#215)
$mcp.registry => MCP package registry (#209)
$mcp.cord => mcp-cord (#217)
$parse_options => Parsing Options (#191)
$ftp_client => FTP (#230)
$local => Local Namespace (#193)
$local.group => generic group (#244)
$local.pile => Generic Pile (#242)
$building_group => Building Group (#192)
$documentation_group => documentation group (#232)
$room_matching_utils => room matching utilities (#190)
$policy_help => policy help database (#235)
$admin_help => administration group help (#238)
$jhcore_help => JHCore Help DB (#237)
$namebuilder_i => namebuilder_i for #1 (#227)
$namebuilder_d => namebuilder_d for #1 (#239)
=> 0
You [to Wizard]: yo
$localgroup => generic group (#244)
$localpile => Generic Pile (#242)
=> 0
$local.group => generic group (#244)
$local.pile => Generic Pile (#242)
=> 0
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
.key                     Core-Wizard (#184)      c    0
.aliases                 Core-Wizard (#184)    r c    {"root class"}
.description             Core-Wizard (#184)    r c    ""
.visible                 unknown hack (#35)    r      1
.integrate_room_msg      Core-Wizard (#184)    r c    ""
.integrate_player_msg    Core-Wizard (#184)    r c    ""
.integrate_container_msg Core-Wizard (#184)    r c    ""
.unique                  Core-Wizard (#184)    r c    1
.proper                  Core-Wizard (#184)    r c    0
.integrate_in            unknown hack (#35)    r      {#145}
.handlers                unknown hack (#35)    r      {}
.number                  unknown hack (#35)    r      1
.offered                 Core-Wizard (#184)    r      #-1
.object_size             Quota (#185)          r      {85592, 1365926400}
-------------------------------- finished ---------------------------------
Property added with value {}.
0 errors.
Verb programmed.
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => first room (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => first room (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
#243:core_objects, line 10:  Property not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => first room (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => first room (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
#243:core_objects, line 11:  Property not found
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Generic Garbage Object (#56) [ readable ]
  Owned by unknown hacker (#35).
  Child of ** none ** (#-1).
-------------------------------- finished ---------------------------------
Generic Garbage Object (#56) [ readable ]
  Owned by unknown hacker (#35).
  Child of ** none ** (#-1).
.aliases                 unknown hacker (#35)  r      {"garbage"}
-------------------------------- finished ---------------------------------
Property added with value {"$garbage"}.
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => first room (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => first room (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
$jtext.link.browser => Browser Link Tag (#95)
$jtext.root => Tag Root (#91)
$jtext.vgroup => Vgroup Tag (#97)
$jtext.header => Header Tag (#102)
$jtext.title => Title Tag (#96)
$jtext.string => String Tag (#84)
$jtext.list_of_strings => List Of Strings Tag (#86)
$jtext.paragraph => Paragraph Tag (#101)
$jtext.dlist => Definition List Tag (#98)
$jtext.plaintext => Plaintext Tag (#128)
$jtext.list => List Tag (#129)
$jtext.index => Index Tag (#120)
$jtext.itemize => Itemize Tag (#138)
$jtext.itemize_unnumbered => Unnumbered Itemization Tag (#114)
$jtext.itemize_numbered => Numbered Itemization Tag (#125)
$jtext.isindex => ISINDEX Tag (#119)
$jtext.hr => Horizontal Rule Tag (#134)
$feature_help => feature object help database (#100)
$jaddress => Jaddress Dispatcher (#111)
$jaddress.root => Address Root (#109)
$jaddress.help => Help Address (#131)
$jaddress.browser_object => Browser Object Address (#90)
$jaddress.note => Note Address (#118)
$jaddress.browser_verb => Browser Verb Address (#143)
$jaddress.browser_inherited_properties => Browser Inherited Properties Address (#144)
$jaddress.resolved_help => Resolved Help Address (#172)
$misc_options => Miscellaneous Options (#112)
$client_options => Client Options (#116)
$building_options => building options (#122)
$it => it (#154)
$furniture => generic piece of furniture (#81)
$sittable => generic sittable object (#80)
$I => I (#160)
$everything => everything (#139)
$all => all (#103)
$admin_group => generic admin group (#163)
$admin_group.leader => Wizard (#2)
$steering_committee => Steering Committee (#137)
$db_group => DB Group (#148)
$unix_group => Unix Group (#147)
$community_group => Community Group (#165)
$community_group.feature => Community Group Commands (#149)
$tech_group => Tech Group (#164)
$admin_mail_recipient => Generic Administrators Mailing List (#107)
$registrar => Registrar (#108)
$event_dispatcher => generic event dispatching object (#110)
$prog_group => Programming Group (#124)
$openable_container => generic openable container (#8)
$containing_object => generic containing object (#145)
$utils => generic utilities (#146)
$boot_log => Boot-Log (#85)
$help_editor => help text editor (#171)
$object_help => Object Help Database (#173)
$tester => generic testing player (#99)
$failed_help => last resort help database (#127)
$failed_help.help_recipient => Bug-reports (#140)
$who_options => Who Options (#89)
$event_handler => generic event handler (#133)
$eval_options => Eval Options (#136)
$he => he (#156)
$she => she (#157)
$e => e (#158)
$we => we (#159)
$plural_you => you (#161)
$either => s/he (#162)
$splat => *e (#166)
$gender => generic gender object (#64)
$none => none (#167)
$topic => topic sign (#178)
$builder_help => Builder Help (#155)
$name_utils => Name Utilities (#177)
$name_utils.dummy => name-subbing dummy object (#132)
$name_utils.dummy_builder => dummy name builder (#236)
$guest_help => guest help database (#168)
$parse_utils => Parsing Utilities (#117)
$admin => administration (#170)
$core_wizard => Core-Wizard (#184)
$first_wizard => Wizard (#2)
$door => generic door (#121)
$ftp => old FTP (#234)
$quota_utils => Byte Quota Utilities (#174)
$quota_utils.working => Quota (#185)
$window => generic window (#179)
$server_options => server options (#188)
$walking_utils => walking utils (#182)
$checkpointer => checkpointer (#175)
$startup => startup handler (#189)
$syslog => syslog (#183)
$generic_biglist_home => Generic BigList Resident (#75)
$http => http (#87)
$module => generic module (#203)
$property_farm => generic property farm (#206)
$modules => module registry (#205)
$modules.module => module system module (#202)
$modules.module.obj_sink_player => spam-player sink (#208)
$modules.module.obj_sink_note => generate note sink (#195)
$modules.module.obj_source_generic => generic source (#200)
$modules.module.obj_source_http => http source (#194)
$modules.module.obj_source_player => read() player source (#198)
$modules.module.obj_sink_generic_spam => generic gather-then-spam sink (#199)
$modules.module.obj_sink_generic => generic sink (#207)
$modules.module.obj_generic_source_or_sink => generic source or sink (#196)
$modules.module.obj_ftp_sink => FTP URL sink (#231)
$modules.module.obj_ftp_source => ftp source (#229)
$modules.mcp => MCP 2.1 module (#214)
$modules.mcp.obj_mcp => MCP 2.1 (#213)
$modules.mcp.obj_mcp.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp.session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp.package => generic MCP package (#216)
$modules.mcp.obj_mcp.negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp.registry => MCP package registry (#209)
$modules.mcp.obj_mcp.cord => mcp-cord (#217)
$modules.mcp.obj_mcp_parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp_package => generic MCP package (#216)
$modules.mcp.obj_mcp_negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp_cord => mcp-cord (#217)
$modules.mcp.obj_cord_stub => generic cord stub (#222)
$modules.mcp.obj_type_root => generic cord type (#218)
$modules.mcp.obj_message_dispatcher => generic message dispatch object (#219)
$modules.simpleedit => simpleedit module (#220)
$modules.simpleedit.obj_simpleedit_package => dns-org-mud-moo-simpleedit (#201)
$modules.smtp => SMTP module (#226)
$modules.smtp.obj_smtp => SMTP (#212)
$modules.listeners => listeners module (#228)
$modules.listeners.obj_listener => generic listener (#224)
$modules.listeners.obj_daemon => generic daemon listener (#211)
$modules.listeners.obj_daemon_handler => generic daemon service handler (#210)
$modules.listeners.obj_redlist_daemon => generic daemon listener with flood control (#225)
$modules.core_features => core feature objects (#233)
$modules.core_features.obj_stage_talk => Stage-Talk Feature (#67)
$modules.core_features.obj_thinking => Thinking Feature (#68)
$smtp => SMTP (#212)
$cord => Cord Dispatcher (#223)
$cord.root => generic cord stub (#222)
$cord.type_root => generic cord type (#218)
$mcp => MCP 2.1 (#213)
$mcp.parser => MCP 2.1 parser (#221)
$mcp.session => generic MCP 2.1 session (#204)
$mcp.package => generic MCP package (#216)
$mcp.negotiate => mcp-negotiate (#215)
$mcp.registry => MCP package registry (#209)
$mcp.cord => mcp-cord (#217)
$parse_options => Parsing Options (#191)
$ftp_client => FTP (#230)
$local => Local Namespace (#193)
$local.group => generic group (#244)
$local.pile => Generic Pile (#242)
$building_group => Building Group (#192)
$documentation_group => documentation group (#232)
$room_matching_utils => room matching utilities (#190)
$policy_help => policy help database (#235)
$admin_help => administration group help (#238)
$jhcore_help => JHCore Help DB (#237)
$namebuilder_i => namebuilder_i for #1 (#227)
$namebuilder_d => namebuilder_d for #1 (#239)
=> 0
The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   generic thing (#5)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)
The generic thing(#5) has 9 kids.
generic note (#9)   Recycling Center (#55)   network utils (#82)   generic sittable object (#80)   Registrar (#108)   topic sign (#178)   old FTP (#234)   generic module (#203)   feature object registry (#151)
generic thing (#5)
  generic note (#9)
  Recycling Center (#55)
  network utils (#82)
  generic sittable object (#80)
    generic piece of furniture (#81)
      leather couch (#245)
  Registrar (#108)
  topic sign (#178)
  old FTP (#234)
  generic module (#203)
    module system module (#202)
    MCP 2.1 module (#214)
    simpleedit module (#220)
    SMTP module (#226)
    listeners module (#228)
    core feature objects (#233)
  feature object registry (#151)
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
.drop_failed_msg         Core-Wizard (#184)    r c    {#69, "do", "You can't ..
.drop_succeeded_msg      Core-Wizard (#184)    r c    {#69, "do", "You drop "..
.odrop_failed_msg        Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
.odrop_succeeded_msg     Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
.otake_succeeded_msg     Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
.otake_failed_msg        Core-Wizard (#184)    r c    ""
.take_succeeded_msg      Core-Wizard (#184)    r c    {#69, "do", "You take "..
.take_failed_msg         Core-Wizard (#184)    r c    {#69, "do", "You can't ..
-------------------------------- finished ---------------------------------
root class (#1)
  Login Commands (#10)
You must give the name of some object.
  Guest Log (#12)
  Limbo (#15)
  Generic Help Database (#30)
    Generic Core Help Database (#197)
      Verb Help (#20)
        feature object help database (#100)
      Core Utility Help (#21)
      Programmer Help (#22)
      Wizard Help (#23)
      Builtin Function Help (1.8.0) (#28)
      Editor Help (#40)
      main help database (#54)
      Object Help Database (#173)
      last resort help database (#127)
      Builder Help (#155)
      guest help database (#168)
      policy help database (#235)
      administration group help (#238)
      JHCore Help DB (#237)
      jtext help database (#152)
      MCP help (#186)
      tkmoo help (#187)
      generic personal help database (#115)
    Unicode Builtins Help (#241)
  New Generic Database (#79)
    Registration Database (#16)
    Site DB (#25)
    Player Database (#37)
    Country Database (#94)
  Generic Mail Recipient (#41)
    Generic Large-Capacity Mail Recipient (#14)
      Player-Creation-Log (#17)
    News (#141)
    Generic Administrators Mailing List (#107)
      New-Prog-Log (#29)
      Quota-Log (#33)
      Community-Group (#106)
      Site-Locks (#62)
      security (#105)
      Steering-Committee (#135)
      Bug-reports (#140)
    Boot-Log (#85)
  Mail Distribution Center (#42)
  generic thing (#5)
    generic note (#9)
    Recycling Center (#55)
    network utils (#82)
    generic sittable object (#80)
      generic piece of furniture (#81)
        leather couch (#245)
    Registrar (#108)
    topic sign (#178)
    old FTP (#234)
    generic module (#203)
      module system module (#202)
      MCP 2.1 module (#214)
      simpleedit module (#220)
      SMTP module (#226)
      listeners module (#228)
      core feature objects (#233)
    feature object registry (#151)
  Generic Option Package (#60)
    Mail Options (#57)
    Edit Options (#58)
    Display Options (#59)
    List Options (#61)
    Miscellaneous Options (#112)
    Client Options (#116)
    building options (#122)
    Who Options (#89)
    Eval Options (#136)
    Parsing Options (#191)
    login watcher options (#76)
  Error Generator (#66)
  Generic Feature Object (#65)
    login watcher mark 2 (#83)
    Stage-Talk Feature (#67)
    Thinking Feature (#68)
    documentation feature (#169)
    generic secure group-command-feature (#150)
      Community Group Commands (#149)
  pronoun substitution (#69)
  everything (#139)
  all (#103)
  generic admin group (#163)
    Steering Committee (#137)
    Community Group (#165)
    Tech Group (#164)
      DB Group (#148)
      Unix Group (#147)
      Programming Group (#124)
    Building Group (#192)
    documentation group (#232)
  generic event dispatching object (#110)
    generic exit (#7)
      generic door (#121)
        generic window (#179)
    generic containing object (#145)
      generic player (#6)
        generic builder (#4)
          generic programmer (#52)
            unknown hacker (#35)
            generic wizard (#51)
              Core-Wizard (#184)
              Wizard (#2)
              Crag (#243)
              stormagnet (#246)
            housekeeper (#63)
            generic testing player (#99)
        nobody (#36)
        J. Text (#176)
        topic-owner (#181)
        Quota (#185)
        generic guest (#31)
      generic container (#126)
        generic openable container (#8)
      generic room (#3)
        Generic Editor (#46)
          Mail Room (#43)
          Note Editor (#44)
            help text editor (#171)
          Verb Editor (#45)
        first room (#70)
  generic utilities (#146)
    Generic BigList Utilities (#13)
    wizard utilities (#24)
    math utilities (#26)
    set utilities (#27)
    sequence utilities (#32)
    gender utilities (#38)
    time utilities (#39)
    object utilities (#47)
    lock utilities (#48)
    list utilities (#49)
    command utilities (#50)
    code utilities (#53)
    permissions utilities (#130)
    building utilities (#19)
    string utilities (#18)
    English Utilities (#72)
    integration utils (#74)
    Name Utilities (#177)
    Parsing Utilities (#117)
    walking utils (#182)
    room matching utilities (#190)
    Generic Quota Utils Parent (#88)
      Byte Quota Utilities (#174)
      Object Quota Utilities (#113)
  generic event handler (#133)
  generic gender object (#64)
    you (#34)
      you (#161)
    they (#71)
    it (#154)
      he (#156)
      she (#157)
      e (#158)
      s/he (#162)
      *e (#166)
      none (#167)
    I (#160)
    we (#159)
  administration (#170)
  server options (#188)
  checkpointer (#175)
  startup handler (#189)
  syslog (#183)
  Generic BigList Resident (#75)
  http (#87)
  generic property farm (#206)
    builtin function definitions (#153)
      System Object (#0)
    Jtext Dispatcher (#92)
    Jaddress Dispatcher (#111)
    module registry (#205)
    Local Namespace (#193)
  SMTP (#212)
  Cord Dispatcher (#223)
  MCP 2.1 (#213)
  FTP (#230)
  link dispatcher tag (#123)
  Generic Pronoun_sub Translator (#73)
    LambdaCore Pronoun_sub Translator (#77)
    Two-Letter Pronoun_Sub Translator (#78)
  here (#180)
  Tag Root (#91)
    Title Tag (#96)
    Vgroup Tag (#97)
    Header Tag (#102)
    Paragraph Tag (#101)
    Index Tag (#120)
    Plaintext Tag (#128)
    Horizontal Rule Tag (#134)
    Hgroup Tag (#93)
    Definition List Tag (#98)
    Link Tag (#104)
      generic preceding link tag (#142)
      Browser Link Tag (#95)
    String Tag (#84)
    List Of Strings Tag (#86)
    List Tag (#129)
    Itemize Tag (#138)
      Unnumbered Itemization Tag (#114)
        Numbered Itemization Tag (#125)
    ISINDEX Tag (#119)
  Address Root (#109)
    Resolved Help Address (#172)
    Help Address (#131)
    Browser Object Address (#90)
    Note Address (#118)
    Browser Verb Address (#143)
    Browser Inherited Properties Address (#144)
  name-subbing dummy object (#132)
  generic cord stub (#222)
  generic MCP 2.1 session (#204)
    session for #243 (#247)
  MCP package registry (#209)
  MCP 2.1 parser (#221)
  generic name builder (#240)
    namebuilder_i for #1 (#227)
    namebuilder_d for #1 (#239)
    dummy name builder (#236)
  generic source or sink (#196)
    generic source (#200)
      http source (#194)
      read() player source (#198)
      ftp source (#229)
    generic sink (#207)
      FTP URL sink (#231)
      generic gather-then-spam sink (#199)
        spam-player sink (#208)
        generate note sink (#195)
  generic message dispatch object (#219)
    generic cord type (#218)
    generic MCP package (#216)
      mcp-negotiate (#215)
      mcp-cord (#217)
      dns-org-mud-moo-simpleedit (#201)
  generic listener (#224)
    generic daemon listener (#211)
      generic daemon listener with flood control (#225)
  generic daemon service handler (#210)
  generic group (#244)
    Generic Pile (#242)
Object #243 does not define that verb, but its ancestor #1 does.
Last modified Sun Apr 14 16:25:23 2013 PDT by Crag (#243).
#1:"@dump-kids" this none none
 1:  "Usage: @dump-kids <parent>";
 2:  "Lists the object hierarchy from parent down";
 3:  prefix = "";
 4:  if (args && typeof(args[1]) == STR && index(args[1], " ") == 1)
 5:    prefix = args[1];
 6:  endif
 7:  thisinfo = this:name_and_number();
 8:  player:tell(prefix, thisinfo);
 9:  for child in (children(this))
10:    child:("@dump-kids")(prefix + "  ");
11:    $command_utils:suspend_if_needed(0);
12:  endfor
The root class(#1) has 48 kids.
Login Commands (#10)   Player Last_huh Verbs (#11)   Guest Log (#12)   Limbo (#15)   Generic Help Database (#30)   New Generic Database (#79)   Generic Mail Recipient (#41)   Mail Distribution Center (#42)   generic thing (#5)   Generic Option Package (#60)   Error Generator (#66)   Generic Feature Object (#65)   pronoun substitution (#69)   everything (#139)   all (#103)   generic admin group (#163)   generic event dispatching object (#110)   generic utilities (#146)   generic event handler (#133)   generic gender object (#64)   administration (#170)   server options (#188)   checkpointer (#175)   startup handler (#189)   syslog (#183)   Generic BigList Resident (#75)   http (#87)   generic property farm (#206)   SMTP (#212)   Cord Dispatcher (#223)   MCP 2.1 (#213)   FTP (#230)   link dispatcher tag (#123)   Generic Pronoun_sub Translator (#73)   here (#180)   Tag Root (#91)   Address Root (#109)   name-subbing dummy object (#132)   generic cord stub (#222)   generic MCP 2.1 session (#204)   MCP package registry (#209)   MCP 2.1 parser (#221)   generic name builder (#240)   generic source or sink (#196)   generic message dispatch object (#219)   generic listener (#224)   generic daemon service handler (#210)   generic group (#244)
=> "Player Last_huh Verbs (#11)"
Player Last_huh Verbs (#11)
generic containing object (#145) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic event dispatching object (#110).
  Location generic container (#126).
.in_msg                  unknown hacker (#35)  r c    {#69, "do", "in"}
-------------------------------- finished ---------------------------------
generic containing object (#145) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic event dispatching object (#110).
  Location generic container (#126).
  #145:enterfunc                Core-Wizard (#184)   rxd    this none this
  #145:exitfunc                 Core-Wizard (#184)   rxd    this none this
  #145:tell_contents            unknown hacker (#35) rxd    this none this
  #145:"empty_msg in_msg"       unknown hacker (#35) rx     this none this
  #145:in_name                  unknown hacker (#35) rxd    this none this
  #145:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #145:look_self                unknown hacker (#35) rxd    this none this
  #145:look_in                  unknown hacker (#35) rxd    this none this
  #145:visible_of               unknown hacker (#35) rxd    this none this
  #145:contents_for_integration unknown hacker (#35) rxd    this none this
  #145:ok_to_integrate          unknown hacker (#35) rxd    this none this
  #145:acceptable               unknown hacker (#35) rxd    this none this
  #145:in_namec                 unknown hacker (#35) rxd    this none this
  #145:modname_in               unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
-----
HELP ON THE GENERIC CONTAINER
=============================

No help found.

-----
#126:QPUT
=========

(No documentation.)

Last modified Wed Apr 17 13:37:28 2002 PDT by Xplat (#4014) (on Waterpoint).
#126:"p*ut in*sert d*rop qput" any (in/inside/into) this
 1:  quiet = verb == "qput";
 2:  if (!quiet && length(dobjstr) >= 8 && dobjstr[$ - 7..$] == " quietly")
 3:    dobjstr[$ - 7..$] = "";
 4:    quiet = 1;
 5:  endif
 6:  if ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
 7:    return E_INVARG;
 8:  endif
 9:  if (quiet && this.location != player)
10:    quiet = 0;
11:  elseif (quiet && dobj.location != player)
12:    quiet = 0;
13:  endif
14:  if (dobj.location != player && dobj.location != player.location)
15:    if (dobj.location == this)
16:      player:tell(dobj:dnamec(), " ", dobj:verb_sub("is"), " already ", this:name("d", {"in"}), ".");
17:    else
18:      player:tell("You can't reach ", dobj:dname(), ".");
19:    endif
20:    return E_RANGE;
21:  endif
22:  if (this:can_put_in(dobj, dobjstr))
23:    loc = player.location;
24:    dobj:moveto(this);
25:    if (dobj.location == this)
26:      if (quiet)
27:        player:tell($string_utils:pronoun_sub(this:put_msg(), $you, this, loc));
28:      else
29:        $you:say_action(this:put_msg(), player, this, loc);
30:      endif
31:    else
32:      player:tell(this:put_fail_msg());
33:    endif
34:  endif
35:  "Xplat 2002.04.17 -- save player location so as to announce if someone puts emself in a container";
generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   root class (#1)
generic event dispatching object (#110) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #110:add_dependent            Core-Wizard (#184)   rxd    this none this
  #110:remove_dependent         Core-Wizard (#184)   rxd    this none this
  #110:"@rm-dep*endent @rmdep*endent" Core-Wizard (#184) r d any out of/from inside/from this
  #110:"@add-dep*endent @adddep*endent" Core-Wizard (#184) r d any at/to this
  #110:initialize               Core-Wizard (#184)   rxd    this none this
  #110:broadcast_event_*        unknown hacker (#35) rx     this none this
  #110:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #110:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#110:"broadcast_event_*" this none this
 1:  ":broadcast_event_<type>(@event-args) -- broadcasts the event <type> with args `event-args' to all objects listening to this dispatcher.";
 2:  "if (!$perm_utils:controls(caller_perms(), this))";
 3:  "  return E_PERM;";
 4:  "endif";
 5:  name = verb[11..length(verb)];
 6:  retlist = {};
 7:  for o in (this:("dependents_" + name)(@args))
 8:    ret = o:(name)(@args);
 9:    if (ret)
10:      retlist = {@retlist, ret};
11:    endif
12:  endfor
13:  return retlist;
The generic thing(#5) has 9 kids.
generic note (#9)   Recycling Center (#55)   network utils (#82)   generic sittable object (#80)   Registrar (#108)   topic sign (#178)   old FTP (#234)   generic module (#203)   feature object registry (#151)
Object reuse. Call $recycler:_create() to create an object (semantics the same as create()), $recycler:_recycle() to recycle an object. Will create a new object if nothing available in its contents. Note underscores, to avoid builtin :recycle() verb called when objects are recycled. Uses $building_utils:recreate() to prepare objects.
Recycling Center (#55) [ readable ]
  Owned by unknown hacker (#35).
  Child of generic thing (#5).
-------------------------------- finished ---------------------------------
=> #-1 <$nothing>
Parent changed.
Parent changed.
-----
`HELP GREP' AMBIGUOUS
=====================

Sorry, the topic `grep' is ambiguous.  I don't know which of the following topics you mean:

`help @grep'[1]         `help @grepcore'[2]     

That is not a valid command.
-----
@GREP
=====

Syntax:  @grep <string> in <object>
         @grep <string> in {<objectlist>}

         @egrep <regexp> in <object>
         @egrep <regexp> in {<objectlist>}

These are named for the corresponding unix utilities.

@grep searches the given object(s) for verbs whose verbcode contains the given string as a substring of one of its lines.

@egrep searches the given object(s) for verbs whose verbcode contains a substring matching the given regular expression (see `help regular-expressions'[1]).


For wizards, the following forms are also available for doing full-db searches

         @grep  <pattern>
         @egrep <pattern>
         @grep  <pattern> from [#]<n>
         @egrep <pattern> from [#]<n>

the first two search all objects in the database while the last two search the range [#<n>..max_object()]

See also:  @grepcore, @who-calls.

generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
    #5:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Wed Aug 28 06:08:43 2002 PDT by Xeric (#999) (on Waterpoint).
#5:"help_text" this none this
 1:  all_help = `this.help_text ! E_PROPNF' || {};
 2:  if (typeof(all_help) == STR)
 3:    all_help = {all_help};
 4:  endif
 5:  helpless = {};
 6:  for vrb in (this:help_verbs(player))
 7:    if (typeof(vrb) == LIST)
 8:      vrb = vrb[2];
 9:      if (space = index(vrb, " "))
10:        vrb = vrb[1..space - 1];
11:      endif
12:      vrb = strsub(vrb, "*", "");
13:    endif
14:    if (loc = $object_utils:has_verb(this, vrb))
15:      $command_utils:suspend_if_needed(0);
16:      help = $code_utils:verb_documentation(loc[1], vrb);
17:      if (help)
18:        msg = verb_info(loc[1], vrb)[3];
19:        underline = $string_utils:space(length(msg), "=");
20:        if (all_help)
21:          "all_help = {@all_help, \"\", tostr(this) + \":\" + verb_info(this, vrb)[3], @help};";
22:          all_help = {@all_help, "", msg, underline, "", @help};
23:        else
24:          "all_help = {tostr(this) + \":\" + verb_info(this, vrb)[3], @help};";
25:          all_help = {msg, underline, "", @help};
26:        endif
27:      else
28:        helpless = {@helpless, vrb};
29:      endif
30:    endif
31:  endfor
32:  if (helpless)
33:    if (all_help)
34:      all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
35:    else
36:      return {tostr("Sorry, but no help is avilable on ", name = this:name(), "(", this, ").", "  Try `examine ", name, "'.")};
37:    endif
38:  endif
39:  return all_help ? {@all_help, "", "----"} | {};
-----
HELP ON THE RECYCLING CENTER
============================

g*et t*ake
==========

Usage: get/take <thing>
  This allows you to pick up things.

d*rop
=====

Usage: drop <thing>
 This drops things in the room the dropper is in.

gi*ve ha*nd
===========

Usage: give <thing> to <person>
This lets you experience the joy of giving things to others.

@dump-kids
==========

Usage: @dump-kids <parent>
Lists the object hierarchy from parent down

No help found on show-history or request.

----

Last modified Wed Aug 28 06:08:43 2002 PDT by Xeric (#999) (on Waterpoint).
#5:"help_text" this none this
all_help = `this.help_text ! E_PROPNF' || {};
if (typeof(all_help) == STR)
  all_help = {all_help};
endif
helpless = {};
for vrb in (this:help_verbs(player))
  if (typeof(vrb) == LIST)
    vrb = vrb[2];
    if (space = index(vrb, " "))
      vrb = vrb[1..space - 1];
    endif
    vrb = strsub(vrb, "*", "");
  endif
  if (loc = $object_utils:has_verb(this, vrb))
    $command_utils:suspend_if_needed(0);
    help = $code_utils:verb_documentation(loc[1], vrb);
    if (help)
      msg = verb_info(loc[1], vrb)[3];
      underline = $string_utils:space(length(msg), "=");
      if (all_help)
        "all_help = {@all_help, \"\", tostr(this) + \":\" + verb_info(this, vrb)[3], @help};";
        all_help = {@all_help, "", msg, underline, "", @help};
      else
        "all_help = {tostr(this) + \":\" + verb_info(this, vrb)[3], @help};";
        all_help = {msg, underline, "", @help};
      endif
    else
      helpless = {@helpless, vrb};
    endif
  endif
endfor
if (helpless)
  if (all_help)
    all_help = {@all_help, "", "No help found on " + $string_utils:english_list(helpless, "nothing", " or ") + "."};
  else
    return {tostr("Sorry, but no help is avilable on ", name = this:name(), "(", this, ").", "  Try `examine ", name, "'.")};
  endif
endif
return all_help ? {@all_help, "", "----"} | {};
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
.drop_failed_msg         Core-Wizard (#184)    r c    {#69, "do", "You can't ..
.drop_succeeded_msg      Core-Wizard (#184)    r c    {#69, "do", "You drop "..
.odrop_failed_msg        Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
.odrop_succeeded_msg     Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
.otake_succeeded_msg     Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
.otake_failed_msg        Core-Wizard (#184)    r c    ""
.take_succeeded_msg      Core-Wizard (#184)    r c    {#69, "do", "You take "..
.take_failed_msg         Core-Wizard (#184)    r c    {#69, "do", "You can't ..
-------------------------------- finished ---------------------------------
string utilities (#18) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
-------------------------------- finished ---------------------------------
You now have Group Utilities with object number #248 and parent generic utilities (#146).
,aliases                 Core-Wizard (#184)    r c    {"string", "utils"}
-------------------------------- finished ---------------------------------
Your current object is a network utils (#82).
Your current object is now group, some Group Utilities (#248).
,aliases                 Crag (#243)           r c    {"Group Utilities"}
-------------------------------- finished ---------------------------------
Alias "group" added to Group Utilities(#248).
Aliases for Group Utilities(#248) are now {"Group Utilities", "group"}
Alias "utils" added to Group Utilities(#248).
Aliases for Group Utilities(#248) are now {"Group Utilities", "group", "utils"}
Group Utilities (#248)   generic utilities (#146)   root class (#1)
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Fri Nov  8 20:08:13 2002 PST by Xplat (#4014) (on Waterpoint).
#6:"help ?*" any any any
 1:  set_task_perms(callers() ? caller_perms() | player);
 2:  "...this code explicitly relies on being !d in several places...";
 3:  if (index(verb, "?") != 1 || length(verb) <= 1)
 4:    what = $string_utils:trimr(argstr);
 5:  elseif (argstr)
 6:    what = tostr(verb[2..$], " ", $string_utils:trimr(argstr));
 7:  else
 8:    what = verb[2..length(verb)];
 9:  endif
10:  nstr = "";
11:  if (match(what, "^[0-9]+$"))
12:    nstr = what;
13:  elseif (s = match(what, "%[%([0-9]+%)%]$"))
14:    nstr = substitute("%1", s);
15:  endif
16:  if (nstr)
17:    n = tonum(nstr);
18:    if (n >= 1 && n <= (l = length(player.contributed_links)))
19:      jaddress = player.contributed_links[n];
20:    else
21:      player:notify(l ? tostr("Current links range from 1 to ", l, ".") | "There are no help links to follow right now.");
22:      return;
23:    endif
24:  else
25:    "...find a db that claims to know about `what'...";
26:    dblist = $code_utils:help_db_list();
27:    result = $code_utils:help_db_search(what, dblist);
28:    if (result[1] == $failed_help && result[2][1..7] == "failed ")
29:      "... note: all of the last-resort stuff...";
30:      "... is now located on $help:find_topics/get_topic...";
31:      "... Ew, no, it's not, it means that $help has to go mucking about with player:match_object making our nice database into a huge monstrosity.";
32:      o = this:match_help_object(what);
33:      if (valid(o))
34:        result = {$object_help, tostr(o)};
35:      endif
36:    endif
37:    if (player.focus_object != player)
38:      if (valid(player.focus_object))
39:        player:notify("[Changing your focus object to yourself.]");
40:      endif
41:      player:set_focus_object(player);
42:    endif
43:    help = result[1];
44:    topic = result[2];
45:    if (typeof(topic) == STR)
46:      jaddress = $jaddress.resolved_help:from_db_and_topic_and_dblist(help, topic, dblist);
47:    else
48:      jaddress = topic[2];
49:    endif
50:  endif
51:  if (jaddress)
52:    this:receive_document(jaddress, this);
53:  endif
54:  return;
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#243:help any any any" name: "MOO verb: #243:help any any any" type: moo-code content*: "" _data-tag: 38590073112
#$#* 38590073112 content: Crag (#243) does not define a :help verb.  The following code is from its ancestor, generic player (#6).
#$#* 38590073112 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 38590073112 content: "...this code explicitly relies on being !d in several places...";
#$#* 38590073112 content: if (index(verb, "?") != 1 || length(verb) <= 1)
#$#* 38590073112 content:   what = $string_utils:trimr(argstr);
#$#* 38590073112 content: elseif (argstr)
#$#* 38590073112 content:   what = tostr(verb[2..$], " ", $string_utils:trimr(argstr));
#$#* 38590073112 content: else
#$#* 38590073112 content:   what = verb[2..length(verb)];
#$#* 38590073112 content: endif
#$#* 38590073112 content: nstr = "";
#$#* 38590073112 content: if (match(what, "^[0-9]+$"))
#$#* 38590073112 content:   nstr = what;
#$#* 38590073112 content: elseif (s = match(what, "%[%([0-9]+%)%]$"))
#$#* 38590073112 content:   nstr = substitute("%1", s);
#$#* 38590073112 content: endif
#$#* 38590073112 content: if (nstr)
#$#* 38590073112 content:   n = tonum(nstr);
#$#* 38590073112 content:   if (n >= 1 && n <= (l = length(player.contributed_links)))
#$#* 38590073112 content:     jaddress = player.contributed_links[n];
#$#* 38590073112 content:   else
#$#* 38590073112 content:     player:notify(l ? tostr("Current links range from 1 to ", l, ".") | "There are no help links to follow right now.");
#$#* 38590073112 content:     return;
#$#* 38590073112 content:   endif
#$#* 38590073112 content: else
#$#* 38590073112 content:   "...find a db that claims to know about `what'...";
#$#* 38590073112 content:   dblist = $code_utils:help_db_list();
#$#* 38590073112 content:   result = $code_utils:help_db_search(what, dblist);
#$#* 38590073112 content:   if (result[1] == $failed_help && result[2][1..7] == "failed ")
#$#* 38590073112 content:     "... note: all of the last-resort stuff...";
#$#* 38590073112 content:     "... is now located on $help:find_topics/get_topic...";
#$#* 38590073112 content:     "... Ew, no, it's not, it means that $help has to go mucking about with player:match_object making our nice database into a huge monstrosity.";
#$#* 38590073112 content:     o = this:match_help_object(what);
#$#* 38590073112 content:     if (valid(o))
#$#* 38590073112 content:       result = {$object_help, tostr(o)};
#$#* 38590073112 content:     endif
#$#* 38590073112 content:   endif
#$#* 38590073112 content:   if (player.focus_object != player)
#$#* 38590073112 content:     if (valid(player.focus_object))
#$#* 38590073112 content:       player:notify("[Changing your focus object to yourself.]");
#$#* 38590073112 content:     endif
#$#* 38590073112 content:     player:set_focus_object(player);
#$#* 38590073112 content:   endif
#$#* 38590073112 content:   help = result[1];
#$#* 38590073112 content:   topic = result[2];
#$#* 38590073112 content:   if (typeof(topic) == STR)
#$#* 38590073112 content:     jaddress = $jaddress.resolved_help:from_db_and_topic_and_dblist(help, topic, dblist);
#$#* 38590073112 content:   else
#$#* 38590073112 content:     jaddress = topic[2];
#$#* 38590073112 content:   endif
#$#* 38590073112 content: endif
#$#* 38590073112 content: if (jaddress)
#$#* 38590073112 content:   this:receive_document(jaddress, this);
#$#* 38590073112 content: endif
#$#* 38590073112 content: return;
#$#: 38590073112
That object has no verb matching that name + args.
The verb :help is on   Crag(#243)--generic player(#6)
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#6:help any any any" name: "MOO verb: #6:help any any any" type: moo-code content*: "" _data-tag: 171212860513
#$#* 171212860513 content: set_task_perms(callers() ? caller_perms() | player);
#$#* 171212860513 content: "...this code explicitly relies on being !d in several places...";
#$#* 171212860513 content: if (index(verb, "?") != 1 || length(verb) <= 1)
#$#* 171212860513 content:   what = $string_utils:trimr(argstr);
#$#* 171212860513 content: elseif (argstr)
#$#* 171212860513 content:   what = tostr(verb[2..$], " ", $string_utils:trimr(argstr));
#$#* 171212860513 content: else
#$#* 171212860513 content:   what = verb[2..length(verb)];
#$#* 171212860513 content: endif
#$#* 171212860513 content: nstr = "";
#$#* 171212860513 content: if (match(what, "^[0-9]+$"))
#$#* 171212860513 content:   nstr = what;
#$#* 171212860513 content: elseif (s = match(what, "%[%([0-9]+%)%]$"))
#$#* 171212860513 content:   nstr = substitute("%1", s);
#$#* 171212860513 content: endif
#$#* 171212860513 content: if (nstr)
#$#* 171212860513 content:   n = tonum(nstr);
#$#* 171212860513 content:   if (n >= 1 && n <= (l = length(player.contributed_links)))
#$#* 171212860513 content:     jaddress = player.contributed_links[n];
#$#* 171212860513 content:   else
#$#* 171212860513 content:     player:notify(l ? tostr("Current links range from 1 to ", l, ".") | "There are no help links to follow right now.");
#$#* 171212860513 content:     return;
#$#* 171212860513 content:   endif
#$#* 171212860513 content: else
#$#* 171212860513 content:   "...find a db that claims to know about `what'...";
#$#* 171212860513 content:   dblist = $code_utils:help_db_list();
#$#* 171212860513 content:   result = $code_utils:help_db_search(what, dblist);
#$#* 171212860513 content:   if (result[1] == $failed_help && result[2][1..7] == "failed ")
#$#* 171212860513 content:     "... note: all of the last-resort stuff...";
#$#* 171212860513 content:     "... is now located on $help:find_topics/get_topic...";
#$#* 171212860513 content:     "... Ew, no, it's not, it means that $help has to go mucking about with player:match_object making our nice database into a huge monstrosity.";
#$#* 171212860513 content:     o = this:match_help_object(what);
#$#* 171212860513 content:     if (valid(o))
#$#* 171212860513 content:       result = {$object_help, tostr(o)};
#$#* 171212860513 content:     endif
#$#* 171212860513 content:   endif
#$#* 171212860513 content:   if (player.focus_object != player)
#$#* 171212860513 content:     if (valid(player.focus_object))
#$#* 171212860513 content:       player:notify("[Changing your focus object to yourself.]");
#$#* 171212860513 content:     endif
#$#* 171212860513 content:     player:set_focus_object(player);
#$#* 171212860513 content:   endif
#$#* 171212860513 content:   help = result[1];
#$#* 171212860513 content:   topic = result[2];
#$#* 171212860513 content:   if (typeof(topic) == STR)
#$#* 171212860513 content:     jaddress = $jaddress.resolved_help:from_db_and_topic_and_dblist(help, topic, dblist);
#$#* 171212860513 content:   else
#$#* 171212860513 content:     jaddress = topic[2];
#$#* 171212860513 content:   endif
#$#* 171212860513 content: endif
#$#* 171212860513 content: if (jaddress)
#$#* 171212860513 content:   this:receive_document(jaddress, this);
#$#* 171212860513 content: endif
#$#* 171212860513 content: return;
#$#: 171212860513
0 errors.
Verb programmed.
.resolved_help           J. Text (#176)        r c    #172
-------------------------------- finished ---------------------------------
#172:"from_db_and_topic_and_dblist" this none this
 1:  db = tostr(args[1]);
 2:  topic = args[2];
 3:  dblist = args[3];
 4:  dblist_string = $string_utils:print(dblist);
 5:  return {this, {{"db", db}, {"subject", topic}, {"dblist", dblist_string}}};
=> #172 (Resolved Help Address)
#6:"receive_document" (jaddress)
 1:  "receive_document(jaddress)";
 2:  "";
 3:  "temporary version created because Jay's been stalling.";
 4:  "temporary version seems to be living way too long.";
 6:  if (this:gag_p())
 7:    return;
 8:  endif
 9:  show_urls = this:client_option("urls");
10:  if (show_urls)
11:    url = $jaddress:convert_to("url", jaddress, this);
12:    if (url[1] == "/")
13:      url = $network.httpd_prefix + url;
14:    endif
15:    this:client_notify("display-url", {{"url", url}, {"command", "goto"}});
16:    "  this:tell(\"URL: \", url);";
17:  else
18:    if (this.jtext_form == "mcp")
19:      this.contributed_document = {};
20:    endif
21:    this:set_focus_object(this);
22:    $jaddress:send_me(jaddress);
23:    if (this.jtext_form == "mcp" && typeof(this.contributed_document) == LIST && this.contributed_document)
24:      this:client_notify("jtext-document", {}, this.contributed_document);
25:      this.contributed_document = E_NONE;
26:    endif
27:  endif
Searching for core verbs containing the string ":help_text" ...

#30:objectdoc [+d Core-Wizard (#184)]:    return object:help_text();
#92:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#111:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#173:find_topics [+d unknown hacker (#35)]:  elseif (o:help_text())
#173:get_topic [+d unknown hacker (#35)]:  text = o:help_text();
#238:get_topic [+d unknown hacker (#35)]:  return this:to_jtext(group:help_text());
#151:feature [+d unknown hacker (#35)]:  if (typeof(help = feature:help_text()) != LIST)
#123:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#91:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";
#109:help_text [+d unknown hacker (#35)]:  "Usage:  :help_text()";

Total: 10 verbs.
Generic Help Database (#30) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of root class (#1).
-------------------------------- finished ---------------------------------
Objects owned by Crag (from #0 to #248):
  4K #243 Crag                      *[first room]
  1K #245 leather couch             *[first room]
 <1K #244 generic group              [Nowhere]
 <1K #242 Generic Pile               [Crag]
 <1K #248 Group Utilities            [Crag]
-- 5 objects.  Total bytes: 7,147.--------------------------------------------
Your current object is group, some Group Utilities (#248).
Verb added [1] (0).
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#248:maybe_create_group ()" name: "MOO verb: #248:maybe_create_group ()" type: moo-code content*: "" _data-tag: 8824266914
#$#: 8824266914
generic piece of furniture (#81) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic sittable object (#80).
  Location generic room (#3).
-------------------------------- finished ---------------------------------
generic piece of furniture (#81)   generic sittable object (#80)   generic thing (#5)   root class (#1)
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
-------------------------------- finished ---------------------------------
generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   root class (#1)
;verbs(#126) => {"p*ut in*sert d*rop qput", "re*move ta*ke g*et", "put_msg remove_msg", "description", "put_fail_msg remove_fail_msg empty_msg", "can_put_in", "can_reach", "moveto", "acceptable", "sub_in", "can_get_from"}
The generic container(#126) has 1 kid.
generic openable container (#8)
generic openable container (#8) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic container (#126).
  Location generic player (#6).
    #8:look_self                unknown hacker (#35) rxd    this none this
    #8:open                     unknown hacker (#35) rxd    this none none
    #8:"@lock_for_open @lock-for-open" unknown hacker (#35) rxd this with/using any
    #8:is_openable_by           unknown hacker (#35) rxd    this none this
    #8:close                    unknown hacker (#35) rxd    this none none
    #8:"@unlock_for_open @unlock-for-open" unknown hacker (#35) rxd this none none
    #8:set_opened               unknown hacker (#35) rxd    this none this
    #8:@opacity                 unknown hacker (#35) r d    this is any
    #8:set_opaque               unknown hacker (#35) rxd    this none this
    #8:"open_msg close_msg"     unknown hacker (#35) rxd    this none this
    #8:look_in                  unknown hacker (#35) rxd    this none this
    #8:"open_fail_msg empty_msg" unknown hacker (#35) rxd   this none this
    #8:can_put_in               unknown hacker (#35) rxd    this none this
    #8:can_get_from             unknown hacker (#35) rxd    this none this
    #8:is_closable_by           unknown hacker (#35) rxd    this none this
    #8:"sub_open sub_opened"    unknown hacker (#35) rxd    this none this
    #8:"modname_open modname_opened" unknown hacker (#35) rxd this none this
    #8:"set_open_key set_automatic" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
You now have jar with object number #249 and parent generic openable container (#8).
You drop the jar.
The verb :drop is on   leather couch(#245)--generic thing(#5)   jar(#249)--generic container(#126)
generic container (#126) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic containing object (#145).
  Location generic openable container (#8).
  #126:"p*ut in*sert d*rop qput" Core-Wizard (#184)  rxd    any in/inside/into this
  #126:"re*move ta*ke g*et"     Core-Wizard (#184)   rxd    any out of/from inside/from this
  #126:"put_msg remove_msg"     unknown hacker (#35) rxd    this none this
  #126:description              unknown hacker (#35) rxd    this none this
  #126:"put_fail_msg remove_fail_msg empty_msg" unknown hacker (#35) rxd this none this
  #126:can_put_in               Core-Wizard (#184)   rxd    this none this
  #126:can_reach                unknown hacker (#35) rxd    this none this
  #126:moveto                   Core-Wizard (#184)   rxd    this none this
  #126:acceptable               unknown hacker (#35) rxd    this none this
  #126:sub_in                   unknown hacker (#35) rxd    this none this
  #126:can_get_from             unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
You take the jar.
The verb :take is on   Crag(#243)--generic player(#6)   leather couch(#245)--generic sittable object(#80)   jar(#249)--generic container(#126)
-----
`HELP @FIND' NOT FOUND
======================

Sorry, but no help is available on `@find'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

The verb :@find is on   Crag(#243)--generic programmer(#52)
Object #243 does not define that verb, but its ancestor #52 does.
Last modified Thu Jan  4 21:45:21 2001 PST by Xeric (#999) (on Waterpoint).
#52:"@find" any none none
 1:  "'@find #<object>', '@find <player>', '@find :<verb>' '@find .<property>' - Attempt to locate things. Verbs and properties are found on any object in the player's vicinity, and some other places.";
 2:  if (!dobjstr)
 3:    player:tell("Usage: '@find #<object>' or '@find <player>' or '@find :<verb>' or '@find .<property>'.");
 4:    return;
 5:  endif
 6:  if (dobjstr[1] == ":")
 7:    name = dobjstr[2..length(dobjstr)];
 8:    this:find_verb(name);
 9:    return;
10:  elseif (dobjstr[1] == ".")
11:    name = dobjstr[2..length(dobjstr)];
12:    this:find_property(name);
13:    return;
14:  elseif (dobjstr[1] == "#")
15:    target = toobj(dobjstr);
16:    if (!valid(target))
17:      player:tell(target, " does not exist.");
18:    endif
19:  else
20:    target = this:my_match_player(dobjstr);
21:    $command_utils:player_match_result(target, dobjstr);
22:  endif
23:  if (valid(target))
24:    player:tell(target:name("dc#"), " ", target:verb_sub("is"), " ", valid(target.location) ? target.location:name("#i", {"in"}) | "nowhere (#-1)", ".");
25:  endif
-----
VERBS()
=======

Syntax:  verbs (obj <object>)   => list

Returns a list of the names of the verbs defined directly on the given <object>, not inherited from its parent.  If <object> is not valid, then `E_INVARG' is raised.  If the programmer does not have read permission on <object>, then `E_PERM' is raised.

jar (#249)   generic openable container (#8)   generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   root class (#1)
generic event dispatching object (#110) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #110:add_dependent            Core-Wizard (#184)   rxd    this none this
  #110:remove_dependent         Core-Wizard (#184)   rxd    this none this
  #110:"@rm-dep*endent @rmdep*endent" Core-Wizard (#184) r d any out of/from inside/from this
  #110:"@add-dep*endent @adddep*endent" Core-Wizard (#184) r d any at/to this
  #110:initialize               Core-Wizard (#184)   rxd    this none this
  #110:broadcast_event_*        unknown hacker (#35) rx     this none this
  #110:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #110:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
root class (#1) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of ** none ** (#-1).
    #1:initialize               Core-Wizard (#184)   rxd    this none this
    #1:recycle                  Core-Wizard (#184)   rxd    this none this
    #1:set_name                 Core-Wizard (#184)   rxd    this none this
    #1:name                     unknown hacker (#35) rxd    this none this
    #1:"titlec namec"           unknown hacker (#35) rxd    this none this
    #1:set_aliases              Core-Wizard (#184)   rxd    this none this
    #1:match                    unknown hacker (#35) rxd    this none this
    #1:match_object             unknown hacker (#35) rxd    this none this
    #1:set_description          Core-Wizard (#184)   rxd    this none this
    #1:description              unknown hacker (#35) rxd    this none this
    #1:look_self                unknown hacker (#35) rxd    this none this
    #1:notify                   Core-Wizard (#184)   rxd    this none this
    #1:tell                     Core-Wizard (#184)   rxd    this none this
    #1:tell_lines               unknown hacker (#35) rxd    this none this
    #1:accept                   unknown hacker (#35) rxd    this none this
    #1:moveto                   Core-Wizard (#184)   rxd    this none this
    #1:eject                    Core-Wizard (#184)   rxd    this none this
    #1:is_unlocked_for          Core-Wizard (#184)   rxd    this none this
    #1:huh                      Core-Wizard (#184)   rxd    this none this
    #1:set_message              Core-Wizard (#184)   rxd    this none this
    #1:do_examine               Core-Wizard (#184)   rxd    this none this
    #1:examine_key              Core-Wizard (#184)   rxd    this none this
    #1:examine_names            unknown hacker (#35) rxd    this none this
    #1:examine_desc             unknown hacker (#35) rxd    this none this
    #1:examine_contents         Core-Wizard (#184)   rxd    this none this
    #1:examine_verbs            Core-Wizard (#184)   rxd    this none this
    #1:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #1:init_for_core            Core-Wizard (#184)   rxd    this none this
    #1:"contents objects_for_match" unknown hacker (#35) rxd this none this
    #1:examine_verb_ok          Core-Wizard (#184)   rxd    this none this
    #1:is_listening             unknown hacker (#35) rxd    this none this
    #1:"obvious_verbs hidden_verbs help_verbs" Core-Wizard (#184) rxd this none this
    #1:examine_owner            unknown hacker (#35) rxd    this none this
    #1:announce*_all_but        unknown hacker (#35) rxd    this none this
    #1:visible                  unknown hacker (#35) rxd    this none this
    #1:"integrate_room_msg integrate_container_msg" unknown hacker (#35) rxd this none this
    #1:"dname*c iname*c"        unknown hacker (#35) rxd    this none this
    #1:"where_am_i where_are_you" unknown hacker (#35) rxd  this none this
    #1:integrate_in             unknown hacker (#35) rxd    this none this
    #1:"name_for_look_self namec_for_look_self" Core-Wizard (#184) rxd this none this
    #1:look_in                  unknown hacker (#35) rxd    this none this
    #1:integrate_player_msg     unknown hacker (#35) rxd    this none this
    #1:default_editing          unknown hacker (#35) rxd    this none this
    #1:title                    unknown hacker (#35) rxd    this none this
    #1:"name_for_tell_contents namec_for_tell_contents" unknown hacker (#35) rxd this none this
    #1:tell_lines_suspended     unknown hacker (#35) rxd    this none this
    #1:is_hidden_verb           Core-Wizard (#184)   rxd    this none this
    #1:"verb_sub noun_sub adj_sub" unknown hacker (#35) rxd this none this
    #1:exitfunc                 unknown hacker (#35) rxd    this none this
    #1:editing_for              Core-Wizard (#184)   rxd    this none this
    #1:event_*                  unknown hacker (#35) rxd    this none this
    #1:"name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number" unknown hacker (#35) rxd this none this
    #1:add_handler              unknown hacker (#35) rxd    this none this
    #1:_add_handler             unknown hacker (#35) rxd    this none this
    #1:remove_handler           unknown hacker (#35) rxd    this none this
    #1:handlers_event_*         unknown hacker (#35) rxd    this none this
    #1:"ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu" unknown hacker (#35) rxd this none this
    #1:"gender gender_name"     unknown hacker (#35) rxd    this none this
    #1:"set_number set_visible set_integrate_in" unknown hacker (#35) rxd this none this
    #1:number                   unknown hacker (#35) rxd    this none this
    #1:"is_plural are_plural plural" unknown hacker (#35) rxd this none this
    #1:gender_obj               unknown hacker (#35) rxd    this none this
    #1:you                      unknown hacker (#35) rxd    this none this
    #1:modname_d                unknown hacker (#35) rxd    this none this
    #1:modname_i                unknown hacker (#35) rxd    this none this
    #1:modname_c                unknown hacker (#35) rxd    this none this
    #1:modname_p                unknown hacker (#35) rxd    this none this
    #1:base_name                unknown hacker (#35) rxd    this none this
    #1:nominate_for_core        unknown hacker (#35) rxd    this none this
    #1:help_text                unknown hacker (#35) rxd    this none this
    #1:modname_u                unknown hacker (#35) rxd    this none this
    #1:modname_titleize         unknown hacker (#35) rxd    this none this
    #1:empty_message            Core-Wizard (#184)   rxd    this none this
    #1:"empty_message_integrate_room empty_message_integrate_container" unknown hacker (#35) rxd this none this
    #1:modname_in               unknown hacker (#35) rxd    this none this
    #1:acceptable               unknown hacker (#35) rxd    this none this
    #1:modname_v                unknown hacker (#35) rxd    this none this
    #1:modname_#                unknown hacker (#35) rxd    this none this
    #1:modname_l                Core-Wizard (#184)   rxd    this none this
    #1:get_messages             Core-Wizard (#184)   rxd    this none this
    #1:get_message              Core-Wizard (#184)   rxd    this none this
    #1:"set_proper set_unique"  Core-Wizard (#184)   rx     this none this
    #1:call_from_self_*         Core-Wizard (#184)   rxd    this none this
    #1:name_for                 unknown hacker (#35) rxd    this none this
    #1:name_mentioned           unknown hacker (#35) rxd    this none this
    #1:"namebuilder_i namebuilder_d" Core-Wizard (#184) rxd this none this
    #1:"verb_sub_for noun_sub_for" unknown hacker (#35) rxd this none this
    #1:"ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for" unknown hacker (#35) rxd this none this
    #1:match_type_object        unknown hacker (#35) rxd    this none this
    #1:clear_for_rebuild        Crag (#243)          rxd    this none this
    #1:@dump-kids               Crag (#243)          rxd    this none none
-------------------------------- finished ---------------------------------
Object #249 does not define that verb, but its ancestor #126 does.
Last modified Wed Apr 17 13:37:28 2002 PDT by Xplat (#4014) (on Waterpoint).
#126:"p*ut in*sert d*rop qput" any (in/inside/into) this
 1:  quiet = verb == "qput";
 2:  if (!quiet && length(dobjstr) >= 8 && dobjstr[$ - 7..$] == " quietly")
 3:    dobjstr[$ - 7..$] = "";
 4:    quiet = 1;
 5:  endif
 6:  if ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
 7:    return E_INVARG;
 8:  endif
 9:  if (quiet && this.location != player)
10:    quiet = 0;
11:  elseif (quiet && dobj.location != player)
12:    quiet = 0;
13:  endif
14:  if (dobj.location != player && dobj.location != player.location)
15:    if (dobj.location == this)
16:      player:tell(dobj:dnamec(), " ", dobj:verb_sub("is"), " already ", this:name("d", {"in"}), ".");
17:    else
18:      player:tell("You can't reach ", dobj:dname(), ".");
19:    endif
20:    return E_RANGE;
21:  endif
22:  if (this:can_put_in(dobj, dobjstr))
23:    loc = player.location;
24:    dobj:moveto(this);
25:    if (dobj.location == this)
26:      if (quiet)
27:        player:tell($string_utils:pronoun_sub(this:put_msg(), $you, this, loc));
28:      else
29:        $you:say_action(this:put_msg(), player, this, loc);
30:      endif
31:    else
32:      player:tell(this:put_fail_msg());
33:    endif
34:  endif
35:  "Xplat 2002.04.17 -- save player location so as to announce if someone puts emself in a container";
The verb :drop is on   leather couch(#245)--generic thing(#5)   jar(#249)--generic container(#126)
-----
TAKE
====

Syntax:  take <object>
         get <object>
         take <object> from <container>
         get <object> from <container>
         remove <object> from <container>

The first two forms pick up the named object and place it in your inventory.  Sometimes the owner of the object won't allow it to be picked up for some reason.

The remaining forms move the named object from inside the named container (see `help containers'[1]) into your inventory.  As before, sometimes the owner of an object will not allow you to do this.

-----
CONTAINERS
==========

Containers are objects that allow you to store other objects inside them.  The following help topics cover verbs that can be used with containers:

put[1]
      putting an object into a container
remove[2]
      taking an object out of a container

You can make a container by creating a child of the standard container, $container (see `help @create'[3]).

Openable containers may be open or closed, using the verbs `open container' and `close container'.  Openable containers have a separate lock to determine if a player may open them.  See the following help topics:

@lock_for_open[4]
      setting the lock for opening a container
@unlock_for_open[5]
      clearing the lock

You can make an openable container by creating a child of $openable_container.

Containers have a large number of messages which get printed when players act upon them.  See `help container-messages'[6] for more information.

Openable containers have opacity.  See `help @opacity'[7] for more information.

jar (#249) [ readable ]
  Child of generic openable container (#8).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
generic openable container (#8) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic container (#126).
  Location generic player (#6).
    #8:look_self                unknown hacker (#35) rxd    this none this
    #8:open                     unknown hacker (#35) rxd    this none none
    #8:"@lock_for_open @lock-for-open" unknown hacker (#35) rxd this with/using any
    #8:is_openable_by           unknown hacker (#35) rxd    this none this
    #8:close                    unknown hacker (#35) rxd    this none none
    #8:"@unlock_for_open @unlock-for-open" unknown hacker (#35) rxd this none none
    #8:set_opened               unknown hacker (#35) rxd    this none this
    #8:@opacity                 unknown hacker (#35) r d    this is any
    #8:set_opaque               unknown hacker (#35) rxd    this none this
    #8:"open_msg close_msg"     unknown hacker (#35) rxd    this none this
    #8:look_in                  unknown hacker (#35) rxd    this none this
    #8:"open_fail_msg empty_msg" unknown hacker (#35) rxd   this none this
    #8:can_put_in               unknown hacker (#35) rxd    this none this
    #8:can_get_from             unknown hacker (#35) rxd    this none this
    #8:is_closable_by           unknown hacker (#35) rxd    this none this
    #8:"sub_open sub_opened"    unknown hacker (#35) rxd    this none this
    #8:"modname_open modname_opened" unknown hacker (#35) rxd this none this
    #8:"set_open_key set_automatic" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
-----
`HELP $VERB_UTILS' NOT FOUND
============================

Sorry, but no help is available on `$verb_utils'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

You see no "$generic_utils" here.
string utilities (#18)   generic utilities (#146)   root class (#1)
The generic utilities(#146) has 23 kids.
Generic BigList Utilities (#13)   wizard utilities (#24)   math utilities (#26)   set utilities (#27)   sequence utilities (#32)   gender utilities (#38)   time utilities (#39)   object utilities (#47)   lock utilities (#48)   list utilities (#49)   command utilities (#50)   code utilities (#53)   permissions utilities (#130)   building utilities (#19)   string utilities (#18)   English Utilities (#72)   integration utils (#74)   Name Utilities (#177)   Parsing Utilities (#117)   walking utils (#182)   room matching utilities (#190)   Generic Quota Utils Parent (#88)   Group Utilities (#248)
object utilities (#47) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic utilities (#146).
   #47:has_property             Core-Wizard (#184)   rxd    this none this
   #47:all_properties           Core-Wizard (#184)   rxd    this none this
   #47:has_verb                 Core-Wizard (#184)   rxd    this none this
   #47:has_callable_verb        Core-Wizard (#184)   rxd    this none this
   #47:all_verbs                Core-Wizard (#184)   rxd    this none this
   #47:match_verb               Core-Wizard (#184)   rxd    this none this
   #47:isa                      Core-Wizard (#184)   rxd    this none this
   #47:ancestors                Core-Wizard (#184)   rxd    this none this
   #47:"descendants descendents" Core-Wizard (#184)  rxd    this none this
   #47:"descendants_suspended descendents_suspended" Core-Wizard (#184) rxd this none this
   #47:ordered_descendants      Core-Wizard (#184)   rxd    this none this
   #47:branches                 unknown hacker (#35) rxd    this none this
   #47:branches_suspended       Core-Wizard (#184)   rxd    this none this
   #47:leaves                   unknown hacker (#35) rxd    this none this
   #47:leaves_suspended         Core-Wizard (#184)   rxd    this none this
   #47:contains                 Core-Wizard (#184)   rxd    this none this
   #47:all_contents             Core-Wizard (#184)   rxd    this none this
   #47:findable_properties      Core-Wizard (#184)   rxd    this none this
   #47:owned_properties         Core-Wizard (#184)   rxd    this none this
   #47:property_conflicts       Core-Wizard (#184)   rx     this none this
   #47:descendants_with_property_suspended Core-Wizard (#184) rx this none this
   #47:locations                Core-Wizard (#184)   rxd    this none this
   #47:"fertile_descendants fertile_descendents" Core-Wizard (#184) rxd this none this
   #47:all_properties_suspended Core-Wizard (#184)   rxd    this none this
   #47:match_verbs(new)         unknown hacker (#35) rx     this none this
   #47:connected                unknown hacker (#35) rxd    this none this
   #47:all_contents_bfs         unknown hacker (#35) rxd    this none this
   #47:match_verbs_named        Core-Wizard (#184)   rxd    this none this
   #47:check_for_legacy         unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
jar (#249) [ readable ]
  Child of generic openable container (#8).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Your current object is now jar (#249).
#-1:Input to EVAL, line 4:  Verb not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> {"initialize", "recycle", "set_name", "name", "titlec namec", "set_aliases", "match", "match_object", "set_description", "description", "look_self", "notify", "tell", "tell_lines", "accept", "moveto", "eject", "is_unlocked_for", "huh", "set_message", "do_examine", "examine_key", "examine_names", "examine_desc", "examine_contents", "examine_verbs", "room_announce*_all_but", "init_for_core", "contents objects_for_match", "examine_verb_ok", "is_listening", "obvious_verbs hidden_verbs help_verbs", "examine_owner", "announce*_all_but", "visible", "integrate_room_msg integrate_container_msg", "dname*c iname*c", "where_am_i where_are_you", "integrate_in", "name_for_look_self namec_for_look_self", "look_in", "integrate_player_msg", "default_editing", "title", "name_for_tell_contents namec_for_tell_contents", "tell_lines_suspended", "is_hidden_verb", "verb_sub noun_sub adj_sub", "exitfunc", "editing_for", "event_*", "name_and_number iname_and_number dname_and_number namec_and_number inamec_and_number dnamec_and_number", "add_handler", "_add_handler", "remove_handler", "handlers_event_*", "ps*c po*c pr*c pp*c pq*c psu pou pru ppu pqu", "gender gender_name", "set_number set_visible set_integrate_in", "number", "is_plural are_plural plural", "gender_obj", "you", "modname_d", "modname_i", "modname_c", "modname_p", "base_name", "nominate_for_core", "help_text", "modname_u", "modname_titleize", "empty_message", "empty_message_integrate_room empty_message_integrate_container", "modname_in", "acceptable", "modname_v", "modname_#", "modname_l", "get_messages", "get_message", "set_proper set_unique", "call_from_self_*", "name_for", "name_mentioned", "namebuilder_i namebuilder_d", "verb_sub_for noun_sub_for", "ps_for psc_for po_for poc_for pr_for prc_for pp_for ppc_for pq_for pqc_for psu_for pou_for pru_for ppu_for pqu_for", "match_type_object", "clear_for_rebuild", "@dump-kids", "add_dependent", "remove_dependent", "@rm-dep*endent @rmdep*endent", "@add-dep*endent @adddep*endent", "initialize", "broadcast_event_*", "dependents dependents_event_*", "init_for_core", "enterfunc", "exitfunc", "tell_contents", "empty_msg in_msg", "in_name", "dependents dependents_event_*", "look_self", "look_in", "visible_of", "contents_for_integration", "ok_to_integrate", "acceptable", "in_namec", "modname_in", "p*ut in*sert d*rop qput", "re*move ta*ke g*et", "put_msg remove_msg", "description", "put_fail_msg remove_fail_msg empty_msg", "can_put_in", "can_reach", "moveto", "acceptable", "sub_in", "can_get_from", "look_self", "open", "@lock_for_open @lock-for-open", "is_openable_by", "close", "@unlock_for_open @unlock-for-open", "set_opened", "@opacity", "set_opaque", "open_msg close_msg", "look_in", "open_fail_msg empty_msg", "can_put_in", "can_get_from", "is_closable_by", "sub_open sub_opened", "modname_open modname_opened", "set_open_key set_automatic"}
jar (#249)   generic openable container (#8)   generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   root class (#1)
generic event dispatching object (#110) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #110:add_dependent            Core-Wizard (#184)   rxd    this none this
  #110:remove_dependent         Core-Wizard (#184)   rxd    this none this
  #110:"@rm-dep*endent @rmdep*endent" Core-Wizard (#184) r d any out of/from inside/from this
  #110:"@add-dep*endent @adddep*endent" Core-Wizard (#184) r d any at/to this
  #110:initialize               Core-Wizard (#184)   rxd    this none this
  #110:broadcast_event_*        unknown hacker (#35) rx     this none this
  #110:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #110:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Parent changed.
generic containing object (#145) [ readable fertile ]
  Owned by unknown hacker (#35).
  Child of generic event dispatching object (#110).
  Location generic container (#126).
  #145:enterfunc                Core-Wizard (#184)   rxd    this none this
  #145:exitfunc                 Core-Wizard (#184)   rxd    this none this
  #145:tell_contents            unknown hacker (#35) rxd    this none this
  #145:"empty_msg in_msg"       unknown hacker (#35) rx     this none this
  #145:in_name                  unknown hacker (#35) rxd    this none this
  #145:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #145:look_self                unknown hacker (#35) rxd    this none this
  #145:look_in                  unknown hacker (#35) rxd    this none this
  #145:visible_of               unknown hacker (#35) rxd    this none this
  #145:contents_for_integration unknown hacker (#35) rxd    this none this
  #145:ok_to_integrate          unknown hacker (#35) rxd    this none this
  #145:acceptable               unknown hacker (#35) rxd    this none this
  #145:in_namec                 unknown hacker (#35) rxd    this none this
  #145:modname_in               unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
You drop the jar.
You take the jar.
The verb :take is on   Crag(#243)--generic player(#6)   leather couch(#245)--generic sittable object(#80)
Object #243 does not define that verb, but its ancestor #6 does.
#6:"g*et take" this none none
 1:  player:tell("This is not a pick-up joint!");
 2:  this:tell(player:dnamec(), " tried to pick you up!");
The verb :drop is on   leather couch(#245)--generic thing(#5)
=> #-1 <$nothing>
Moved.
You drop the root class.
The root class disappears suddenly for parts unknown, moved by Crag.
Moved.
#-1:Input to EVAL, line 4:  Property not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
No such verb, "do_command"
-------------------------------- finished ---------------------------------
    #0:server_started           Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Tue Feb 27 19:55:25 2001 PST by Xeric (#999) (on Waterpoint).
#0:"server_started" this none this
 1:  if (callers())
 2:    return;
 3:  else
 4:    $last_restart_time = time();
 5:    $shutdown_message = "";
 6:    return $startup:server_started();
 7:  endif
jar (#249) [ readable ]
  Child of generic containing object (#145).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
The verb :drop is on   leather couch(#245)--generic thing(#5)
The leather couch disappears suddenly for parts unknown, moved by Crag.
Moved.
The verb :drop is nowhere to be found.
You drop the jar.
You take the jar.
Object #70 does not define that verb, but its ancestor #1 does.
#1:"huh" this none this
 1:  cp = caller_perms();
 2:  if (!valid(cp))
 3:    if (cp == $nothing)
 4:      cp = player;
 5:    else
 6:      $error:raise(E_PERM);
 7:    endif
 8:  endif
 9:  set_task_perms(cp);
10:  $command_utils:do_huh(verb, args);
#50:"do_huh" this none this
 1:  ":do_huh(verb,args)  what :huh should do by default.";
 2:  set_task_perms(cp = caller_perms());
 3:  verb = args[1];
 4:  args = args[2];
 5:  bad = "That is not a valid command";
 6:  notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
 7:  if (valid(player.location))
 8:    dobj = player.location:match_object(dobjstr);
 9:    iobj = player.location:match_object(iobjstr);
10:  endif
11:  if (player:my_huh(verb, args))
12:    "... the player found something funky to do ...";
13:  elseif (caller:here_huh(verb, args))
14:    "... the room found something funky to do ...";
15:  elseif (this:extra_huh(verb, args))
16:    "... we found something on dobj or iobj";
17:  elseif (player:last_huh(verb, args))
18:    "... player's second round found something to do ...";
19:    "elseif ($mistake_tracker:handle_failed_command(player, verb, argstr, dobjstr, prepstr, iobjstr, dobj, iobj))";
20:    "... experimental mistake learner found something to do ...";
21:  elseif (dobj == $ambiguous_match)
22:    "... from here on, it's all error-reporting.";
23:    if (iobj == $ambiguous_match)
24:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
25:    else
26:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" is an ambiguous name)."));
27:    endif
28:  elseif (iobj == $ambiguous_match)
29:    player:(notify)(tostr(bad, " (\"", iobjstr, "\" is an ambiguous name)."));
30:  else
31:    player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args)) || player:(notify)(bad + ".");
32:  endif
Feature Name
------- ----
#67     Stage-Talk Feature
#68     Thinking Feature
------- ----
Usage:  @add-feature <object>
Available features not already in your feature list include:
Community Group Commands                login watcher mark 2
documentation feature                   
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Sat Jun 30 13:32:30 2001 PDT by Xplat (#4014) (on Waterpoint).
#6:"my_huh" this none this
 1:  "Extra parsing of player commands.  Called by $command_utils:do_huh.";
 2:  "This version of my_huh just handles features.";
 3:  if (!$perm_utils:controls(caller_perms(), this))
 4:    return E_PERM;
 5:  endif
 6:  "verb - obvious                 pass - would be args";
 7:  "plist - list of prepspecs that this command matches";
 8:  "dlist and ilist - likewise for dobjspecs, iobjspecs";
 9:  verb = args[1];
10:  if (!verb || $string_utils:is_numeric(verb))
11:    return 0;
12:  endif
13:  pass = args[2];
14:  plist = {"any", prepstr ? $code_utils:full_prep(prepstr) | "none"};
15:  dlist = dobjstr ? {"any"} | {"none", "any"};
16:  ilist = iobjstr ? {"any"} | {"none", "any"};
17:  focus = this.focus_object;
18:  if (`focus:match_command(verb, dlist, plist, ilist) ! E_VERBNF, E_INVIND')
19:    set_task_perms(this);
20:    focus:(verb)(@pass);
21:    return 1;
22:  endif
23:  for fobj in (this:features())
24:    try
25:      match = fobj:match_command(verb, dlist, plist, ilist);
26:    except (E_VERBNF, E_INVIND)
27:      this:remove_feature(fobj);
28:    endtry
29:    if (match)
30:      set_task_perms(this);
31:      fobj:(verb)(@pass);
32:      return 1;
33:    endif
34:    if ($command_utils:running_out_of_time())
35:      player:tell("You have too many features.  Parsing your command runs out of ticks while checking ", fobj:name(), " (", fobj, ").");
36:      return 1;
37:    endif
38:  endfor
#50:"do_huh" this none this
 1:  ":do_huh(verb,args)  what :huh should do by default.";
 2:  set_task_perms(cp = caller_perms());
 3:  verb = args[1];
 4:  args = args[2];
 5:  bad = "That is not a valid command";
 6:  notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
 7:  if (valid(player.location))
 8:    dobj = player.location:match_object(dobjstr);
 9:    iobj = player.location:match_object(iobjstr);
10:  endif
11:  if (player:my_huh(verb, args))
12:    "... the player found something funky to do ...";
13:  elseif (caller:here_huh(verb, args))
14:    "... the room found something funky to do ...";
15:  elseif (this:extra_huh(verb, args))
16:    "... we found something on dobj or iobj";
17:  elseif (player:last_huh(verb, args))
18:    "... player's second round found something to do ...";
19:    "elseif ($mistake_tracker:handle_failed_command(player, verb, argstr, dobjstr, prepstr, iobjstr, dobj, iobj))";
20:    "... experimental mistake learner found something to do ...";
21:  elseif (dobj == $ambiguous_match)
22:    "... from here on, it's all error-reporting.";
23:    if (iobj == $ambiguous_match)
24:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
25:    else
26:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" is an ambiguous name)."));
27:    endif
28:  elseif (iobj == $ambiguous_match)
29:    player:(notify)(tostr(bad, " (\"", iobjstr, "\" is an ambiguous name)."));
30:  else
31:    player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args)) || player:(notify)(bad + ".");
32:  endif
That object does not define that verb.
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Thu Jul 24 10:07:00 2008 PDT by Xplat (#4014) (on Waterpoint).
#3:"here_huh" this none this
 1:  ":here_huh(verb,args)  -- room-specific :huh processing.  This should return 1 if it finds something interesting to do and 0 otherwise; see $command_utils:do_huh.";
 2:  "For the generic room, we check for the case of the caller specifying an exit for which a corresponding verb was never defined.";
 3:  "If that fails, we check to see if the verb is defined on an exit or other object which can match with player:my_match_object() in the room.";
 4:  set_task_perms(caller_perms());
 5:  verb = args[1];
 6:  if (args[2] || $failed_match == (exit = this:match_exit(verb)))
 7:    "... okay, it's not an exit.  see if it's a verb defined on an exit ...";
 8:    if ($server_options.support_numeric_verbname_strings && (!verb || $string_utils:is_numeric(verb)))
 9:      "don't allow numeric verbs below, cuz it's not matching on verb name";
10:      "splat 2002.01.29 -- don't allow null verbs either, although you can't enter them anyway at the moment";
11:      player:tell("That is not a valid command.");
12:      return 1;
13:    endif
14:    dobj = this:match_object(dobjstr);
15:    iobj = this:match_object(iobjstr);
16:    for o in ({this, dobj, iobj})
17:      if (typeof(o) == OBJ && valid(o) && (where = $object_utils:has_callable_verb(o, verb)))
18:        vargs = verb_args(where[1], verb);
19:        if (vargs[2] == "any" || (!prepstr && vargs[2] == "none") || index("/" + vargs[2] + "/", "/" + prepstr + "/"))
20:          if (vargs[1] == "any" || (!dobjstr && vargs[1] == "none") || (dobj == o && vargs[1] == "this"))
21:            if (vargs[3] == "any" || (!iobjstr && vargs[3] == "none") || (iobj == o && vargs[3] == "this"))
22:              o:(verb)(@args[2]);
23:              return 1;
24:            endif
25:          endif
26:        endif
27:      endif
28:    endfor
29:    "... okay it's not a verb defined on an exit either.  we give up ...";
30:    return 0;
31:  elseif (valid(exit))
32:    exit:invoke();
33:  elseif (exit == $ambiguous_match)
34:    "... ambiguous exit ...";
35:    player:tell("Which direction `", verb, "' do you mean?");
36:  endif
37:  return 1;
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Thu Jul 24 10:07:00 2008 PDT by Xplat (#4014) (on Waterpoint).
#3:"here_huh" this none this
 1:  ":here_huh(verb,args)  -- room-specific :huh processing.  This should return 1 if it finds something interesting to do and 0 otherwise; see $command_utils:do_huh.";
 2:  "For the generic room, we check for the case of the caller specifying an exit for which a corresponding verb was never defined.";
 3:  "If that fails, we check to see if the verb is defined on an exit or other object which can match with player:my_match_object() in the room.";
 4:  set_task_perms(caller_perms());
 5:  verb = args[1];
 6:  if (args[2] || $failed_match == (exit = this:match_exit(verb)))
 7:    "... okay, it's not an exit.  see if it's a verb defined on an exit ...";
 8:    if ($server_options.support_numeric_verbname_strings && (!verb || $string_utils:is_numeric(verb)))
 9:      "don't allow numeric verbs below, cuz it's not matching on verb name";
10:      "splat 2002.01.29 -- don't allow null verbs either, although you can't enter them anyway at the moment";
11:      player:tell("That is not a valid command.");
12:      return 1;
13:    endif
14:    dobj = this:match_object(dobjstr);
15:    iobj = this:match_object(iobjstr);
16:    for o in ({this, dobj, iobj})
17:      if (typeof(o) == OBJ && valid(o) && (where = $object_utils:has_callable_verb(o, verb)))
18:        vargs = verb_args(where[1], verb);
19:        if (vargs[2] == "any" || (!prepstr && vargs[2] == "none") || index("/" + vargs[2] + "/", "/" + prepstr + "/"))
20:          if (vargs[1] == "any" || (!dobjstr && vargs[1] == "none") || (dobj == o && vargs[1] == "this"))
21:            if (vargs[3] == "any" || (!iobjstr && vargs[3] == "none") || (iobj == o && vargs[3] == "this"))
22:              o:(verb)(@args[2]);
23:              return 1;
24:            endif
25:          endif
26:        endif
27:      endif
28:    endfor
29:    "... okay it's not a verb defined on an exit either.  we give up ...";
30:    return 0;
31:  elseif (valid(exit))
32:    exit:invoke();
33:  elseif (exit == $ambiguous_match)
34:    "... ambiguous exit ...";
35:    player:tell("Which direction `", verb, "' do you mean?");
36:  endif
37:  return 1;
Object #70 does not define that verb, but its ancestor #3 does.
Last modified Thu Jul 24 10:07:00 2008 PDT by Xplat (#4014) (on Waterpoint).
#3:"here_huh" this none this
 1:  ":here_huh(verb,args)  -- room-specific :huh processing.  This should return 1 if it finds something interesting to do and 0 otherwise; see $command_utils:do_huh.";
 2:  "For the generic room, we check for the case of the caller specifying an exit for which a corresponding verb was never defined.";
 3:  "If that fails, we check to see if the verb is defined on an exit or other object which can match with player:my_match_object() in the room.";
 4:  set_task_perms(caller_perms());
 5:  verb = args[1];
 6:  if (args[2] || $failed_match == (exit = this:match_exit(verb)))
 7:    "... okay, it's not an exit.  see if it's a verb defined on an exit ...";
 8:    if ($server_options.support_numeric_verbname_strings && (!verb || $string_utils:is_numeric(verb)))
 9:      "don't allow numeric verbs below, cuz it's not matching on verb name";
10:      "splat 2002.01.29 -- don't allow null verbs either, although you can't enter them anyway at the moment";
11:      player:tell("That is not a valid command.");
12:      return 1;
13:    endif
14:    dobj = this:match_object(dobjstr);
15:    iobj = this:match_object(iobjstr);
16:    for o in ({this, dobj, iobj})
17:      if (typeof(o) == OBJ && valid(o) && (where = $object_utils:has_callable_verb(o, verb)))
18:        vargs = verb_args(where[1], verb);
19:        if (vargs[2] == "any" || (!prepstr && vargs[2] == "none") || index("/" + vargs[2] + "/", "/" + prepstr + "/"))
20:          if (vargs[1] == "any" || (!dobjstr && vargs[1] == "none") || (dobj == o && vargs[1] == "this"))
21:            if (vargs[3] == "any" || (!iobjstr && vargs[3] == "none") || (iobj == o && vargs[3] == "this"))
22:              o:(verb)(@args[2]);
23:              return 1;
24:            endif
25:          endif
26:        endif
27:      endif
28:    endfor
29:    "... okay it's not a verb defined on an exit either.  we give up ...";
30:    return 0;
31:  elseif (valid(exit))
32:    exit:invoke();
33:  elseif (exit == $ambiguous_match)
34:    "... ambiguous exit ...";
35:    player:tell("Which direction `", verb, "' do you mean?");
36:  endif
37:  return 1;
=> #249 (jar)
#50:"do_huh" this none this
 1:  ":do_huh(verb,args)  what :huh should do by default.";
 2:  set_task_perms(cp = caller_perms());
 3:  verb = args[1];
 4:  args = args[2];
 5:  bad = "That is not a valid command";
 6:  notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
 7:  if (valid(player.location))
 8:    dobj = player.location:match_object(dobjstr);
 9:    iobj = player.location:match_object(iobjstr);
10:  endif
11:  if (player:my_huh(verb, args))
12:    "... the player found something funky to do ...";
13:  elseif (caller:here_huh(verb, args))
14:    "... the room found something funky to do ...";
15:  elseif (this:extra_huh(verb, args))
16:    "... we found something on dobj or iobj";
17:  elseif (player:last_huh(verb, args))
18:    "... player's second round found something to do ...";
19:    "elseif ($mistake_tracker:handle_failed_command(player, verb, argstr, dobjstr, prepstr, iobjstr, dobj, iobj))";
20:    "... experimental mistake learner found something to do ...";
21:  elseif (dobj == $ambiguous_match)
22:    "... from here on, it's all error-reporting.";
23:    if (iobj == $ambiguous_match)
24:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
25:    else
26:      player:(notify)(tostr(bad, " (\"", dobjstr, "\" is an ambiguous name)."));
27:    endif
28:  elseif (iobj == $ambiguous_match)
29:    player:(notify)(tostr(bad, " (\"", iobjstr, "\" is an ambiguous name)."));
30:  else
31:    player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args)) || player:(notify)(bad + ".");
32:  endif
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Mon Aug 26 10:10:51 2002 PDT by Xplat (#4014) (on Waterpoint).
#6:"last_huh" this none this
 1:  ":last_huh(verb, args) final attempt to parse a command...";
 2:  "WIZARDLY";
 3:  set_task_perms(caller_perms());
 4:  {verb, args} = args;
 5:  if (!(caller in {this, $command_utils}))
 6:    raise(E_PERM);
 7:  elseif (verb[1] == "@" && prepstr == "is")
 8:    "... set or show _msg property ...";
 9:    set_task_perms(player);
10:    $last_huh:(verb)(@args);
11:  elseif (verb[1] != "@" && `verb_info($last_huh, verb) ! E_VERBNF')
12:    "should $last_huh go first or not?  if not we break `drop' (you drop non-$things into a container!) but if so we break auto-intuiting `take ball [from box]'.  for now I'd like to be able to drop things, sooooo";
13:    $last_huh:(verb)(@args);
14:  elseif (verb[length(verb)] == ",")
15:    "directed speech ala Infocom";
16:    if (!valid(stage = $feature:match_type_object("stage")))
17:      return 0;
18:    endif
19:    call = "`" + verb[1..length(verb) - 1];
20:    call = strsub(call, ",", " ");
21:    stage:(call)(argstr);
22:  elseif (this:parse_option("guess_object"))
23:    "given a command like `remove frob', which hasn't matched for frob as `this', try to match it for frob as `any' by choosing an intuitive `from this'.";
24:    preps = prepstr ? {"any", $code_utils:full_prep(prepstr)} | (iobjstr ? {"none"} | {});
25:    for o in (this:dwim_objects())
26:      for where in ($object_utils:match_verbs_named(o, verb) || {})
27:        if (!`spec = verb_args(where[1], where[2]) ! E_PERM')
28:          continue;
29:        elseif (spec[2] == "none" && spec[3] != "none")
30:        elseif (preps && !(spec[2] in preps))
31:        elseif (spec[1] == "this" && !dobjstr)
32:          dobj = o;
33:          dobjstr = o.name;
34:          prepstr = prepstr || (spec[2] == "any" ? "in" | $code_utils:short_prep(spec[2]));
35:          this:parse_option("report") && this:notify("[" + dobj:dname() + "]");
36:          if (typeof(where[2]) != STR)
37:            force_input(this, x = $string_utils:from_words({verb, dobj, @prepstr ? {prepstr, iobjstr} | {}}), 1);
38:          else
39:            o:(verb)(@args);
40:          endif
41:          return 1;
42:        elseif (spec[1] == "none" && dobjstr)
43:        elseif (dobjstr || preps || spec[1] == "none" && spec[3] == "this" && !iobjstr)
44:          iobj = o;
45:          iobjstr = o.name;
46:          prepstr = prepstr || (spec[2] == "any" ? "in" | $code_utils:short_prep(spec[2]));
47:          this:parse_option("report") && this:notify(tostr("[", prepstr ? prepstr + " " | "", iobj:dname(), "]"));
48:          if (typeof(where[2]) != STR)
49:            force_input(this, x = $string_utils:from_words({verb, dobjstr, prepstr, iobj}), 1);
50:          else
51:            o:(verb)(@args);
52:          endif
53:          return 1;
54:        endif
55:      endfor
56:      if (ticks_left() < 10000)
57:        break o;
58:      endif
59:    endfor
60:    return 0;
61:  else
62:    return 0;
63:  endif
64:  return 1;
65:  "Copied from Ben's DWIM Player Class (#500):last_huh by James (#316) Wed Dec 27 18:02:38 2000 EST";
Player Last_huh Verbs (#11) [ readable ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
   #11:@*                       Core-Wizard (#184)   rxd    this none this
   #11:"give hand"              Core-Wizard (#184)   rxd    this none this
   #11:"get take"               Core-Wizard (#184)   rxd    this none this
   #11:drop                     Core-Wizard (#184)   rxd    this none this
   #11:QUIT                     Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
#11:"drop" this none this
 1:  "{last_huh}  drop/throw any";
 2:  "a drop \"verb\" that works for non-$things.";
 3:  set_task_perms(caller_perms());
 4:  if (!valid(dobj) && prepstr)
 5:    dobj = player.location:match_object(dobjstr = argstr);
 6:  endif
 7:  if (dobj == $nothing)
 8:    player:tell($string_utils:capitalize(verb), " what?");
 9:  elseif ($command_utils:object_match_failed(dobj, dobjstr))
10:    "...lose...";
11:  elseif (dobj.location != player)
12:    player:tell("You don't have that.");
13:  elseif (!player.location:accept(dobj))
14:    player:tell("You can't drop that here.");
15:  else
16:    dobj:moveto(player.location);
17:    if (dobj.location == player.location)
18:      player:tell("You ", verb[1] == "d" ? "drop " | "throw away ", dobj:dname(), ".");
19:      player.location:announce(player:dnamec(), " ", verb[1] == "d" ? player:verb_sub("drops") | player:verb_sub("throws") + " away", " ", dobj:iname(), ".");
20:    else
21:      player:tell_lines("You can't seem to drop that here.");
22:    endif
23:  endif
#11:"QUIT" this none this
 1:  if (strcmp(verb, "QUIT"))
 2:    "Not a TinyMU* refugee.";
 3:    player:notify("I don't understand that.");
 4:  else
 5:    "TinyMU* refugee tried to use all-caps bogus server command.  Why don't we just let it work?  Idunno, tradition, maybe.";
 6:    player:notify("Use `@quit' to logout.");
 7:  endif
The verb :@quit is on   Crag(#243)--generic player(#6)
Object #243 does not define that verb, but its ancestor #6 does.
Last modified Fri Jan 19 00:17:44 2001 PST by Xythian (#199) (on Waterpoint (for core)).
#6:"@quit" none none none
 1:  boot_player(player);
The verb :quit is nowhere to be found.
Alias quit added to verb generic player(#6):@quit
Verbname is now generic player(#6):"@quit quit"
Verb #11:QUIT [5] {this none this} removed.
=> 0
jar (#249) [ readable ]
  Child of generic containing object (#145).
  Location Crag (#243).
-------------------------------- finished ---------------------------------
Parent changed.
Verb added [1] (0).
Warning:  Verb `foo' already defined on that object.
Verb added [2] (1).
That object does not define that verb.
-----
@EDIT
=====

Usage:  @edit <object>:<verb-name> [<args>]
        @edit <object>.<prop-name>
        @edit <object>

Enter the appropriate editor for the specified target.  The first form is handled by the verb editor (and is available only to programmers); the second is handled by either the note editor or the list editor; and the third is handled in an object-dependent way.  (For notes, this translates to editing <object>.text; for most other objects, it translates to editing <object>.description.)

Verb name changed.
jar (#249) [ readable ]
  Child of generic container (#126).
  Location Crag (#243).
  #249:foo2                     Crag (#243)          r d    this none none
  #249:foo                      Crag (#243)          r d    any in/inside/into this
-------------------------------- finished ---------------------------------
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#249:foo2 this none none" name: "MOO verb: #249:foo2 this none none" type: moo-code content*: "" _data-tag: 213368740815
#$#: 213368740815
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#249:foo any in this" name: "MOO verb: #249:foo any in this" type: moo-code content*: "" _data-tag: 190439216316
#$#: 190439216316
Error programming jar:foo[2](1).
Line 1:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
You foo the jar.
Verb name changed.
You foo the jar.
You foo  in the jar.
You foo yourself in the jar.
jar (#249)   generic container (#126)   generic containing object (#145)   generic event dispatching object (#110)   root class (#1)
generic event dispatching object (#110) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  #110:add_dependent            Core-Wizard (#184)   rxd    this none this
  #110:remove_dependent         Core-Wizard (#184)   rxd    this none this
  #110:"@rm-dep*endent @rmdep*endent" Core-Wizard (#184) r d any out of/from inside/from this
  #110:"@add-dep*endent @adddep*endent" Core-Wizard (#184) r d any at/to this
  #110:initialize               Core-Wizard (#184)   rxd    this none this
  #110:broadcast_event_*        unknown hacker (#35) rx     this none this
  #110:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
  #110:init_for_core            Core-Wizard (#184)   rxd    this none this
-------------------------------- finished ---------------------------------
The generic event dispatching object(#110) has 2 kids.
generic exit (#7)   generic containing object (#145)
generic room (#3) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic containing object (#145).
    #3:confunc                  unknown hacker (#35) rxd    this none this
    #3:disfunc                  unknown hacker (#35) rxd    this none this
    #3:say                      unknown hacker (#35) rxd    any any any
    #3:emote                    unknown hacker (#35) rxd    any any any
    #3:announce                 unknown hacker (#35) rxd    this none this
    #3:"match_exit match_entrance" unknown hacker (#35) rxd this none this
    #3:add_exit                 Core-Wizard (#184)   rxd    this none this
    #3:tell_contents            unknown hacker (#35) rxd    this none this
    #3:@exits                   unknown hacker (#35) rxd    any none none
    #3:add_entrance             Core-Wizard (#184)   rxd    this none this
    #3:bless_for_entry          Core-Wizard (#184)   rxd    this none this
    #3:@entrances               Core-Wizard (#184)   r d    none none none
    #3:go                       Core-Wizard (#184)   rxd    any none none
    #3:l*ook                    unknown hacker (#35) rxd    any any any
    #3:announce_all             unknown hacker (#35) rxd    this none this
    #3:announce_all_but         unknown hacker (#35) rxd    this none this
    #3:enterfunc                Core-Wizard (#184)   rxd    this none this
    #3:remove_exit              Core-Wizard (#184)   rxd    this none this
    #3:remove_entrance          Core-Wizard (#184)   rxd    this none this
    #3:"@add-exit @addexit"     Core-Wizard (#184)   r d    any none none
    #3:"@add-entrance @addentrance" Core-Wizard (#184) r d  any none none
    #3:recycle                  Core-Wizard (#184)   rxd    this none this
    #3:"e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down" unknown hacker (#35) rxd none none none
    #3:@eject                   Core-Wizard (#184)   r d    any none none
    #3:"ejection_msg oejection_msg victim_ejection_msg" unknown hacker (#35) rxd this none this
    #3:accept_for_abode         unknown hacker (#35) rxd    this none this
    #3:@resident*s              Core-Wizard (#184)   r d    any none none
    #3:@remove-exit             Core-Wizard (#184)   r d    any none none
    #3:@remove-entrance         Core-Wizard (#184)   r d    any none none
    #3:moveto                   Core-Wizard (#184)   rxd    this none this
    #3:who_location_msg         unknown hacker (#35) rxd    this none this
    #3:"exits entrances"        Core-Wizard (#184)   rxd    this none this
    #3:obvious_exits            unknown hacker (#35) rxd    this none this
    #3:here_huh                 Core-Wizard (#184)   rxd    this none this
    #3:room_announce*_all_but   unknown hacker (#35) rxd    this none this
    #3:examine_commands_ok      unknown hacker (#35) rxd    this none this
    #3:examine_key              Core-Wizard (#184)   rxd    this none this
    #3:examine_contents         unknown hacker (#35) rxd    this none this
    #3:ok_to_integrate          unknown hacker (#35) rxd    this none this
    #3:look_self                unknown hacker (#35) rxd    this none this
    #3:description              unknown hacker (#35) rxd    this none this
    #3:where_am_i               unknown hacker (#35) rxd    this none this
    #3:"housekeeper_msg housekeeper_deposit_msg" unknown hacker (#35) rxd this none this
    #3:look_in                  unknown hacker (#35) rxd    this none this
    #3:namec_for_look_self      unknown hacker (#35) rxd    this none this
    #3:set_integrate_unknown_objects unknown hacker (#35) rx this none this
    #3:"dependents dependents_event_*" unknown hacker (#35) rxd this none this
    #3:reconfunc                unknown hacker (#35) rxd    this none this
    #3:sit                      unknown hacker (#35) rxd    none none none
    #3:stand                    unknown hacker (#35) r d    none none none
    #3:topic_msg                unknown hacker (#35) rxd    this none this
    #3:topic                    unknown hacker (#35) r d    any any any
    #3:set_topic_sign           topic-owner (#181)   rxd    this none this
    #3:event_really_disconnected Core-Wizard (#184)  rxd    this none this
    #3:match_type_object        unknown hacker (#35) rxd    this none this
    #3:party_location           unknown hacker (#35) rxd    this none this
    #3:init_for_core            Core-Wizard (#184)   rxd    this none this
    #3:acceptable               Core-Wizard (#184)   rxd    this none this
    #3:is_public_location       Core-Wizard (#184)   rxd    this none this
    #3:objects_for_match        unknown hacker (#35) rxd    this none this
    #3:set_walking_cost         unknown hacker (#35) rxd    this none this
    #3:walking_cost             unknown hacker (#35) rxd    this none this
    #3:"can_add_exit can_add_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_remove_exit can_remove_entrance" Core-Wizard (#184) rxd this none this
    #3:"can_read_exits can_read_entrances" Core-Wizard (#184) rxd this none this
    #3:terrain_delay            unknown hacker (#35) rxd    this none this
    #3:set_terrain_delay        unknown hacker (#35) rx     this none this
    #3:"walk_failed_source walk_failed_dest" unknown hacker (#35) rxd this none this
-------------------------------- finished ---------------------------------
generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
    #7:recycle                  Core-Wizard (#184)   rxd    this none this
    #7:"leave_msg oleave_msg arrive_msg oarrive_msg nogo_msg onogo_msg no_one_msg" Core-Wizard (#184) rxd this none this
    #7:set_name                 Core-Wizard (#184)   rxd    this none this
    #7:set_aliases              Core-Wizard (#184)   rxd    this none this
    #7:defaulting_oleave_msg    Core-Wizard (#184)   rxd    this none this
    #7:moveto                   Core-Wizard (#184)   rxd    this none this
    #7:examine_key              Core-Wizard (#184)   rxd    this none this
    #7:substitute               Core-Wizard (#184)   rxd    this none this
    #7:dest_who                 Core-Wizard (#184)   rxd    this none this
    #7:dest_contents            Core-Wizard (#184)   rxd    this none this
    #7:dest_description         Core-Wizard (#184)   rxd    this none this
    #7:set_message              Core-Wizard (#184)   rxd    this none this
    #7:set_description          Core-Wizard (#184)   rxd    this none this
    #7:invoke                   Core-Wizard (#184)   rxd    this none this
    #7:integrate_in             Core-Wizard (#184)   rxd    this none this
    #7:"direction sub_direction" unknown hacker (#35) rxd   this none this
    #7:description              Core-Wizard (#184)   rxd    this none this
    #7:sub_who                  Core-Wizard (#184)   rxd    this none this
    #7:move                     Core-Wizard (#184)   rxd    this none this
    #7:sweep_for_followers      Core-Wizard (#184)   rxd    this none this
    #7:obvious                  unknown hacker (#35) rxd    this none this
    #7:defaulting_oarrive_msg   unknown hacker (#35) rxd    this none this
    #7:integrate_room_msg       Core-Wizard (#184)   rxd    this none this
    #7:dependents_event_move_by_exit_* Core-Wizard (#184) rxd this none this
    #7:"other_side obj_other_side" Core-Wizard (#184) rxd   this none this
    #7:set_walking_cost         unknown hacker (#35) rxd    this none this
    #7:walking_cost             unknown hacker (#35) rxd    this none this
    #7:"obj_dest obj_source"    unknown hacker (#35) rxd    this none this
    #7:"moddir_d moddir_i"      unknown hacker (#35) rxd    this none this
    #7:moddir_*                 unknown hacker (#35) rxd    this none this
    #7:through_msg              Core-Wizard (#184)   rxd    this none this
    #7:where_are_you            Core-Wizard (#184)   rxd    this none this
    #7:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sun Jan  7 19:39:35 2001 PST by Xplat (#4014) (on Waterpoint).
#7:"recycle" this none this
 1:  if (caller == this || $perm_utils:controls(caller_perms(), this))
 2:    "... relies on -d...";
 3:    `this.source:remove_exit(this) ! ANY';
 4:    `this.dest:remove_entrance(this) ! ANY';
 5:    return pass(@args);
 6:  else
 7:    return E_PERM;
 8:  endif
-----
`HELP TRY' NOT FOUND
====================

Sorry, but no help is available on `try'.  If you can't find what you're looking for, you may want to send mail (see `help mail'[1]) to *Bug-reports.

Current list options:

-parentheses        Parenthesize expressions in listings only as needed.
-nonumbers          Include line numbers.
-//-comments        Don't mangle comments in verb code
-args-assignment    Suppress assignment of args; do named-arg extraction
+//-comments        Display comment lines with //
+nonumbers          Omit line numbers.
generic exit (#7) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of generic event dispatching object (#110).
    #7:recycle                  Core-Wizard (#184)   rxd    this none this
    #7:"leave_msg oleave_msg arrive_msg oarrive_msg nogo_msg onogo_msg no_one_msg" Core-Wizard (#184) rxd this none this
    #7:set_name                 Core-Wizard (#184)   rxd    this none this
    #7:set_aliases              Core-Wizard (#184)   rxd    this none this
    #7:defaulting_oleave_msg    Core-Wizard (#184)   rxd    this none this
    #7:moveto                   Core-Wizard (#184)   rxd    this none this
    #7:examine_key              Core-Wizard (#184)   rxd    this none this
    #7:substitute               Core-Wizard (#184)   rxd    this none this
    #7:dest_who                 Core-Wizard (#184)   rxd    this none this
    #7:dest_contents            Core-Wizard (#184)   rxd    this none this
    #7:dest_description         Core-Wizard (#184)   rxd    this none this
    #7:set_message              Core-Wizard (#184)   rxd    this none this
    #7:set_description          Core-Wizard (#184)   rxd    this none this
    #7:invoke                   Core-Wizard (#184)   rxd    this none this
    #7:integrate_in             Core-Wizard (#184)   rxd    this none this
    #7:"direction sub_direction" unknown hacker (#35) rxd   this none this
    #7:description              Core-Wizard (#184)   rxd    this none this
    #7:sub_who                  Core-Wizard (#184)   rxd    this none this
    #7:move                     Core-Wizard (#184)   rxd    this none this
    #7:sweep_for_followers      Core-Wizard (#184)   rxd    this none this
    #7:obvious                  unknown hacker (#35) rxd    this none this
    #7:defaulting_oarrive_msg   unknown hacker (#35) rxd    this none this
    #7:integrate_room_msg       Core-Wizard (#184)   rxd    this none this
    #7:dependents_event_move_by_exit_* Core-Wizard (#184) rxd this none this
    #7:"other_side obj_other_side" Core-Wizard (#184) rxd   this none this
    #7:set_walking_cost         unknown hacker (#35) rxd    this none this
    #7:walking_cost             unknown hacker (#35) rxd    this none this
    #7:"obj_dest obj_source"    unknown hacker (#35) rxd    this none this
    #7:"moddir_d moddir_i"      unknown hacker (#35) rxd    this none this
    #7:moddir_*                 unknown hacker (#35) rxd    this none this
    #7:through_msg              Core-Wizard (#184)   rxd    this none this
    #7:where_are_you            Core-Wizard (#184)   rxd    this none this
    #7:match_type_object        unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Last modified Sat Nov 17 21:46:31 2007 PST by Xplat (#4014) (on Waterpoint).
#7:"move" (what)
start = what.location;
if (start != this.source)
  what:tell("You can't go that way.");
  return;
endif
unlocked = this:is_unlocked_for(what);
if (typeof(dest = this.dest) == LIST)
  dest = dest[1]:create(listdelete(dest, 1));
endif
if (unlocked)
  dest:bless_for_entry(what);
endif
start:broadcast_event_move_by_exit_attempted(what, this);
dest:broadcast_event_move_by_exit_attempted(what, this);
if (unlocked && dest:accept(what))
  if (msg = this:leave_msg(what))
    what:tell_lines(msg);
  endif
  what:moveto(dest);
  start:broadcast_event_move_by_exit_completed(what, this);
  what.location:broadcast_event_move_by_exit_completed(what, this);
  if (what.location != start || dest == start)
    // Don't print oleave messages if WHAT didn't actually go anywhere...
    // Unless the exit is actually a loop...
    msg = this:oleave_msg(what) || this:defaulting_oleave_msg(what);
    start:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg || what:verb_sub("has") + " left.");
  endif
  if (what.location == dest)
    // Don't print arrive messages if WHAT didn't really end up there...
    if (msg = this:arrive_msg(what))
      what:tell_lines(msg);
    endif
    msg = this:oarrive_msg(what) || this:defaulting_oarrive_msg(what);
    what.location:announce_all_but({what}, this.prefix_name ? what:inamec() + " " | "", msg || what:verb_sub("has") + " arrived.");
    this:sweep_for_followers(what);
  endif
else
  start:broadcast_event_move_by_exit_failed(what, this);
  what.location:broadcast_event_move_by_exit_failed(what, this);
  if (msg = this:nogo_msg(what))
    what:tell_lines(msg);
  else
    what:tell("You can't go that way.");
  endif
  if (msg = this:onogo_msg(what))
    what.location:announce_all_but({what}, this.prefix_name ? what:dnamec() + " " | "", msg);
  endif
endif
// Copied from generic exit (#7):move by Ken (#75) Tue Nov  7 19:12:28 1995 CST
// Copied from generic exit (#7):move(old) by Ken (#75) Tue Nov  7 19:32:34 1995 CST
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location first room (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
    #5:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
#5:"g*et t*ake" this none none
// Usage: get/take <thing>
//   This allows you to pick up things.
set_task_perms(callers() ? caller_perms() | player);
if (this.location == player)
  player:tell("You already have that!");
elseif (this.location != player.location)
  player:tell("That's not here.");
else
  this:moveto(player);
  if (this.location == player)
    player:tell_lines(this:take_succeeded_msg() || "Taken.");
    if (msg = this:otake_succeeded_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  else
    player:tell_lines(this:take_failed_msg() || "You can't pick that up.");
    if (msg = this:otake_failed_msg())
      player.location:announce(player:dnamec(), " ", msg);
    endif
  endif
endif
The generic thing(#5) has 9 kids.
generic note (#9)   network utils (#82)   generic sittable object (#80)   Registrar (#108)   topic sign (#178)   old FTP (#234)   generic module (#203)   feature object registry (#151)   Recycling Center (#55)
=> {"$thing", "$network"}
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#243:core_objects this none this" name: "MOO verb: #243:core_objects this none this" type: moo-code content*: "" _data-tag: 160904471717
#$#* 160904471717 content: // Find all objects with core names (like $local)
#$#* 160904471717 content: o = {@args, #0}[1];
#$#* 160904471717 content: pfx = {@args, "$", "$"}[2];
#$#* 160904471717 content: seen = {@args, {}, {}, {}}[3];
#$#* 160904471717 content: for p in (properties(o))
#$#* 160904471717 content:   v = o.(p);
#$#* 160904471717 content:   if (typeof(v) == OBJ && valid(v) && !(v in seen))
#$#* 160904471717 content:     seen = {@seen, v};
#$#* 160904471717 content:     name = pfx + p;
#$#* 160904471717 content:     player:tell(pfx + p + " => " + v:name_and_number());
#$#* 160904471717 content:     if (!(name in v.core_names))
#$#* 160904471717 content:       v.core_names = {@v.core_names, name};
#$#* 160904471717 content:     endif
#$#* 160904471717 content:     this:core_objects(v, pfx + p + ".", seen);
#$#* 160904471717 content:   endif
#$#* 160904471717 content: endfor
#$#: 160904471717
0 errors.
Verb programmed.
=> 0
#-1:Input to EVAL, line 4:  Verb not found
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location first room (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
$builder => generic builder (#4)
$login => Login Commands (#10)
$last_huh => Player Last_huh Verbs (#11)
$guest_log => Guest Log (#12)
$biglist => Generic BigList Utilities (#13)
$big_mail_recipient => Generic Large-Capacity Mail Recipient (#14)
$big_mail_recipient.mowner => unknown hacker (#35)
$limbo => Limbo (#15)
$registration_db => Registration Database (#16)
$new_player_log => Player-Creation-Log (#17)
$new_player_log.autoregistration_player => security (#105)
$verb_help => Verb Help (#20)
$core_help => Core Utility Help (#21)
$prog_help => Programmer Help (#22)
$wiz_help => Wizard Help (#23)
$wiz_utils => wizard utilities (#24)
$site_db => Site DB (#25)
$math_utils => math utilities (#26)
$set_utils => set utilities (#27)
$builtin_function_help => Builtin Function Help (1.8.0) (#28)
$new_prog_log => New-Prog-Log (#29)
$generic_help => Generic Help Database (#30)
$guest => generic guest (#31)
$guest.default_gender => e (#158)
$guest.known_player => nobody (#36)
$seq_utils => sequence utilities (#32)
$quota_log => Quota-Log (#33)
$you => you (#34)
$hacker => unknown hacker (#35)
$generic_db => New Generic Database (#79)
$no_one => nobody (#36)
$player_db => Player Database (#37)
$player_class => generic player (#6)
$player_class.gender => e (#158)
$player_class.home => first room (#70)
$player_class.pronoun_sub_style => Two-Letter Pronoun_Sub Translator (#78)
$player_class.timezone => time utilities (#39)
$gender_utils => gender utilities (#38)
$time_utils => time utilities (#39)
$editor_help => Editor Help (#40)
$mail_recipient => Generic Mail Recipient (#41)
$mail_agent => Mail Distribution Center (#42)
$mail_editor => Mail Room (#43)
$note_editor => Note Editor (#44)
$verb_editor => Verb Editor (#45)
$generic_editor => Generic Editor (#46)
$object_utils => object utilities (#47)
$lock_utils => lock utilities (#48)
$list_utils => list utilities (#49)
$command_utils => command utilities (#50)
$wiz => generic wizard (#51)
$prog => generic programmer (#52)
$code_utils => code utilities (#53)
$help => main help database (#54)
$help.author_feature => documentation feature (#169)
$help.author_feature.generic_personal_db => generic personal help database (#115)
$perm_utils => permissions utilities (#130)
$building_utils => building utilities (#19)
$string_utils => string utilities (#18)
$news => News (#141)
$note => generic note (#9)
$container => generic container (#126)
$thing => generic thing (#5)
$exit => generic exit (#7)
$room => generic room (#3)
$player_start => first room (#70)
$root_class => root class (#1)
$recycler => Recycling Center (#55)
$garbage => Generic Garbage Object (#56)
$mail_options => Mail Options (#57)
$edit_options => Edit Options (#58)
$display_options => Display Options (#59)
$generic_options => Generic Option Package (#60)
$list_options => List Options (#61)
$error => Error Generator (#66)
$newt_log => Community-Group (#106)
$toad_log => Site-Locks (#62)
$housekeeper => housekeeper (#63)
$feature => Generic Feature Object (#65)
$feature.registry => feature object registry (#151)
$pronoun_sub => pronoun substitution (#69)
$pronoun_sub.lambdacore => LambdaCore Pronoun_sub Translator (#77)
$pronoun_sub.generic => Generic Pronoun_sub Translator (#73)
$pronoun_sub.two-letter => Two-Letter Pronoun_Sub Translator (#78)
$they => they (#71)
$login_watcher => login watcher mark 2 (#83)
$login_watcher.options => login watcher options (#76)
$english => English Utilities (#72)
$english.here => here (#180)
$english.all => all (#103)
$english.everything => everything (#139)
$english.suggestions_recipient => Wizard (#2)
$integration_utils => integration utils (#74)
$network => network utils (#82)
$country_db => Country Database (#94)
$jtext => Jtext Dispatcher (#92)
$jtext.hgroup => Hgroup Tag (#93)
$jtext.link => link dispatcher tag (#123)
$jtext.link.preceding => generic preceding link tag (#142)
$jtext.link.root => Link Tag (#104)
$jtext.link.browser => Browser Link Tag (#95)
$jtext.root => Tag Root (#91)
$jtext.vgroup => Vgroup Tag (#97)
$jtext.header => Header Tag (#102)
$jtext.title => Title Tag (#96)
$jtext.string => String Tag (#84)
$jtext.list_of_strings => List Of Strings Tag (#86)
$jtext.paragraph => Paragraph Tag (#101)
$jtext.dlist => Definition List Tag (#98)
$jtext.plaintext => Plaintext Tag (#128)
$jtext.list => List Tag (#129)
$jtext.index => Index Tag (#120)
$jtext.itemize => Itemize Tag (#138)
$jtext.itemize_unnumbered => Unnumbered Itemization Tag (#114)
$jtext.itemize_numbered => Numbered Itemization Tag (#125)
$jtext.isindex => ISINDEX Tag (#119)
$jtext.hr => Horizontal Rule Tag (#134)
$feature_help => feature object help database (#100)
$jaddress => Jaddress Dispatcher (#111)
$jaddress.root => Address Root (#109)
$jaddress.help => Help Address (#131)
$jaddress.browser_object => Browser Object Address (#90)
$jaddress.note => Note Address (#118)
$jaddress.browser_verb => Browser Verb Address (#143)
$jaddress.browser_inherited_properties => Browser Inherited Properties Address (#144)
$jaddress.resolved_help => Resolved Help Address (#172)
$misc_options => Miscellaneous Options (#112)
$client_options => Client Options (#116)
$building_options => building options (#122)
$it => it (#154)
$furniture => generic piece of furniture (#81)
$sittable => generic sittable object (#80)
$I => I (#160)
$everything => everything (#139)
$all => all (#103)
$admin_group => generic admin group (#163)
$admin_group.leader => Wizard (#2)
$steering_committee => Steering Committee (#137)
$db_group => DB Group (#148)
$unix_group => Unix Group (#147)
$community_group => Community Group (#165)
$community_group.feature => Community Group Commands (#149)
$tech_group => Tech Group (#164)
$admin_mail_recipient => Generic Administrators Mailing List (#107)
$registrar => Registrar (#108)
$event_dispatcher => generic event dispatching object (#110)
$prog_group => Programming Group (#124)
$openable_container => generic openable container (#8)
$containing_object => generic containing object (#145)
$utils => generic utilities (#146)
$boot_log => Boot-Log (#85)
$help_editor => help text editor (#171)
$object_help => Object Help Database (#173)
$tester => generic testing player (#99)
$failed_help => last resort help database (#127)
$failed_help.help_recipient => Bug-reports (#140)
$who_options => Who Options (#89)
$event_handler => generic event handler (#133)
$eval_options => Eval Options (#136)
$he => he (#156)
$she => she (#157)
$e => e (#158)
$we => we (#159)
$plural_you => you (#161)
$either => s/he (#162)
$splat => *e (#166)
$gender => generic gender object (#64)
$none => none (#167)
$topic => topic sign (#178)
$builder_help => Builder Help (#155)
$name_utils => Name Utilities (#177)
$name_utils.dummy => name-subbing dummy object (#132)
$name_utils.dummy_builder => dummy name builder (#236)
$guest_help => guest help database (#168)
$parse_utils => Parsing Utilities (#117)
$admin => administration (#170)
$core_wizard => Core-Wizard (#184)
$first_wizard => Wizard (#2)
$door => generic door (#121)
$ftp => old FTP (#234)
$quota_utils => Byte Quota Utilities (#174)
$quota_utils.working => Quota (#185)
$window => generic window (#179)
$server_options => server options (#188)
$walking_utils => walking utils (#182)
$checkpointer => checkpointer (#175)
$startup => startup handler (#189)
$syslog => syslog (#183)
$generic_biglist_home => Generic BigList Resident (#75)
$http => http (#87)
$module => generic module (#203)
$property_farm => generic property farm (#206)
$modules => module registry (#205)
$modules.module => module system module (#202)
$modules.module.obj_sink_player => spam-player sink (#208)
$modules.module.obj_sink_note => generate note sink (#195)
$modules.module.obj_source_generic => generic source (#200)
$modules.module.obj_source_http => http source (#194)
$modules.module.obj_source_player => read() player source (#198)
$modules.module.obj_sink_generic_spam => generic gather-then-spam sink (#199)
$modules.module.obj_sink_generic => generic sink (#207)
$modules.module.obj_generic_source_or_sink => generic source or sink (#196)
$modules.module.obj_ftp_sink => FTP URL sink (#231)
$modules.module.obj_ftp_source => ftp source (#229)
$modules.mcp => MCP 2.1 module (#214)
$modules.mcp.obj_mcp => MCP 2.1 (#213)
$modules.mcp.obj_mcp.parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp.session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp.package => generic MCP package (#216)
$modules.mcp.obj_mcp.negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp.registry => MCP package registry (#209)
$modules.mcp.obj_mcp.cord => mcp-cord (#217)
$modules.mcp.obj_mcp_parser => MCP 2.1 parser (#221)
$modules.mcp.obj_mcp_session => generic MCP 2.1 session (#204)
$modules.mcp.obj_mcp_package => generic MCP package (#216)
$modules.mcp.obj_mcp_negotiate => mcp-negotiate (#215)
$modules.mcp.obj_mcp_cord => mcp-cord (#217)
$modules.mcp.obj_cord_stub => generic cord stub (#222)
$modules.mcp.obj_type_root => generic cord type (#218)
$modules.mcp.obj_message_dispatcher => generic message dispatch object (#219)
$modules.simpleedit => simpleedit module (#220)
$modules.simpleedit.obj_simpleedit_package => dns-org-mud-moo-simpleedit (#201)
$modules.smtp => SMTP module (#226)
$modules.smtp.obj_smtp => SMTP (#212)
$modules.listeners => listeners module (#228)
$modules.listeners.obj_listener => generic listener (#224)
$modules.listeners.obj_daemon => generic daemon listener (#211)
$modules.listeners.obj_daemon_handler => generic daemon service handler (#210)
$modules.listeners.obj_redlist_daemon => generic daemon listener with flood control (#225)
$modules.core_features => core feature objects (#233)
$modules.core_features.obj_stage_talk => Stage-Talk Feature (#67)
$modules.core_features.obj_thinking => Thinking Feature (#68)
$smtp => SMTP (#212)
$cord => Cord Dispatcher (#223)
$cord.root => generic cord stub (#222)
$cord.type_root => generic cord type (#218)
$mcp => MCP 2.1 (#213)
$mcp.parser => MCP 2.1 parser (#221)
$mcp.session => generic MCP 2.1 session (#204)
$mcp.package => generic MCP package (#216)
$mcp.negotiate => mcp-negotiate (#215)
$mcp.registry => MCP package registry (#209)
$mcp.cord => mcp-cord (#217)
$parse_options => Parsing Options (#191)
$ftp_client => FTP (#230)
$local => Local Namespace (#193)
$local.group => generic group (#244)
$local.pile => Generic Pile (#242)
$building_group => Building Group (#192)
$documentation_group => documentation group (#232)
$room_matching_utils => room matching utilities (#190)
$policy_help => policy help database (#235)
$admin_help => administration group help (#238)
$jhcore_help => JHCore Help DB (#237)
$namebuilder_i => namebuilder_i for #1 (#227)
$namebuilder_d => namebuilder_d for #1 (#239)
=> 0
=> {"$network"}
network utils (#82) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic thing (#5).
.open_connections        Core-Wizard (#184)           {}
.connect_connections_to  Core-Wizard (#184)           {}
.postmaster              Core-Wizard (#184)    r c    "postmastername@yourhost"
.site                    Core-Wizard (#184)    r c    "yoursite"
.port                    Core-Wizard (#184)    r c    7777
.MOO_name                Core-Wizard (#184)    r c    "YourMOO"
.valid_host_regexp       Core-Wizard (#184)    r c    "^%([-a-z0-9]+%.%)+%(go..
.sendmail_ok             unknown hack (#35)    r      {}
.invalid_userids         Core-Wizard (#184)    r c    {"", "sysadmin", "root"..
.active                  Core-Wizard (#184)    r      0
.valid_email_regexp      Core-Wizard (#184)    r      "^[-+a-z0-9_!.]+$"
.ignore                  Core-Wizard (#184)    r      {}
.mail_domain             Core-Wizard (#184)    r      "waterpoint.org"
.httpd_prefix            Core-Wizard (#184)    r c    "not-a-url:////"
.connection_owners       Core-Wizard (#184)           {}
.maildrop                Core-Wizard (#184)    r c    "localhost"
.trusted                 Core-Wizard (#184)           {}
 drop_failed_msg         Core-Wizard (#184)    r c    {#69, "do", "You can't ..
 drop_succeeded_msg      Core-Wizard (#184)    r c    {#69, "do", "You drop "..
 odrop_failed_msg        Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
 odrop_succeeded_msg     Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
 otake_succeeded_msg     Core-Wizard (#184)    r c    {#69, "do", {"verb", "p..
 otake_failed_msg        Core-Wizard (#184)    r c    ""
 take_succeeded_msg      Core-Wizard (#184)    r c    {#69, "do", "You take "..
 take_failed_msg         Core-Wizard (#184)    r c    {#69, "do", "You can't ..
,key                     Core-Wizard (#184)      c    0
,aliases                 Core-Wizard (#184)    r c    {"network utils", "netw..
,description             Core-Wizard (#184)    r c    {"Utilities for dealing..
 visible                 unknown hack (#35)    r      1
 integrate_room_msg      Core-Wizard (#184)    r c    ""
 integrate_player_msg    Core-Wizard (#184)    r c    ""
 integrate_container_msg Core-Wizard (#184)    r c    ""
,unique                  Core-Wizard (#184)    r c    0
 proper                  Core-Wizard (#184)    r c    0
 integrate_in            unknown hack (#35)    r      {#145}
 handlers                unknown hack (#35)    r      {}
 number                  unknown hack (#35)    r      1
,offered                 Core-Wizard (#184)    r      #-1
,object_size             Quota (#185)          r      {26810, 1365926400}
,core_names              Core-Wizard (#184)    r c    {"$network"}
-------------------------------- finished ---------------------------------
Verb added [2] (1).
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#243:needs_parent ()" name: "MOO verb: #243:needs_parent ()" type: moo-code content*: "" _data-tag: 54341126118
#$#: 54341126118
-----
`HELP PROPERTY' AMBIGUOUS
=========================

Sorry, the topic `property' is ambiguous.  I don't know which of the following topics you mean:

`help @property'[1]     `help property_info()'[2]

-----
PROPERTY_INFO()
===============

Syntax:  property_info (obj <object>, str <prop-name>)              => list
     set_property_info (obj <object>, str <prop-name>, list <info>) => none

These two functions get and set (respectively) the owner and permission bits for the property named <prop-name> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> has no non-built-in property named <prop-name>, then `E_PROPNF' is raised.  If the programmer does not have read (write) permission on the property in question, then `property_info()' (`set_property_info()') raises `E_PERM'.  Property info has the following form:

    {<owner>, <perms> [, <new-name>]}

where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', and `c', and <new-name> is a string; <new-name> is never part of the value returned by `property_info()', but it may optionally be given as part of the value provided to `set_property_info()'.  This list is the kind of value returned by `property_info()' and expected as the third argument to `set_property_info()'; the latter function raises `E_INVARG' if <owner> is not valid, if <perms> contains any illegal characters, or, when <new-name> is given, if <prop-name> is not defined directly on <object> or <new-name> names an existing property defined on <object> or any of its ancestors or descendants.

=> {#243, "rc"}
-----
FUNCTIONS
=========

There are many, many built-in functions available to MOO programmers.  The following list gives a brief summary of the arguments and purpose of each function; for more information, see the LambdaMOO Programmer's Manual.  

pass(arg, ...)              -- call same verb defined on this object's parent
raise(code[, msg[, value]]) -- raise code as an error

typeof(value)      -- determine the data type of value
 tostr(value, ...) -- concatenate values into a string
 tonum(value)      -- convert non-list value into a integer
 toint(value)      == tonum(value)
 tofloat(value)    -- convert non-list value into a float
 toobj(value)      -- convert non-list value into an object
floatstr(float, precision, scientific?)
                   -- convert float value to string
encode_binary(value, ...)      -- values to binary string
decode_binary(bstring[, full]) -- binary string to list of values

binary_hash(bstring) -- MD5 hash value of binary string
string_hash(string)  -- MD5 hash value of string
value_hash(value)    == string_hash(toliteral(value))

value_bytes(value)   --- number of bytes required to store value
object_bytes(object) --- number of bytes required to store object

eval(string)       -- parse and execute string as MOO code
toliteral(value)   -- convert value to a string that evaluates to it
call_function(func[, arg, ...]) == func([arg, ...])

function_info([func]) -- builtin function desc (or list of all of them)

length(list/string) -- returns the length of a string or list
listappend(list, value [, index]) -- adding an element at the end of a list
listinsert(list, value [, index]) -- adding an element at the head of a list
   listset(list, value, index)    -- updating a list at some index
listdelete(list, index)           -- removing an element from a list
    setadd(list, element) -- adding an element to a set represented as a list
 setremove(list, element) -- removing an element from such a set
is_member(element, list) -- case-sensitive version of (element IN list)
equal(v1,v2)             -- case-sensitive version of (v1 == v2)

min(n1, n2, ...) -- minimum of n1,n2,...
max(n1, n2, ...) -- maximum of n1,n2,...
random(n)        -- random integer between 1 and n inclusive
 time()          -- current time in seconds since midnight GMT, 1 Jan 70
ctime([time])    -- time (or current time) converted to a human-readable string

  abs(n) -- absolute value of n
floor(x) -- truncate x towards minus infinity
trunc(x) -- truncate x towards zero
 ceil(x) -- truncate x towards plus infinity
 sqrt(n) -- square root of n
  exp(x) -- e to the x
  log(x) -- natural log
log10(x) -- base 10 log
 sin(a),  cos(a),  tan(a)     -- circular trignometric functions
asin(y), acos(x), atan(x[,y]) -- inverse circular trignometric functions
 sinh(a), cosh(a), tanh(a)    -- hyperbolic trigonometric functions

 index(str1, str2 [, case-matters]) -- index of first str2 in str1
rindex(str1, str2 [, case-matters]) -- index of last  str2 in str1
strcmp(str1, str2) -- case-sensitive string comparison
strsub(subject, what, with [, case-matters]) -- substitution in a string
crypt(string [, salt]) -- one-way string encryption
 match(str1, str2 [, case-matters]) -- match first pattern str2 in str1
rmatch(str1, str2 [, case-matters]) -- match last  pattern str2 in str1
substitute(template, subs) -- perform substitutions on template

   valid(object)             -- testing whether an object exists
  create(parent [, owner(*)])-- creating a new MOO object
 recycle(object)             -- destroying a MOO object
    move(object, where)      -- altering the object-containment hierarchy
chparent(object, new-parent) -- altering the object-inheritance hierarchy
  parent(object)             -- object's parent   in the inheritance hierarchy
children(object)             -- object's children in the inheritance hierarchy
max_object()       -- the highest-numbered object in the MOO
renumber(obj)      -- changes an object's number to lowest available one (*)
reset_max_object() -- resets max_object() to the largest valid object (*)

     properties(object) -- a list of the properties defined on an object
   add_property(object, prop-name, value, info) -- add a new property
delete_property(object, prop-name)              -- remove a property
    property_info(object, prop-name)       -- {owner, perms} info on a property
set_property_info(object, prop-name, info) -- setting same
is_clear_property(object, prop-name) -- find out if a property is "clear"
   clear_property(object, prop-name) -- make a property "clear"

      verbs(object) -- a list of the verbs defined on an object
   add_verb(object, info, args)  -- add a verb to an object
delete_verb(object, verb-name)   -- remove a verb from an object
    verb_info(object, verb-name) -- {owner, perms, names} info for a verb defn.
    verb_args(object, verb-name) -- {dobj, prep, iobj} argument info for a verb
    verb_code(object, verb-name [, fully-paren [, indent]]) -- program listing
set_verb_info(object, verb-name, {owner, perms, names})
set_verb_args(object, verb-name, {dobj, prep, iobj})   
set_verb_code(object, verb-name, {line, line, ...})
  disassemble(object, verb-name) -- moo bytecode for verb

notify(conn, string[, noflush])      -- output string to connection
read([conn])                         -- read input line from connection (*)
flush_input(conn[, showmsg?])        -- flush pending input on connection (*)
force_input(conn, line[, at-front?]) -- insert line as pending input (*)

        is_player(object) -- testing whether or not object is a player
          players()       -- a list of all players, active or not
connected_players()       -- a list of all currently-connected players
     idle_seconds(player) -- seconds since given player typed anything
connected_seconds(player) -- seconds given player has been logged in
    boot_player(player)        -- disconnect player from the MOO immediately(*)
set_player_flag(player, value) -- set/clear player bit; boot player if clear(*)
connection_name(player)   -- a server-assigned name for player's connection
open_network_connection(@args) -- open a connection to another network site
connection_option(conn,option)           -- setting of option for connection
connection_options(conn)                 -- list of {option, value}
set_connection_option(conn,option,value) -- change setting of option
output_delimiters(player)      -- {prefix,suffix} set by PREFIX/SUFFIX cmds
buffered_output_length([conn]) -- number of bytes currently buffered on output

caller_perms()         -- the player whose permissions your caller was using
set_task_perms(player) -- changing permissions of the running task (*)
callers([lineno?])  -- stack: list of {obj, verb, owner, vloc, player[,line]}
task_stack(taskid[,lineno?]) -- callers() stack for suspended task

seconds_left() -- number of seconds left in the current task
ticks_left()   -- number of ticks   left in the current task
task_id()              -- id number for the currently-running task
suspend(secs)          -- suspend current task for a number of seconds
resume(taskid[,value]) -- resume the specified task
kill_task(taskid)      -- delete one of your tasks from the queue
queued_tasks()         -- list of {taskid,start,,,owner,obj,verb,line,this}
queue_info([player])   -- number of tasks for player or list of tasking players

server_version()   -- a string of three numbers "major.minor.release"
server_log(string) -- add a comment to the server log file (*)
listen(obj, point[, msgs?]) -- start listening, return canonicalized point (*)
unlisten(canonpoint)        -- stop listening at canonpoint (*)
listeners() -- list of {object, canonpoint, msgs?} listening points (*)
shutdown(msg)    -- print msg and kill the server (*)
dump_database()  -- what it says (*)
db_disk_size()   -- size in bytes of database disk file
memory_usage()   -- {{blocksize, nused, nfree}, ...}, the server's memory stats

(*) => as you might have expected, these usually require wizard permissions.

-----
`HELP CLEAR' AMBIGUOUS
======================

Sorry, the topic `clear' is ambiguous.  I don't know which of the following topics you mean:

`help clear_property()'[1]                      `help @clearproperty'[2]

-----
CLEAR_PROPERTY()
================

Syntax:  is_clear_property (obj <object>, str <prop-name>)   => int
            clear_property (obj <object>, str <prop-name>)   => none

These two functions test for clear and set to clear, respectively, the property named <prop-name> on the given <object>.  If <object> is not valid, then `E_INVARG' is raised.  If <object> has no non-built-in property named <prop-name>, then `E_PROPNF' is raised.  If the programmer does not have read (write) permission on the property in question, then `is_clear_property()' (`clear_property()') raises `E_PERM'.  If a property is clear, then when the value of that property is queried the value of the parent's property of the same name is returned.  If the parent's property is clear, then the parent's parent's value is examined, and so on.  If <object> is the definer of the property <prop-name>, as opposed to an inheritor of the property, then `clear_property()' raises `E_INVARG'.

0 errors.
Verb programmed.
That is not a valid command.
Crag (#243) [ (player) programmer wizard ]
  Child of generic wizard (#51).
  Location first room (#70).
  #243:core_objects             Crag (#243)          rxd    this none this
  #243:needs_parent             Crag (#243)          rxd    this none this
-------------------------------- finished ---------------------------------
The generic thing(#5) has 9 kids.
generic note (#9)   network utils (#82)   generic sittable object (#80)   Registrar (#108)   topic sign (#178)   old FTP (#234)   generic module (#203)   feature object registry (#151)   Recycling Center (#55)
#243:needs_parent, line 5:  Type mismatch
... called from #-1:Input to EVAL, line 4
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
=> 0
generic thing (#5) [ readable fertile ]
  Owned by Core-Wizard (#184).
  Child of root class (#1).
  Location generic room (#3).
    #5:"g*et t*ake"             Core-Wizard (#184)   rxd    this none none
    #5:d*rop                    Core-Wizard (#184)   rxd    this none none
    #5:moveto                   Core-Wizard (#184)   rxd    this none this
    #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" Core-Wizard (#184) rxd this none this
    #5:"gi*ve ha*nd"            Core-Wizard (#184)   rxd    this at/to any
    #5:examine_key              Core-Wizard (#184)   rxd    this none this
    #5:initialize               Core-Wizard (#184)   rxd    this none this
    #5:help_text                unknown hacker (#35) rxd    this none this
-------------------------------- finished ---------------------------------
Parent changed.
generic note (#9)
generic sittable object (#80)
Registrar (#108)
topic sign (#178)
old FTP (#234)
generic module (#203)
feature object registry (#151)
Recycling Center (#55)
=> 0
Parent changed.
Parent changed.
=> #-1 <$nothing>
The generic module(#203) has 6 kids.
module system module (#202)   MCP 2.1 module (#214)   simpleedit module (#220)   SMTP module (#226)   listeners module (#228)   core feature objects (#233)
=> #-1 <$nothing>
=> #-1 <$nothing>
Parent changed.
generic note (#9)
generic sittable object (#80)
Registrar (#108)
topic sign (#178)
feature object registry (#151)
=> 0
0 errors.
Verb programmed.
#243:needs_parent, line 4:  Type mismatch
... called from #-1:Input to EVAL, line 5
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
0 errors.
Verb programmed.
#$#dns-org-mud-moo-simpleedit-content 756740960 reference: "#243:needs_parent (o)" name: "MOO verb: #243:needs_parent (o)" type: moo-code content*: "" _data-tag: 22802239819
#$#* 22802239819 content: // :needs_parent(o) => 1 if chparenting to parent of p would lose prop values
#$#* 22802239819 content: p = parent(o);
#$#* 22802239819 content: for child in ($object_utils:descendents(o) + {o})
#$#* 22802239819 content:   for prop in (properties(p))
#$#* 22802239819 content:     if (!is_clear_property(child, prop))
#$#* 22802239819 content:       return 1;
#$#* 22802239819 content:     endif
#$#* 22802239819 content:   endfor
#$#* 22802239819 content: endfor
#$#* 22802239819 content: return 0;
#$#: 22802239819
#-1:Input to EVAL, line 4:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
#-1:Input to EVAL, line 4:  Type mismatch
... called from built-in function eval()
... called from #52:eval_cmd_string (this == #243), line 21
... called from #52:eval eval-d eval+d (this == #243), line 16
(End of traceback)
=> {}
Error programming Crag:needs_parent[2](1).
Line 4:  syntax error
1 error(s).
Verb not programmed.
0 errors.
Verb programmed.
=> {}
generic note (#9)
generic sittable object (#80)
Registrar (#108)
topic sign (#178)
feature object registry (#151)
=> 0
Registrar (#108) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic thing (#5).
-------------------------------- finished ---------------------------------
Registrar (#108) [ readable ]
  Owned by Core-Wizard (#184).
  Child of generic thing (#5).
.primary                 Core-Wizard (#184)           {}
.secondary               Core-Wizard (#184)           {}
.trusted                 Core-Wizard (#184)    r      {#185}
.shared                  Core-Wizard (#184)           {}
.shared_owners           Core-Wizard (#184)           {}
.log                     Core-Wizard (#184)           {{{{#108, "all_chars", ..
.help_text               Core-Wizard (#184)    r      {"The Registrar", "====..
-------------------------------- finished ---------------------------------
-----
HELP ON THE REGISTRAR
=====================

The Registrar
=============

The Registrar is the object which handles the second-character registration for the MOO.  Its information is stored in a set of parallel lists.

Rules for Registration
----------------------
Any player may be registered to any other player, with the following exceptions:
+ Links may not be recursive.  In other words, a player may not be a second character -of- a second character.
+ Guest characters may not be registered.


Properties on the Registrar
---------------------------

.primary / .secondary
  -- These parallel lists store the character registration information.

.trusted
  -- Working in connection with the :trust verb, this property stores people whose perms should allow access to the registry information.

.log
  -- This property, maintained by :add_log, stores a complete log of all calls to this object.  Its information is in the form: { {callers(), time(), @args} [...] }

.help_msg
  -- This help text.


Verbs on the Registrar
======================

:add_relation ( master, slave )
  -- Adds a second-character link.

:delete_relation ( [former] master, [former] slave )
  -- Delete a second-character link.

:clean_relations ()
  -- Clean out fluff (e.g. toaded/reaped players) from the links.

:primary_char ( dude )
  -- Returns the primary character to whom 'dude' is registered, if any.

:other_chars ( dude )
  -- Returns a list (possibly empty) of all other characters related to 'dude'.

:all_chars ( dude )
  -- Returns a list (never empty) of all characters related to 'dude'.

:same_as ( dude1, dude2 )
  -- Returns a true/false for whether they're linked as the same.

:is_primary_char ( dude )
:is_secondary_char ( dude )
  -- Returns a true/false for whether 'dude' is a primary/secondary character.

:all_relations()
  -- Returns a list of all relations.

g*et t*ake
==========

Usage: get/take <thing>
  This allows you to pick up things.

d*rop
=====

Usage: drop <thing>
 This drops things in the room the dropper is in.

gi*ve ha*nd
===========

Usage: give <thing> to <person>
This lets you experience the joy of giving things to others.

@dump-kids
==========

Usage: @dump-kids <parent>
Lists the object hierarchy from parent down

No help found on delete_player.

----

0 errors.
Verb programmed.
=> 0
*** Shutting down: shutdown() called by Crag (#243) ***
