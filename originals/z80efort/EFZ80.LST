Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-1


				TITLE Z80 eForth 
				 
				PAGE 90,132     ;90 lines/page, 132 char/line, 
				 
				;=============================================================== 
				; 
				;       Z80 eForth 1.0 by Ken Chen,   April 10, 1991 
				; 
				;       This eForth system was developed and tested Z80 modem HW. 
				; 
				;       The eForth Model was developed by Bill Muench and C. H. Ting. 
				; 
				;       The goal of this implementation is to build a eForth on my working 
				;       environment. 
				; 
				;       Deviations from the original eForth Model are: 
				; 
				;             o All kernel words are assembled as DB statements. 
				;             o Memory map is tailored to a ROM based system. 
				;             o FORTH vocabulary pointer is a pair user variables. 
				;             o Since 'NEXT' is used in FOR-NEXT, so 'NextStep' is used for 
				;               Virtual Forth CPU 'NEXT' 
				;             o BYE is deleted. 
				;             o call, is chnaged for absolute calling ( vs 8086 model) 
				;             o I/O: there is a Rx interrupt, recevie char to SiobRxQ, 
				;                    SiobRxQ is an one page ring Q (pointer wrapping in the page) 
				;                    Received is put to where SiobRxQin pointing, and increment 
				;                    SiobRxQout is where system read char. 
				;                    Tx is by polling to tx. 
				;             o Registers assigment: 
				;                 SP  --  SP 
				;                 IP  --  BC 
				;                 RP  --  Memory 
				;                 UP  --  Memory 
				; 
				; 
				;        To assemble this source file and generate a ROM image, 
				;       type the following commands using MASM and LINK: 
				;               >MASM efZ80; 
				;               >LINK efZ80; 
				;               >EXE2BIN efZ80.exe efZ80.com 
				;       The resulting efZ80.com contains the binary image suitable 
				;       for PROM programming.  The actual image is offset by 0000H 
				;       bytes from the beginning of the .EXE file.  This image 
				;       must be placed in a PROM from 0 to 1FFFH, and it uses a RAM 
				;       chip from C000H to FFFFH.  If your system does not have 
				;       this memory configuration, modify the memory pointers in 
				;       the source file accordingly.  Places to be modified are 
				;       marked by '******'. 
				; 
				;       Z80  is a slow processor.  Do not expect great performance 
				;       of this implementation, considering that most words are in high 
				;       level.  Your are encouraged to recode some of the high level words 
				;       to optimize its performance. 
				; 
				;       After my comparsion of F83 (indeirect threaded) to eForth Z80, the 
				;       high and low level word, eForth Z80 can run quit faster than F83 Z80: 
				; 
				;  eForth NextStep: 
				;               LD  A, (BC); 7t 
				;               INC BC     ; 6t 
				;               LD  L, A   ; 4t 
				;               LD  A, (BC); 7t 
				;               INC BC     ; 6t 
				;               LD  H, A   ; 4t 
				;               JP  (HL)   ; 4t 
				;                          ; 38t==(10MHz)3.8 usec. 
				; 
				;  eForth  doLIST: 
				;               (NOP CALL doLIST == 21) 
				;               LD  HL, (RP) ;16t 
				;               DEC HL       ; 6t 
				;               LD  (HL), B  ; 7t 
				;               DEC HL       ; 6t 
				;               LD  (HL), C  ; 7t 
				;               LD  (RP), HL ;16t 
				;               POP BC       ;10t 
				; 
				;               JP  NextStep ;10t 
				;                            ;107t (10MHz==10.7usec) 
				;                             (107+38=145) 
				; 
				;  eForth EXIT: 
				;               LD  HL, (RP) ;16t 
				;               LD  C, (HL)  ; 7t 
				;               INC HL       ; 6t 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-2


				;               LD  B, (HL)  ; 7t 
				;               INC HL       ; 6t 
				;               LD  (RP),HL  ;16t 
				; 
				;               JP  NextStep ;10t 
				;                            ;68t==6.8us 
				;                            (68+38=108) 
				; 
				; 
				;  F83 Z80: 
				;       LABEL >NEXT A (BC) LD, BC INC, L A LD, A (BC) LD, BC INC, H A LD, 
				;                       7        6       4        7         6       4 
				;                    E (HL) LD, HL INC, D (HL) LD, DE HL EX, (HL) JP, 
				;                        7        6        7          4        4     total=62t 
				;       LABEL NEST 
				;         HL RP ) LD,  HL DEC, (HL) B LD, HL DEC, (HL) C LD, 
				;             16         6         7        6        7 
				;         RP ) HL LD,  DE INC, C E LD, B D LD, >NEXT JP, 
				;             16         6       4        4      10              ===>total=82 
				;       CODE EXIT                                                (82+62=144) 
				;          HL RP ) LD, C (HL) LD, HL INC, B (HL) LD, HL INC, 
				;             16         7           6      7          6 
				;          RP ) HL LD,   >NEXT JP, 
				;             16           10                                     ==>total=68 
				;                                                                 (68+62=130) 
				; 
				;                                 eForth      F83 
				;  Summary: Code word overhead:     38         62 
				;             :       overhead:    107+38=135  82+62=144 
				;             ;       overhead:     68+38=106  68+62=130 
				;  Conclusion: 
				;    eForth Z80 is remarkable faster, especially when CODE defined (38/62 clock) 
				;    ( most kernel primitives 35~70 clock) 
				; 
				; 
				;  Note on improvement: 
				;       To minmize the change from the original model, some speed and memory 
				;       improvment is not put on this release but it is worth to enhance: 
				; 
				;    1. NOP CALL doLIST  -- it cause 4 bytes and 21 clocks. 
				;              improvemnet:  use NOP RST 8 (doList at 0008H) may save 2 bytes 
				;                            and reduce to 15 clocks 
				;              related change: call, :  USER  CREATE 
				; 
				;    2. Top of stack may be put to DE register, many stack POP--PUSH may be 
				;       reduced and cuase nomally ten more clock save. 
				;              related change: most code-words and PICK, DEPTH .. . 
				; 
				;    3. Join NextStep to just behind doLIST and EXIT will cut a 'JP NextStep' 
				;       and will save 10 clock each. 
				; 
				;    4. NextStep address may be put to IY (or IX) then 
				;      'JP (IY)' use 2 bytes and 8 clocks (JP NextStep: 3 bytes and 10 clocks) 
				;      a more important advantage is: revectoring IY (originally NextStep) 
				;                  may easily patch a debuger in ROMed enivronment. 
				; 
				;      Thanks to FIG Forth, F83, eForth implemneters. Their efforts and 
				;      open-minded cause all this work became easy. 
				;      Also thanks to my friend Cherng Chin who gave me many valuable 
				;      suggestion and discussion. 
				; 
				; 
				;       Direct your questions and contributions to: 
				; 
				;               Dr. C. H. Ting 
				;               156 14th Avenue 
				;               San Mateo, CA 94402 
				;               (415) 571-7639 
				; 
				;       or: 
				;               Ken Chen 
				;               No. 20, Lane 2, Ann-Her Street 
				;               Hsinchu, Taiwan, R.O.C. 
				;               Tel: O) 035-782323 
				;                    H) 035-779567 
				;=============================================================== 
				 
				;; Version control 
				 
 = 0001				VER             EQU     01H                     ;major release version 
 = 0000				EXT             EQU     00H                     ;minor extension 
				 
				;; Constants 
				 
 = 0040				COMPO           EQU     040H                    ;lexicon compile only bit 
 = 0080				IMEDD           EQU     080H                    ;lexicon immediate bit 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-3


 = 7F1F				MASKK           EQU     07F1FH                  ;lexicon bit mask 
				 
 = 0002				CELLL           EQU     2                       ;size of a cell 
 = 000A				BASEE           EQU     0AH                     ;default radix 
 = 0008				VOCSS           EQU     8                       ;depth of vocabulary stack 
				 
 = 0008				BKSPP           EQU     8                       ;backspace 
 = 000A				LF              EQU     0AH                     ;line feed 
 = 000D				CRR             EQU     0DH                     ;carriage return 
 = 001B				ERR             EQU     1BH                     ;error escape 
 = 0027				TIC             EQU     27H                     ;tick 
				 
 = CD00				CALLL           EQU     0CD00H                  ;NOP CALL opcodes 
 =				LISTT           EQU     DOLST                   ;CALL doLIST address 
				 
				 
				 
				;; Memory allocation    0//code>--//--<name//up>--<sp//tib>--rp//em 
				 
 = FFFF				EM              EQU     0FFFFH          ;top of RAM memory******* 
 = 0000				BM              EQU     0H              ;bottom of ROM memory****** 
 = 0000				COLDD           EQU     BM+00H          ;cold start vector****** 
				 
 = C000				UAB             EQU    0C000H           ;user area base address******* 
 = E200				UAEM            EQU    0E200H           ;user area end of memory adr******* 
				 
				;US              EQU     100H            ;user area size in cells 
				;RTS             EQU     100H            ;return stack/TIB size 
				;DTS             EQU     100H            ;data stack size 
				 
 = E1FE				SPP             EQU     UAEM -   2H     ;start of data stack (SP0) 
 = E100				UPP             EQU     UAEM - 100H     ;start of user area (UP0) 
 = E0FE				RPP             EQU     UAEM - 102H     ;start of return stack (RP0) 
 = E000				TIBB            EQU     UAEM - 200H     ;terminal input buffer (TIB) 
 = 1FFE				NAMEE           EQU     BM+1FFEH        ;initial name (ROM)dictionary******* 
 = 0000				CODEE           EQU     BM+0            ;initial code (ROM)dictionary******* 
				 
				 
				 
				; System Variable Area  (SVA)  (not user woned) 
				 
 = FE00				SVAB            EQU     0FE00H ; System Variable Address Base******* 
				 
 = FE00				IVEC            EQU     SVAB + 0H; system interrupt vector base address******* 
 = FE10				RP              EQU     SVAB +10H; R-stack pointer, simulate RP reg******* 
 = FE12				SiobRxQin       EQU     SVAB +12H; SIOB   Rx Q input  pointer******* 
 = FE14				SiobRxQout      EQU     SVAB +14H; SIOB   Rx Q output pointer******* 
				 
 = FB00				SiobRxQ         EQU     0FB00H ; one page circular queue******* 
				 
				 
				 
				;; Initialize assembly variables 
				 
 = 0000				_LINK   = 0                                     ;force a null link 
 = 1FFE				_NAME   = NAMEE                                 ;initialize name pointer 
 = 0000				_CODE   = CODEE                                 ;initialize code pointer 
 = 0008				_USER   = 4*CELLL                               ;first user variable offset 
				 
				 
				;; Define assembly macros 
				 
				;       Adjust an address to the next cell boundary. 
				 
				$ALIGN  MACRO 
				        EVEN                                    ;;for 16bit systems 
				        ENDM 
				 
				;       Compile a code definition header. 
				 
				$CODE   MACRO   LEX,NAME,LABEL 
				        $ALIGN                            ;;force to cell boundary 
				LABEL:                                    ;;assembly label 
				        _CODE   = $                       ;;save code pointer 
				        _LEN    = (LEX AND 01FH)/CELLL    ;;string cell count, round down 
				        _NAME   = _NAME-((_LEN+3)*CELLL)  ;;cell boundary, downward 
				ORG     _NAME                             ;;set name pointer 
				        DW       _CODE,_LINK              ;;token pointer and link 
				        _LINK   = $                       ;;link points to a name string 
				        DB      LEX,NAME                  ;;name string 
				ORG     _CODE                             ;;restore code pointer 
				        ENDM 
				 
				;       Compile a colon definition header 
				 
				$COLON  MACRO   LEX,NAME,LABEL 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-4


				        $CODE   LEX,NAME,LABEL 
				        DW      CALLL                     ;;align to cell boundary****** 
				        DW      LISTT                     ;;include CALL doLIST****** 
				        ENDM 
				 
				;       Compile a user variable header. 
				 
				$USER   MACRO   LEX,NAME,LABEL 
				        $CODE   LEX,NAME,LABEL 
				        DW      CALLL                     ;;align to cell boundary****** 
				        DW      LISTT                     ;;include CALL doLIST****** 
				        DW      DOUSE,_USER               ;;followed by doUSER and offset 
				        _USER   = _USER+CELLL             ;;update user area offset 
				        ENDM 
				 
				;       Compile an inline string. 
				 
				D$      MACRO   FUNCT,STRNG 
				        DW      FUNCT                     ;;function 
				        _LEN    = $                       ;;save address of count byte 
				        DB      0,STRNG                   ;;count byte and string 
				        _CODE   = $                       ;;save code pointer 
				ORG     _LEN                              ;;point to count byte 
				        DB      _CODE-_LEN-1              ;;set count 
				ORG     _CODE                             ;;restore code pointer 
				        $ALIGN 
				        ENDM 
				 
				 
				;; Main entry points and COLD start data 
				 
 0000				MAIN    SEGMENT 
				ASSUME  CS:MAIN,DS:MAIN,ES:MAIN,SS:MAIN 
 0000				ORG     CODEE                                   ;start code dictionary 
 0000				ORIG:   ;Cold boot routine 
				 
 0000				ORG     BM                                ;Power up location****** 
				 
 0000  C3 00 01			        DB     0C3h,00,01       ;Jump to cold start  100H 
 0003  00 00 00 00 00 00 00	        DB            0, 0,0,0,0,0,  0,0,0,0, 0,0,0,0,0  ; 0='NOP' 
       00 00 00 00 00 00 00	
       00			
 0012  00 00 00 00 00 00 00	        DB      0,0,0,0, 0,0,0,0,0,  0,0,0,0, 0,0,0,0,0 
       00 00 00 00 00 00 00	
       00 00 00 00		
 0024  00 00 00 00 00 00 00	        DB      0,0,0,0, 0,0,0,0,0,  0,0,0,0, 0,0,0,0,0 
       00 00 00 00 00 00 00	
       00 00 00 00		
				 
 0036  00 00 00 00 00 00 00	        DB      0,0,0,0, 0,0,0,0,0,  0,0,0,0, 0,0,0,0,0 
       00 00 00 00 00 00 00	
       00 00 00 00		
 0048  00 00 00 00 00 00 00	        DB      0,0,0,0, 0,0,0,0,0,  0,0,0,0, 0,0,0,0,0 
       00 00 00 00 00 00 00	
       00 00 00 00		
 005A  00 00 00 00 00 00 00	        DB      0,0,0,0, 0,0,0,0,0,  0,0,0,0, 0,0,0,0,0 
       00 00 00 00 00 00 00	
       00 00 00 00		
 006C  00 00 00 00 00 00 00	        DB      0,0,0,0, 0,0,0,0,0,  0,0,0,0, 0,0 
       00 00 00 00 00 00 00	
       00			
 007B  C3 00 01			        DB     0C3h,00,01       ;if somthing wrong jmp again 
				 
				 
				 
				 
 0080				ORG     BM + 80H         ;User variable initial values 
				 
				; COLD start moves the following to USER variables. 
				; MUST BE IN SAME ORDER AS USER VARIABLES. 
				 
				$ALIGN                                  ;align to cell boundary 
				 
 0080  0004[			UZERO:          DW      4 DUP (0)       ;reserved 
	   0000			
			 ]	
				
 0088  E1FE			                DW      SPP             ;SP0 
 008A  E0FE			                DW      RPP             ;RP0 
 008C  031C R			                DW      QRX             ;'?KEY 
 008E  0340 R			                DW      TXSTO           ;'EMIT 
 0090  0DDA R			                DW      ACCEP           ;'EXPECT 
 0092  0DAC R			                DW      KTAP            ;'TAP 
 0094  0340 R			                DW      TXSTO           ;'ECHO 
 0096  0EEE R			                DW      DOTOK           ;'PROMPT 
 0098  000A			                DW      BASEE           ;BASE 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-5


 009A  0000			                DW      0               ;tmp 
 009C  0000			                DW      0               ;SPAN 
 009E  0000			                DW      0               ;>IN 
 00A0  0000			                DW      0               ;#TIB 
 00A2  E000			                DW      TIBB            ;TIB 
 00A4  0000			                DW      0               ;CSP 
 00A6  0EAC R			                DW      INTER           ;'EVAL 
 00A8  0978 R			                DW      NUMBQ           ;'NUMBER 
 00AA  0000			                DW      0               ;HLD 
 00AC  0000			                DW      0               ;HANDLER 
 00AE  0000			                DW      0               ;CONTEXT pointer 
 00B0  0008[			                DW      VOCSS DUP (0)   ;vocabulary stack    ??? 
	   0000			
			 ]	
				
 00C0  0000			                DW      0               ;CURRENT pointer 
 00C2  0000			                DW      0               ;vocabulary link pointer ??? 
 00C4  C000			                DW      0C000H          ;CP  for runing phase on RAM 
 00C6  DFFE			                DW      0DFFEH          ;NP  for runing phase on RAM 
 00C8  17EE			                DW      LASTN           ;LAST 
 00CA  17EE			                DW      LASTN           ;FORTH   \ mullti-user ??? 
 00CC  0000			                DW      0               ;vocabulary link       ??? 
 00CE				ULAST: 
				 
				 
				 
 0100				ORG            BM + 100H 
				 
				 
 0100  F3			DB   0F3h              ;       DI 
				                       ; 
				                       ; move ROM version user data to 1st user RAM 
				                       ; 
 0101  0E 1D			DB    0Eh, 1Dh         ;       LD  C, 01DH   ; PIOA 
 0103  3E CF			DB    3Eh,0CFh         ;       LD  A, 0CFH 
 0105  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 0107  3E 00			DB    3Eh, 00h         ;       LD  A, 0 
 0109  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 010B  3E 17			DB    3Eh, 17h         ;       LD  A, 17H 
 010D  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 010F  3E FF			DB    3Eh,0FFh         ;       LD  A, 0FFH 
 0111  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
 0113  0E 1F			DB    0Eh, 1Fh         ;       LD  C, 1FH   ;PIOB 
 0115  3E CF			DB    3Eh,0CFh         ;       LD  A, 0CFH 
 0117  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 0119  3E 00			DB    3Eh, 00h         ;       LD  A, 0 
 011B  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 011D  3E 17			DB    3Eh, 17h         ;       LD  A, 17H 
 011F  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 0121  3E FF			DB    3Eh,0FFh         ;       LD  A, 0FFH 
 0123  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
 0125  0E 1C			DB    0Eh, 1Ch         ;       LD  C, 1CH 
 0127  3E 5B			DB    3Eh, 5Bh         ;       LD  A, 05BH     ;PIOA data: TEST ON, RED LED on .. . 
 0129  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
 012B  0E 1E			DB    0Eh, 1Eh         ;       LD  C, 1EH 
 012D  3E 17			DB    3Eh, 17h         ;       LD  A, 17H     ;PIOB data: .. . 
 012F  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
				                       ; Set IM2 
 0131  ED 5E			DB   0EDh, 5Eh         ;       IM 2 
				                       ; 
				                       ; init SP, RP, UP 
 0133  21 FE E1			DB    21h,0FEh,0E1h    ;       LD  HL, SPP 
 0136  F9			DB   0F9h              ;       LD  SP, HL    ; INIT SP 
				                       ; 
 0137  21 FE E0			DB    21h,0FEh,0E0h    ;       LD   HL, RPP   ;   init to RPP 
 013A  22 0C FE			DB    22h, 0Ch,0FEh    ;       LD   (RP), HL  ;   simulated R-stack reg at RP 
				                       ; 
 013D  21 00 E1			DB    21h, 00h,0E1h    ;       LD   HL, UPP    ; use the initial USER VARIABLE area 
 0140  22 0E FE			DB    22h, 0Eh,0FEh    ;       LD   (UP), HL   ; simulated R-stack reg at RP 
				                       ; 
 0143  01 00 00			DB    01h, 00h, 00h    ;       LD  BC, ERROR   ;jmp 0 cold-start whenever R-stack underflow-used 
				                       ;                 ; this is supposed not impossible to be happen 
				 
 0146  0E 1C			DB    0Eh, 1Ch         ;       LD  C, 1CH 
 0148  3E BB			DB    3Eh,0BBh         ;       LD  A, 0BBH     ;PIOA data: GRN LED only  . 
 014A  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				 
 014C  C3			DB   0C3h              ;       JP  COLD 
 014D  143C R			DW   COLD 
				 
				 
				;;   NextStep 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-6


				;The Forth Inner Interpreter--IP (=BC)is pointing the To-Be-Exec one 
 014F				NextStep: ;The Forth Inner Interpreter--IP (=BC)is pointing the To-Be-Exec one 
				 
 014F  0A			DB    0Ah              ;       LD  A, (BC); 7t 
 0150  03			DB    03h              ;       INC BC     ; 6t 
 0151  6F			DB    6Fh              ;       LD  L, A   ; 4t 
 0152  0A			DB    0Ah              ;       LD  A, (BC); 7t 
 0153  03			DB    03h              ;       INC BC     ; 6t 
 0154  67			DB    67h              ;       LD  H, A   ; 4t 
 0155  E9			DB   0E9h              ;       JP  (HL)   ; 4t 
				                       ;                  ; 38t==(10MHz)3.8 usec. 
				 
				 
				;; The kernel 
				 
				;   doLIT       ( -- w ) 
				;               Push an inline literal. 
				 
				                $CODE   COMPO+5,'doLIT',DOLIT 
 0156                        1	DOLIT:                                    ; 
 1FF4                        1	ORG     _NAME                             ; 
 1FF4  0156 R 0000           1	        DW       _CODE,_LINK              ; 
 1FF8  45 64 6F 4C 49 54     1	        DB      COMPO+5,'doLIT'                  ; 
 0156                        1	ORG     _CODE                             ; 
 0156  0A			DB    0Ah              ;       LD  A, (BC)  ; 7t 
 0157  03			DB    03h              ;       INC BC       ; 6t 
 0158  6F			DB    6Fh              ;       LD  L,A      ; 4t 
 0159  0A			DB    0Ah              ;       LD  A,(BC)   ; 7t 
 015A  03			DB    03h              ;       INC BC       ; 6t 
 015B  67			DB    67h              ;       LD  H,A      ; 4t 
 015C  E5			DB   0E5h              ;       PUSH HL      ;11t 
 015D  C3			DB   0C3h 
 015E  014F R			DW   NextStep          ;       JP  NextStep ;10t    ;(10MHz)5.5usec (+2.5usec NextStep) 
				 
				 
				;   doLIST      ( a -- ) 
				;               Process colon list. 
				 
				                $CODE   COMPO+6,'doLIST',DOLST 
 0160                        1	DOLST:                                    ; 
 1FE8                        1	ORG     _NAME                             ; 
 1FE8  0160 R 1FF8 R         1	        DW       _CODE,_LINK              ; 
 1FEC  46 64 6F 4C 49 53 54  1	        DB      COMPO+6,'doLIST'                  ; 
 0160                        1	ORG     _CODE                             ; 
 0160  2A 0C FE			DB    2Ah, 0Ch,0FEh    ;       LD  HL, (RP) ;16t 
 0163  2B			DB    2Bh              ;       DEC HL       ; 6t 
 0164  70			DB    70h              ;       LD  (HL), B  ; 7t      \ end of r-push simulation 
 0165  2B			DB    2Bh              ;       DEC HL       ; 6t 
 0166  71			DB    71h              ;       LD  (HL), C  ; 7t      \ end of r-push simulation 
 0167  22 0C FE			DB    22h, 0Ch,0FEh    ;       LD  (RP), HL ;16t      \ IP is r-pushed (simulated) 
				               ;                    ; 
 016A  C1			DB   0C1h              ;       POP BC       ;10t 
 016B  C3			DB   0C3h 
 016C  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                      ;99t==9.9usec (+ 2.4usec for NextStep) 
				 
				 
				 
				;   EXIT        ( -- ) 
				;               Terminate a colon definition. 
				 
				                $CODE   4,'EXIT',EXIT 
 016E                        1	EXIT:                                    ; 
 1FDE                        1	ORG     _NAME                             ; 
 1FDE  016E R 1FEC R         1	        DW       _CODE,_LINK              ; 
 1FE2  04 45 58 49 54        1	        DB      4,'EXIT'                  ; 
 016E                        1	ORG     _CODE                             ; 
				 
 016E  2A 0C FE			DB    2Ah, 0Ch,0FEh    ;       LD  HL, (RP) ;16t 
 0171  4E			DB    4Eh              ;       LD  C, (HL)  ; 7t 
 0172  23			DB    23h              ;       INC HL       ; 6t 
 0173  46			DB    46h              ;       LD  B, (HL)  ; 7t 
 0174  23			DB    23h              ;       INC HL       ; 6t 
 0175  22 0C FE			DB    22h, 0Ch,0FEh    ;       LD  (RP),HL  ;16t 
 0178  C3			DB   0C3h 
 0179  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;68t==6.8us 
				 
				 
				 
				;   EXECUTE     ( ca -- ) 
				;               Execute the word at ca. 
				 
				                $CODE   7,'EXECUTE',EXECU 
 017B  90                    2	        EVEN                                    ; 
 017C                        1	EXECU:                                    ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-7


 1FD2                        1	ORG     _NAME                             ; 
 1FD2  017C R 1FE2 R         1	        DW       _CODE,_LINK              ; 
 1FD6  07 45 58 45 43 55 54  1	        DB      7,'EXECUTE'                  ; 
 017C                        1	ORG     _CODE                             ; 
 017C  E1			DB   0E1h              ;       POP HL        ;10t 
 017D  E9			DB   0E9h              ;       JP  (HL)      ; 4t 
				 
				 
				 
				;   next        ( -- ) 
				;               Run time code for the single index loop. 
				;               : next ( -- ) \ hilevel model 
				;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ; 
				 
				                $CODE   COMPO+4,'next',DONXT 
 017E                        1	DONXT:                                    ; 
 1FC8                        1	ORG     _NAME                             ; 
 1FC8  017E R 1FD6 R         1	        DW       _CODE,_LINK              ; 
 1FCC  44 6E 65 78 74        1	        DB      COMPO+4,'next'                  ; 
 017E                        1	ORG     _CODE                             ; 
 017E  2A 0C FE			DB   2Ah, 0Ch,0FEh     ;       LD  HL, (RP) ;16t 
 0181  7E			DB   7Eh               ;       LD  A, (HL)  ; 7t 
 0182  B7			DB  0B7h               ;       OR  A        ; 4t 
 0183  20 0E			DB   20h, 0Eh          ;       JR  NZ, DECLOW;12/7t a fast dec is ok, only failed every 255 time 
				                       ;                    ; low byte 0 
 0185  23			DB   23h               ;       INC HL       ; 6t 
 0186  7E			DB   7Eh               ;       LD  A, (HL)  ; 7t 
 0187  B7			DB  0B7h               ;       OR  A        ; 4t 
 0188  20 0C			DB   20h, 0Ch          ;       JR  NZ, DECHILO;12/7t Hi-byte no-zero, it is also a re-loop case 
				                       ;zero bound now .. . 
 018A  23			DB   23h               ;       INC HL       ; 6tdiscard the loop count on R-stack 
 018B  22 0C FE			DB   22h, 0Ch,0FEh     ;       LD  (RP), HL ;16t 
 018E  03			DB   03h               ;       INC BC       ; 6t\ IP slip over the re-loop-addr 
 018F  03			DB   03h               ;       INC BC       ; 6t 
 0190  C3			DB  0C3h 
 0191  014F R			DW  NextStep           ;       JP  NextStep ;10t loop is over 
				                       ;                    ; 98t==(10MHz)9.8usec 
 0193  35			DB   35h              ;DECHILO:DEC (HL)     ;11t hi-byte 
 0194  2B			DB   2Bh               ;       DEC HL       ; 6t back to low byte 
 0195  35			DB   35h               ;DECLOW:DEC (HL)     ;11t low byte non-zero, just dec it and re-loop 
 0196  69			DB   69h               ;       LD  L, C     ; 4t get loop-start-adr to IP and keep stepping 
 0197  60			DB   60h               ;       LD  H, B     ; 4t 
 0198  4E			DB   4Eh               ;       LD  C, (HL)  ; 7t 
 0199  23			DB   23h               ;       INC HL       ; 6t 
 019A  46			DB   46h               ;       LD  B, (HL)  ; 7t 
 019B  C3			DB  0C3h 
 019C  014F R			DW  NextStep           ;       JP  NextStep ;10t 
				                              ; low byte dec:    88t==(10MHz)8.8usec 
				                              ; lo&Hi byte dec: 134t==(10MHz)13.4usec 
				 
				 
				;   ?brAhnch     ( f -- ) 
				;               Branch if flag is zero. 
				 
				                $CODE   COMPO+7,'?branch',QBRAN 
 019E                        1	QBRAN:                                    ; 
 1FBC                        1	ORG     _NAME                             ; 
 1FBC  019E R 1FCC R         1	        DW       _CODE,_LINK              ; 
 1FC0  47 3F 62 72 61 6E 63  1	        DB      COMPO+7,'?branch'                  ; 
 019E                        1	ORG     _CODE                             ; 
 019E  E1			DB   0E1h              ;       POP HL        ;10t 
 019F  7D			DB    7Dh              ;       LD  A, L      ; 4t    ?branch adr is just after ?branch 
 01A0  B4			DB   0B4h              ;       OR  H         ; 4t    and IP is pointing it 
 01A1  28 05			DB    28h, 05h         ;       JR  Z,ZEROO   ; 12/7t (Z=1,12t) 
 01A3  03			DB    03h              ;       INC BC        ; 6t    IP slip over the retun addr 
 01A4  03			DB    03h              ;       INC BC        ; 6t    ex: 'TRUE IF' will slip over 
 01A5  C3			DB   0C3h 
 01A6  014F R			DW   NextStep          ;       JP  NextStep  ;10t  ;47t==(10MHz)4.7usec 
				                       ; 
 01A8  69			DB    69h              ;ZEROO: LD  L, C      ; 4t    get IP :=[IP] and go 
 01A9  60			DB    60h              ;       LD  H, B      ; 4t 
 01AA  4E			DB    4Eh              ;       LD  C, (HL)   ; 7t 
 01AB  23			DB    23h              ;       INC HL        ; 6t 
 01AC  46			DB    46h              ;       LD  B, (HL)   ; 7t 
 01AD  C3			DB   0C3h 
 01AE  014F R			DW   NextStep          ;       JP  NextStep  ;10t  68t==(10MHz)6.8usec 
				 
				 
				 
				;   branch      ( -- ) 
				;               Branch to an inline address. 
				 
				                $CODE   COMPO+6,'branch',BRAN 
 01B0                        1	BRAN:                                    ; 
 1FB0                        1	ORG     _NAME                             ; 
 1FB0  01B0 R 1FC0 R         1	        DW       _CODE,_LINK              ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-8


 1FB4  46 62 72 61 6E 63 68  1	        DB      COMPO+6,'branch'                  ; 
 01B0                        1	ORG     _CODE                             ; 
 01B0  69			DB    69h              ;       LD  L, C      ; 4t   get IP :=[IP] and go 
 01B1  60			DB    60h              ;       LD  H, B      ; 4t 
 01B2  4E			DB    4Eh              ;       LD  C, (HL)   ; 7t 
 01B3  23			DB    23h              ;       INC HL        ; 6t 
 01B4  46			DB    46h              ;       LD  B, (HL)   ; 7t 
 01B5  C3			DB   0C3h 
 01B6  014F R			DW   NextStep          ;       JP  NextStep  ;10t 
				                       ;                     ;38t==(10MHz)3.8usec 
				 
				 
				 
				;   !           ( w a -- ) 
				;               Pop the data stack to memory. 
				 
				                $CODE   1,'!',STORE 
 01B8                        1	STORE:                                    ; 
 1FAA                        1	ORG     _NAME                             ; 
 1FAA  01B8 R 1FB4 R         1	        DW       _CODE,_LINK              ; 
 1FAE  01 21                 1	        DB      1,'!'                  ; 
 01B8                        1	ORG     _CODE                             ; 
 01B8  E1			DB   0E1h              ;       POP HL       ;10t 
 01B9  D1			DB   0D1h              ;       POP DE       ;10t 
 01BA  73			DB    73h              ;       LD  (HL), E  ; 7t 
 01BB  23			DB    23h              ;       INC HL       ; 6t 
 01BC  72			DB    72h              ;       LD  (HL), D  ; 7t 
 01BD  C3			DB   0C3h 
 01BE  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;50t==(10Mhz)5.0 usec 
				 
				 
				 
				;   @           ( a -- w ) 
				;               Push memory location to the data stack. 
				 
				                $CODE   1,'@',AT 
 01C0                        1	AT:                                    ; 
 1FA4                        1	ORG     _NAME                             ; 
 1FA4  01C0 R 1FAE R         1	        DW       _CODE,_LINK              ; 
 1FA8  01 40                 1	        DB      1,'@'                  ; 
 01C0                        1	ORG     _CODE                             ; 
 01C0  E1			DB   0E1h              ;       POP HL       ;10t 
 01C1  5E			DB    5Eh              ;       LD  E, (HL)  ; 7t 
 01C2  23			DB    23h              ;       INC HL       ; 6t 
 01C3  56			DB    56h              ;       LD  D, (HL)  ; 7t 
 01C4  D5			DB   0D5h              ;       PUSH DE      ;11t 
 01C5  C3			DB   0C3h 
 01C6  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;51t==(10Mhz)5.1usec 
				 
				 
				 
				;   C!          ( c b -- ) 
				;               Pop the data stack to byte memory. 
				 
				                $CODE   2,'C!',CSTOR 
 01C8                        1	CSTOR:                                    ; 
 1F9C                        1	ORG     _NAME                             ; 
 1F9C  01C8 R 1FA8 R         1	        DW       _CODE,_LINK              ; 
 1FA0  02 43 21              1	        DB      2,'C!'                  ; 
 01C8                        1	ORG     _CODE                             ; 
 01C8  E1			DB   0E1h              ;       POP HL        ;10t 
 01C9  D1			DB   0D1h              ;       POP DE        ;10t 
 01CA  73			DB    73h              ;       LD  (HL), E   ; 7t 
 01CB  C3			DB   0C3h 
 01CC  014F R			DW   NextStep          ;       JP  NextStep  ;10t 
				                       ;                     ;37t==(10Mhz)3.7usec 
				 
				 
				 
				 
				;   C@          ( b -- c ) 
				;               Push byte memory location to the data stack. 
				 
				                $CODE   2,'C@',CAT 
 01CE                        1	CAT:                                    ; 
 1F94                        1	ORG     _NAME                             ; 
 1F94  01CE R 1FA0 R         1	        DW       _CODE,_LINK              ; 
 1F98  02 43 40              1	        DB      2,'C@'                  ; 
 01CE                        1	ORG     _CODE                             ; 
 01CE  E1			DB   0E1h              ;       POP HL       ;10t 
 01CF  5E			DB    5Eh              ;       LD  E, (HL)  ; 7t 
 01D0  16 00			DB    16h, 00h         ;       LD  D, 0     ; 7t 
 01D2  D5			DB   0D5h              ;       PUSH DE      ;11t 
 01D3  C3			DB   0C3h 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-9


 01D4  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;45t==(10Mhz)4.5usec 
				 
				 
				 
				 
				;   >R          ( w -- ) 
				;               Push the data stack to the return stack. 
				 
				                $CODE   COMPO+2,'>R',TOR 
 01D6                        1	TOR:                                    ; 
 1F8C                        1	ORG     _NAME                             ; 
 1F8C  01D6 R 1F98 R         1	        DW       _CODE,_LINK              ; 
 1F90  42 3E 52              1	        DB      COMPO+2,'>R'                  ; 
 01D6                        1	ORG     _CODE                             ; 
 01D6  D1			DB   0D1h              ;       POP DE       ;10t 
 01D7  2A 0C FE			DB    2Ah, 0Ch,0FEh    ;       LD  HL, (RP) ;16t 
 01DA  2B			DB    2Bh              ;       DEC HL       ; 6t 
 01DB  72			DB    72h              ;       LD  (HL), D  ; 7t 
 01DC  2B			DB    2Bh              ;       DEC HL       ; 6t 
 01DD  73			DB    73h              ;       LD  (HL), E  ; 7t 
 01DE  22 0C FE			DB    22h, 0Ch,0FEh    ;       LD  (RP), HL ;16t 
 01E1  C3			DB   0C3h 
 01E2  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;78t==(10MHz)7.8usec 
				 
				 
				 
				;   R@          ( -- w ) 
				;               Copy top of return stack to the data stack. 
				 
				                $CODE   2,'R@',RAT 
 01E4                        1	RAT:                                    ; 
 1F84                        1	ORG     _NAME                             ; 
 1F84  01E4 R 1F90 R         1	        DW       _CODE,_LINK              ; 
 1F88  02 52 40              1	        DB      2,'R@'                  ; 
 01E4                        1	ORG     _CODE                             ; 
 01E4  2A 0C FE			DB    2Ah, 0Ch,0FEh    ;       LD  HL, (RP) ;16t 
 01E7  5E			DB    5Eh              ;       LD  E, (HL)  ; 7t 
 01E8  23			DB    23h              ;       INC HL       ; 6t 
 01E9  56			DB    56h              ;       LD  D, (HL)  ; 7t 
 01EA  D5			DB   0D5h              ;       PUSH DE      ;11t 
 01EB  C3			DB   0C3h 
 01EC  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;57t==(10MHz)5.7usec 
				 
				 
				 
				;   R>          ( -- w ) 
				;               Pop the return stack to the data stack. 
				 
				                $CODE   2,'R>',RFROM 
 01EE                        1	RFROM:                                    ; 
 1F7C                        1	ORG     _NAME                             ; 
 1F7C  01EE R 1F88 R         1	        DW       _CODE,_LINK              ; 
 1F80  02 52 3E              1	        DB      2,'R>'                  ; 
 01EE                        1	ORG     _CODE                             ; 
 01EE  2A 0C FE			DB    2Ah, 0Ch,0FEh    ;       LD  HL, (RP) ;16t 
 01F1  5E			DB    5Eh              ;       LD  E, (HL)  ; 7t 
 01F2  23			DB    23h              ;       INC HL       ; 6t 
 01F3  56			DB    56h              ;       LD  D, (HL)  ; 7t 
 01F4  23			DB    23h              ;       INC HL       ; 6t 
 01F5  22 0C FE			DB    22h, 0Ch,0FEh    ;       LD  (RP), HL ;16t 
 01F8  D5			DB   0D5h              ;       PUSH DE      ;11t 
 01F9  C3			DB   0C3h 
 01FA  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;67t==(10MHz)5.7.usec 
				 
				 
				 
				;   RP@         ( -- a ) 
				;               Push the current RP to the data stack. 
				 
				                $CODE   3,'RP@',RPAT 
 01FC                        1	RPAT:                                    ; 
 1F74                        1	ORG     _NAME                             ; 
 1F74  01FC R 1F80 R         1	        DW       _CODE,_LINK              ; 
 1F78  03 52 50 40           1	        DB      3,'RP@'                  ; 
 01FC                        1	ORG     _CODE                             ; 
 01FC  2A 0C FE			DB    2Ah, 0Ch,0FEh    ;       LD  HL, (RP) 
 01FF  E5			DB   0E5h              ;       PUSH HL 
 0200  C3			DB   0C3h 
 0201  014F R			DW   NextStep          ;       JP  NextStep 
				 
				 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-10


				;   RP!         ( a -- ) 
				;               Set the return stack pointer. 
				 
				                $CODE   COMPO+3,'RP!',RPSTO 
 0203  90                    2	        EVEN                                    ; 
 0204                        1	RPSTO:                                    ; 
 1F6C                        1	ORG     _NAME                             ; 
 1F6C  0204 R 1F78 R         1	        DW       _CODE,_LINK              ; 
 1F70  43 52 50 21           1	        DB      COMPO+3,'RP!'                  ; 
 0204                        1	ORG     _CODE                             ; 
 0204  E1			DB   0E1h              ;       POP HL       ; 
 0205  22 0C FE			DB    22h, 0Ch,0FEh    ;       LD  (RP), HL ; 
 0208  C3			DB   0C3h 
 0209  014F R			DW   NextStep          ;       JP  NextStep ; 
				 
				 
				 
				;   SP@         ( -- a ) 
				;               Push the current data stack pointer. 
				 
				                $CODE   3,'SP@',SPAT 
 020B  90                    2	        EVEN                                    ; 
 020C                        1	SPAT:                                    ; 
 1F64                        1	ORG     _NAME                             ; 
 1F64  020C R 1F70 R         1	        DW       _CODE,_LINK              ; 
 1F68  03 53 50 40           1	        DB      3,'SP@'                  ; 
 020C                        1	ORG     _CODE                             ; 
 020C  21 00 00			DB    21h, 00h, 00h    ;       LD  HL, 0 
 020F  39			DB    39h              ;       ADD HL, SP 
 0210  E5			DB   0E5h              ;       PUSH HL 
 0211  C3			DB   0C3h 
 0212  014F R			DW   NextStep          ;       JP  NextStep 
				 
				 
				 
				;   SP!         ( a -- ) 
				;               Set the data stack pointer. 
				 
				                $CODE   3,'SP!',SPSTO 
 0214                        1	SPSTO:                                    ; 
 1F5C                        1	ORG     _NAME                             ; 
 1F5C  0214 R 1F68 R         1	        DW       _CODE,_LINK              ; 
 1F60  03 53 50 21           1	        DB      3,'SP!'                  ; 
 0214                        1	ORG     _CODE                             ; 
 0214  E1			DB   0E1h              ;       POP HL 
 0215  F9			DB   0F9h              ;       LD  SP, HL 
 0216  C3			DB   0C3h 
 0217  014F R			DW   NextStep          ;       JP  NextStep 
				 
				 
				 
				;   DUP         ( w -- w w ) 
				;               Duplicate the top stack item. 
				 
				                $CODE   3,'DUP',DUPP 
 0219  90                    2	        EVEN                                    ; 
 021A                        1	DUPP:                                    ; 
 1F54                        1	ORG     _NAME                             ; 
 1F54  021A R 1F60 R         1	        DW       _CODE,_LINK              ; 
 1F58  03 44 55 50           1	        DB      3,'DUP'                  ; 
 021A                        1	ORG     _CODE                             ; 
 021A  E1			DB   0E1h              ;       POP HL       ;10t 
 021B  E5			DB   0E5h              ;       PUSH HL      ;11t 
 021C  E5			DB   0E5h              ;       PUSH HL      ;11t 
 021D  C3			DB   0C3h 
 021E  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;42t==(10MHz)4.2usec 
				 
				 
				 
				;   DROP        ( w -- ) 
				;               Discard top stack item. 
				 
				                $CODE   4,'DROP',DROP 
 0220                        1	DROP:                                    ; 
 1F4A                        1	ORG     _NAME                             ; 
 1F4A  0220 R 1F58 R         1	        DW       _CODE,_LINK              ; 
 1F4E  04 44 52 4F 50        1	        DB      4,'DROP'                  ; 
 0220                        1	ORG     _CODE                             ; 
 0220  E1			DB   0E1h              ;       POP HL       ;10t 
 0221  C3			DB   0C3h 
 0222  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;20t==(10MHz)2.0usec 
				 
				 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-11


				;   SWAP        ( w1 w2 -- w2 w1 ) 
				;               Exchange top two stack items. 
				 
				                $CODE   4,'SWAP',SWAP 
 0224                        1	SWAP:                                    ; 
 1F40                        1	ORG     _NAME                             ; 
 1F40  0224 R 1F4E R         1	        DW       _CODE,_LINK              ; 
 1F44  04 53 57 41 50        1	        DB      4,'SWAP'                  ; 
 0224                        1	ORG     _CODE                             ; 
 0224  E1			DB   0E1h              ;       POP HL       ;10t 
 0225  E3			DB   0E3h              ;       EX  (SP), HL ;19t 
 0226  E5			DB   0E5h              ;       PUSH HL      ;11t 
 0227  C3			DB   0C3h 
 0228  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;50t==(10MHz)5.0usec 
				 
				 
				 
				;   OVER        ( w1 w2 -- w1 w2 w1 ) 
				;               Copy second stack item to top. 
				 
				                $CODE   4,'OVER',OVER 
 022A                        1	OVER:                                    ; 
 1F36                        1	ORG     _NAME                             ; 
 1F36  022A R 1F44 R         1	        DW       _CODE,_LINK              ; 
 1F3A  04 4F 56 45 52        1	        DB      4,'OVER'                  ; 
 022A                        1	ORG     _CODE                             ; 
 022A  D1			DB   0D1h              ;       POP DE       ;10t 
 022B  E1			DB   0E1h              ;       POP HL       ;10t 
 022C  E5			DB   0E5h              ;       PUSH HL      ;11t 
 022D  D5			DB   0D5h              ;       PUSH DE      ;11t 
 022E  E5			DB   0E5h              ;       PUSH HL      ;11t 
 022F  C3			DB   0C3h 
 0230  014F R			DW   NextStep          ;       JP  NextStep ;10t 
				                       ;                    ;63t==(10MHz)6.3usec 
				 
				 
				 
				;   0<          ( n -- t ) 
				;               Return true if n is negative. 
				 
				                $CODE   2,'0<',ZLESS 
 0232                        1	ZLESS:                                    ; 
 1F2E                        1	ORG     _NAME                             ; 
 1F2E  0232 R 1F3A R         1	        DW       _CODE,_LINK              ; 
 1F32  02 30 3C              1	        DB      2,'0<'                  ; 
 0232                        1	ORG     _CODE                             ; 
 0232  E1			DB   0E1h              ;       POP HL         ;10t 
 0233  29			DB    29h              ;       ADD HL, HL     ;11t 
 0234  38 07			DB   038h, 07h         ;       JR  C, LESSZ   ;12/7t 
 0236  21 00 00			DB    21h, 00h, 00h    ;       LD  HL, 0      ;10t 
 0239  E5			DB   0E5h              ;       PUSH HL        ;11t 
 023A  C3			DB   0C3h 
 023B  014F R			DW   NextStep          ;       JP  NextStep   ;10t   59t==(10MHz)5.9usec 
				                       ; 
 023D  21 FF FF			DB    21h,0FFh,0FFh    ;LESSZ: LD  HL, 0FFFFH ;10t 
 0240  E5			DB   0E5h              ;       PUSH HL        ;11t 
 0241  C3			DB   0C3h 
 0242  014F R			DW   NextStep          ;       JP  NextStep   ;10t   64t==(10MHz)6.4usec 
				 
				 
				 
				;   AND         ( w w -- w ) 
				;               Bitwise AND. 
				 
				                $CODE   3,'AND',ANDD 
 0244                        1	ANDD:                                    ; 
 1F26                        1	ORG     _NAME                             ; 
 1F26  0244 R 1F32 R         1	        DW       _CODE,_LINK              ; 
 1F2A  03 41 4E 44           1	        DB      3,'AND'                  ; 
 0244                        1	ORG     _CODE                             ; 
 0244  D1			DB   0D1h              ;       POP DE 
 0245  E1			DB   0E1h              ;       POP HL 
 0246  7B			DB    7Bh              ;       LD  A, E 
 0247  A5			DB   0A5h              ;       AND L 
 0248  6F			DB    6Fh              ;       LD  L, A 
 0249  7A			DB    7Ah              ;       LD  A, D 
 024A  A4			DB   0A4h              ;       AND H 
 024B  67			DB    67h              ;       LD  H, A 
 024C  E5			DB   0E5h              ;       PUSH HL 
 024D  C3			DB   0C3h 
 024E  014F R			DW   NextStep          ;       JP  NextStep 
				 
				 
				 
				;   OR          ( w w -- w ) 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-12


				;               Bitwise inclusive OR. 
				 
				                $CODE   2,'OR',ORR 
 0250                        1	ORR:                                    ; 
 1F1E                        1	ORG     _NAME                             ; 
 1F1E  0250 R 1F2A R         1	        DW       _CODE,_LINK              ; 
 1F22  02 4F 52              1	        DB      2,'OR'                  ; 
 0250                        1	ORG     _CODE                             ; 
 0250  D1			DB   0D1h              ;       POP DE 
 0251  E1			DB   0E1h              ;       POP HL 
 0252  7B			DB    7Bh              ;       LD  A, E 
 0253  B5			DB   0B5h              ;       OR  L 
 0254  6F			DB    6Fh              ;       LD  L, A 
 0255  7A			DB    7Ah              ;       LD  A, D 
 0256  B4			DB   0B4h              ;       OR  H 
 0257  67			DB    67h              ;       LD  H, A 
 0258  E5			DB   0E5h              ;       PUSH HL 
 0259  C3			DB   0C3h 
 025A  014F R			DW   NextStep          ;       JP  NextStep 
				 
				 
				 
				;   XOR         ( w w -- w ) 
				;               Bitwise exclusive 
				 
				                $CODE   3,'XOR',XORR 
 025C                        1	XORR:                                    ; 
 1F16                        1	ORG     _NAME                             ; 
 1F16  025C R 1F22 R         1	        DW       _CODE,_LINK              ; 
 1F1A  03 58 4F 52           1	        DB      3,'XOR'                  ; 
 025C                        1	ORG     _CODE                             ; 
 025C  D1			DB   0D1h              ;       POP DE 
 025D  E1			DB   0E1h              ;       POP HL 
 025E  7B			DB    7Bh              ;       LD  A, E 
 025F  AD			DB   0ADh              ;       XOR L 
 0260  6F			DB    6Fh              ;       LD  L, A 
 0261  7A			DB    7Ah              ;       LD  A, D 
 0262  AC			DB   0ACh              ;       XOR H 
 0263  67			DB    67h              ;       LD  H, A 
 0264  E5			DB   0E5h              ;       PUSH HL 
 0265  C3			DB   0C3h 
 0266  014F R			DW   NextStep          ;       JP  NextStep 
				 
				 
				 
				;   UM+         ( w w -- w cy ) 
				;               Add two numbers, return the sum and carry flag. 
				 
				                $CODE   3,'UM+',UPLUS 
 0268                        1	UPLUS:                                    ; 
 1F0E                        1	ORG     _NAME                             ; 
 1F0E  0268 R 1F1A R         1	        DW       _CODE,_LINK              ; 
 1F12  03 55 4D 2B           1	        DB      3,'UM+'                  ; 
 0268                        1	ORG     _CODE                             ; 
 0268  D1			DB   0D1h              ;       POP DE         ;10t 
 0269  E1			DB   0E1h              ;       POP HL         ;10t 
 026A  19			DB    19h              ;       ADD HL, DE     ;11t 
 026B  E5			DB   0E5h              ;       PUSH HL        ;11t 
 026C  38 07			DB    38h, 07h         ;       JR  C, CARRY   ;12/7t 
 026E  21 00 00			DB    21h, 00h, 00h    ;       LD  HL, 0      ;10t 
 0271  E5			DB   0E5h              ;       PUSH HL        ;11t 
 0272  C3			DB   0C3h 
 0273  014F R			DW   NextStep          ;       JP  NextStep   ;10t 
				                       ; 
 0275  21 01 00			DB    21h, 01h, 00h    ;CARRY: LD  HL, 1      ;10t 
 0278  E5			DB   0E5h              ;       PUSH HL        ;11t 
 0279  C3			DB   0C3h 
 027A  014F R			DW   NextStep          ;       JP  NextStep   ;10t 
				 
				 
				 
				;; Device dependent I/O 
				 
				;   !IO         ( -- ) 
				;               Initialize the serial I/O devices. 
				 
				                $CODE   3,'!IO',STOIO ; 
 027C                        1	STOIO:                                    ; 
 1F06                        1	ORG     _NAME                             ; 
 1F06  027C R 1F12 R         1	        DW       _CODE,_LINK              ; 
 1F0A  03 21 49 4F           1	        DB      3,'!IO'                  ; 
 027C                        1	ORG     _CODE                             ; 
 027C				TST:           ; init  SIO interrupt vector 
 027C  D9			DB   0D9h              ;       EXX           ; 4t 
 027D  3E FE			DB    3Eh,0FEh         ;       LD  A, 0FEH 
 027F  ED 47			DB   0EDh, 47h         ;       LD  I, A 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-13


 0281  21			DB    21h 
 0282  0366 R			DW    SiobRxBAvl       ;       LD  HL, SiobRxBAvl 
 0284  22 04 FE			DB    22h, 04h,0FEh    ;       LD  (0FE04H), HL   ; intrrupt vector cell 
 0287  21			DB    21h              ;       LD  HL 
 0288  0377 R			DW    SiobSRxCond 
 028A  22 06 FE			DB    22h, 06h,0FEh    ;       LD  (0FE06H), HL   ; intrrupt vector cell 
				                       ; 
				                       ;; init SIOB Rx Q ptr 
 028D  21 00 FB			DB    21h, 00h,0FBh    ;       LD  HL, SiobRxQ 
 0290  22 12 FE			DB    22h, 12h,0FEh    ;       LD  (SiobRxQin), HL 
 0293  22 14 FE			DB    22h, 14h,0FEh    ;       LD  (SiobRxQout), HL 
				                       ; 
				                       ; ; init CTC 
 0296  0E 11			DB    0Eh, 11h         ;       LD  C, 011H   ; CTC 
 0298  3E 07			DB    3Eh, 07h         ;       LD  A, 07H 
 029A  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 029C  3E 04			DB    3Eh, 04h         ;       LD  A, 04 
 029E  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
				                       ; ; init HW for my system Z80 PIO 
 02A0  0E 1D			DB    0Eh, 1Dh         ;       LD  C, 01DH   ; PIOA 
 02A2  3E CF			DB    3Eh,0CFh         ;       LD  A, 0CFH 
 02A4  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02A6  3E 00			DB    3Eh, 00h         ;       LD  A, 0 
 02A8  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02AA  3E 17			DB    3Eh, 17h         ;       LD  A, 17H 
 02AC  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02AE  3E FF			DB    3Eh,0FFh         ;       LD  A, 0FFH 
 02B0  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
 02B2  0E 1F			DB    0Eh, 1Fh         ;       LD  C, 1FH   ;PIOB 
 02B4  3E CF			DB    3Eh,0CFh         ;       LD  A, 0CFH 
 02B6  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02B8  3E 00			DB    3Eh, 00h         ;       LD  A, 0 
 02BA  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02BC  3E 17			DB    3Eh, 17h         ;       LD  A, 17H 
 02BE  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02C0  3E FF			DB    3Eh,0FFh         ;       LD  A, 0FFH 
 02C2  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				 
 02C4  0E 1C			DB    0Eh, 1Ch         ;check  LD  C, 1CH 
 02C6  3E 3B			DB    3Eh, 3Bh         ;check  LD  A, 03BH  ;PIOA data: TST & Green LED 
 02C8  ED 79			DB   0EDh, 79h         ;check  OUT (C), A 
				;DB  76H ;!!!!!!!!!! HALT                ; one of testing poing during porting 
 02CA  0E 1E			DB    0Eh, 1Eh         ;       LD  C, 1EH 
 02CC  3E 17			DB    3Eh, 17h         ;       LD  A, 17H     ;PIOB data: .. . 
 02CE  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
				                       ;;  init SIO 
 02D0  0E 1B			DB    0Eh, 1Bh         ;       LD  C, 1BH 
 02D2  3E 18			DB    3Eh, 18h         ;       LD  A, 18H 
 02D4  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02D6  3E 01			DB    3Eh, 01h         ;       LD  A, 01H 
 02D8  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02DA  3E 1D			DB    3Eh, 1Dh         ;       LD  A, 1DH 
 02DC  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
 02DE  3E 02			DB    3Eh, 02h         ;       LD  A, 02H 
 02E0  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02E2  3E 00			DB    3Eh, 00h         ;       LD  A, 00H 
 02E4  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
 02E6  3E 03			DB    3Eh, 03h         ;       LD  A, 03H 
 02E8  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02EA  3E C1			DB    3Eh,0C1h         ;       LD  A, C1H 
 02EC  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
 02EE  3E 04			DB    3Eh, 04h         ;       LD  A, 04H 
 02F0  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02F2  3E 44			DB    3Eh, 44h         ;       LD  A, 44H 
 02F4  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
 02F6  3E 05			DB    3Eh, 05h         ;       LD  A, 05H 
 02F8  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
 02FA  3E 68			DB    3Eh, 68h         ;       LD  A, 68H 
 02FC  ED 79			DB   0EDh, 79h         ;       OUT (C), A 
				                       ; 
 02FE  FB			DB   0FBh              ;       EI 
 02FF  00 00 00			DB     0,0,0 
				;DB    0Eh, 1Eh         ;       LD  C, 1EH 
				;DB    3Eh, 01h         ;       LD  A, 01H  ;off-hook 
				;DB   0EDh, 79h         ;       OUT (C), A 
				;DB  76H ;!!!!!!!!!! HALT                ; 
 0302  D9			DB   0D9h              ;       EXX           ; 4t 
 0303  C3			DB   0C3h 
 0304  014F R			DW   NextStep          ;       JP NextStep 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-14


				 
				 
				;   PC!         ( uc p --  ) 
				;               output uc to IO port p 
				; 
				                $CODE   3,'PC!',PCSTO 
 0306                        1	PCSTO:                                    ; 
 1EFE                        1	ORG     _NAME                             ; 
 1EFE  0306 R 1F0A R         1	        DW       _CODE,_LINK              ; 
 1F02  03 50 43 21           1	        DB      3,'PC!'                  ; 
 0306                        1	ORG     _CODE                             ; 
 0306  D9			DB   0D9h              ;       EXX           ; 4t 
 0307  C1			DB   0C1h              ;       POP BC        ;10t 
 0308  D1			DB   0D1h              ;       POP DE        ;10t 
 0309  7B			DB    7Bh              ;       LD  A, E      ; 4t 
 030A  ED 79			DB   0EDh, 79h         ;       OUT (C), A    ;12t 
 030C  D9			DB   0D9h              ;       EXX           ; 4t 
 030D  C3			DB   0C3h 
 030E  014F R			DW   NextStep          ;       JP  NextStep  ;10t 
				                       ;                     ;54t==(10MHz)5.4usec 
				 
				;   PC@         ( p -- uc ) 
				;               output uc to IO port p 
				 
				                $CODE   3,'PC@',PCAT 
 0310                        1	PCAT:                                    ; 
 1EF6                        1	ORG     _NAME                             ; 
 1EF6  0310 R 1F02 R         1	        DW       _CODE,_LINK              ; 
 1EFA  03 50 43 40           1	        DB      3,'PC@'                  ; 
 0310                        1	ORG     _CODE                             ; 
 0310  D9			DB   0D9h              ;       EXX           ; 4t 
 0311  C1			DB   0C1h              ;       POP BC        ;10t 
 0312  ED 78			DB   0EDh, 78h         ;       IN  A, (C)    ;12t 
 0314  5F			DB    5Fh              ;       LD  E, A      ; 4t 
 0315  16 00			DB    16h, 00h         ;       LD  D, 0      ; 7t 
 0317  D5			DB   0D5h              ;       PUSH DE       ;11t 
 0318  D9			DB   0D9h              ;       EXX           ; 4t 
 0319  C3			DB   0C3h 
 031A  014F R			DW   NextStep          ;       JP  NextStep  ;10t 
				                       ;                     ;62t==(10MHz)6.2usec 
				 
				 
				;   ?RX         ( -- c T | F ) 
				;               Return input character and true, or a false if no input. 
				 
				                $CODE   3,'?RX',QRX 
 031C                        1	QRX:                                    ; 
 1EEE                        1	ORG     _NAME                             ; 
 1EEE  031C R 1EFA R         1	        DW       _CODE,_LINK              ; 
 1EF2  03 3F 52 58           1	        DB      3,'?RX'                  ; 
 031C                        1	ORG     _CODE                             ; 
 031C  21 14 FE			DB    21h, 14h,0FEh    ;       LD  HL, SiobRxQout  ;16t 
 031F  7E			DB    7Eh              ;       LD  A, (HL)         ; 7t 
 0320  21 12 FE			DB    21h, 12h,0FEh    ;       LD  HL, SiobRxQin   ;16t 
 0323  BE			DB   0BEh              ;       CP  (HL)            ; 7t 
 0324  20 07			DB    20h, 07h         ;       JR  NZ,$1           ; 7t/12t (NZ jump=12t) ptr <>, get the char 
 0326  21 00 00			DB    21h, 00h, 00h    ;       LD  HL, 0           ;10t   False flag 
 0329  E5			DB   0E5h              ;       PUSH HL             ;11t 
 032A  C3			DB   0C3h 
 032B  014F R			DW   NextStep          ;       JP  NextStep        ;10t ==> False Timing:84t==(10MHz)8.4usec 
				                       ;                           ; 
 032D  5E			DB    5Eh              ;$1:    LD  E, (HL)         ; 7t  get this ptr LOW 
 032E  23			DB    23h              ;       INC HL              ; 6t 
 032F  56			DB    56h              ;       LD  D, (HL)         ; 7t  get this ptr HI 
 0330  EB			DB   0EBh              ;       EX  DE,HL           ; 4t  let HL point the char 
 0331  5E			DB    5Eh              ;       LD  E, (HL)         ; 7t  get the char 
 0332  16 00			DB    16h, 00h         ;       LD  D, 0            ; 7t  high byte =0 
 0334  D5			DB   0D5h              ;       PUSH DE             ;11t 
 0335  2C			DB    2Ch              ;       INC L               ; 4t  ptr+1, a 256 byte Ring queue 
 0336  22 12 FE			DB    22h, 12h,0FEh    ;       LD  (SiobRxQin),HL  ;16t 
 0339  21 FF FF			DB    21h,0FFh,0FFh    ;       LD  HL,0FFFFH       ;10t 
 033C  E5			DB   0E5h              ;       PUSH HL             ;11t 
 033D  C3			DB   0C3h 
 033E  014F R			DW   NextStep          ;       JP  NextStep        ;10t ==> TRUE case: 100t(10MHz)10.0usec 
				 
				; 
				;   TX!         ( c -- ) 
				;               Send character c to the output device. 
				 
				                $COLON  3,'TX!',TXSTO 
 0340                        2	TXSTO:                                    ; 
 1EE6                        2	ORG     _NAME                             ; 
 1EE6  0340 R 1EF2 R         2	        DW       _CODE,_LINK              ; 
 1EEA  03 54 58 21           2	        DB      3,'TX!'                  ; 
 0340                        2	ORG     _CODE                             ; 
 0340  CD00                  1	        DW      CALLL                     ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-15


 0342  0160 R                1	        DW      LISTT                     ; 
 0344  0156 R 0000 0156 R	TX1:            DW      DOLIT, 0, DOLIT, 01BH, PCSTO ; BEGIN 0 $1B PC! 
       001B 0306 R		
 034E  0156 R 001B 0310 R	                DW      DOLIT, 1BH, PCAT             ;         $1B PC@ 
 0354  0156 R 0004 0244 R	                DW      DOLIT, 4, ANDD               ;       4 AND 
 035A  019E R 0344 R		                DW      QBRAN,TX1                     ; UNTIL 
 035E  0156 R 001A 0306 R	                DW      DOLIT, 01AH, PCSTO, EXIT     ; $1A PC! ; 
       016E R			
				 
				 
				 
				 
 0366				SiobRxBAvl: 
				       ; for timing: interrupt will get vector, push pc, jump to service .. . 
				       ;  a rough estimate:           7t   +       11t  +  10t 
 0366  F5			DB  0F5h               ;       PUSH AF             ;11t ;save 
 0367  E5			DB  0E5h               ;       PUSH HL             ;11t ;save 
 0368  DB 1A			DB  0DBh, 1Ah          ;       IN  A, (1AH)        ;11t ;SIOB data reg 
 036A  2A 14 FE			DB   2Ah, 14h,0FEh     ;       LD  HL, (SiobRxQout);16t ; 
 036D  77			DB   77h               ;       LD  (HL), A         ; 7t ; put to ring queue 
 036E  2C			DB   2Ch               ;       INC L               ; 4t ; 256 byte ring queue 
 036F  22 14 FE			DB   22h, 14h,0FEh     ;       LD (SiobRxQout),HL  ;16t ;restore 
 0372  E1			DB  0E1h               ;       POP HL              ;10t ;restore 
 0373  F1			DB  0F1h               ;       POP AF              ;10t ;restore 
 0374  FB			DB  0FBh               ;       EI                  ; 4t 
 0375  ED 4D			DB  0EDh, 4Dh          ;       RETI                ;14t 
				                                    ;114t + (entering 28t) => 142t==(10MHz)14.2usec 
				 
				 
 0377				SiobSRxCond:      ; SIOB Special Rx Condition, reset only 
 0377  F5			DB  0F5h               ;       PUSH AF    ; NOTE: a flag may be set for discard a process 
 0378  C5			DB  0C5h               ;       PUSH BC 
 0379  3E 04			DB   3Eh, 04h          ;       LD  A, 4 
 037B  0E 1B			DB   0Eh, 1Bh          ;       LD  C, 1BH 
 037D  ED 79			DB  0EDh, 79h          ;       OUT (C), A  ; reset 
 037F  3E FB			DB   3Eh,0FBh          ;       LD  A, 0FBH 
 0381  0E 1C			DB   0Eh, 1Ch          ;       LD  C, 01CH 
 0383  ED 79			DB  0EDh, 79h          ;       OUT (C), A 
 0385  C1			DB  0C1h               ;       POP BC 
 0386  F1			DB  0F1h               ;       POP AF 
 0387  FB			DB  0FBh               ;       EI 
 0388  ED 4D			DB  0EDh, 4Dh          ;       RETI 
				 
				 
				 
				; High level code replaced by low level code 
				 
				 
				 
				;;  UM/MOD      ( dl dh u -- ur uq ) 
				;;;               Unsigned divide of a double by a single. Return mod and quotient. 
				; tested ok!!!. but not used for minimize the change about original model 
				;                $CODE   6,'UM/MOD',UMMOD 
				;DB  60h                ;       LD  H, B 
				;DB  69h                ;       LD  L, C 
				;DB 0C1h                ;       POP BC 
				;DB 0D1h                ;       POP DE 
				;DB 0E3h                ;       EX  (SP), HL 
				;DB 0EBh                ;       EX  DE, HL 
				;DB  7Dh                ;       LD  A, L 
				;DB  91h                ;       SUB C 
				;DB  7Ch                ;       LD  A, H 
				;DB  98h                ;       SBC A, B 
				;DB  30h, 19h           ;       JR  NC, USBAD 
				;DB  7Ch                ;       LD  A, H 
				;DB  65h                ;       LD  H, L 
				;DB  6Ah                ;       LD  L, D 
				;DB  16h, 08h           ;       LD  D, 8 
				;DB 0D5h                ;       PUSH DE 
				;DB 0CDh 
				;DW USLA                ;       CALL USLA 
				;DB 0D1h                ;       POP  DE 
				;DB 0E5h                ;       PUSH HL 
				;DB  6Bh                ;       LD  L,E 
				;DB 0CDh 
				;DW USLA                ;       CALL USLA 
				;DB  57h                ;       LD  D, A 
				;DB  5Ch                ;       LD  E, H 
				;DB 0C1h                ;       POP BC 
				;DB  61h                ;       LD  H, C 
				;DB 0C1h                ;       POP BC 
				;DB 0D5h                ;       PUSH DE 
				;DB 0E5h                ;       PUSH HL 
				;DB 0C3h                ; 
				;DW NextStep            ;       JP   NextStep 
				;                       ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-16


				;DB 0C1h                ;USBAD: POP BC 
				;DB  21h,0FFh,0FFh      ;       LD  HL, 0FFFFh 
				;DB 0E5h                ;       PUSH HL 
				;DB 0E5h                ;       PUSH HL 
				;DB 0C3h                ; 
				;DW NextStep            ;       JP  NextStep 
				;                       ; 
				;DB  5Fh                ;USLO:  LD  E, A 
				;DB  7Ch                ;       LD  A, H 
				;DB  91h                ;       SUB C 
				;DB  67h                ;       LD  H, A 
				;DB  7Bh                ;       LD  A, E 
				;DB  98h                ;       SBC A, B 
				;DB  30h, 10h           ;       JR  NC, THEN1 
				;DB  7Ch                ;       LD  A, H 
				;DB  81h                ;       ADD A, C 
				;DB  67h                ;       LD  H, A 
				;DB  7Bh                ;       LD  A, E 
				;DB  15h                ;       DEC D 
				;DB 0C8h                ;       RET Z 
				;                       ; 
				;USLA: 
				;DB  29h                ;USLA:  ADD HL, HL 
				;DB  17h                ;       RLA 
				;DB  30h,0EEh           ;       JR  NC, USLO 
				;DB  5Fh                ;       LD  E, A 
				;DB  7Ch                ;       LD  A, H 
				;DB  91h                ;       SUB C 
				;DB  67h                ;       LD  H, A 
				;DB  7Bh                ;       LD  A, E 
				;DB  98h                ;       SBC A, B 
				;DB  2Ch                ;THEN1: INC L 
				;DB  15h                ;       DEC D 
				;DB  20h,0F2h           ;       JR  NZ, USLA 
				;DB 0C9h                ;       RET 
				 
				 
				 
				;; System and user variables 
				 
				;   doVAR       ( -- a ) 
				;               Run time routine for VARIABLE and CREATE. 
				 
				                $COLON  COMPO+5,'doVAR',DOVAR 
 038A                        2	DOVAR:                                    ; 
 1EDC                        2	ORG     _NAME                             ; 
 1EDC  038A R 1EEA R         2	        DW       _CODE,_LINK              ; 
 1EE0  45 64 6F 56 41 52     2	        DB      COMPO+5,'doVAR'                  ; 
 038A                        2	ORG     _CODE                             ; 
 038A  CD00                  1	        DW      CALLL                     ; 
 038C  0160 R                1	        DW      LISTT                     ; 
 038E  01EE R 016E R		                DW      RFROM,EXIT 
				 
				;   UP          ( -- a ) 
				;               Pointer to the user area. 
				 
				                $COLON  2,'UP',UP 
 0392                        2	UP:                                    ; 
 1ED4                        2	ORG     _NAME                             ; 
 1ED4  0392 R 1EE0 R         2	        DW       _CODE,_LINK              ; 
 1ED8  02 55 50              2	        DB      2,'UP'                  ; 
 0392                        2	ORG     _CODE                             ; 
 0392  CD00                  1	        DW      CALLL                     ; 
 0394  0160 R                1	        DW      LISTT                     ; 
 0396  038A R			                DW      DOVAR 
 0398  E100			                DW      UPP 
				 
				;   doUSER      ( -- a ) 
				;               Run time routine for user variables. 
				 
				                $COLON  COMPO+6,'doUSER',DOUSE 
 039A                        2	DOUSE:                                    ; 
 1EC8                        2	ORG     _NAME                             ; 
 1EC8  039A R 1ED8 R         2	        DW       _CODE,_LINK              ; 
 1ECC  46 64 6F 55 53 45 52  2	        DB      COMPO+6,'doUSER'                  ; 
 039A                        2	ORG     _CODE                             ; 
 039A  CD00                  1	        DW      CALLL                     ; 
 039C  0160 R                1	        DW      LISTT                     ; 
 039E  01EE R 01C0 R 0392 R	                DW      RFROM,AT,UP,AT,PLUS,EXIT 
       01C0 R 04A6 R 016E R	
				 
				;   SP0         ( -- a ) 
				;               Pointer to bottom of the data stack. 
				 
				                $USER   3,'SP0',SZERO 
 03AA                        2	SZERO:                                    ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-17


 1EC0                        2	ORG     _NAME                             ; 
 1EC0  03AA R 1ECC R         2	        DW       _CODE,_LINK              ; 
 1EC4  03 53 50 30           2	        DB      3,'SP0'                  ; 
 03AA                        2	ORG     _CODE                             ; 
 03AA  CD00                  1	        DW      CALLL                     ; 
 03AC  0160 R                1	        DW      LISTT                     ; 
 03AE  039A R 0008           1	        DW      DOUSE,_USER               ; 
				 
				;   RP0         ( -- a ) 
				;               Pointer to bottom of the return stack. 
				 
				                $USER   3,'RP0',RZERO 
 03B2                        2	RZERO:                                    ; 
 1EB8                        2	ORG     _NAME                             ; 
 1EB8  03B2 R 1EC4 R         2	        DW       _CODE,_LINK              ; 
 1EBC  03 52 50 30           2	        DB      3,'RP0'                  ; 
 03B2                        2	ORG     _CODE                             ; 
 03B2  CD00                  1	        DW      CALLL                     ; 
 03B4  0160 R                1	        DW      LISTT                     ; 
 03B6  039A R 000A           1	        DW      DOUSE,_USER               ; 
				 
				;   '?KEY       ( -- a ) 
				;               Execution vector of ?KEY. 
				 
				                $USER   5,"'?KEY",TQKEY 
 03BA                        2	TQKEY:                                    ; 
 1EAE                        2	ORG     _NAME                             ; 
 1EAE  03BA R 1EBC R         2	        DW       _CODE,_LINK              ; 
 1EB2  05 27 3F 4B 45 59     2	        DB      5,"'?KEY"                  ; 
 03BA                        2	ORG     _CODE                             ; 
 03BA  CD00                  1	        DW      CALLL                     ; 
 03BC  0160 R                1	        DW      LISTT                     ; 
 03BE  039A R 000C           1	        DW      DOUSE,_USER               ; 
				 
				;   'EMIT       ( -- a ) 
				;               Execution vector of EMIT. 
				 
				                $USER   5,"'EMIT",TEMIT 
 03C2                        2	TEMIT:                                    ; 
 1EA4                        2	ORG     _NAME                             ; 
 1EA4  03C2 R 1EB2 R         2	        DW       _CODE,_LINK              ; 
 1EA8  05 27 45 4D 49 54     2	        DB      5,"'EMIT"                  ; 
 03C2                        2	ORG     _CODE                             ; 
 03C2  CD00                  1	        DW      CALLL                     ; 
 03C4  0160 R                1	        DW      LISTT                     ; 
 03C6  039A R 000E           1	        DW      DOUSE,_USER               ; 
				 
				;   'EXPECT     ( -- a ) 
				;               Execution vector of EXPECT. 
				 
				                $USER   7,"'EXPECT",TEXPE 
 03CA                        2	TEXPE:                                    ; 
 1E98                        2	ORG     _NAME                             ; 
 1E98  03CA R 1EA8 R         2	        DW       _CODE,_LINK              ; 
 1E9C  07 27 45 58 50 45 43  2	        DB      7,"'EXPECT"                  ; 
 03CA                        2	ORG     _CODE                             ; 
 03CA  CD00                  1	        DW      CALLL                     ; 
 03CC  0160 R                1	        DW      LISTT                     ; 
 03CE  039A R 0010           1	        DW      DOUSE,_USER               ; 
				 
				;   'TAP        ( -- a ) 
				;               Execution vector of TAP. 
				 
				                $USER   4,"'TAP",TTAP 
 03D2                        2	TTAP:                                    ; 
 1E8E                        2	ORG     _NAME                             ; 
 1E8E  03D2 R 1E9C R         2	        DW       _CODE,_LINK              ; 
 1E92  04 27 54 41 50        2	        DB      4,"'TAP"                  ; 
 03D2                        2	ORG     _CODE                             ; 
 03D2  CD00                  1	        DW      CALLL                     ; 
 03D4  0160 R                1	        DW      LISTT                     ; 
 03D6  039A R 0012           1	        DW      DOUSE,_USER               ; 
				 
				;   'ECHO       ( -- a ) 
				;               Execution vector of ECHO. 
				 
				                $USER   5,"'ECHO",TECHO 
 03DA                        2	TECHO:                                    ; 
 1E84                        2	ORG     _NAME                             ; 
 1E84  03DA R 1E92 R         2	        DW       _CODE,_LINK              ; 
 1E88  05 27 45 43 48 4F     2	        DB      5,"'ECHO"                  ; 
 03DA                        2	ORG     _CODE                             ; 
 03DA  CD00                  1	        DW      CALLL                     ; 
 03DC  0160 R                1	        DW      LISTT                     ; 
 03DE  039A R 0014           1	        DW      DOUSE,_USER               ; 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-18


				;   'PROMPT     ( -- a ) 
				;               Execution vector of PROMPT. 
				 
				                $USER   7,"'PROMPT",TPROM 
 03E2                        2	TPROM:                                    ; 
 1E78                        2	ORG     _NAME                             ; 
 1E78  03E2 R 1E88 R         2	        DW       _CODE,_LINK              ; 
 1E7C  07 27 50 52 4F 4D 50  2	        DB      7,"'PROMPT"                  ; 
 03E2                        2	ORG     _CODE                             ; 
 03E2  CD00                  1	        DW      CALLL                     ; 
 03E4  0160 R                1	        DW      LISTT                     ; 
 03E6  039A R 0016           1	        DW      DOUSE,_USER               ; 
				 
				;   BASE        ( -- a ) 
				;               Storage of the radix base for numeric I/O. 
				 
				                $USER   4,'BASE',BASE 
 03EA                        2	BASE:                                    ; 
 1E6E                        2	ORG     _NAME                             ; 
 1E6E  03EA R 1E7C R         2	        DW       _CODE,_LINK              ; 
 1E72  04 42 41 53 45        2	        DB      4,'BASE'                  ; 
 03EA                        2	ORG     _CODE                             ; 
 03EA  CD00                  1	        DW      CALLL                     ; 
 03EC  0160 R                1	        DW      LISTT                     ; 
 03EE  039A R 0018           1	        DW      DOUSE,_USER               ; 
				 
				;   tmp         ( -- a ) 
				;               A temporary storage location used in parse and find. 
				 
				                $USER   COMPO+3,'tmp',TEMP 
 03F2                        2	TEMP:                                    ; 
 1E66                        2	ORG     _NAME                             ; 
 1E66  03F2 R 1E72 R         2	        DW       _CODE,_LINK              ; 
 1E6A  43 74 6D 70           2	        DB      COMPO+3,'tmp'                  ; 
 03F2                        2	ORG     _CODE                             ; 
 03F2  CD00                  1	        DW      CALLL                     ; 
 03F4  0160 R                1	        DW      LISTT                     ; 
 03F6  039A R 001A           1	        DW      DOUSE,_USER               ; 
				 
				;   SPAN        ( -- a ) 
				;               Hold character count received by EXPECT. 
				 
				                $USER   4,'SPAN',SPAN 
 03FA                        2	SPAN:                                    ; 
 1E5C                        2	ORG     _NAME                             ; 
 1E5C  03FA R 1E6A R         2	        DW       _CODE,_LINK              ; 
 1E60  04 53 50 41 4E        2	        DB      4,'SPAN'                  ; 
 03FA                        2	ORG     _CODE                             ; 
 03FA  CD00                  1	        DW      CALLL                     ; 
 03FC  0160 R                1	        DW      LISTT                     ; 
 03FE  039A R 001C           1	        DW      DOUSE,_USER               ; 
				 
				;   >IN         ( -- a ) 
				;               Hold the character pointer while parsing input stream. 
				 
				                $USER   3,'>IN',INN 
 0402                        2	INN:                                    ; 
 1E54                        2	ORG     _NAME                             ; 
 1E54  0402 R 1E60 R         2	        DW       _CODE,_LINK              ; 
 1E58  03 3E 49 4E           2	        DB      3,'>IN'                  ; 
 0402                        2	ORG     _CODE                             ; 
 0402  CD00                  1	        DW      CALLL                     ; 
 0404  0160 R                1	        DW      LISTT                     ; 
 0406  039A R 001E           1	        DW      DOUSE,_USER               ; 
				 
				;   #TIB        ( -- a ) 
				;               Hold the current count and address of the terminal input buffer. 
				 
				                $USER   4,'#TIB',NTIB 
 040A                        2	NTIB:                                    ; 
 1E4A                        2	ORG     _NAME                             ; 
 1E4A  040A R 1E58 R         2	        DW       _CODE,_LINK              ; 
 1E4E  04 23 54 49 42        2	        DB      4,'#TIB'                  ; 
 040A                        2	ORG     _CODE                             ; 
 040A  CD00                  1	        DW      CALLL                     ; 
 040C  0160 R                1	        DW      LISTT                     ; 
 040E  039A R 0020           1	        DW      DOUSE,_USER               ; 
 = 0024				                _USER = _USER+CELLL 
				 
				;   CSP         ( -- a ) 
				;               Hold the stack pointer for error checking. 
				 
				                $USER   3,'CSP',CSP 
 0412                        2	CSP:                                    ; 
 1E42                        2	ORG     _NAME                             ; 
 1E42  0412 R 1E4E R         2	        DW       _CODE,_LINK              ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-19


 1E46  03 43 53 50           2	        DB      3,'CSP'                  ; 
 0412                        2	ORG     _CODE                             ; 
 0412  CD00                  1	        DW      CALLL                     ; 
 0414  0160 R                1	        DW      LISTT                     ; 
 0416  039A R 0024           1	        DW      DOUSE,_USER               ; 
				 
				;   'EVAL       ( -- a ) 
				;               Execution vector of EVAL. 
				 
				                $USER   5,"'EVAL",TEVAL 
 041A                        2	TEVAL:                                    ; 
 1E38                        2	ORG     _NAME                             ; 
 1E38  041A R 1E46 R         2	        DW       _CODE,_LINK              ; 
 1E3C  05 27 45 56 41 4C     2	        DB      5,"'EVAL"                  ; 
 041A                        2	ORG     _CODE                             ; 
 041A  CD00                  1	        DW      CALLL                     ; 
 041C  0160 R                1	        DW      LISTT                     ; 
 041E  039A R 0026           1	        DW      DOUSE,_USER               ; 
				 
				;   'NUMBER     ( -- a ) 
				;               Execution vector of NUMBER?. 
				 
				                $USER   7,"'NUMBER",TNUMB 
 0422                        2	TNUMB:                                    ; 
 1E2C                        2	ORG     _NAME                             ; 
 1E2C  0422 R 1E3C R         2	        DW       _CODE,_LINK              ; 
 1E30  07 27 4E 55 4D 42 45  2	        DB      7,"'NUMBER"                  ; 
 0422                        2	ORG     _CODE                             ; 
 0422  CD00                  1	        DW      CALLL                     ; 
 0424  0160 R                1	        DW      LISTT                     ; 
 0426  039A R 0028           1	        DW      DOUSE,_USER               ; 
				 
				;   HLD         ( -- a ) 
				;               Hold a pointer in building a numeric output string. 
				 
				                $USER   3,'HLD',HLD 
 042A                        2	HLD:                                    ; 
 1E24                        2	ORG     _NAME                             ; 
 1E24  042A R 1E30 R         2	        DW       _CODE,_LINK              ; 
 1E28  03 48 4C 44           2	        DB      3,'HLD'                  ; 
 042A                        2	ORG     _CODE                             ; 
 042A  CD00                  1	        DW      CALLL                     ; 
 042C  0160 R                1	        DW      LISTT                     ; 
 042E  039A R 002A           1	        DW      DOUSE,_USER               ; 
				 
				;   HANDLER     ( -- a ) 
				;               Hold the return stack pointer for error handling. 
				 
				                $USER   7,'HANDLER',HANDL 
 0432                        2	HANDL:                                    ; 
 1E18                        2	ORG     _NAME                             ; 
 1E18  0432 R 1E28 R         2	        DW       _CODE,_LINK              ; 
 1E1C  07 48 41 4E 44 4C 45  2	        DB      7,'HANDLER'                  ; 
 0432                        2	ORG     _CODE                             ; 
 0432  CD00                  1	        DW      CALLL                     ; 
 0434  0160 R                1	        DW      LISTT                     ; 
 0436  039A R 002C           1	        DW      DOUSE,_USER               ; 
				 
				;   CONTEXT     ( -- a ) 
				;               A area to specify vocabulary search order. 
				 
				                $USER   7,'CONTEXT',CNTXT 
 043A                        2	CNTXT:                                    ; 
 1E0C                        2	ORG     _NAME                             ; 
 1E0C  043A R 1E1C R         2	        DW       _CODE,_LINK              ; 
 1E10  07 43 4F 4E 54 45 58  2	        DB      7,'CONTEXT'                  ; 
 043A                        2	ORG     _CODE                             ; 
 043A  CD00                  1	        DW      CALLL                     ; 
 043C  0160 R                1	        DW      LISTT                     ; 
 043E  039A R 002E           1	        DW      DOUSE,_USER               ; 
 = 0040				                _USER = _USER+VOCSS*CELLL       ;vocabulary stack 
				 
				;   CURRENT     ( -- a ) 
				;               Point to the vocabulary to be extended. 
				 
				                $USER   7,'CURRENT',CRRNT 
 0442                        2	CRRNT:                                    ; 
 1E00                        2	ORG     _NAME                             ; 
 1E00  0442 R 1E10 R         2	        DW       _CODE,_LINK              ; 
 1E04  07 43 55 52 52 45 4E  2	        DB      7,'CURRENT'                  ; 
 0442                        2	ORG     _CODE                             ; 
 0442  CD00                  1	        DW      CALLL                     ; 
 0444  0160 R                1	        DW      LISTT                     ; 
 0446  039A R 0040           1	        DW      DOUSE,_USER               ; 
 = 0044				                _USER = _USER+CELLL             ;vocabulary link pointer 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-20


				;   CP          ( -- a ) 
				;               Point to the top of the code dictionary. 
				 
				                $USER   2,'CP',CP 
 044A                        2	CP:                                    ; 
 1DF8                        2	ORG     _NAME                             ; 
 1DF8  044A R 1E04 R         2	        DW       _CODE,_LINK              ; 
 1DFC  02 43 50              2	        DB      2,'CP'                  ; 
 044A                        2	ORG     _CODE                             ; 
 044A  CD00                  1	        DW      CALLL                     ; 
 044C  0160 R                1	        DW      LISTT                     ; 
 044E  039A R 0044           1	        DW      DOUSE,_USER               ; 
				 
				;   NP          ( -- a ) 
				;               Point to the bottom of the name dictionary. 
				 
				                $USER   2,'NP',NP 
 0452                        2	NP:                                    ; 
 1DF0                        2	ORG     _NAME                             ; 
 1DF0  0452 R 1DFC R         2	        DW       _CODE,_LINK              ; 
 1DF4  02 4E 50              2	        DB      2,'NP'                  ; 
 0452                        2	ORG     _CODE                             ; 
 0452  CD00                  1	        DW      CALLL                     ; 
 0454  0160 R                1	        DW      LISTT                     ; 
 0456  039A R 0046           1	        DW      DOUSE,_USER               ; 
				 
				;   LAST        ( -- a ) 
				;               Point to the last name in the name dictionary. 
				 
				                $USER   4,'LAST',LAST 
 045A                        2	LAST:                                    ; 
 1DE6                        2	ORG     _NAME                             ; 
 1DE6  045A R 1DF4 R         2	        DW       _CODE,_LINK              ; 
 1DEA  04 4C 41 53 54        2	        DB      4,'LAST'                  ; 
 045A                        2	ORG     _CODE                             ; 
 045A  CD00                  1	        DW      CALLL                     ; 
 045C  0160 R                1	        DW      LISTT                     ; 
 045E  039A R 0048           1	        DW      DOUSE,_USER               ; 
				 
				;   forth       ( -- a ) 
				;               Point to the last name in the name dictionary. 
				 
				                $USER   5,'forth',VFRTH 
 0462                        2	VFRTH:                                    ; 
 1DDC                        2	ORG     _NAME                             ; 
 1DDC  0462 R 1DEA R         2	        DW       _CODE,_LINK              ; 
 1DE0  05 66 6F 72 74 68     2	        DB      5,'forth'                  ; 
 0462                        2	ORG     _CODE                             ; 
 0462  CD00                  1	        DW      CALLL                     ; 
 0464  0160 R                1	        DW      LISTT                     ; 
 0466  039A R 004A           1	        DW      DOUSE,_USER               ; 
				 
				;; Common functions 
				 
				;   FORTH       ( -- ) 
				;               Make FORTH the context vocabulary. 
				 
				                $COLON  5,'FORTH',FORTH 
 046A                        2	FORTH:                                    ; 
 1DD2                        2	ORG     _NAME                             ; 
 1DD2  046A R 1DE0 R         2	        DW       _CODE,_LINK              ; 
 1DD6  05 46 4F 52 54 48     2	        DB      5,'FORTH'                  ; 
 046A                        2	ORG     _CODE                             ; 
 046A  CD00                  1	        DW      CALLL                     ; 
 046C  0160 R                1	        DW      LISTT                     ; 
 046E  0462 R 043A R 01B8 R	                DW      VFRTH,CNTXT,STORE,EXIT 
       016E R			
				 
				;   ?DUP        ( w -- w w | 0 ) 
				;               Dup tos if its is not zero. 
				 
				                $COLON  4,'?DUP',QDUP 
 0476                        2	QDUP:                                    ; 
 1DC8                        2	ORG     _NAME                             ; 
 1DC8  0476 R 1DD6 R         2	        DW       _CODE,_LINK              ; 
 1DCC  04 3F 44 55 50        2	        DB      4,'?DUP'                  ; 
 0476                        2	ORG     _CODE                             ; 
 0476  CD00                  1	        DW      CALLL                     ; 
 0478  0160 R                1	        DW      LISTT                     ; 
 047A  021A R			                DW      DUPP 
 047C  019E R 0482 R		                DW      QBRAN,QDUP1 
 0480  021A R			                DW      DUPP 
 0482  016E R			QDUP1:          DW      EXIT 
				 
				;   ROT         ( w1 w2 w3 -- w2 w3 w1 ) 
				;               Rot 3rd item to top. 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-21


				 
				                $COLON  3,'ROT',ROT 
 0484                        2	ROT:                                    ; 
 1DC0                        2	ORG     _NAME                             ; 
 1DC0  0484 R 1DCC R         2	        DW       _CODE,_LINK              ; 
 1DC4  03 52 4F 54           2	        DB      3,'ROT'                  ; 
 0484                        2	ORG     _CODE                             ; 
 0484  CD00                  1	        DW      CALLL                     ; 
 0486  0160 R                1	        DW      LISTT                     ; 
 0488  01D6 R 0224 R 01EE R	                DW      TOR,SWAP,RFROM,SWAP,EXIT 
       0224 R 016E R		
				 
				;   2DROP       ( w w -- ) 
				;               Discard two items on stack. 
				 
				                $COLON  5,'2DROP',DDROP 
 0492                        2	DDROP:                                    ; 
 1DB6                        2	ORG     _NAME                             ; 
 1DB6  0492 R 1DC4 R         2	        DW       _CODE,_LINK              ; 
 1DBA  05 32 44 52 4F 50     2	        DB      5,'2DROP'                  ; 
 0492                        2	ORG     _CODE                             ; 
 0492  CD00                  1	        DW      CALLL                     ; 
 0494  0160 R                1	        DW      LISTT                     ; 
 0496  0220 R 0220 R 016E R	                DW      DROP,DROP,EXIT 
				 
				;   2DUP        ( w1 w2 -- w1 w2 w1 w2 ) 
				;               Duplicate top two items. 
				 
				                $COLON  4,'2DUP',DDUP 
 049C                        2	DDUP:                                    ; 
 1DAC                        2	ORG     _NAME                             ; 
 1DAC  049C R 1DBA R         2	        DW       _CODE,_LINK              ; 
 1DB0  04 32 44 55 50        2	        DB      4,'2DUP'                  ; 
 049C                        2	ORG     _CODE                             ; 
 049C  CD00                  1	        DW      CALLL                     ; 
 049E  0160 R                1	        DW      LISTT                     ; 
 04A0  022A R 022A R 016E R	                DW      OVER,OVER,EXIT 
				 
				;   +           ( w w -- sum ) 
				;               Add top two items. 
				 
				                $COLON  1,'+',PLUS 
 04A6                        2	PLUS:                                    ; 
 1DA6                        2	ORG     _NAME                             ; 
 1DA6  04A6 R 1DB0 R         2	        DW       _CODE,_LINK              ; 
 1DAA  01 2B                 2	        DB      1,'+'                  ; 
 04A6                        2	ORG     _CODE                             ; 
 04A6  CD00                  1	        DW      CALLL                     ; 
 04A8  0160 R                1	        DW      LISTT                     ; 
 04AA  0268 R 0220 R 016E R	                DW      UPLUS,DROP,EXIT 
				 
				;   D+          ( d d -- d ) 
				;               Double addition, as an example using UM+. 
				; 
				;               $COLON  2,'D+',DPLUS 
				;               DW      TOR,SWAP,TOR,UPLUS 
				;               DW      RFROM,RFROM,PLUS,PLUS,EXIT 
				 
				;   NOT         ( w -- w ) 
				;               One's complement of tos. 
				 
				                $COLON  3,'NOT',INVER 
 04B0                        2	INVER:                                    ; 
 1D9E                        2	ORG     _NAME                             ; 
 1D9E  04B0 R 1DAA R         2	        DW       _CODE,_LINK              ; 
 1DA2  03 4E 4F 54           2	        DB      3,'NOT'                  ; 
 04B0                        2	ORG     _CODE                             ; 
 04B0  CD00                  1	        DW      CALLL                     ; 
 04B2  0160 R                1	        DW      LISTT                     ; 
 04B4  0156 R FFFF 025C R	                DW      DOLIT,-1,XORR,EXIT 
       016E R			
				 
				;   NEGATE      ( n -- -n ) 
				;               Two's complement of tos. 
				 
				                $COLON  6,'NEGATE',NEGAT 
 04BC                        2	NEGAT:                                    ; 
 1D92                        2	ORG     _NAME                             ; 
 1D92  04BC R 1DA2 R         2	        DW       _CODE,_LINK              ; 
 1D96  06 4E 45 47 41 54 45  2	        DB      6,'NEGATE'                  ; 
 04BC                        2	ORG     _CODE                             ; 
 04BC  CD00                  1	        DW      CALLL                     ; 
 04BE  0160 R                1	        DW      LISTT                     ; 
 04C0  04B0 R 0156 R 0001	                DW      INVER,DOLIT,1,PLUS,EXIT 
       04A6 R 016E R		
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-22


				;   DNEGATE     ( d -- -d ) 
				;               Two's complement of top double. 
				 
				                $COLON  7,'DNEGATE',DNEGA 
 04CA                        2	DNEGA:                                    ; 
 1D86                        2	ORG     _NAME                             ; 
 1D86  04CA R 1D96 R         2	        DW       _CODE,_LINK              ; 
 1D8A  07 44 4E 45 47 41 54  2	        DB      7,'DNEGATE'                  ; 
 04CA                        2	ORG     _CODE                             ; 
 04CA  CD00                  1	        DW      CALLL                     ; 
 04CC  0160 R                1	        DW      LISTT                     ; 
 04CE  04B0 R 01D6 R 04B0 R	                DW      INVER,TOR,INVER 
 04D4  0156 R 0001 0268 R	                DW      DOLIT,1,UPLUS 
 04DA  01EE R 04A6 R 016E R	                DW      RFROM,PLUS,EXIT 
				 
				;   -           ( n1 n2 -- n1-n2 ) 
				;               Subtraction. 
				 
				                $COLON  1,'-',SUBB 
 04E0                        2	SUBB:                                    ; 
 1D80                        2	ORG     _NAME                             ; 
 1D80  04E0 R 1D8A R         2	        DW       _CODE,_LINK              ; 
 1D84  01 2D                 2	        DB      1,'-'                  ; 
 04E0                        2	ORG     _CODE                             ; 
 04E0  CD00                  1	        DW      CALLL                     ; 
 04E2  0160 R                1	        DW      LISTT                     ; 
 04E4  04BC R 04A6 R 016E R	                DW      NEGAT,PLUS,EXIT 
				 
				;   ABS         ( n -- n ) 
				;               Return the absolute value of n. 
				 
				                $COLON  3,'ABS',ABSS 
 04EA                        2	ABSS:                                    ; 
 1D78                        2	ORG     _NAME                             ; 
 1D78  04EA R 1D84 R         2	        DW       _CODE,_LINK              ; 
 1D7C  03 41 42 53           2	        DB      3,'ABS'                  ; 
 04EA                        2	ORG     _CODE                             ; 
 04EA  CD00                  1	        DW      CALLL                     ; 
 04EC  0160 R                1	        DW      LISTT                     ; 
 04EE  021A R 0232 R		                DW      DUPP,ZLESS 
 04F2  019E R 04F8 R		                DW      QBRAN,ABS1 
 04F6  04BC R			                DW      NEGAT 
 04F8  016E R			ABS1:           DW      EXIT 
				 
				;   =           ( w w -- t ) 
				;               Return true if top two are equal. 
				 
				                $COLON  1,'=',EQUAL 
 04FA                        2	EQUAL:                                    ; 
 1D72                        2	ORG     _NAME                             ; 
 1D72  04FA R 1D7C R         2	        DW       _CODE,_LINK              ; 
 1D76  01 3D                 2	        DB      1,'='                  ; 
 04FA                        2	ORG     _CODE                             ; 
 04FA  CD00                  1	        DW      CALLL                     ; 
 04FC  0160 R                1	        DW      LISTT                     ; 
 04FE  025C R			                DW      XORR 
 0500  019E R 050A R		                DW      QBRAN,EQU1 
 0504  0156 R 0000 016E R	                DW      DOLIT,0,EXIT            ;false flag 
 050A  0156 R FFFF 016E R	EQU1:           DW      DOLIT,-1,EXIT           ;true flag 
				 
				;   U<          ( u u -- t ) 
				;               Unsigned compare of top two items. 
				 
				                $COLON  2,'U<',ULESS 
 0510                        2	ULESS:                                    ; 
 1D6A                        2	ORG     _NAME                             ; 
 1D6A  0510 R 1D76 R         2	        DW       _CODE,_LINK              ; 
 1D6E  02 55 3C              2	        DB      2,'U<'                  ; 
 0510                        2	ORG     _CODE                             ; 
 0510  CD00                  1	        DW      CALLL                     ; 
 0512  0160 R                1	        DW      LISTT                     ; 
 0514  049C R 025C R 0232 R	                DW      DDUP,XORR,ZLESS 
 051A  019E R 0526 R		                DW      QBRAN,ULES1 
 051E  0224 R 0220 R 0232 R	                DW      SWAP,DROP,ZLESS,EXIT 
       016E R			
 0526  04E0 R 0232 R 016E R	ULES1:          DW      SUBB,ZLESS,EXIT 
				 
				;   <           ( n1 n2 -- t ) 
				;               Signed compare of top two items. 
				 
				                $COLON  1,'<',LESS 
 052C                        2	LESS:                                    ; 
 1D64                        2	ORG     _NAME                             ; 
 1D64  052C R 1D6E R         2	        DW       _CODE,_LINK              ; 
 1D68  01 3C                 2	        DB      1,'<'                  ; 
 052C                        2	ORG     _CODE                             ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-23


 052C  CD00                  1	        DW      CALLL                     ; 
 052E  0160 R                1	        DW      LISTT                     ; 
 0530  049C R 025C R 0232 R	                DW      DDUP,XORR,ZLESS 
 0536  019E R 0540 R		                DW      QBRAN,LESS1 
 053A  0220 R 0232 R 016E R	                DW      DROP,ZLESS,EXIT 
 0540  04E0 R 0232 R 016E R	LESS1:          DW      SUBB,ZLESS,EXIT 
				 
				;   MAX         ( n n -- n ) 
				;               Return the greater of two top stack items. 
				 
				                $COLON  3,'MAX',MAX 
 0546                        2	MAX:                                    ; 
 1D5C                        2	ORG     _NAME                             ; 
 1D5C  0546 R 1D68 R         2	        DW       _CODE,_LINK              ; 
 1D60  03 4D 41 58           2	        DB      3,'MAX'                  ; 
 0546                        2	ORG     _CODE                             ; 
 0546  CD00                  1	        DW      CALLL                     ; 
 0548  0160 R                1	        DW      LISTT                     ; 
 054A  049C R 052C R		                DW      DDUP,LESS 
 054E  019E R 0554 R		                DW      QBRAN,MAX1 
 0552  0224 R			                DW      SWAP 
 0554  0220 R 016E R		MAX1:           DW      DROP,EXIT 
				 
				;   MIN         ( n n -- n ) 
				;               Return the smaller of top two stack items. 
				 
				                $COLON  3,'MIN',MIN 
 0558                        2	MIN:                                    ; 
 1D54                        2	ORG     _NAME                             ; 
 1D54  0558 R 1D60 R         2	        DW       _CODE,_LINK              ; 
 1D58  03 4D 49 4E           2	        DB      3,'MIN'                  ; 
 0558                        2	ORG     _CODE                             ; 
 0558  CD00                  1	        DW      CALLL                     ; 
 055A  0160 R                1	        DW      LISTT                     ; 
 055C  049C R 0224 R 052C R	                DW      DDUP,SWAP,LESS 
 0562  019E R 0568 R		                DW      QBRAN,MIN1 
 0566  0224 R			                DW      SWAP 
 0568  0220 R 016E R		MIN1:           DW      DROP,EXIT 
				 
				;   WITHIN      ( u ul uh -- t ) 
				;               Return true if u is within the range of ul and uh. 
				 
				                $COLON  6,'WITHIN',WITHI 
 056C                        2	WITHI:                                    ; 
 1D48                        2	ORG     _NAME                             ; 
 1D48  056C R 1D58 R         2	        DW       _CODE,_LINK              ; 
 1D4C  06 57 49 54 48 49 4E  2	        DB      6,'WITHIN'                  ; 
 056C                        2	ORG     _CODE                             ; 
 056C  CD00                  1	        DW      CALLL                     ; 
 056E  0160 R                1	        DW      LISTT                     ; 
 0570  022A R 04E0 R 01D6 R	                DW      OVER,SUBB,TOR                   ;ul <= u < uh 
 0576  04E0 R 01EE R 0510 R	                DW      SUBB,RFROM,ULESS,EXIT 
       016E R			
				 
				;; Divide 
				 
				;   UM/MOD      ( udl udh u -- ur uq ) 
				;               Unsigned divide of a double by a single. Return mod and quotient. 
				 
				                $COLON  6,'UM/MOD',UMMOD 
 057E                        2	UMMOD:                                    ; 
 1D3C                        2	ORG     _NAME                             ; 
 1D3C  057E R 1D4C R         2	        DW       _CODE,_LINK              ; 
 1D40  06 55 4D 2F 4D 4F 44  2	        DB      6,'UM/MOD'                  ; 
 057E                        2	ORG     _CODE                             ; 
 057E  CD00                  1	        DW      CALLL                     ; 
 0580  0160 R                1	        DW      LISTT                     ; 
 0582  049C R 0510 R		                DW      DDUP,ULESS 
 0586  019E R 05D6 R		                DW      QBRAN,UMM4 
 058A  04BC R 0156 R 000F	                DW      NEGAT,DOLIT,15,TOR 
       01D6 R			
 0592  01D6 R 021A R 0268 R	UMM1:           DW      TOR,DUPP,UPLUS 
 0598  01D6 R 01D6 R 021A R	                DW      TOR,TOR,DUPP,UPLUS 
       0268 R			
 05A0  01EE R 04A6 R 021A R	                DW      RFROM,PLUS,DUPP 
 05A6  01EE R 01E4 R 0224 R	                DW      RFROM,RAT,SWAP,TOR 
       01D6 R			
 05AE  0268 R 01EE R 0250 R	                DW      UPLUS,RFROM,ORR 
 05B4  019E R 05C8 R		                DW      QBRAN,UMM2 
 05B8  01D6 R 0220 R 0156 R	                DW      TOR,DROP,DOLIT,1,PLUS,RFROM 
       0001 04A6 R 01EE R	
 05C4  01B0 R 05CA R		                DW      BRAN,UMM3 
 05C8  0220 R			UMM2:           DW      DROP 
 05CA  01EE R			UMM3:           DW      RFROM 
 05CC  017E R 0592 R		                DW      DONXT,UMM1 
 05D0  0220 R 0224 R 016E R	                DW      DROP,SWAP,EXIT 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-24


 05D6  0220 R 0492 R		UMM4:           DW      DROP,DDROP 
 05DA  0156 R FFFF 021A R	                DW      DOLIT,-1,DUPP,EXIT      ;overflow, return max 
       016E R			
				 
				;   M/MOD       ( d n -- r q ) 
				;               Signed floored divide of double by single. Return mod and quotient. 
				 
				                $COLON  5,'M/MOD',MSMOD 
 05E2                        2	MSMOD:                                    ; 
 1D32                        2	ORG     _NAME                             ; 
 1D32  05E2 R 1D40 R         2	        DW       _CODE,_LINK              ; 
 1D36  05 4D 2F 4D 4F 44     2	        DB      5,'M/MOD'                  ; 
 05E2                        2	ORG     _CODE                             ; 
 05E2  CD00                  1	        DW      CALLL                     ; 
 05E4  0160 R                1	        DW      LISTT                     ; 
 05E6  021A R 0232 R 021A R	                DW      DUPP,ZLESS,DUPP,TOR 
       01D6 R			
 05EE  019E R 05FA R		                DW      QBRAN,MMOD1 
 05F2  04BC R 01D6 R 04CA R	                DW      NEGAT,TOR,DNEGA,RFROM 
       01EE R			
 05FA  01D6 R 021A R 0232 R	MMOD1:          DW      TOR,DUPP,ZLESS 
 0600  019E R 0608 R		                DW      QBRAN,MMOD2 
 0604  01E4 R 04A6 R		                DW      RAT,PLUS 
 0608  01EE R 057E R 01EE R	MMOD2:          DW      RFROM,UMMOD,RFROM 
 060E  019E R 0618 R		                DW      QBRAN,MMOD3 
 0612  0224 R 04BC R 0224 R	                DW      SWAP,NEGAT,SWAP 
 0618  016E R			MMOD3:          DW      EXIT 
				 
				;   /MOD        ( n n -- r q ) 
				;               Signed divide. Return mod and quotient. 
				 
				                $COLON  4,'/MOD',SLMOD 
 061A                        2	SLMOD:                                    ; 
 1D28                        2	ORG     _NAME                             ; 
 1D28  061A R 1D36 R         2	        DW       _CODE,_LINK              ; 
 1D2C  04 2F 4D 4F 44        2	        DB      4,'/MOD'                  ; 
 061A                        2	ORG     _CODE                             ; 
 061A  CD00                  1	        DW      CALLL                     ; 
 061C  0160 R                1	        DW      LISTT                     ; 
 061E  022A R 0232 R 0224 R	                DW      OVER,ZLESS,SWAP,MSMOD,EXIT 
       05E2 R 016E R		
				 
				;   MOD         ( n n -- r ) 
				;               Signed divide. Return mod only. 
				 
				                $COLON  3,'MOD',MODD 
 0628                        2	MODD:                                    ; 
 1D20                        2	ORG     _NAME                             ; 
 1D20  0628 R 1D2C R         2	        DW       _CODE,_LINK              ; 
 1D24  03 4D 4F 44           2	        DB      3,'MOD'                  ; 
 0628                        2	ORG     _CODE                             ; 
 0628  CD00                  1	        DW      CALLL                     ; 
 062A  0160 R                1	        DW      LISTT                     ; 
 062C  061A R 0220 R 016E R	                DW      SLMOD,DROP,EXIT 
				 
				;   /           ( n n -- q ) 
				;               Signed divide. Return quotient only. 
				 
				                $COLON  1,'/',SLASH 
 0632                        2	SLASH:                                    ; 
 1D1A                        2	ORG     _NAME                             ; 
 1D1A  0632 R 1D24 R         2	        DW       _CODE,_LINK              ; 
 1D1E  01 2F                 2	        DB      1,'/'                  ; 
 0632                        2	ORG     _CODE                             ; 
 0632  CD00                  1	        DW      CALLL                     ; 
 0634  0160 R                1	        DW      LISTT                     ; 
 0636  061A R 0224 R 0220 R	                DW      SLMOD,SWAP,DROP,EXIT 
       016E R			
				 
				;; Multiply 
				 
				;   UM*         ( u u -- ud ) 
				;               Unsigned multiply. Return double product. 
				 
				                $COLON  3,'UM*',UMSTA 
 063E                        2	UMSTA:                                    ; 
 1D12                        2	ORG     _NAME                             ; 
 1D12  063E R 1D1E R         2	        DW       _CODE,_LINK              ; 
 1D16  03 55 4D 2A           2	        DB      3,'UM*'                  ; 
 063E                        2	ORG     _CODE                             ; 
 063E  CD00                  1	        DW      CALLL                     ; 
 0640  0160 R                1	        DW      LISTT                     ; 
 0642  0156 R 0000 0224 R	                DW      DOLIT,0,SWAP,DOLIT,15,TOR 
       0156 R 000F 01D6 R	
 064E  021A R 0268 R 01D6 R	UMST1:          DW      DUPP,UPLUS,TOR,TOR 
       01D6 R			
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-25


 0656  021A R 0268 R 01EE R	                DW      DUPP,UPLUS,RFROM,PLUS,RFROM 
       04A6 R 01EE R		
 0660  019E R 066E R		                DW      QBRAN,UMST2 
 0664  01D6 R 022A R 0268 R	                DW      TOR,OVER,UPLUS,RFROM,PLUS 
       01EE R 04A6 R		
 066E  017E R 064E R		UMST2:          DW      DONXT,UMST1 
 0672  0484 R 0220 R 016E R	                DW      ROT,DROP,EXIT 
				 
				;   *           ( n n -- n ) 
				;               Signed multiply. Return single product. 
				 
				                $COLON  1,'*',STAR 
 0678                        2	STAR:                                    ; 
 1D0C                        2	ORG     _NAME                             ; 
 1D0C  0678 R 1D16 R         2	        DW       _CODE,_LINK              ; 
 1D10  01 2A                 2	        DB      1,'*'                  ; 
 0678                        2	ORG     _CODE                             ; 
 0678  CD00                  1	        DW      CALLL                     ; 
 067A  0160 R                1	        DW      LISTT                     ; 
 067C  063E R 0220 R 016E R	                DW      UMSTA,DROP,EXIT 
				 
				;   M*          ( n n -- d ) 
				;               Signed multiply. Return double product. 
				 
				                $COLON  2,'M*',MSTAR 
 0682                        2	MSTAR:                                    ; 
 1D04                        2	ORG     _NAME                             ; 
 1D04  0682 R 1D10 R         2	        DW       _CODE,_LINK              ; 
 1D08  02 4D 2A              2	        DB      2,'M*'                  ; 
 0682                        2	ORG     _CODE                             ; 
 0682  CD00                  1	        DW      CALLL                     ; 
 0684  0160 R                1	        DW      LISTT                     ; 
 0686  049C R 025C R 0232 R	                DW      DDUP,XORR,ZLESS,TOR 
       01D6 R			
 068E  04EA R 0224 R 04EA R	                DW      ABSS,SWAP,ABSS,UMSTA 
       063E R			
 0696  01EE R			                DW      RFROM 
 0698  019E R 069E R		                DW      QBRAN,MSTA1 
 069C  04CA R			                DW      DNEGA 
 069E  016E R			MSTA1:          DW      EXIT 
				 
				;   */MOD       ( n1 n2 n3 -- r q ) 
				;               Multiply n1 and n2, then divide by n3. Return mod and quotient. 
				 
				                $COLON  5,'*/MOD',SSMOD 
 06A0                        2	SSMOD:                                    ; 
 1CFA                        2	ORG     _NAME                             ; 
 1CFA  06A0 R 1D08 R         2	        DW       _CODE,_LINK              ; 
 1CFE  05 2A 2F 4D 4F 44     2	        DB      5,'*/MOD'                  ; 
 06A0                        2	ORG     _CODE                             ; 
 06A0  CD00                  1	        DW      CALLL                     ; 
 06A2  0160 R                1	        DW      LISTT                     ; 
 06A4  01D6 R 0682 R 01EE R	                DW      TOR,MSTAR,RFROM,MSMOD,EXIT 
       05E2 R 016E R		
				 
				;   */          ( n1 n2 n3 -- q ) 
				;               Multiply n1 by n2, then divide by n3. Return quotient only. 
				 
				                $COLON  2,'*/',STASL 
 06AE                        2	STASL:                                    ; 
 1CF2                        2	ORG     _NAME                             ; 
 1CF2  06AE R 1CFE R         2	        DW       _CODE,_LINK              ; 
 1CF6  02 2A 2F              2	        DB      2,'*/'                  ; 
 06AE                        2	ORG     _CODE                             ; 
 06AE  CD00                  1	        DW      CALLL                     ; 
 06B0  0160 R                1	        DW      LISTT                     ; 
 06B2  06A0 R 0224 R 0220 R	                DW      SSMOD,SWAP,DROP,EXIT 
       016E R			
				 
				;; Miscellaneous 
				 
				;   CELL+       ( a -- a ) 
				;               Add cell size in byte to address. 
				 
				                $COLON  5,'CELL+',CELLP 
 06BA                        2	CELLP:                                    ; 
 1CE8                        2	ORG     _NAME                             ; 
 1CE8  06BA R 1CF6 R         2	        DW       _CODE,_LINK              ; 
 1CEC  05 43 45 4C 4C 2B     2	        DB      5,'CELL+'                  ; 
 06BA                        2	ORG     _CODE                             ; 
 06BA  CD00                  1	        DW      CALLL                     ; 
 06BC  0160 R                1	        DW      LISTT                     ; 
 06BE  0156 R 0002 04A6 R	                DW      DOLIT,CELLL,PLUS,EXIT 
       016E R			
				 
				;   CELL-       ( a -- a ) 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-26


				;               Subtract cell size in byte from address. 
				 
				                $COLON  5,'CELL-',CELLM 
 06C6                        2	CELLM:                                    ; 
 1CDE                        2	ORG     _NAME                             ; 
 1CDE  06C6 R 1CEC R         2	        DW       _CODE,_LINK              ; 
 1CE2  05 43 45 4C 4C 2D     2	        DB      5,'CELL-'                  ; 
 06C6                        2	ORG     _CODE                             ; 
 06C6  CD00                  1	        DW      CALLL                     ; 
 06C8  0160 R                1	        DW      LISTT                     ; 
 06CA  0156 R FFFE 04A6 R	                DW      DOLIT,0-CELLL,PLUS,EXIT 
       016E R			
				 
				;   CELLS       ( n -- n ) 
				;               Multiply tos by cell size in bytes. 
				 
				                $COLON  5,'CELLS',CELLS 
 06D2                        2	CELLS:                                    ; 
 1CD4                        2	ORG     _NAME                             ; 
 1CD4  06D2 R 1CE2 R         2	        DW       _CODE,_LINK              ; 
 1CD8  05 43 45 4C 4C 53     2	        DB      5,'CELLS'                  ; 
 06D2                        2	ORG     _CODE                             ; 
 06D2  CD00                  1	        DW      CALLL                     ; 
 06D4  0160 R                1	        DW      LISTT                     ; 
 06D6  0156 R 0002 0678 R	                DW      DOLIT,CELLL,STAR,EXIT 
       016E R			
				 
				;   ALIGNED     ( b -- a ) 
				;               Align address to the cell boundary. 
				 
				                $COLON  7,'ALIGNED',ALGND 
 06DE                        2	ALGND:                                    ; 
 1CC8                        2	ORG     _NAME                             ; 
 1CC8  06DE R 1CD8 R         2	        DW       _CODE,_LINK              ; 
 1CCC  07 41 4C 49 47 4E 45  2	        DB      7,'ALIGNED'                  ; 
 06DE                        2	ORG     _CODE                             ; 
 06DE  CD00                  1	        DW      CALLL                     ; 
 06E0  0160 R                1	        DW      LISTT                     ; 
 06E2  021A R 0156 R 0000	                DW      DUPP,DOLIT,0,DOLIT,CELLL 
       0156 R 0002		
 06EC  057E R 0220 R 021A R	                DW      UMMOD,DROP,DUPP 
 06F2  019E R 06FE R		                DW      QBRAN,ALGN1 
 06F6  0156 R 0002 0224 R	                DW      DOLIT,CELLL,SWAP,SUBB 
       04E0 R			
 06FE  04A6 R 016E R		ALGN1:          DW      PLUS,EXIT 
				 
				;   BL          ( -- 32 ) 
				;               Return 32, the blank character. 
				 
				                $COLON  2,'BL',BLANK 
 0702                        2	BLANK:                                    ; 
 1CC0                        2	ORG     _NAME                             ; 
 1CC0  0702 R 1CCC R         2	        DW       _CODE,_LINK              ; 
 1CC4  02 42 4C              2	        DB      2,'BL'                  ; 
 0702                        2	ORG     _CODE                             ; 
 0702  CD00                  1	        DW      CALLL                     ; 
 0704  0160 R                1	        DW      LISTT                     ; 
 0706  0156 R 0020 016E R	                DW      DOLIT,' ',EXIT 
				 
				;   >CHAR       ( c -- c ) 
				;               Filter non-printing characters. 
				 
				                $COLON  5,'>CHAR',TCHAR 
 070C                        2	TCHAR:                                    ; 
 1CB6                        2	ORG     _NAME                             ; 
 1CB6  070C R 1CC4 R         2	        DW       _CODE,_LINK              ; 
 1CBA  05 3E 43 48 41 52     2	        DB      5,'>CHAR'                  ; 
 070C                        2	ORG     _CODE                             ; 
 070C  CD00                  1	        DW      CALLL                     ; 
 070E  0160 R                1	        DW      LISTT                     ; 
 0710  0156 R 007F 0244 R	                DW      DOLIT,07FH,ANDD,DUPP    ;mask msb 
       021A R			
 0718  0156 R 007F 0702 R	                DW      DOLIT,127,BLANK,WITHI   ;check for printable 
       056C R			
 0720  019E R 072A R		                DW      QBRAN,TCHA1 
 0724  0220 R 0156 R 005F	                DW      DROP,DOLIT,'_'          ;replace non-printables 
 072A  016E R			TCHA1:          DW      EXIT 
				 
				;   DEPTH       ( -- n ) 
				;               Return the depth of the data stack. 
				 
				                $COLON  5,'DEPTH',DEPTH 
 072C                        2	DEPTH:                                    ; 
 1CAC                        2	ORG     _NAME                             ; 
 1CAC  072C R 1CBA R         2	        DW       _CODE,_LINK              ; 
 1CB0  05 44 45 50 54 48     2	        DB      5,'DEPTH'                  ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-27


 072C                        2	ORG     _CODE                             ; 
 072C  CD00                  1	        DW      CALLL                     ; 
 072E  0160 R                1	        DW      LISTT                     ; 
 0730  020C R 03AA R 01C0 R	                DW      SPAT,SZERO,AT,SWAP,SUBB 
       0224 R 04E0 R		
 073A  0156 R 0002 0632 R	                DW      DOLIT,CELLL,SLASH,EXIT 
       016E R			
				 
				;   PICK        ( ... +n -- ... w ) 
				;               Copy the nth stack item to tos. 
				 
				                $COLON  4,'PICK',PICK 
 0742                        2	PICK:                                    ; 
 1CA2                        2	ORG     _NAME                             ; 
 1CA2  0742 R 1CB0 R         2	        DW       _CODE,_LINK              ; 
 1CA6  04 50 49 43 4B        2	        DB      4,'PICK'                  ; 
 0742                        2	ORG     _CODE                             ; 
 0742  CD00                  1	        DW      CALLL                     ; 
 0744  0160 R                1	        DW      LISTT                     ; 
 0746  0156 R 0001 04A6 R	                DW      DOLIT,1,PLUS,CELLS 
       06D2 R			
 074E  020C R 04A6 R 01C0 R	                DW      SPAT,PLUS,AT,EXIT 
       016E R			
				 
				;; Memory access 
				 
				;   +!          ( n a -- ) 
				;               Add n to the contents at address a. 
				 
				                $COLON  2,'+!',PSTOR 
 0756                        2	PSTOR:                                    ; 
 1C9A                        2	ORG     _NAME                             ; 
 1C9A  0756 R 1CA6 R         2	        DW       _CODE,_LINK              ; 
 1C9E  02 2B 21              2	        DB      2,'+!'                  ; 
 0756                        2	ORG     _CODE                             ; 
 0756  CD00                  1	        DW      CALLL                     ; 
 0758  0160 R                1	        DW      LISTT                     ; 
 075A  0224 R 022A R 01C0 R	                DW      SWAP,OVER,AT,PLUS 
       04A6 R			
 0762  0224 R 01B8 R 016E R	                DW      SWAP,STORE,EXIT 
				 
				;   2!          ( d a -- ) 
				;               Store the double integer to address a. 
				 
				                $COLON  2,'2!',DSTOR 
 0768                        2	DSTOR:                                    ; 
 1C92                        2	ORG     _NAME                             ; 
 1C92  0768 R 1C9E R         2	        DW       _CODE,_LINK              ; 
 1C96  02 32 21              2	        DB      2,'2!'                  ; 
 0768                        2	ORG     _CODE                             ; 
 0768  CD00                  1	        DW      CALLL                     ; 
 076A  0160 R                1	        DW      LISTT                     ; 
 076C  0224 R 022A R 01B8 R	                DW      SWAP,OVER,STORE 
 0772  06BA R 01B8 R 016E R	                DW      CELLP,STORE,EXIT 
				 
				;   2@          ( a -- d ) 
				;               Fetch double integer from address a. 
				 
				                $COLON  2,'2@',DAT 
 0778                        2	DAT:                                    ; 
 1C8A                        2	ORG     _NAME                             ; 
 1C8A  0778 R 1C96 R         2	        DW       _CODE,_LINK              ; 
 1C8E  02 32 40              2	        DB      2,'2@'                  ; 
 0778                        2	ORG     _CODE                             ; 
 0778  CD00                  1	        DW      CALLL                     ; 
 077A  0160 R                1	        DW      LISTT                     ; 
 077C  021A R 06BA R 01C0 R	                DW      DUPP,CELLP,AT 
 0782  0224 R 01C0 R 016E R	                DW      SWAP,AT,EXIT 
				 
				;   COUNT       ( b -- b +n ) 
				;               Return count byte of a string and add 1 to byte address. 
				 
				                $COLON  5,'COUNT',COUNT 
 0788                        2	COUNT:                                    ; 
 1C80                        2	ORG     _NAME                             ; 
 1C80  0788 R 1C8E R         2	        DW       _CODE,_LINK              ; 
 1C84  05 43 4F 55 4E 54     2	        DB      5,'COUNT'                  ; 
 0788                        2	ORG     _CODE                             ; 
 0788  CD00                  1	        DW      CALLL                     ; 
 078A  0160 R                1	        DW      LISTT                     ; 
 078C  021A R 0156 R 0001	                DW      DUPP,DOLIT,1,PLUS 
       04A6 R			
 0794  0224 R 01CE R 016E R	                DW      SWAP,CAT,EXIT 
				 
				;   HERE        ( -- a ) 
				;               Return the top of the code dictionary. 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-28


				 
				                $COLON  4,'HERE',HERE 
 079A                        2	HERE:                                    ; 
 1C76                        2	ORG     _NAME                             ; 
 1C76  079A R 1C84 R         2	        DW       _CODE,_LINK              ; 
 1C7A  04 48 45 52 45        2	        DB      4,'HERE'                  ; 
 079A                        2	ORG     _CODE                             ; 
 079A  CD00                  1	        DW      CALLL                     ; 
 079C  0160 R                1	        DW      LISTT                     ; 
 079E  044A R 01C0 R 016E R	                DW      CP,AT,EXIT 
				 
				;   PAD         ( -- a ) 
				;               Return the address of a temporary buffer. 
				 
				                $COLON  3,'PAD',PAD 
 07A4                        2	PAD:                                    ; 
 1C6E                        2	ORG     _NAME                             ; 
 1C6E  07A4 R 1C7A R         2	        DW       _CODE,_LINK              ; 
 1C72  03 50 41 44           2	        DB      3,'PAD'                  ; 
 07A4                        2	ORG     _CODE                             ; 
 07A4  CD00                  1	        DW      CALLL                     ; 
 07A6  0160 R                1	        DW      LISTT                     ; 
 07A8  079A R 0156 R 0050	                DW      HERE,DOLIT,80,PLUS,EXIT 
       04A6 R 016E R		
				 
				;   TIB         ( -- a ) 
				;               Return the address of the terminal input buffer. 
				 
				                $COLON  3,'TIB',TIB 
 07B2                        2	TIB:                                    ; 
 1C66                        2	ORG     _NAME                             ; 
 1C66  07B2 R 1C72 R         2	        DW       _CODE,_LINK              ; 
 1C6A  03 54 49 42           2	        DB      3,'TIB'                  ; 
 07B2                        2	ORG     _CODE                             ; 
 07B2  CD00                  1	        DW      CALLL                     ; 
 07B4  0160 R                1	        DW      LISTT                     ; 
 07B6  040A R 06BA R 01C0 R	                DW      NTIB,CELLP,AT,EXIT 
       016E R			
				 
				;   @EXECUTE    ( a -- ) 
				;               Execute vector stored in address a. 
				 
				                $COLON  8,'@EXECUTE',ATEXE 
 07BE                        2	ATEXE:                                    ; 
 1C58                        2	ORG     _NAME                             ; 
 1C58  07BE R 1C6A R         2	        DW       _CODE,_LINK              ; 
 1C5C  08 40 45 58 45 43 55  2	        DB      8,'@EXECUTE'                  ; 
 07BE                        2	ORG     _CODE                             ; 
 07BE  CD00                  1	        DW      CALLL                     ; 
 07C0  0160 R                1	        DW      LISTT                     ; 
 07C2  01C0 R 0476 R		                DW      AT,QDUP                 ;?address or zero 
 07C6  019E R 07CC R		                DW      QBRAN,EXE1 
 07CA  017C R			                DW      EXECU                   ;execute if non-zero 
 07CC  016E R			EXE1:           DW      EXIT                    ;do nothing if zero 
				 
				;   CMOVE       ( b1 b2 u -- ) 
				;               Copy u bytes from b1 to b2. 
				 
				                $COLON  5,'CMOVE',CMOVE 
 07CE                        2	CMOVE:                                    ; 
 1C4E                        2	ORG     _NAME                             ; 
 1C4E  07CE R 1C5C R         2	        DW       _CODE,_LINK              ; 
 1C52  05 43 4D 4F 56 45     2	        DB      5,'CMOVE'                  ; 
 07CE                        2	ORG     _CODE                             ; 
 07CE  CD00                  1	        DW      CALLL                     ; 
 07D0  0160 R                1	        DW      LISTT                     ; 
 07D2  01D6 R			                DW      TOR 
 07D4  01B0 R 07F0 R		                DW      BRAN,CMOV2 
 07D8  01D6 R 021A R 01CE R	CMOV1:          DW      TOR,DUPP,CAT 
 07DE  01E4 R 01C8 R		                DW      RAT,CSTOR 
 07E2  0156 R 0001 04A6 R	                DW      DOLIT,1,PLUS 
 07E8  01EE R 0156 R 0001	                DW      RFROM,DOLIT,1,PLUS 
       04A6 R			
 07F0  017E R 07D8 R		CMOV2:          DW      DONXT,CMOV1 
 07F4  0492 R 016E R		                DW      DDROP,EXIT 
				 
				;   FILL        ( b u c -- ) 
				;               Fill u bytes of character c to area beginning at b. 
				 
				                $COLON  4,'FILL',FILL 
 07F8                        2	FILL:                                    ; 
 1C44                        2	ORG     _NAME                             ; 
 1C44  07F8 R 1C52 R         2	        DW       _CODE,_LINK              ; 
 1C48  04 46 49 4C 4C        2	        DB      4,'FILL'                  ; 
 07F8                        2	ORG     _CODE                             ; 
 07F8  CD00                  1	        DW      CALLL                     ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-29


 07FA  0160 R                1	        DW      LISTT                     ; 
 07FC  0224 R 01D6 R 0224 R	                DW      SWAP,TOR,SWAP 
 0802  01B0 R 0810 R		                DW      BRAN,FILL2 
 0806  049C R 01C8 R 0156 R	FILL1:          DW      DDUP,CSTOR,DOLIT,1,PLUS 
       0001 04A6 R		
 0810  017E R 0806 R		FILL2:          DW      DONXT,FILL1 
 0814  0492 R 016E R		                DW      DDROP,EXIT 
				 
				;   -TRAILING   ( b u -- b u ) 
				;               Adjust the count to eliminate trailing white space. 
				 
				                $COLON  9,'-TRAILING',DTRAI 
 0818                        2	DTRAI:                                    ; 
 1C36                        2	ORG     _NAME                             ; 
 1C36  0818 R 1C48 R         2	        DW       _CODE,_LINK              ; 
 1C3A  09 2D 54 52 41 49 4C  2	        DB      9,'-TRAILING'                  ; 
 0818                        2	ORG     _CODE                             ; 
 0818  CD00                  1	        DW      CALLL                     ; 
 081A  0160 R                1	        DW      LISTT                     ; 
 081C  01D6 R			                DW      TOR 
 081E  01B0 R 083C R		                DW      BRAN,DTRA2 
 0822  0702 R 022A R 01E4 R	DTRA1:          DW      BLANK,OVER,RAT,PLUS,CAT,LESS 
       04A6 R 01CE R 052C R	
 082E  019E R 083C R		                DW      QBRAN,DTRA2 
 0832  01EE R 0156 R 0001	                DW      RFROM,DOLIT,1,PLUS,EXIT ;adjusted count 
       04A6 R 016E R		
 083C  017E R 0822 R		DTRA2:          DW      DONXT,DTRA1 
 0840  0156 R 0000 016E R	                DW      DOLIT,0,EXIT            ;count=0 
				 
				;   PACK$       ( b u a -- a ) 
				;               Build a counted string with u characters from b. Null fill. 
				 
				                $COLON  5,'PACK$',PACKS 
 0846                        2	PACKS:                                    ; 
 1C2C                        2	ORG     _NAME                             ; 
 1C2C  0846 R 1C3A R         2	        DW       _CODE,_LINK              ; 
 1C30  05 50 41 43 4B 24     2	        DB      5,'PACK$'                  ; 
 0846                        2	ORG     _CODE                             ; 
 0846  CD00                  1	        DW      CALLL                     ; 
 0848  0160 R                1	        DW      LISTT                     ; 
 084A  06DE R 021A R 01D6 R	                DW      ALGND,DUPP,TOR          ;strings only on cell boundary 
 0850  022A R 021A R 0156 R	                DW      OVER,DUPP,DOLIT,0 
       0000			
 0858  0156 R 0002 057E R	                DW      DOLIT,CELLL,UMMOD,DROP  ;count mod cell 
       0220 R			
 0860  04E0 R 022A R 04A6 R	                DW      SUBB,OVER,PLUS 
 0866  0156 R 0000 0224 R	                DW      DOLIT,0,SWAP,STORE      ;null fill cell 
       01B8 R			
 086E  049C R 01C8 R 0156 R	                DW      DDUP,CSTOR,DOLIT,1,PLUS ;save count 
       0001 04A6 R		
 0878  0224 R 07CE R 01EE R	                DW      SWAP,CMOVE,RFROM,EXIT   ;move string 
       016E R			
				 
				;; Numeric output, single precision 
				 
				;   DIGIT       ( u -- c ) 
				;               Convert digit u to a character. 
				 
				                $COLON  5,'DIGIT',DIGIT 
 0880                        2	DIGIT:                                    ; 
 1C22                        2	ORG     _NAME                             ; 
 1C22  0880 R 1C30 R         2	        DW       _CODE,_LINK              ; 
 1C26  05 44 49 47 49 54     2	        DB      5,'DIGIT'                  ; 
 0880                        2	ORG     _CODE                             ; 
 0880  CD00                  1	        DW      CALLL                     ; 
 0882  0160 R                1	        DW      LISTT                     ; 
 0884  0156 R 0009 022A R	                DW      DOLIT,9,OVER,LESS 
       052C R			
 088C  0156 R 0007 0244 R	                DW      DOLIT,7,ANDD,PLUS 
       04A6 R			
 0894  0156 R 0030 04A6 R	                DW      DOLIT,'0',PLUS,EXIT 
       016E R			
				 
				;   EXTRACT     ( n base -- n c ) 
				;               Extract the least significant digit from n. 
				 
				                $COLON  7,'EXTRACT',EXTRC 
 089C                        2	EXTRC:                                    ; 
 1C16                        2	ORG     _NAME                             ; 
 1C16  089C R 1C26 R         2	        DW       _CODE,_LINK              ; 
 1C1A  07 45 58 54 52 41 43  2	        DB      7,'EXTRACT'                  ; 
 089C                        2	ORG     _CODE                             ; 
 089C  CD00                  1	        DW      CALLL                     ; 
 089E  0160 R                1	        DW      LISTT                     ; 
 08A0  0156 R 0000 0224 R	                DW      DOLIT,0,SWAP,UMMOD 
       057E R			
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-30


 08A8  0224 R 0880 R 016E R	                DW      SWAP,DIGIT,EXIT 
				 
				;   <#          ( -- ) 
				;               Initiate the numeric output process. 
				 
				                $COLON  2,'<#',BDIGS 
 08AE                        2	BDIGS:                                    ; 
 1C0E                        2	ORG     _NAME                             ; 
 1C0E  08AE R 1C1A R         2	        DW       _CODE,_LINK              ; 
 1C12  02 3C 23              2	        DB      2,'<#'                  ; 
 08AE                        2	ORG     _CODE                             ; 
 08AE  CD00                  1	        DW      CALLL                     ; 
 08B0  0160 R                1	        DW      LISTT                     ; 
 08B2  07A4 R 042A R 01B8 R	                DW      PAD,HLD,STORE,EXIT 
       016E R			
				 
				;   HOLD        ( c -- ) 
				;               Insert a character into the numeric output string. 
				 
				                $COLON  4,'HOLD',HOLD 
 08BA                        2	HOLD:                                    ; 
 1C04                        2	ORG     _NAME                             ; 
 1C04  08BA R 1C12 R         2	        DW       _CODE,_LINK              ; 
 1C08  04 48 4F 4C 44        2	        DB      4,'HOLD'                  ; 
 08BA                        2	ORG     _CODE                             ; 
 08BA  CD00                  1	        DW      CALLL                     ; 
 08BC  0160 R                1	        DW      LISTT                     ; 
 08BE  042A R 01C0 R 0156 R	                DW      HLD,AT,DOLIT,1,SUBB 
       0001 04E0 R		
 08C8  021A R 042A R 01B8 R	                DW      DUPP,HLD,STORE,CSTOR,EXIT 
       01C8 R 016E R		
				 
				;   #           ( u -- u ) 
				;               Extract one digit from u and append the digit to output string. 
				 
				                $COLON  1,'#',DIG 
 08D2                        2	DIG:                                    ; 
 1BFE                        2	ORG     _NAME                             ; 
 1BFE  08D2 R 1C08 R         2	        DW       _CODE,_LINK              ; 
 1C02  01 23                 2	        DB      1,'#'                  ; 
 08D2                        2	ORG     _CODE                             ; 
 08D2  CD00                  1	        DW      CALLL                     ; 
 08D4  0160 R                1	        DW      LISTT                     ; 
 08D6  03EA R 01C0 R 089C R	                DW      BASE,AT,EXTRC,HOLD,EXIT 
       08BA R 016E R		
				 
				;   #S          ( u -- 0 ) 
				;               Convert u until all digits are added to the output string. 
				 
				                $COLON  2,'#S',DIGS 
 08E0                        2	DIGS:                                    ; 
 1BF6                        2	ORG     _NAME                             ; 
 1BF6  08E0 R 1C02 R         2	        DW       _CODE,_LINK              ; 
 1BFA  02 23 53              2	        DB      2,'#S'                  ; 
 08E0                        2	ORG     _CODE                             ; 
 08E0  CD00                  1	        DW      CALLL                     ; 
 08E2  0160 R                1	        DW      LISTT                     ; 
 08E4  08D2 R 021A R		DIGS1:          DW      DIG,DUPP 
 08E8  019E R 08F0 R		                DW      QBRAN,DIGS2 
 08EC  01B0 R 08E4 R		                DW      BRAN,DIGS1 
 08F0  016E R			DIGS2:          DW      EXIT 
				 
				;   SIGN        ( n -- ) 
				;               Add a minus sign to the numeric output string. 
				 
				                $COLON  4,'SIGN',SIGN 
 08F2                        2	SIGN:                                    ; 
 1BEC                        2	ORG     _NAME                             ; 
 1BEC  08F2 R 1BFA R         2	        DW       _CODE,_LINK              ; 
 1BF0  04 53 49 47 4E        2	        DB      4,'SIGN'                  ; 
 08F2                        2	ORG     _CODE                             ; 
 08F2  CD00                  1	        DW      CALLL                     ; 
 08F4  0160 R                1	        DW      LISTT                     ; 
 08F6  0232 R			                DW      ZLESS 
 08F8  019E R 0902 R		                DW      QBRAN,SIGN1 
 08FC  0156 R 002D 08BA R	                DW      DOLIT,'-',HOLD 
 0902  016E R			SIGN1:          DW      EXIT 
				 
				;   #>          ( w -- b u ) 
				;               Prepare the output string to be TYPE'd. 
				 
				                $COLON  2,'#>',EDIGS 
 0904                        2	EDIGS:                                    ; 
 1BE4                        2	ORG     _NAME                             ; 
 1BE4  0904 R 1BF0 R         2	        DW       _CODE,_LINK              ; 
 1BE8  02 23 3E              2	        DB      2,'#>'                  ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-31


 0904                        2	ORG     _CODE                             ; 
 0904  CD00                  1	        DW      CALLL                     ; 
 0906  0160 R                1	        DW      LISTT                     ; 
 0908  0220 R 042A R 01C0 R	                DW      DROP,HLD,AT 
 090E  07A4 R 022A R 04E0 R	                DW      PAD,OVER,SUBB,EXIT 
       016E R			
				 
				;   str         ( n -- b u ) 
				;               Convert a signed integer to a numeric string. 
				 
				                $COLON  3,'str',STR 
 0916                        2	STR:                                    ; 
 1BDC                        2	ORG     _NAME                             ; 
 1BDC  0916 R 1BE8 R         2	        DW       _CODE,_LINK              ; 
 1BE0  03 73 74 72           2	        DB      3,'str'                  ; 
 0916                        2	ORG     _CODE                             ; 
 0916  CD00                  1	        DW      CALLL                     ; 
 0918  0160 R                1	        DW      LISTT                     ; 
 091A  021A R 01D6 R 04EA R	                DW      DUPP,TOR,ABSS 
 0920  08AE R 08E0 R 01EE R	                DW      BDIGS,DIGS,RFROM 
 0926  08F2 R 0904 R 016E R	                DW      SIGN,EDIGS,EXIT 
				 
				;   HEX         ( -- ) 
				;               Use radix 16 as base for numeric conversions. 
				 
				                $COLON  3,'HEX',HEX 
 092C                        2	HEX:                                    ; 
 1BD4                        2	ORG     _NAME                             ; 
 1BD4  092C R 1BE0 R         2	        DW       _CODE,_LINK              ; 
 1BD8  03 48 45 58           2	        DB      3,'HEX'                  ; 
 092C                        2	ORG     _CODE                             ; 
 092C  CD00                  1	        DW      CALLL                     ; 
 092E  0160 R                1	        DW      LISTT                     ; 
 0930  0156 R 0010 03EA R	                DW      DOLIT,16,BASE,STORE,EXIT 
       01B8 R 016E R		
				 
				;   DECIMAL     ( -- ) 
				;               Use radix 10 as base for numeric conversions. 
				 
				                $COLON  7,'DECIMAL',DECIM 
 093A                        2	DECIM:                                    ; 
 1BC8                        2	ORG     _NAME                             ; 
 1BC8  093A R 1BD8 R         2	        DW       _CODE,_LINK              ; 
 1BCC  07 44 45 43 49 4D 41  2	        DB      7,'DECIMAL'                  ; 
 093A                        2	ORG     _CODE                             ; 
 093A  CD00                  1	        DW      CALLL                     ; 
 093C  0160 R                1	        DW      LISTT                     ; 
 093E  0156 R 000A 03EA R	                DW      DOLIT,10,BASE,STORE,EXIT 
       01B8 R 016E R		
				 
				;; Numeric input, single precision 
				 
				;   DIGIT?      ( c base -- u t ) 
				;               Convert a character to its numeric value. A flag indicates success. 
				 
				                $COLON  6,'DIGIT?',DIGTQ 
 0948                        2	DIGTQ:                                    ; 
 1BBC                        2	ORG     _NAME                             ; 
 1BBC  0948 R 1BCC R         2	        DW       _CODE,_LINK              ; 
 1BC0  06 44 49 47 49 54 3F  2	        DB      6,'DIGIT?'                  ; 
 0948                        2	ORG     _CODE                             ; 
 0948  CD00                  1	        DW      CALLL                     ; 
 094A  0160 R                1	        DW      LISTT                     ; 
 094C  01D6 R 0156 R 0030	                DW      TOR,DOLIT,'0',SUBB 
       04E0 R			
 0954  0156 R 0009 022A R	                DW      DOLIT,9,OVER,LESS 
       052C R			
 095C  019E R 0970 R		                DW      QBRAN,DGTQ1 
 0960  0156 R 0007 04E0 R	                DW      DOLIT,7,SUBB 
 0966  021A R 0156 R 000A	                DW      DUPP,DOLIT,10,LESS,ORR 
       052C R 0250 R		
 0970  021A R 01EE R 0510 R	DGTQ1:          DW      DUPP,RFROM,ULESS,EXIT 
       016E R			
				 
				;   NUMBER?     ( a -- n T | a F ) 
				;               Convert a number string to integer. Push a flag on tos. 
				 
				                $COLON  7,'NUMBER?',NUMBQ 
 0978                        2	NUMBQ:                                    ; 
 1BB0                        2	ORG     _NAME                             ; 
 1BB0  0978 R 1BC0 R         2	        DW       _CODE,_LINK              ; 
 1BB4  07 4E 55 4D 42 45 52  2	        DB      7,'NUMBER?'                  ; 
 0978                        2	ORG     _CODE                             ; 
 0978  CD00                  1	        DW      CALLL                     ; 
 097A  0160 R                1	        DW      LISTT                     ; 
 097C  03EA R 01C0 R 01D6 R	                DW      BASE,AT,TOR,DOLIT,0,OVER,COUNT 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-32


       0156 R 0000 022A R	
       0788 R			
 098A  022A R 01CE R 0156 R	                DW      OVER,CAT,DOLIT,'$',EQUAL 
       0024 04FA R		
 0994  019E R 09AA R		                DW      QBRAN,NUMQ1 
 0998  092C R 0224 R 0156 R	                DW      HEX,SWAP,DOLIT,1,PLUS 
       0001 04A6 R		
 09A2  0224 R 0156 R 0001	                DW      SWAP,DOLIT,1,SUBB 
       04E0 R			
 09AA  022A R 01CE R 0156 R	NUMQ1:          DW      OVER,CAT,DOLIT,'-',EQUAL,TOR 
       002D 04FA R 01D6 R	
 09B6  0224 R 01E4 R 04E0 R	                DW      SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP 
       0224 R 01E4 R 04A6 R	
       0476 R			
 09C4  019E R 0A16 R		                DW      QBRAN,NUMQ6 
 09C8  0156 R 0001 04E0 R	                DW      DOLIT,1,SUBB,TOR 
       01D6 R			
 09D0  021A R 01D6 R 01CE R	NUMQ2:          DW      DUPP,TOR,CAT,BASE,AT,DIGTQ 
       03EA R 01C0 R 0948 R	
 09DC  019E R 0A08 R		                DW      QBRAN,NUMQ4 
 09E0  0224 R 03EA R 01C0 R	                DW      SWAP,BASE,AT,STAR,PLUS,RFROM 
       0678 R 04A6 R 01EE R	
 09EC  0156 R 0001 04A6 R	                DW      DOLIT,1,PLUS 
 09F2  017E R 09D0 R		                DW      DONXT,NUMQ2 
 09F6  01E4 R 0224 R 0220 R	                DW      RAT,SWAP,DROP 
 09FC  019E R 0A02 R		                DW      QBRAN,NUMQ3 
 0A00  04BC R			                DW      NEGAT 
 0A02  0224 R			NUMQ3:          DW      SWAP 
 0A04  01B0 R 0A14 R		                DW      BRAN,NUMQ5 
 0A08  01EE R 01EE R 0492 R	NUMQ4:          DW      RFROM,RFROM,DDROP,DDROP,DOLIT,0 
       0492 R 0156 R 0000	
 0A14  021A R			NUMQ5:          DW      DUPP 
 0A16  01EE R 0492 R		NUMQ6:          DW      RFROM,DDROP 
 0A1A  01EE R 03EA R 01B8 R	                DW      RFROM,BASE,STORE,EXIT 
       016E R			
				 
				;; Basic I/O 
				 
				;   ?KEY        ( -- c T | F ) 
				;               Return input character and true, or a false if no input. 
				 
				                $COLON  4,'?KEY',QKEY 
 0A22                        2	QKEY:                                    ; 
 1BA6                        2	ORG     _NAME                             ; 
 1BA6  0A22 R 1BB4 R         2	        DW       _CODE,_LINK              ; 
 1BAA  04 3F 4B 45 59        2	        DB      4,'?KEY'                  ; 
 0A22                        2	ORG     _CODE                             ; 
 0A22  CD00                  1	        DW      CALLL                     ; 
 0A24  0160 R                1	        DW      LISTT                     ; 
 0A26  03BA R 07BE R 016E R	                DW      TQKEY,ATEXE,EXIT 
				 
				;   KEY         ( -- c ) 
				;               Wait for and return an input character. 
				 
				                $COLON  3,'KEY',KEY 
 0A2C                        2	KEY:                                    ; 
 1B9E                        2	ORG     _NAME                             ; 
 1B9E  0A2C R 1BAA R         2	        DW       _CODE,_LINK              ; 
 1BA2  03 4B 45 59           2	        DB      3,'KEY'                  ; 
 0A2C                        2	ORG     _CODE                             ; 
 0A2C  CD00                  1	        DW      CALLL                     ; 
 0A2E  0160 R                1	        DW      LISTT                     ; 
 0A30  0A22 R			KEY1:           DW      QKEY 
 0A32  019E R 0A30 R		                DW      QBRAN,KEY1 
 0A36  016E R			                DW      EXIT 
				 
				;   EMIT        ( c -- ) 
				;               Send a character to the output device. 
				 
				                $COLON  4,'EMIT',EMIT 
 0A38                        2	EMIT:                                    ; 
 1B94                        2	ORG     _NAME                             ; 
 1B94  0A38 R 1BA2 R         2	        DW       _CODE,_LINK              ; 
 1B98  04 45 4D 49 54        2	        DB      4,'EMIT'                  ; 
 0A38                        2	ORG     _CODE                             ; 
 0A38  CD00                  1	        DW      CALLL                     ; 
 0A3A  0160 R                1	        DW      LISTT                     ; 
 0A3C  03C2 R 07BE R 016E R	                DW      TEMIT,ATEXE,EXIT 
				 
				;   NUF?        ( -- t ) 
				;               Return false if no input, else pause and if CR return true. 
				 
				                $COLON  4,'NUF?',NUFQ 
 0A42                        2	NUFQ:                                    ; 
 1B8A                        2	ORG     _NAME                             ; 
 1B8A  0A42 R 1B98 R         2	        DW       _CODE,_LINK              ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-33


 1B8E  04 4E 55 46 3F        2	        DB      4,'NUF?'                  ; 
 0A42                        2	ORG     _CODE                             ; 
 0A42  CD00                  1	        DW      CALLL                     ; 
 0A44  0160 R                1	        DW      LISTT                     ; 
 0A46  0A22 R 021A R		                DW      QKEY,DUPP 
 0A4A  019E R 0A58 R		                DW      QBRAN,NUFQ1 
 0A4E  0492 R 0A2C R 0156 R	                DW      DDROP,KEY,DOLIT,CRR,EQUAL 
       000D 04FA R		
 0A58  016E R			NUFQ1:          DW      EXIT 
				 
				;   PACE        ( -- ) 
				;               Send a pace character for the file downloading process. 
				 
				                $COLON  4,'PACE',PACE 
 0A5A                        2	PACE:                                    ; 
 1B80                        2	ORG     _NAME                             ; 
 1B80  0A5A R 1B8E R         2	        DW       _CODE,_LINK              ; 
 1B84  04 50 41 43 45        2	        DB      4,'PACE'                  ; 
 0A5A                        2	ORG     _CODE                             ; 
 0A5A  CD00                  1	        DW      CALLL                     ; 
 0A5C  0160 R                1	        DW      LISTT                     ; 
 0A5E  0156 R 000B 0A38 R	                DW      DOLIT,11,EMIT,EXIT 
       016E R			
				 
				;   SPACE       ( -- ) 
				;               Send the blank character to the output device. 
				 
				                $COLON  5,'SPACE',SPACE 
 0A66                        2	SPACE:                                    ; 
 1B76                        2	ORG     _NAME                             ; 
 1B76  0A66 R 1B84 R         2	        DW       _CODE,_LINK              ; 
 1B7A  05 53 50 41 43 45     2	        DB      5,'SPACE'                  ; 
 0A66                        2	ORG     _CODE                             ; 
 0A66  CD00                  1	        DW      CALLL                     ; 
 0A68  0160 R                1	        DW      LISTT                     ; 
 0A6A  0702 R 0A38 R 016E R	                DW      BLANK,EMIT,EXIT 
				 
				;   SPACES      ( +n -- ) 
				;               Send n spaces to the output device. 
				 
				                $COLON  6,'SPACES',SPACS 
 0A70                        2	SPACS:                                    ; 
 1B6A                        2	ORG     _NAME                             ; 
 1B6A  0A70 R 1B7A R         2	        DW       _CODE,_LINK              ; 
 1B6E  06 53 50 41 43 45 53  2	        DB      6,'SPACES'                  ; 
 0A70                        2	ORG     _CODE                             ; 
 0A70  CD00                  1	        DW      CALLL                     ; 
 0A72  0160 R                1	        DW      LISTT                     ; 
 0A74  0156 R 0000 0546 R	                DW      DOLIT,0,MAX,TOR 
       01D6 R			
 0A7C  01B0 R 0A82 R		                DW      BRAN,CHAR2 
 0A80  0A66 R			CHAR1:          DW      SPACE 
 0A82  017E R 0A80 R		CHAR2:          DW      DONXT,CHAR1 
 0A86  016E R			                DW      EXIT 
				 
				;   TYPE        ( b u -- ) 
				;               Output u characters from b. 
				 
				                $COLON  4,'TYPE',TYPEE 
 0A88                        2	TYPEE:                                    ; 
 1B60                        2	ORG     _NAME                             ; 
 1B60  0A88 R 1B6E R         2	        DW       _CODE,_LINK              ; 
 1B64  04 54 59 50 45        2	        DB      4,'TYPE'                  ; 
 0A88                        2	ORG     _CODE                             ; 
 0A88  CD00                  1	        DW      CALLL                     ; 
 0A8A  0160 R                1	        DW      LISTT                     ; 
 0A8C  01D6 R			                DW      TOR 
 0A8E  01B0 R 0A9E R		                DW      BRAN,TYPE2 
 0A92  021A R 01CE R 0A38 R	TYPE1:          DW      DUPP,CAT,EMIT 
 0A98  0156 R 0001 04A6 R	                DW      DOLIT,1,PLUS 
 0A9E  017E R 0A92 R		TYPE2:          DW      DONXT,TYPE1 
 0AA2  0220 R 016E R		                DW      DROP,EXIT 
				 
				;   CR          ( -- ) 
				;               Output a carriage return and a line feed. 
				 
				                $COLON  2,'CR',CR 
 0AA6                        2	CR:                                    ; 
 1B58                        2	ORG     _NAME                             ; 
 1B58  0AA6 R 1B64 R         2	        DW       _CODE,_LINK              ; 
 1B5C  02 43 52              2	        DB      2,'CR'                  ; 
 0AA6                        2	ORG     _CODE                             ; 
 0AA6  CD00                  1	        DW      CALLL                     ; 
 0AA8  0160 R                1	        DW      LISTT                     ; 
 0AAA  0156 R 000D 0A38 R	                DW      DOLIT,CRR,EMIT 
 0AB0  0156 R 000A 0A38 R	                DW      DOLIT,LF,EMIT,EXIT 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-34


       016E R			
				 
				;   do$         ( -- a ) 
				;               Return the address of a compiled string. 
				 
				                $COLON  COMPO+3,'do$',DOSTR 
 0AB8                        2	DOSTR:                                    ; 
 1B50                        2	ORG     _NAME                             ; 
 1B50  0AB8 R 1B5C R         2	        DW       _CODE,_LINK              ; 
 1B54  43 64 6F 24           2	        DB      COMPO+3,'do$'                  ; 
 0AB8                        2	ORG     _CODE                             ; 
 0AB8  CD00                  1	        DW      CALLL                     ; 
 0ABA  0160 R                1	        DW      LISTT                     ; 
 0ABC  01EE R 01E4 R 01EE R	                DW      RFROM,RAT,RFROM,COUNT,PLUS 
       0788 R 04A6 R		
 0AC6  06DE R 01D6 R 0224 R	                DW      ALGND,TOR,SWAP,TOR,EXIT 
       01D6 R 016E R		
				 
				;   $"|         ( -- a ) 
				;               Run time routine compiled by $". Return address of a compiled string. 
				 
				                $COLON  COMPO+3,'$"|',STRQP 
 0AD0                        2	STRQP:                                    ; 
 1B48                        2	ORG     _NAME                             ; 
 1B48  0AD0 R 1B54 R         2	        DW       _CODE,_LINK              ; 
 1B4C  43 24 22 7C           2	        DB      COMPO+3,'$"|'                  ; 
 0AD0                        2	ORG     _CODE                             ; 
 0AD0  CD00                  1	        DW      CALLL                     ; 
 0AD2  0160 R                1	        DW      LISTT                     ; 
 0AD4  0AB8 R 016E R		                DW      DOSTR,EXIT              ;force a call to do$ 
				 
				;   ."|         ( -- ) 
				;               Run time routine of ." . Output a compiled string. 
				 
				                $COLON  COMPO+3,'."|',DOTQP 
 0AD8                        2	DOTQP:                                    ; 
 1B40                        2	ORG     _NAME                             ; 
 1B40  0AD8 R 1B4C R         2	        DW       _CODE,_LINK              ; 
 1B44  43 2E 22 7C           2	        DB      COMPO+3,'."|'                  ; 
 0AD8                        2	ORG     _CODE                             ; 
 0AD8  CD00                  1	        DW      CALLL                     ; 
 0ADA  0160 R                1	        DW      LISTT                     ; 
 0ADC  0AB8 R 0788 R 0A88 R	                DW      DOSTR,COUNT,TYPEE,EXIT 
       016E R			
				 
				;   .R          ( n +n -- ) 
				;               Display an integer in a field of n columns, right justified. 
				 
				                $COLON  2,'.R',DOTR 
 0AE4                        2	DOTR:                                    ; 
 1B38                        2	ORG     _NAME                             ; 
 1B38  0AE4 R 1B44 R         2	        DW       _CODE,_LINK              ; 
 1B3C  02 2E 52              2	        DB      2,'.R'                  ; 
 0AE4                        2	ORG     _CODE                             ; 
 0AE4  CD00                  1	        DW      CALLL                     ; 
 0AE6  0160 R                1	        DW      LISTT                     ; 
 0AE8  01D6 R 0916 R 01EE R	                DW      TOR,STR,RFROM,OVER,SUBB 
       022A R 04E0 R		
 0AF2  0A70 R 0A88 R 016E R	                DW      SPACS,TYPEE,EXIT 
				 
				;   U.R         ( u +n -- ) 
				;               Display an unsigned integer in n column, right justified. 
				 
				                $COLON  3,'U.R',UDOTR 
 0AF8                        2	UDOTR:                                    ; 
 1B30                        2	ORG     _NAME                             ; 
 1B30  0AF8 R 1B3C R         2	        DW       _CODE,_LINK              ; 
 1B34  03 55 2E 52           2	        DB      3,'U.R'                  ; 
 0AF8                        2	ORG     _CODE                             ; 
 0AF8  CD00                  1	        DW      CALLL                     ; 
 0AFA  0160 R                1	        DW      LISTT                     ; 
 0AFC  01D6 R 08AE R 08E0 R	                DW      TOR,BDIGS,DIGS,EDIGS 
       0904 R			
 0B04  01EE R 022A R 04E0 R	                DW      RFROM,OVER,SUBB 
 0B0A  0A70 R 0A88 R 016E R	                DW      SPACS,TYPEE,EXIT 
				 
				;   U.          ( u -- ) 
				;               Display an unsigned integer in free format. 
				 
				                $COLON  2,'U.',UDOT 
 0B10                        2	UDOT:                                    ; 
 1B28                        2	ORG     _NAME                             ; 
 1B28  0B10 R 1B34 R         2	        DW       _CODE,_LINK              ; 
 1B2C  02 55 2E              2	        DB      2,'U.'                  ; 
 0B10                        2	ORG     _CODE                             ; 
 0B10  CD00                  1	        DW      CALLL                     ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-35


 0B12  0160 R                1	        DW      LISTT                     ; 
 0B14  08AE R 08E0 R 0904 R	                DW      BDIGS,DIGS,EDIGS 
 0B1A  0A66 R 0A88 R 016E R	                DW      SPACE,TYPEE,EXIT 
				 
				;   .           ( w -- ) 
				;               Display an integer in free format, preceeded by a space. 
				 
				                $COLON  1,'.',DOT 
 0B20                        2	DOT:                                    ; 
 1B22                        2	ORG     _NAME                             ; 
 1B22  0B20 R 1B2C R         2	        DW       _CODE,_LINK              ; 
 1B26  01 2E                 2	        DB      1,'.'                  ; 
 0B20                        2	ORG     _CODE                             ; 
 0B20  CD00                  1	        DW      CALLL                     ; 
 0B22  0160 R                1	        DW      LISTT                     ; 
 0B24  03EA R 01C0 R 0156 R	                DW      BASE,AT,DOLIT,10,XORR   ;?decimal 
       000A 025C R		
 0B2E  019E R 0B36 R		                DW      QBRAN,DOT1 
 0B32  0B10 R 016E R		                DW      UDOT,EXIT               ;no, display unsigned 
 0B36  0916 R 0A66 R 0A88 R	DOT1:           DW      STR,SPACE,TYPEE,EXIT    ;yes, display signed 
       016E R			
				 
				;   ?           ( a -- ) 
				;               Display the contents in a memory cell. 
				 
				                $COLON  1,'?',QUEST 
 0B3E                        2	QUEST:                                    ; 
 1B1C                        2	ORG     _NAME                             ; 
 1B1C  0B3E R 1B26 R         2	        DW       _CODE,_LINK              ; 
 1B20  01 3F                 2	        DB      1,'?'                  ; 
 0B3E                        2	ORG     _CODE                             ; 
 0B3E  CD00                  1	        DW      CALLL                     ; 
 0B40  0160 R                1	        DW      LISTT                     ; 
 0B42  01C0 R 0B20 R 016E R	                DW      AT,DOT,EXIT 
				 
				;; Parsing 
				 
				;   parse       ( b u c -- b u delta ; <string> ) 
				;               Scan string delimited by c. Return found string and its offset. 
				 
				                $COLON  5,'parse',PARS 
 0B48                        2	PARS:                                    ; 
 1B12                        2	ORG     _NAME                             ; 
 1B12  0B48 R 1B20 R         2	        DW       _CODE,_LINK              ; 
 1B16  05 70 61 72 73 65     2	        DB      5,'parse'                  ; 
 0B48                        2	ORG     _CODE                             ; 
 0B48  CD00                  1	        DW      CALLL                     ; 
 0B4A  0160 R                1	        DW      LISTT                     ; 
 0B4C  03F2 R 01B8 R 022A R	                DW      TEMP,STORE,OVER,TOR,DUPP 
       01D6 R 021A R		
 0B56  019E R 0BE4 R		                DW      QBRAN,PARS8 
 0B5A  0156 R 0001 04E0 R	                DW      DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL 
       03F2 R 01C0 R 0702 R	
       04FA R			
 0B68  019E R 0B96 R		                DW      QBRAN,PARS3 
 0B6C  01D6 R			                DW      TOR 
 0B6E  0702 R 022A R 01CE R	PARS1:          DW      BLANK,OVER,CAT          ;skip leading blanks ONLY 
 0B74  04E0 R 0232 R 04B0 R	                DW      SUBB,ZLESS,INVER 
 0B7A  019E R 0B94 R		                DW      QBRAN,PARS2 
 0B7E  0156 R 0001 04A6 R	                DW      DOLIT,1,PLUS 
 0B84  017E R 0B6E R		                DW      DONXT,PARS1 
 0B88  01EE R 0220 R 0156 R	                DW      RFROM,DROP,DOLIT,0,DUPP,EXIT 
       0000 021A R 016E R	
 0B94  01EE R			PARS2:          DW      RFROM 
 0B96  022A R 0224 R		PARS3:          DW      OVER,SWAP 
 0B9A  01D6 R			                DW      TOR 
 0B9C  03F2 R 01C0 R 022A R	PARS4:          DW      TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter 
       01CE R 04E0 R		
 0BA6  03F2 R 01C0 R 0702 R	                DW      TEMP,AT,BLANK,EQUAL 
       04FA R			
 0BAE  019E R 0BB4 R		                DW      QBRAN,PARS5 
 0BB2  0232 R			                DW      ZLESS 
 0BB4  019E R 0BCA R		PARS5:          DW      QBRAN,PARS6 
 0BB8  0156 R 0001 04A6 R	                DW      DOLIT,1,PLUS 
 0BBE  017E R 0B9C R		                DW      DONXT,PARS4 
 0BC2  021A R 01D6 R		                DW      DUPP,TOR 
 0BC6  01B0 R 0BD8 R		                DW      BRAN,PARS7 
 0BCA  01EE R 0220 R 021A R	PARS6:          DW      RFROM,DROP,DUPP 
 0BD0  0156 R 0001 04A6 R	                DW      DOLIT,1,PLUS,TOR 
       01D6 R			
 0BD8  022A R 04E0 R		PARS7:          DW      OVER,SUBB 
 0BDC  01EE R 01EE R 04E0 R	                DW      RFROM,RFROM,SUBB,EXIT 
       016E R			
 0BE4  022A R 01EE R 04E0 R	PARS8:          DW      OVER,RFROM,SUBB,EXIT 
       016E R			
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-36


				;   PARSE       ( c -- b u ; <string> ) 
				;               Scan input stream and return counted string delimited by c. 
				 
				                $COLON  5,'PARSE',PARSE 
 0BEC                        2	PARSE:                                    ; 
 1B08                        2	ORG     _NAME                             ; 
 1B08  0BEC R 1B16 R         2	        DW       _CODE,_LINK              ; 
 1B0C  05 50 41 52 53 45     2	        DB      5,'PARSE'                  ; 
 0BEC                        2	ORG     _CODE                             ; 
 0BEC  CD00                  1	        DW      CALLL                     ; 
 0BEE  0160 R                1	        DW      LISTT                     ; 
 0BF0  01D6 R 07B2 R 0402 R	                DW      TOR,TIB,INN,AT,PLUS     ;current input buffer pointer 
       01C0 R 04A6 R		
 0BFA  040A R 01C0 R 0402 R	                DW      NTIB,AT,INN,AT,SUBB     ;remaining count 
       01C0 R 04E0 R		
 0C04  01EE R 0B48 R 0402 R	                DW      RFROM,PARS,INN,PSTOR,EXIT 
       0756 R 016E R		
				 
				;   .(          ( -- ) 
				;               Output following string up to next ) . 
				 
				                $COLON  IMEDD+2,'.(',DOTPR 
 0C0E                        2	DOTPR:                                    ; 
 1B00                        2	ORG     _NAME                             ; 
 1B00  0C0E R 1B0C R         2	        DW       _CODE,_LINK              ; 
 1B04  82 2E 28              2	        DB      IMEDD+2,'.('                  ; 
 0C0E                        2	ORG     _CODE                             ; 
 0C0E  CD00                  1	        DW      CALLL                     ; 
 0C10  0160 R                1	        DW      LISTT                     ; 
 0C12  0156 R 0029 0BEC R	                DW      DOLIT,')',PARSE,TYPEE,EXIT 
       0A88 R 016E R		
				 
				;   (           ( -- ) 
				;               Ignore following string up to next ) . A comment. 
				 
				                $COLON  IMEDD+1,'(',PAREN 
 0C1C                        2	PAREN:                                    ; 
 1AFA                        2	ORG     _NAME                             ; 
 1AFA  0C1C R 1B04 R         2	        DW       _CODE,_LINK              ; 
 1AFE  81 28                 2	        DB      IMEDD+1,'('                  ; 
 0C1C                        2	ORG     _CODE                             ; 
 0C1C  CD00                  1	        DW      CALLL                     ; 
 0C1E  0160 R                1	        DW      LISTT                     ; 
 0C20  0156 R 0029 0BEC R	                DW      DOLIT,')',PARSE,DDROP,EXIT 
       0492 R 016E R		
				 
				;   \           ( -- ) 
				;               Ignore following text till the end of line. 
				 
				                $COLON  IMEDD+1,'\',BKSLA 
 0C2A                        2	BKSLA:                                    ; 
 1AF4                        2	ORG     _NAME                             ; 
 1AF4  0C2A R 1AFE R         2	        DW       _CODE,_LINK              ; 
 1AF8  81 5C                 2	        DB      IMEDD+1,'\'                  ; 
 0C2A                        2	ORG     _CODE                             ; 
 0C2A  CD00                  1	        DW      CALLL                     ; 
 0C2C  0160 R                1	        DW      LISTT                     ; 
 0C2E  040A R 01C0 R 0402 R	                DW      NTIB,AT,INN,STORE,EXIT 
       01B8 R 016E R		
				 
				;   CHAR        ( -- c ) 
				;               Parse next word and return its first character. 
				 
				                $COLON  4,'CHAR',CHAR 
 0C38                        2	CHAR:                                    ; 
 1AEA                        2	ORG     _NAME                             ; 
 1AEA  0C38 R 1AF8 R         2	        DW       _CODE,_LINK              ; 
 1AEE  04 43 48 41 52        2	        DB      4,'CHAR'                  ; 
 0C38                        2	ORG     _CODE                             ; 
 0C38  CD00                  1	        DW      CALLL                     ; 
 0C3A  0160 R                1	        DW      LISTT                     ; 
 0C3C  0702 R 0BEC R 0220 R	                DW      BLANK,PARSE,DROP,CAT,EXIT 
       01CE R 016E R		
				 
				;   TOKEN       ( -- a ; <string> ) 
				;               Parse a word from input stream and copy it to name dictionary. 
				 
				                $COLON  5,'TOKEN',TOKEN 
 0C46                        2	TOKEN:                                    ; 
 1AE0                        2	ORG     _NAME                             ; 
 1AE0  0C46 R 1AEE R         2	        DW       _CODE,_LINK              ; 
 1AE4  05 54 4F 4B 45 4E     2	        DB      5,'TOKEN'                  ; 
 0C46                        2	ORG     _CODE                             ; 
 0C46  CD00                  1	        DW      CALLL                     ; 
 0C48  0160 R                1	        DW      LISTT                     ; 
 0C4A  0702 R 0BEC R 0156 R	                DW      BLANK,PARSE,DOLIT,31,MIN 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-37


       001F 0558 R		
 0C54  0452 R 01C0 R 022A R	                DW      NP,AT,OVER,SUBB,CELLM 
       04E0 R 06C6 R		
 0C5E  0846 R 016E R		                DW      PACKS,EXIT 
				 
				;   WORD        ( c -- a ; <string> ) 
				;               Parse a word from input stream and copy it to code dictionary. 
				 
				                $COLON  4,'WORD',WORDD 
 0C62                        2	WORDD:                                    ; 
 1AD6                        2	ORG     _NAME                             ; 
 1AD6  0C62 R 1AE4 R         2	        DW       _CODE,_LINK              ; 
 1ADA  04 57 4F 52 44        2	        DB      4,'WORD'                  ; 
 0C62                        2	ORG     _CODE                             ; 
 0C62  CD00                  1	        DW      CALLL                     ; 
 0C64  0160 R                1	        DW      LISTT                     ; 
 0C66  0BEC R 079A R 0846 R	                DW      PARSE,HERE,PACKS,EXIT 
       016E R			
				 
				;; Dictionary search 
				 
				;   NAME>       ( na -- ca ) 
				;               Return a code address given a name address. 
				 
				                $COLON  5,'NAME>',NAMET 
 0C6E                        2	NAMET:                                    ; 
 1ACC                        2	ORG     _NAME                             ; 
 1ACC  0C6E R 1ADA R         2	        DW       _CODE,_LINK              ; 
 1AD0  05 4E 41 4D 45 3E     2	        DB      5,'NAME>'                  ; 
 0C6E                        2	ORG     _CODE                             ; 
 0C6E  CD00                  1	        DW      CALLL                     ; 
 0C70  0160 R                1	        DW      LISTT                     ; 
 0C72  06C6 R 06C6 R 01C0 R	                DW      CELLM,CELLM,AT,EXIT 
       016E R			
				 
				;   SAME?       ( a a u -- a a f \ -0+ ) 
				;               Compare u cells in two strings. Return 0 if identical. 
				 
				                $COLON  5,'SAME?',SAMEQ 
 0C7A                        2	SAMEQ:                                    ; 
 1AC2                        2	ORG     _NAME                             ; 
 1AC2  0C7A R 1AD0 R         2	        DW       _CODE,_LINK              ; 
 1AC6  05 53 41 4D 45 3F     2	        DB      5,'SAME?'                  ; 
 0C7A                        2	ORG     _CODE                             ; 
 0C7A  CD00                  1	        DW      CALLL                     ; 
 0C7C  0160 R                1	        DW      LISTT                     ; 
 0C7E  01D6 R			                DW      TOR 
 0C80  01B0 R 0CA6 R		                DW      BRAN,SAME2 
 0C84  022A R 01E4 R 06D2 R	SAME1:          DW      OVER,RAT,CELLS,PLUS,AT 
       04A6 R 01C0 R		
 0C8E  022A R 01E4 R 06D2 R	                DW      OVER,RAT,CELLS,PLUS,AT 
       04A6 R 01C0 R		
 0C98  04E0 R 0476 R		                DW      SUBB,QDUP 
 0C9C  019E R 0CA6 R		                DW      QBRAN,SAME2 
 0CA0  01EE R 0220 R 016E R	                DW      RFROM,DROP,EXIT         ;strings not equal 
 0CA6  017E R 0C84 R		SAME2:          DW      DONXT,SAME1 
 0CAA  0156 R 0000 016E R	                DW      DOLIT,0,EXIT            ;strings equal 
				 
				;   find        ( a va -- ca na | a F ) 
				;               Search a vocabulary for a string. Return ca and na if succeeded. 
				 
				                $COLON  4,'find',FIND 
 0CB0                        2	FIND:                                    ; 
 1AB8                        2	ORG     _NAME                             ; 
 1AB8  0CB0 R 1AC6 R         2	        DW       _CODE,_LINK              ; 
 1ABC  04 66 69 6E 64        2	        DB      4,'find'                  ; 
 0CB0                        2	ORG     _CODE                             ; 
 0CB0  CD00                  1	        DW      CALLL                     ; 
 0CB2  0160 R                1	        DW      LISTT                     ; 
 0CB4  0224 R 021A R 01CE R	                DW      SWAP,DUPP,CAT 
 0CBA  0156 R 0002 0632 R	                DW      DOLIT,CELLL,SLASH,TEMP,STORE 
       03F2 R 01B8 R		
 0CC4  021A R 01C0 R 01D6 R	                DW      DUPP,AT,TOR,CELLP,SWAP 
       06BA R 0224 R		
 0CCE  01C0 R 021A R		FIND1:          DW      AT,DUPP 
 0CD2  019E R 0CFE R		                DW      QBRAN,FIND6 
 0CD6  021A R 01C0 R 0156 R	                DW      DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR 
       7F1F 0244 R 01E4 R	
       025C R			
 0CE4  019E R 0CF2 R		                DW      QBRAN,FIND2 
 0CE8  06BA R 0156 R FFFF	                DW      CELLP,DOLIT,-1          ;true flag 
 0CEE  01B0 R 0CFA R		                DW      BRAN,FIND3 
 0CF2  06BA R 03F2 R 01C0 R	FIND2:          DW      CELLP,TEMP,AT,SAMEQ 
       0C7A R			
 0CFA  01B0 R 0D0A R		FIND3:          DW      BRAN,FIND4 
 0CFE  01EE R 0220 R		FIND6:          DW      RFROM,DROP 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-38


 0D02  0224 R 06C6 R 0224 R	                DW      SWAP,CELLM,SWAP,EXIT 
       016E R			
 0D0A  019E R 0D16 R		FIND4:          DW      QBRAN,FIND5 
 0D0E  06C6 R 06C6 R		                DW      CELLM,CELLM 
 0D12  01B0 R 0CCE R		                DW      BRAN,FIND1 
 0D16  01EE R 0220 R 0224 R	FIND5:          DW      RFROM,DROP,SWAP,DROP 
       0220 R			
 0D1E  06C6 R			                DW      CELLM 
 0D20  021A R 0C6E R 0224 R	                DW      DUPP,NAMET,SWAP,EXIT 
       016E R			
				 
				;   NAME?       ( a -- ca na | a F ) 
				;               Search all context vocabularies for a string. 
				 
				                $COLON  5,'NAME?',NAMEQ 
 0D28                        2	NAMEQ:                                    ; 
 1AAE                        2	ORG     _NAME                             ; 
 1AAE  0D28 R 1ABC R         2	        DW       _CODE,_LINK              ; 
 1AB2  05 4E 41 4D 45 3F     2	        DB      5,'NAME?'                  ; 
 0D28                        2	ORG     _CODE                             ; 
 0D28  CD00                  1	        DW      CALLL                     ; 
 0D2A  0160 R                1	        DW      LISTT                     ; 
 0D2C  043A R 021A R 0778 R	                DW      CNTXT,DUPP,DAT,XORR     ;?context=also 
       025C R			
 0D34  019E R 0D3A R		                DW      QBRAN,NAMQ1 
 0D38  06C6 R			                DW      CELLM                   ;no, start with context 
 0D3A  01D6 R			NAMQ1:          DW      TOR 
 0D3C  01EE R 06BA R 021A R	NAMQ2:          DW      RFROM,CELLP,DUPP,TOR    ;next in search order 
       01D6 R			
 0D44  01C0 R 0476 R		                DW      AT,QDUP 
 0D48  019E R 0D5A R		                DW      QBRAN,NAMQ3 
 0D4C  0CB0 R 0476 R		                DW      FIND,QDUP               ;search vocabulary 
 0D50  019E R 0D3C R		                DW      QBRAN,NAMQ2 
 0D54  01EE R 0220 R 016E R	                DW      RFROM,DROP,EXIT         ;found name 
 0D5A  01EE R 0220 R		NAMQ3:          DW      RFROM,DROP              ;name not found 
 0D5E  0156 R 0000 016E R	                DW      DOLIT,0,EXIT            ;false flag 
				 
				;; Terminal response 
				 
				;   ^H          ( bot eot cur -- bot eot cur ) 
				;               Backup the cursor by one character. 
				 
				                $COLON  2,'^H',BKSP 
 0D64                        2	BKSP:                                    ; 
 1AA6                        2	ORG     _NAME                             ; 
 1AA6  0D64 R 1AB2 R         2	        DW       _CODE,_LINK              ; 
 1AAA  02 5E 48              2	        DB      2,'^H'                  ; 
 0D64                        2	ORG     _CODE                             ; 
 0D64  CD00                  1	        DW      CALLL                     ; 
 0D66  0160 R                1	        DW      LISTT                     ; 
 0D68  01D6 R 022A R 01EE R	                DW      TOR,OVER,RFROM,SWAP,OVER,XORR 
       0224 R 022A R 025C R	
 0D74  019E R 0D94 R		                DW      QBRAN,BACK1 
 0D78  0156 R 0008 03DA R	                DW      DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB 
       07BE R 0156 R 0001	
       04E0 R			
 0D86  0702 R 03DA R 07BE R	                DW      BLANK,TECHO,ATEXE 
 0D8C  0156 R 0008 03DA R	                DW      DOLIT,BKSPP,TECHO,ATEXE 
       07BE R			
 0D94  016E R			BACK1:          DW      EXIT 
				 
				;   TAP         ( bot eot cur c -- bot eot cur ) 
				;               Accept and echo the key stroke and bump the cursor. 
				 
				                $COLON  3,'TAP',TAP 
 0D96                        2	TAP:                                    ; 
 1A9E                        2	ORG     _NAME                             ; 
 1A9E  0D96 R 1AAA R         2	        DW       _CODE,_LINK              ; 
 1AA2  03 54 41 50           2	        DB      3,'TAP'                  ; 
 0D96                        2	ORG     _CODE                             ; 
 0D96  CD00                  1	        DW      CALLL                     ; 
 0D98  0160 R                1	        DW      LISTT                     ; 
 0D9A  021A R 03DA R 07BE R	                DW      DUPP,TECHO,ATEXE 
 0DA0  022A R 01C8 R 0156 R	                DW      OVER,CSTOR,DOLIT,1,PLUS,EXIT 
       0001 04A6 R 016E R	
				 
				;   kTAP        ( bot eot cur c -- bot eot cur ) 
				;               Process a key stroke, CR or backspace. 
				 
				                $COLON  4,'kTAP',KTAP 
 0DAC                        2	KTAP:                                    ; 
 1A94                        2	ORG     _NAME                             ; 
 1A94  0DAC R 1AA2 R         2	        DW       _CODE,_LINK              ; 
 1A98  04 6B 54 41 50        2	        DB      4,'kTAP'                  ; 
 0DAC                        2	ORG     _CODE                             ; 
 0DAC  CD00                  1	        DW      CALLL                     ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-39


 0DAE  0160 R                1	        DW      LISTT                     ; 
 0DB0  021A R 0156 R 000D	                DW      DUPP,DOLIT,CRR,XORR 
       025C R			
 0DB8  019E R 0DD0 R		                DW      QBRAN,KTAP2 
 0DBC  0156 R 0008 025C R	                DW      DOLIT,BKSPP,XORR 
 0DC2  019E R 0DCC R		                DW      QBRAN,KTAP1 
 0DC6  0702 R 0D96 R 016E R	                DW      BLANK,TAP,EXIT 
 0DCC  0D64 R 016E R		KTAP1:          DW      BKSP,EXIT 
 0DD0  0220 R 0224 R 0220 R	KTAP2:          DW      DROP,SWAP,DROP,DUPP,EXIT 
       021A R 016E R		
				 
				;   accept      ( b u -- b u ) 
				;               Accept characters to input buffer. Return with actual count. 
				 
				                $COLON  6,'accept',ACCEP 
 0DDA                        2	ACCEP:                                    ; 
 1A88                        2	ORG     _NAME                             ; 
 1A88  0DDA R 1A98 R         2	        DW       _CODE,_LINK              ; 
 1A8C  06 61 63 63 65 70 74  2	        DB      6,'accept'                  ; 
 0DDA                        2	ORG     _CODE                             ; 
 0DDA  CD00                  1	        DW      CALLL                     ; 
 0DDC  0160 R                1	        DW      LISTT                     ; 
 0DDE  022A R 04A6 R 022A R	                DW      OVER,PLUS,OVER 
 0DE4  049C R 025C R		ACCP1:          DW      DDUP,XORR 
 0DE8  019E R 0E0A R		                DW      QBRAN,ACCP4 
 0DEC  0A2C R 021A R		                DW      KEY,DUPP 
				;               DW      BLANK,SUBB,DOLIT,95,ULESS 
 0DF0  0702 R 0156 R 007F	                DW      BLANK,DOLIT,127,WITHI 
       056C R			
 0DF8  019E R 0E02 R		                DW      QBRAN,ACCP2 
 0DFC  0D96 R			                DW      TAP 
 0DFE  01B0 R 0E06 R		                DW      BRAN,ACCP3 
 0E02  03D2 R 07BE R		ACCP2:          DW      TTAP,ATEXE 
 0E06  01B0 R 0DE4 R		ACCP3:          DW      BRAN,ACCP1 
 0E0A  0220 R 022A R 04E0 R	ACCP4:          DW      DROP,OVER,SUBB,EXIT 
       016E R			
				 
				;   EXPECT      ( b u -- ) 
				;               Accept input stream and store count in SPAN. 
				 
				                $COLON  6,'EXPECT',EXPEC 
 0E12                        2	EXPEC:                                    ; 
 1A7C                        2	ORG     _NAME                             ; 
 1A7C  0E12 R 1A8C R         2	        DW       _CODE,_LINK              ; 
 1A80  06 45 58 50 45 43 54  2	        DB      6,'EXPECT'                  ; 
 0E12                        2	ORG     _CODE                             ; 
 0E12  CD00                  1	        DW      CALLL                     ; 
 0E14  0160 R                1	        DW      LISTT                     ; 
 0E16  03CA R 07BE R 03FA R	                DW      TEXPE,ATEXE,SPAN,STORE,DROP,EXIT 
       01B8 R 0220 R 016E R	
				 
				;   QUERY       ( -- ) 
				;               Accept input stream to terminal input buffer. 
				 
				                $COLON  5,'QUERY',QUERY 
 0E22                        2	QUERY:                                    ; 
 1A72                        2	ORG     _NAME                             ; 
 1A72  0E22 R 1A80 R         2	        DW       _CODE,_LINK              ; 
 1A76  05 51 55 45 52 59     2	        DB      5,'QUERY'                  ; 
 0E22                        2	ORG     _CODE                             ; 
 0E22  CD00                  1	        DW      CALLL                     ; 
 0E24  0160 R                1	        DW      LISTT                     ; 
 0E26  07B2 R 0156 R 0050	                DW      TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE 
       03CA R 07BE R 040A R	
       01B8 R			
 0E34  0220 R 0156 R 0000	                DW      DROP,DOLIT,0,INN,STORE,EXIT 
       0402 R 01B8 R 016E R	
				 
				;; Error handling 
				 
				;   CATCH       ( ca -- 0 | err# ) 
				;               Execute word at ca and set up an error frame for it. 
				 
				                $COLON  5,'CATCH',CATCH 
 0E40                        2	CATCH:                                    ; 
 1A68                        2	ORG     _NAME                             ; 
 1A68  0E40 R 1A76 R         2	        DW       _CODE,_LINK              ; 
 1A6C  05 43 41 54 43 48     2	        DB      5,'CATCH'                  ; 
 0E40                        2	ORG     _CODE                             ; 
 0E40  CD00                  1	        DW      CALLL                     ; 
 0E42  0160 R                1	        DW      LISTT                     ; 
 0E44  020C R 01D6 R 0432 R	                DW      SPAT,TOR,HANDL,AT,TOR   ;save error frame 
       01C0 R 01D6 R		
 0E4E  01FC R 0432 R 01B8 R	                DW      RPAT,HANDL,STORE,EXECU  ;execute 
       017C R			
 0E56  01EE R 0432 R 01B8 R	                DW      RFROM,HANDL,STORE       ;restore error frame 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-40


 0E5C  01EE R 0220 R 0156 R	                DW      RFROM,DROP,DOLIT,0,EXIT ;no error 
       0000 016E R		
				 
				;   THROW       ( err# -- err# ) 
				;               Reset system to current local error frame an update error flag. 
				 
				                $COLON  5,'THROW',THROW 
 0E66                        2	THROW:                                    ; 
 1A5E                        2	ORG     _NAME                             ; 
 1A5E  0E66 R 1A6C R         2	        DW       _CODE,_LINK              ; 
 1A62  05 54 48 52 4F 57     2	        DB      5,'THROW'                  ; 
 0E66                        2	ORG     _CODE                             ; 
 0E66  CD00                  1	        DW      CALLL                     ; 
 0E68  0160 R                1	        DW      LISTT                     ; 
 0E6A  0432 R 01C0 R 0204 R	                DW      HANDL,AT,RPSTO          ;restore return stack 
 0E70  01EE R 0432 R 01B8 R	                DW      RFROM,HANDL,STORE       ;restore handler frame 
 0E76  01EE R 0224 R 01D6 R	                DW      RFROM,SWAP,TOR,SPSTO    ;restore data stack 
       0214 R			
 0E7E  0220 R 01EE R 016E R	                DW      DROP,RFROM,EXIT 
				 
				;   NULL$       ( -- a ) 
				;               Return address of a null string with zero count. 
				 
				                $COLON  5,'NULL$',NULLS 
 0E84                        2	NULLS:                                    ; 
 1A54                        2	ORG     _NAME                             ; 
 1A54  0E84 R 1A62 R         2	        DW       _CODE,_LINK              ; 
 1A58  05 4E 55 4C 4C 24     2	        DB      5,'NULL$'                  ; 
 0E84                        2	ORG     _CODE                             ; 
 0E84  CD00                  1	        DW      CALLL                     ; 
 0E86  0160 R                1	        DW      LISTT                     ; 
 0E88  038A R			                DW      DOVAR                   ;emulate CREATE 
 0E8A  0000			                DW      0 
 0E8C  63 6F 79 6F 74 65	                DB      99,111,121,111,116,101 
				                $ALIGN 
				 
				;   ABORT       ( -- ) 
				;               Reset data stack and jump to QUIT. 
				 
				                $COLON  5,'ABORT',ABORT 
 0E92                        2	ABORT:                                    ; 
 1A4A                        2	ORG     _NAME                             ; 
 1A4A  0E92 R 1A58 R         2	        DW       _CODE,_LINK              ; 
 1A4E  05 41 42 4F 52 54     2	        DB      5,'ABORT'                  ; 
 0E92                        2	ORG     _CODE                             ; 
 0E92  CD00                  1	        DW      CALLL                     ; 
 0E94  0160 R                1	        DW      LISTT                     ; 
 0E96  0E84 R 0E66 R		                DW      NULLS,THROW 
				 
				;   abort"      ( f -- ) 
				;               Run time routine of ABORT" . Abort with a message. 
				 
				                $COLON  COMPO+6,'abort"',ABORQ 
 0E9A                        2	ABORQ:                                    ; 
 1A3E                        2	ORG     _NAME                             ; 
 1A3E  0E9A R 1A4E R         2	        DW       _CODE,_LINK              ; 
 1A42  46 61 62 6F 72 74 22  2	        DB      COMPO+6,'abort"'                  ; 
 0E9A                        2	ORG     _CODE                             ; 
 0E9A  CD00                  1	        DW      CALLL                     ; 
 0E9C  0160 R                1	        DW      LISTT                     ; 
 0E9E  019E R 0EA6 R		                DW      QBRAN,ABOR1             ;text flag 
 0EA2  0AB8 R 0E66 R		                DW      DOSTR,THROW             ;pass error string 
 0EA6  0AB8 R 0220 R 016E R	ABOR1:          DW      DOSTR,DROP,EXIT         ;drop error 
				 
				;; The text interpreter 
				 
				;   $INTERPRET  ( a -- ) 
				;               Interpret a word. If failed, try to convert it to an integer. 
				 
				                $COLON  10,'$INTERPRET',INTER 
 0EAC                        2	INTER:                                    ; 
 1A2E                        2	ORG     _NAME                             ; 
 1A2E  0EAC R 1A42 R         2	        DW       _CODE,_LINK              ; 
 1A32  0A 24 49 4E 54 45 52  2	        DB      10,'$INTERPRET'                  ; 
 0EAC                        2	ORG     _CODE                             ; 
 0EAC  CD00                  1	        DW      CALLL                     ; 
 0EAE  0160 R                1	        DW      LISTT                     ; 
 0EB0  0D28 R 0476 R		                DW      NAMEQ,QDUP              ;?defined 
 0EB4  019E R 0ED4 R		                DW      QBRAN,INTE1 
 0EB8  01C0 R 0156 R 0040	                DW      AT,DOLIT,COMPO,ANDD     ;?compile only lexicon bits 
       0244 R			
				                D$      ABORQ,' compile only' 
 0EC0  0E9A R                1	        DW      ABORQ                     ; 
 0EC2  00 20 63 6F 6D 70 69  1	        DB      0,' compile only'                   ; 
 0EC2                        1	ORG     _LEN                              ; 
 0EC2  0D                    1	        DB      _CODE-_LEN-1              ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-41


 0ED0                        1	ORG     _CODE                             ; 
 0ED0  017C R 016E R		                DW      EXECU,EXIT              ;execute defined word 
 0ED4  0422 R 07BE R		INTE1:          DW      TNUMB,ATEXE             ;convert a number 
 0ED8  019E R 0EDE R		                DW      QBRAN,INTE2 
 0EDC  016E R			                DW      EXIT 
 0EDE  0E66 R			INTE2:          DW      THROW                   ;error 
				 
				;   [           ( -- ) 
				;               Start the text interpreter. 
				 
				                $COLON  IMEDD+1,'[',LBRAC 
 0EE0                        2	LBRAC:                                    ; 
 1A28                        2	ORG     _NAME                             ; 
 1A28  0EE0 R 1A32 R         2	        DW       _CODE,_LINK              ; 
 1A2C  81 5B                 2	        DB      IMEDD+1,'['                  ; 
 0EE0                        2	ORG     _CODE                             ; 
 0EE0  CD00                  1	        DW      CALLL                     ; 
 0EE2  0160 R                1	        DW      LISTT                     ; 
 0EE4  0156 R 0EAC R 041A R	                DW      DOLIT,INTER,TEVAL,STORE,EXIT 
       01B8 R 016E R		
				 
				;   .OK         ( -- ) 
				;               Display 'ok' only while interpreting. 
				 
				                $COLON  3,'.OK',DOTOK 
 0EEE                        2	DOTOK:                                    ; 
 1A20                        2	ORG     _NAME                             ; 
 1A20  0EEE R 1A2C R         2	        DW       _CODE,_LINK              ; 
 1A24  03 2E 4F 4B           2	        DB      3,'.OK'                  ; 
 0EEE                        2	ORG     _CODE                             ; 
 0EEE  CD00                  1	        DW      CALLL                     ; 
 0EF0  0160 R                1	        DW      LISTT                     ; 
 0EF2  0156 R 0EAC R 041A R	                DW      DOLIT,INTER,TEVAL,AT,EQUAL 
       01C0 R 04FA R		
 0EFC  019E R 0F06 R		                DW      QBRAN,DOTO1 
				                D$      DOTQP,' ok' 
 0F00  0AD8 R                1	        DW      DOTQP                     ; 
 0F02  00 20 6F 6B           1	        DB      0,' ok'                   ; 
 0F02                        1	ORG     _LEN                              ; 
 0F02  03                    1	        DB      _CODE-_LEN-1              ; 
 0F06                        1	ORG     _CODE                             ; 
 0F06  0AA6 R 016E R		DOTO1:          DW      CR,EXIT 
				 
				;   ?STACK      ( -- ) 
				;               Abort if the data stack underflows. 
				 
				                $COLON  6,'?STACK',QSTAC 
 0F0A                        2	QSTAC:                                    ; 
 1A14                        2	ORG     _NAME                             ; 
 1A14  0F0A R 1A24 R         2	        DW       _CODE,_LINK              ; 
 1A18  06 3F 53 54 41 43 4B  2	        DB      6,'?STACK'                  ; 
 0F0A                        2	ORG     _CODE                             ; 
 0F0A  CD00                  1	        DW      CALLL                     ; 
 0F0C  0160 R                1	        DW      LISTT                     ; 
 0F0E  072C R 0232 R		                DW      DEPTH,ZLESS             ;check only for underflow 
				                D$      ABORQ,' underflow' 
 0F12  0E9A R                1	        DW      ABORQ                     ; 
 0F14  00 20 75 6E 64 65 72  1	        DB      0,' underflow'                   ; 
 0F14                        1	ORG     _LEN                              ; 
 0F14  0A                    1	        DB      _CODE-_LEN-1              ; 
 0F1F                        1	ORG     _CODE                             ; 
 0F1F  90                    2	        EVEN                                    ; 
 0F20  016E R			                DW      EXIT 
				 
				;   EVAL        ( -- ) 
				;               Interpret the input stream. 
				 
				                $COLON  4,'EVAL',EVAL 
 0F22                        2	EVAL:                                    ; 
 1A0A                        2	ORG     _NAME                             ; 
 1A0A  0F22 R 1A18 R         2	        DW       _CODE,_LINK              ; 
 1A0E  04 45 56 41 4C        2	        DB      4,'EVAL'                  ; 
 0F22                        2	ORG     _CODE                             ; 
 0F22  CD00                  1	        DW      CALLL                     ; 
 0F24  0160 R                1	        DW      LISTT                     ; 
 0F26  0C46 R 021A R 01CE R	EVAL1:          DW      TOKEN,DUPP,CAT          ;?input stream empty 
 0F2C  019E R 0F3A R		                DW      QBRAN,EVAL2 
 0F30  041A R 07BE R 0F0A R	                DW      TEVAL,ATEXE,QSTAC       ;evaluate input, check stack 
 0F36  01B0 R 0F26 R		                DW      BRAN,EVAL1 
 0F3A  0220 R 03E2 R 07BE R	EVAL2:          DW      DROP,TPROM,ATEXE,EXIT   ;prompt 
       016E R			
				 
				;; Shell 
				 
				;   PRESET      ( -- ) 
				;               Reset data stack pointer and the terminal input buffer. 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-42


				 
				                $COLON  6,'PRESET',PRESE 
 0F42                        2	PRESE:                                    ; 
 19FE                        2	ORG     _NAME                             ; 
 19FE  0F42 R 1A0E R         2	        DW       _CODE,_LINK              ; 
 1A02  06 50 52 45 53 45 54  2	        DB      6,'PRESET'                  ; 
 0F42                        2	ORG     _CODE                             ; 
 0F42  CD00                  1	        DW      CALLL                     ; 
 0F44  0160 R                1	        DW      LISTT                     ; 
 0F46  03AA R 01C0 R 0214 R	                DW      SZERO,AT,SPSTO 
 0F4C  0156 R E000 040A R	                DW      DOLIT,TIBB,NTIB,CELLP,STORE,EXIT 
       06BA R 01B8 R 016E R	
				 
				;   xio         ( a a a -- ) 
				;               Reset the I/O vectors 'EXPECT, 'TAP, 'ECHO and 'PROMPT. 
				 
				                $COLON  COMPO+3,'xio',XIO 
 0F58                        2	XIO:                                    ; 
 19F6                        2	ORG     _NAME                             ; 
 19F6  0F58 R 1A02 R         2	        DW       _CODE,_LINK              ; 
 19FA  43 78 69 6F           2	        DB      COMPO+3,'xio'                  ; 
 0F58                        2	ORG     _CODE                             ; 
 0F58  CD00                  1	        DW      CALLL                     ; 
 0F5A  0160 R                1	        DW      LISTT                     ; 
 0F5C  0156 R 0DDA R 03CA R	                DW      DOLIT,ACCEP,TEXPE,DSTOR 
       0768 R			
 0F64  03DA R 0768 R 016E R	                DW      TECHO,DSTOR,EXIT 
				 
				;   FILE        ( -- ) 
				;               Select I/O vectors for file download. 
				 
				                $COLON  4,'FILE',FILE 
 0F6A                        2	FILE:                                    ; 
 19EC                        2	ORG     _NAME                             ; 
 19EC  0F6A R 19FA R         2	        DW       _CODE,_LINK              ; 
 19F0  04 46 49 4C 45        2	        DB      4,'FILE'                  ; 
 0F6A                        2	ORG     _CODE                             ; 
 0F6A  CD00                  1	        DW      CALLL                     ; 
 0F6C  0160 R                1	        DW      LISTT                     ; 
 0F6E  0156 R 0A5A R 0156 R	                DW      DOLIT,PACE,DOLIT,DROP 
       0220 R			
 0F76  0156 R 0DAC R 0F58 R	                DW      DOLIT,KTAP,XIO,EXIT 
       016E R			
				 
				;   HAND        ( -- ) 
				;               Select I/O vectors for terminal interface. 
				 
				                $COLON  4,'HAND',HAND 
 0F7E                        2	HAND:                                    ; 
 19E2                        2	ORG     _NAME                             ; 
 19E2  0F7E R 19F0 R         2	        DW       _CODE,_LINK              ; 
 19E6  04 48 41 4E 44        2	        DB      4,'HAND'                  ; 
 0F7E                        2	ORG     _CODE                             ; 
 0F7E  CD00                  1	        DW      CALLL                     ; 
 0F80  0160 R                1	        DW      LISTT                     ; 
 0F82  0156 R 0EEE R 0156 R	                DW      DOLIT,DOTOK,DOLIT,EMIT 
       0A38 R			
 0F8A  0156 R 0DAC R 0F58 R	                DW      DOLIT,KTAP,XIO,EXIT 
       016E R			
				 
				;   I/O         ( -- a ) 
				;               Array to store default I/O vectors. 
				 
				                $COLON  3,'I/O',ISLO 
 0F92                        2	ISLO:                                    ; 
 19DA                        2	ORG     _NAME                             ; 
 19DA  0F92 R 19E6 R         2	        DW       _CODE,_LINK              ; 
 19DE  03 49 2F 4F           2	        DB      3,'I/O'                  ; 
 0F92                        2	ORG     _CODE                             ; 
 0F92  CD00                  1	        DW      CALLL                     ; 
 0F94  0160 R                1	        DW      LISTT                     ; 
 0F96  038A R			                DW      DOVAR                   ;emulate CREATE 
 0F98  031C R 0340 R		                DW      QRX,TXSTO               ;default I/O vectors 
				 
				;   CONSOLE     ( -- ) 
				;               Initiate terminal interface. 
				 
				                $COLON  7,'CONSOLE',CONSO 
 0F9C                        2	CONSO:                                    ; 
 19CE                        2	ORG     _NAME                             ; 
 19CE  0F9C R 19DE R         2	        DW       _CODE,_LINK              ; 
 19D2  07 43 4F 4E 53 4F 4C  2	        DB      7,'CONSOLE'                  ; 
 0F9C                        2	ORG     _CODE                             ; 
 0F9C  CD00                  1	        DW      CALLL                     ; 
 0F9E  0160 R                1	        DW      LISTT                     ; 
 0FA0  0F92 R 0778 R 03BA R	                DW      ISLO,DAT,TQKEY,DSTOR    ;restore default I/O device 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-43


       0768 R			
 0FA8  0F7E R 016E R		                DW      HAND,EXIT               ;keyboard input 
				 
				;   QUIT        ( -- ) 
				;               Reset return stack pointer and start text interpreter. 
				 
				                $COLON  4,'QUIT',QUIT 
 0FAC                        2	QUIT:                                    ; 
 19C4                        2	ORG     _NAME                             ; 
 19C4  0FAC R 19D2 R         2	        DW       _CODE,_LINK              ; 
 19C8  04 51 55 49 54        2	        DB      4,'QUIT'                  ; 
 0FAC                        2	ORG     _CODE                             ; 
 0FAC  CD00                  1	        DW      CALLL                     ; 
 0FAE  0160 R                1	        DW      LISTT                     ; 
 0FB0  03B2 R 01C0 R 0204 R	                DW      RZERO,AT,RPSTO          ;reset return stack pointer 
 0FB6  0EE0 R			QUIT1:          DW      LBRAC                   ;start interpretation 
 0FB8  0E22 R			QUIT2:          DW      QUERY                   ;get input 
 0FBA  0156 R 0F22 R 0E40 R	                DW      DOLIT,EVAL,CATCH,QDUP   ;evaluate input 
       0476 R			
 0FC2  019E R 0FB8 R		                DW      QBRAN,QUIT2             ;continue till error 
 0FC6  03E2 R 01C0 R 0224 R	                DW      TPROM,AT,SWAP           ;save input device 
 0FCC  0F9C R 0E84 R 022A R	                DW      CONSO,NULLS,OVER,XORR   ;?display error message 
       025C R			
 0FD4  019E R 0FE4 R		                DW      QBRAN,QUIT3 
 0FD8  0A66 R 0788 R 0A88 R	                DW      SPACE,COUNT,TYPEE       ;error message 
				                D$      DOTQP,' ? '             ;error prompt 
 0FDE  0AD8 R                1	        DW      DOTQP                     ; 
 0FE0  00 20 3F 20           1	        DB      0,' ? '                   ; 
 0FE0                        1	ORG     _LEN                              ; 
 0FE0  03                    1	        DB      _CODE-_LEN-1              ; 
 0FE4                        1	ORG     _CODE                             ; 
 0FE4  0156 R 0EEE R 025C R	QUIT3:          DW      DOLIT,DOTOK,XORR        ;?file input 
 0FEA  019E R 0FF4 R		                DW      QBRAN,QUIT4 
 0FEE  0156 R 001B 0A38 R	                DW      DOLIT,ERR,EMIT          ;file error, tell host 
 0FF4  0F42 R			QUIT4:          DW      PRESE                   ;some cleanup 
 0FF6  01B0 R 0FB6 R		                DW      BRAN,QUIT1 
				 
				;; The compiler 
				 
				;   '           ( -- ca ) 
				;               Search context vocabularies for the next word in input stream. 
				 
				                $COLON  1,"'",TICK 
 0FFA                        2	TICK:                                    ; 
 19BE                        2	ORG     _NAME                             ; 
 19BE  0FFA R 19C8 R         2	        DW       _CODE,_LINK              ; 
 19C2  01 27                 2	        DB      1,"'"                  ; 
 0FFA                        2	ORG     _CODE                             ; 
 0FFA  CD00                  1	        DW      CALLL                     ; 
 0FFC  0160 R                1	        DW      LISTT                     ; 
 0FFE  0C46 R 0D28 R		                DW      TOKEN,NAMEQ             ;?defined 
 1002  019E R 1008 R		                DW      QBRAN,TICK1 
 1006  016E R			                DW      EXIT                    ;yes, push code address 
 1008  0E66 R			TICK1:          DW      THROW                   ;no, error 
				 
				;   ALLOT       ( n -- ) 
				;               Allocate n bytes to the code dictionary. 
				 
				                $COLON  5,'ALLOT',ALLOT 
 100A                        2	ALLOT:                                    ; 
 19B4                        2	ORG     _NAME                             ; 
 19B4  100A R 19C2 R         2	        DW       _CODE,_LINK              ; 
 19B8  05 41 4C 4C 4F 54     2	        DB      5,'ALLOT'                  ; 
 100A                        2	ORG     _CODE                             ; 
 100A  CD00                  1	        DW      CALLL                     ; 
 100C  0160 R                1	        DW      LISTT                     ; 
 100E  044A R 0756 R 016E R	                DW      CP,PSTOR,EXIT           ;adjust code pointer 
				 
				;   ,           ( w -- ) 
				;               Compile an integer into the code dictionary. 
				 
				                $COLON  1,',',COMMA 
 1014                        2	COMMA:                                    ; 
 19AE                        2	ORG     _NAME                             ; 
 19AE  1014 R 19B8 R         2	        DW       _CODE,_LINK              ; 
 19B2  01 2C                 2	        DB      1,','                  ; 
 1014                        2	ORG     _CODE                             ; 
 1014  CD00                  1	        DW      CALLL                     ; 
 1016  0160 R                1	        DW      LISTT                     ; 
 1018  079A R 021A R 06BA R	                DW      HERE,DUPP,CELLP         ;cell boundary 
 101E  044A R 01B8 R 01B8 R	                DW      CP,STORE,STORE,EXIT     ;adjust code pointer, compile 
       016E R			
				 
				;   [COMPILE]   ( -- ; <string> ) 
				;               Compile the next immediate word into code dictionary. 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-44


				                $COLON  IMEDD+9,'[COMPILE]',BCOMP 
 1026                        2	BCOMP:                                    ; 
 19A0                        2	ORG     _NAME                             ; 
 19A0  1026 R 19B2 R         2	        DW       _CODE,_LINK              ; 
 19A4  89 5B 43 4F 4D 50 49  2	        DB      IMEDD+9,'[COMPILE]'                  ; 
 1026                        2	ORG     _CODE                             ; 
 1026  CD00                  1	        DW      CALLL                     ; 
 1028  0160 R                1	        DW      LISTT                     ; 
 102A  0FFA R 1014 R 016E R	                DW      TICK,COMMA,EXIT 
				 
				;   COMPILE     ( -- ) 
				;               Compile the next address in colon list to code dictionary. 
				 
				                $COLON  COMPO+7,'COMPILE',COMPI 
 1030                        2	COMPI:                                    ; 
 1994                        2	ORG     _NAME                             ; 
 1994  1030 R 19A4 R         2	        DW       _CODE,_LINK              ; 
 1998  47 43 4F 4D 50 49 4C  2	        DB      COMPO+7,'COMPILE'                  ; 
 1030                        2	ORG     _CODE                             ; 
 1030  CD00                  1	        DW      CALLL                     ; 
 1032  0160 R                1	        DW      LISTT                     ; 
 1034  01EE R 021A R 01C0 R	                DW      RFROM,DUPP,AT,COMMA     ;compile address 
       1014 R			
 103C  06BA R 01D6 R 016E R	                DW      CELLP,TOR,EXIT          ;adjust return address 
				 
				;   LITERAL     ( w -- ) 
				;               Compile tos to code dictionary as an integer literal. 
				 
				                $COLON  IMEDD+7,'LITERAL',LITER 
 1042                        2	LITER:                                    ; 
 1988                        2	ORG     _NAME                             ; 
 1988  1042 R 1998 R         2	        DW       _CODE,_LINK              ; 
 198C  87 4C 49 54 45 52 41  2	        DB      IMEDD+7,'LITERAL'                  ; 
 1042                        2	ORG     _CODE                             ; 
 1042  CD00                  1	        DW      CALLL                     ; 
 1044  0160 R                1	        DW      LISTT                     ; 
 1046  1030 R 0156 R 1014 R	                DW      COMPI,DOLIT,COMMA,EXIT 
       016E R			
				 
				;   $,"         ( -- ) 
				;               Compile a literal string up to next " . 
				 
				                $COLON  3,'$,"',STRCQ 
 104E                        2	STRCQ:                                    ; 
 1980                        2	ORG     _NAME                             ; 
 1980  104E R 198C R         2	        DW       _CODE,_LINK              ; 
 1984  03 24 2C 22           2	        DB      3,'$,"'                  ; 
 104E                        2	ORG     _CODE                             ; 
 104E  CD00                  1	        DW      CALLL                     ; 
 1050  0160 R                1	        DW      LISTT                     ; 
 1052  0156 R 0022 0C62 R	                DW      DOLIT,'"',WORDD         ;move string to code dictionary 
 1058  0788 R 04A6 R 06DE R	                DW      COUNT,PLUS,ALGND        ;calculate aligned end of string 
 105E  044A R 01B8 R 016E R	                DW      CP,STORE,EXIT           ;adjust the code pointer 
				 
				;   RECURSE     ( -- ) 
				;               Make the current word available for compilation. 
				 
				                $COLON  IMEDD+7,'RECURSE',RECUR 
 1064                        2	RECUR:                                    ; 
 1974                        2	ORG     _NAME                             ; 
 1974  1064 R 1984 R         2	        DW       _CODE,_LINK              ; 
 1978  87 52 45 43 55 52 53  2	        DB      IMEDD+7,'RECURSE'                  ; 
 1064                        2	ORG     _CODE                             ; 
 1064  CD00                  1	        DW      CALLL                     ; 
 1066  0160 R                1	        DW      LISTT                     ; 
 1068  045A R 01C0 R 0C6E R	                DW      LAST,AT,NAMET,COMMA,EXIT 
       1014 R 016E R		
				 
				;; Structures 
				 
				;   FOR         ( -- a ) 
				;               Start a FOR-NEXT loop structure in a colon definition. 
				 
				                $COLON  IMEDD+3,'FOR',FOR 
 1072                        2	FOR:                                    ; 
 196C                        2	ORG     _NAME                             ; 
 196C  1072 R 1978 R         2	        DW       _CODE,_LINK              ; 
 1970  83 46 4F 52           2	        DB      IMEDD+3,'FOR'                  ; 
 1072                        2	ORG     _CODE                             ; 
 1072  CD00                  1	        DW      CALLL                     ; 
 1074  0160 R                1	        DW      LISTT                     ; 
 1076  1030 R 01D6 R 079A R	                DW      COMPI,TOR,HERE,EXIT 
       016E R			
				 
				;   BEGIN       ( -- a ) 
				;               Start an infinite or indefinite loop structure. 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-45


				 
				                $COLON  IMEDD+5,'BEGIN',BEGIN 
 107E                        2	BEGIN:                                    ; 
 1962                        2	ORG     _NAME                             ; 
 1962  107E R 1970 R         2	        DW       _CODE,_LINK              ; 
 1966  85 42 45 47 49 4E     2	        DB      IMEDD+5,'BEGIN'                  ; 
 107E                        2	ORG     _CODE                             ; 
 107E  CD00                  1	        DW      CALLL                     ; 
 1080  0160 R                1	        DW      LISTT                     ; 
 1082  079A R 016E R		                DW      HERE,EXIT 
				 
				;   NEXT        ( a -- ) 
				;               Terminate a FOR-NEXT loop structure. 
				 
				                $COLON  IMEDD+4,'NEXT',NEXT 
 1086                        2	NEXT:                                    ; 
 1958                        2	ORG     _NAME                             ; 
 1958  1086 R 1966 R         2	        DW       _CODE,_LINK              ; 
 195C  84 4E 45 58 54        2	        DB      IMEDD+4,'NEXT'                  ; 
 1086                        2	ORG     _CODE                             ; 
 1086  CD00                  1	        DW      CALLL                     ; 
 1088  0160 R                1	        DW      LISTT                     ; 
 108A  1030 R 017E R 1014 R	                DW      COMPI,DONXT,COMMA,EXIT 
       016E R			
				 
				;   UNTIL       ( a -- ) 
				;               Terminate a BEGIN-UNTIL indefinite loop structure. 
				 
				                $COLON  IMEDD+5,'UNTIL',UNTIL 
 1092                        2	UNTIL:                                    ; 
 194E                        2	ORG     _NAME                             ; 
 194E  1092 R 195C R         2	        DW       _CODE,_LINK              ; 
 1952  85 55 4E 54 49 4C     2	        DB      IMEDD+5,'UNTIL'                  ; 
 1092                        2	ORG     _CODE                             ; 
 1092  CD00                  1	        DW      CALLL                     ; 
 1094  0160 R                1	        DW      LISTT                     ; 
 1096  1030 R 019E R 1014 R	                DW      COMPI,QBRAN,COMMA,EXIT 
       016E R			
				 
				;   AGAIN       ( a -- ) 
				;               Terminate a BEGIN-AGAIN infinite loop structure. 
				 
				                $COLON  IMEDD+5,'AGAIN',AGAIN 
 109E                        2	AGAIN:                                    ; 
 1944                        2	ORG     _NAME                             ; 
 1944  109E R 1952 R         2	        DW       _CODE,_LINK              ; 
 1948  85 41 47 41 49 4E     2	        DB      IMEDD+5,'AGAIN'                  ; 
 109E                        2	ORG     _CODE                             ; 
 109E  CD00                  1	        DW      CALLL                     ; 
 10A0  0160 R                1	        DW      LISTT                     ; 
 10A2  1030 R 01B0 R 1014 R	                DW      COMPI,BRAN,COMMA,EXIT 
       016E R			
				 
				;   IF          ( -- A ) 
				;               Begin a conditional branch structure. 
				 
				                $COLON  IMEDD+2,'IF',IFF 
 10AA                        2	IFF:                                    ; 
 193C                        2	ORG     _NAME                             ; 
 193C  10AA R 1948 R         2	        DW       _CODE,_LINK              ; 
 1940  82 49 46              2	        DB      IMEDD+2,'IF'                  ; 
 10AA                        2	ORG     _CODE                             ; 
 10AA  CD00                  1	        DW      CALLL                     ; 
 10AC  0160 R                1	        DW      LISTT                     ; 
 10AE  1030 R 019E R 079A R	                DW      COMPI,QBRAN,HERE 
 10B4  0156 R 0000 1014 R	                DW      DOLIT,0,COMMA,EXIT 
       016E R			
				 
				;   AHEAD       ( -- A ) 
				;               Compile a forward branch instruction. 
				 
				                $COLON  IMEDD+5,'AHEAD',AHEAD 
 10BC                        2	AHEAD:                                    ; 
 1932                        2	ORG     _NAME                             ; 
 1932  10BC R 1940 R         2	        DW       _CODE,_LINK              ; 
 1936  85 41 48 45 41 44     2	        DB      IMEDD+5,'AHEAD'                  ; 
 10BC                        2	ORG     _CODE                             ; 
 10BC  CD00                  1	        DW      CALLL                     ; 
 10BE  0160 R                1	        DW      LISTT                     ; 
 10C0  1030 R 01B0 R 079A R	                DW      COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT 
       0156 R 0000 1014 R	
       016E R			
				 
				;   REPEAT      ( A a -- ) 
				;               Terminate a BEGIN-WHILE-REPEAT indefinite loop. 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-46


				                $COLON  IMEDD+6,'REPEAT',REPEA 
 10CE                        2	REPEA:                                    ; 
 1926                        2	ORG     _NAME                             ; 
 1926  10CE R 1936 R         2	        DW       _CODE,_LINK              ; 
 192A  86 52 45 50 45 41 54  2	        DB      IMEDD+6,'REPEAT'                  ; 
 10CE                        2	ORG     _CODE                             ; 
 10CE  CD00                  1	        DW      CALLL                     ; 
 10D0  0160 R                1	        DW      LISTT                     ; 
 10D2  109E R 079A R 0224 R	                DW      AGAIN,HERE,SWAP,STORE,EXIT 
       01B8 R 016E R		
				 
				;   THEN        ( A -- ) 
				;               Terminate a conditional branch structure. 
				 
				                $COLON  IMEDD+4,'THEN',THENN 
 10DC                        2	THENN:                                    ; 
 191C                        2	ORG     _NAME                             ; 
 191C  10DC R 192A R         2	        DW       _CODE,_LINK              ; 
 1920  84 54 48 45 4E        2	        DB      IMEDD+4,'THEN'                  ; 
 10DC                        2	ORG     _CODE                             ; 
 10DC  CD00                  1	        DW      CALLL                     ; 
 10DE  0160 R                1	        DW      LISTT                     ; 
 10E0  079A R 0224 R 01B8 R	                DW      HERE,SWAP,STORE,EXIT 
       016E R			
				 
				;   AFT         ( a -- a A ) 
				;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through. 
				 
				                $COLON  IMEDD+3,'AFT',AFT 
 10E8                        2	AFT:                                    ; 
 1914                        2	ORG     _NAME                             ; 
 1914  10E8 R 1920 R         2	        DW       _CODE,_LINK              ; 
 1918  83 41 46 54           2	        DB      IMEDD+3,'AFT'                  ; 
 10E8                        2	ORG     _CODE                             ; 
 10E8  CD00                  1	        DW      CALLL                     ; 
 10EA  0160 R                1	        DW      LISTT                     ; 
 10EC  0220 R 10BC R 107E R	                DW      DROP,AHEAD,BEGIN,SWAP,EXIT 
       0224 R 016E R		
				 
				;   ELSE        ( A -- A ) 
				;               Start the false clause in an IF-ELSE-THEN structure. 
				 
				                $COLON  IMEDD+4,'ELSE',ELSEE 
 10F6                        2	ELSEE:                                    ; 
 190A                        2	ORG     _NAME                             ; 
 190A  10F6 R 1918 R         2	        DW       _CODE,_LINK              ; 
 190E  84 45 4C 53 45        2	        DB      IMEDD+4,'ELSE'                  ; 
 10F6                        2	ORG     _CODE                             ; 
 10F6  CD00                  1	        DW      CALLL                     ; 
 10F8  0160 R                1	        DW      LISTT                     ; 
 10FA  10BC R 0224 R 10DC R	                DW      AHEAD,SWAP,THENN,EXIT 
       016E R			
				 
				;   WHILE       ( a -- A a ) 
				;               Conditional branch out of a BEGIN-WHILE-REPEAT loop. 
				 
				                $COLON  IMEDD+5,'WHILE',WHILE 
 1102                        2	WHILE:                                    ; 
 1900                        2	ORG     _NAME                             ; 
 1900  1102 R 190E R         2	        DW       _CODE,_LINK              ; 
 1904  85 57 48 49 4C 45     2	        DB      IMEDD+5,'WHILE'                  ; 
 1102                        2	ORG     _CODE                             ; 
 1102  CD00                  1	        DW      CALLL                     ; 
 1104  0160 R                1	        DW      LISTT                     ; 
 1106  10AA R 0224 R 016E R	                DW      IFF,SWAP,EXIT 
				 
				;   ABORT"      ( -- ; <string> ) 
				;               Conditional abort with an error message. 
				 
				                $COLON  IMEDD+6,'ABORT"',ABRTQ 
 110C                        2	ABRTQ:                                    ; 
 18F4                        2	ORG     _NAME                             ; 
 18F4  110C R 1904 R         2	        DW       _CODE,_LINK              ; 
 18F8  86 41 42 4F 52 54 22  2	        DB      IMEDD+6,'ABORT"'                  ; 
 110C                        2	ORG     _CODE                             ; 
 110C  CD00                  1	        DW      CALLL                     ; 
 110E  0160 R                1	        DW      LISTT                     ; 
 1110  1030 R 0E9A R 104E R	                DW      COMPI,ABORQ,STRCQ,EXIT 
       016E R			
				 
				;   $"          ( -- ; <string> ) 
				;               Compile an inline string literal. 
				 
				                $COLON  IMEDD+2,'$"',STRQ 
 1118                        2	STRQ:                                    ; 
 18EC                        2	ORG     _NAME                             ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-47


 18EC  1118 R 18F8 R         2	        DW       _CODE,_LINK              ; 
 18F0  82 24 22              2	        DB      IMEDD+2,'$"'                  ; 
 1118                        2	ORG     _CODE                             ; 
 1118  CD00                  1	        DW      CALLL                     ; 
 111A  0160 R                1	        DW      LISTT                     ; 
 111C  1030 R 0AD0 R 104E R	                DW      COMPI,STRQP,STRCQ,EXIT 
       016E R			
				 
				;   ."          ( -- ; <string> ) 
				;               Compile an inline string literal to be typed out at run time. 
				 
				                $COLON  IMEDD+2,'."',DOTQ 
 1124                        2	DOTQ:                                    ; 
 18E4                        2	ORG     _NAME                             ; 
 18E4  1124 R 18F0 R         2	        DW       _CODE,_LINK              ; 
 18E8  82 2E 22              2	        DB      IMEDD+2,'."'                  ; 
 1124                        2	ORG     _CODE                             ; 
 1124  CD00                  1	        DW      CALLL                     ; 
 1126  0160 R                1	        DW      LISTT                     ; 
 1128  1030 R 0AD8 R 104E R	                DW      COMPI,DOTQP,STRCQ,EXIT 
       016E R			
				 
				;; Name compiler 
				 
				;   ?UNIQUE     ( a -- a ) 
				;               Display a warning message if the word already exists. 
				 
				                $COLON  7,'?UNIQUE',UNIQU 
 1130                        2	UNIQU:                                    ; 
 18D8                        2	ORG     _NAME                             ; 
 18D8  1130 R 18E8 R         2	        DW       _CODE,_LINK              ; 
 18DC  07 3F 55 4E 49 51 55  2	        DB      7,'?UNIQUE'                  ; 
 1130                        2	ORG     _CODE                             ; 
 1130  CD00                  1	        DW      CALLL                     ; 
 1132  0160 R                1	        DW      LISTT                     ; 
 1134  021A R 0D28 R		                DW      DUPP,NAMEQ              ;?name exists 
 1138  019E R 114C R		                DW      QBRAN,UNIQ1             ;redefinitions are OK 
				                D$      DOTQP,' reDef '         ;but warn the user 
 113C  0AD8 R                1	        DW      DOTQP                     ; 
 113E  00 20 72 65 44 65 66  1	        DB      0,' reDef '                   ; 
 113E                        1	ORG     _LEN                              ; 
 113E  07                    1	        DB      _CODE-_LEN-1              ; 
 1146                        1	ORG     _CODE                             ; 
 1146  022A R 0788 R 0A88 R	                DW      OVER,COUNT,TYPEE        ;just in case its not planned 
 114C  0220 R 016E R		UNIQ1:          DW      DROP,EXIT 
				 
				;   $,n         ( na -- ) 
				;               Build a new dictionary name using the string at na. 
				 
				                $COLON  3,'$,n',SNAME 
 1150                        2	SNAME:                                    ; 
 18D0                        2	ORG     _NAME                             ; 
 18D0  1150 R 18DC R         2	        DW       _CODE,_LINK              ; 
 18D4  03 24 2C 6E           2	        DB      3,'$,n'                  ; 
 1150                        2	ORG     _CODE                             ; 
 1150  CD00                  1	        DW      CALLL                     ; 
 1152  0160 R                1	        DW      LISTT                     ; 
 1154  021A R 01CE R		                DW      DUPP,CAT                ;?null input 
 1158  019E R 1182 R		                DW      QBRAN,PNAM1 
 115C  1130 R			                DW      UNIQU                   ;?redefinition 
 115E  021A R 045A R 01B8 R	                DW      DUPP,LAST,STORE         ;save na for vocabulary link 
 1164  079A R 06DE R 0224 R	                DW      HERE,ALGND,SWAP         ;align code address 
 116A  06C6 R			                DW      CELLM                   ;link address 
 116C  0442 R 01C0 R 01C0 R	                DW      CRRNT,AT,AT,OVER,STORE 
       022A R 01B8 R		
 1176  06C6 R 021A R 0452 R	                DW      CELLM,DUPP,NP,STORE     ;adjust name pointer 
       01B8 R			
 117E  01B8 R 016E R		                DW      STORE,EXIT              ;save code pointer 
 1182				PNAM1:          D$      STRQP,' name'           ;null input 
 1182  0AD0 R                1	        DW      STRQP                     ; 
 1184  00 20 6E 61 6D 65     1	        DB      0,' name'                   ; 
 1184                        1	ORG     _LEN                              ; 
 1184  05                    1	        DB      _CODE-_LEN-1              ; 
 118A                        1	ORG     _CODE                             ; 
 118A  0E66 R			                DW      THROW 
				 
				;; FORTH compiler 
				 
				;   $COMPILE    ( a -- ) 
				;               Compile next word to code dictionary as a token or literal. 
				 
				                $COLON  8,'$COMPILE',SCOMP 
 118C                        2	SCOMP:                                    ; 
 18C2                        2	ORG     _NAME                             ; 
 18C2  118C R 18D4 R         2	        DW       _CODE,_LINK              ; 
 18C6  08 24 43 4F 4D 50 49  2	        DB      8,'$COMPILE'                  ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-48


 118C                        2	ORG     _CODE                             ; 
 118C  CD00                  1	        DW      CALLL                     ; 
 118E  0160 R                1	        DW      LISTT                     ; 
 1190  0D28 R 0476 R		                DW      NAMEQ,QDUP              ;?defined 
 1194  019E R 11AC R		                DW      QBRAN,SCOM2 
 1198  01C0 R 0156 R 0080	                DW      AT,DOLIT,IMEDD,ANDD     ;?immediate 
       0244 R			
 11A0  019E R 11A8 R		                DW      QBRAN,SCOM1 
 11A4  017C R 016E R		                DW      EXECU,EXIT              ;its immediate, execute 
 11A8  1014 R 016E R		SCOM1:          DW      COMMA,EXIT              ;its not immediate, compile 
 11AC  0422 R 07BE R		SCOM2:          DW      TNUMB,ATEXE             ;try to convert to number 
 11B0  019E R 11B8 R		                DW      QBRAN,SCOM3 
 11B4  1042 R 016E R		                DW      LITER,EXIT              ;compile number as integer 
 11B8  0E66 R			SCOM3:          DW      THROW                   ;error 
				 
				;   OVERT       ( -- ) 
				;               Link a new word into the current vocabulary. 
				 
				                $COLON  5,'OVERT',OVERT 
 11BA                        2	OVERT:                                    ; 
 18B8                        2	ORG     _NAME                             ; 
 18B8  11BA R 18C6 R         2	        DW       _CODE,_LINK              ; 
 18BC  05 4F 56 45 52 54     2	        DB      5,'OVERT'                  ; 
 11BA                        2	ORG     _CODE                             ; 
 11BA  CD00                  1	        DW      CALLL                     ; 
 11BC  0160 R                1	        DW      LISTT                     ; 
 11BE  045A R 01C0 R 0442 R	                DW      LAST,AT,CRRNT,AT,STORE,EXIT 
       01C0 R 01B8 R 016E R	
				 
				;   ;           ( -- ) 
				;               Terminate a colon definition. 
				 
				                $COLON  IMEDD+COMPO+1,';',SEMIS 
 11CA                        2	SEMIS:                                    ; 
 18B2                        2	ORG     _NAME                             ; 
 18B2  11CA R 18BC R         2	        DW       _CODE,_LINK              ; 
 18B6  C1 3B                 2	        DB      IMEDD+COMPO+1,';'                  ; 
 11CA                        2	ORG     _CODE                             ; 
 11CA  CD00                  1	        DW      CALLL                     ; 
 11CC  0160 R                1	        DW      LISTT                     ; 
 11CE  1030 R 016E R 0EE0 R	                DW      COMPI,EXIT,LBRAC,OVERT,EXIT 
       11BA R 016E R		
				 
				;   ]           ( -- ) 
				;               Start compiling the words in the input stream. 
				 
				                $COLON  1,']',RBRAC 
 11D8                        2	RBRAC:                                    ; 
 18AC                        2	ORG     _NAME                             ; 
 18AC  11D8 R 18B6 R         2	        DW       _CODE,_LINK              ; 
 18B0  01 5D                 2	        DB      1,']'                  ; 
 11D8                        2	ORG     _CODE                             ; 
 11D8  CD00                  1	        DW      CALLL                     ; 
 11DA  0160 R                1	        DW      LISTT                     ; 
 11DC  0156 R 118C R 041A R	                DW      DOLIT,SCOMP,TEVAL,STORE,EXIT 
       01B8 R 016E R		
				 
				;   call,       ( ca -- ) 
				;               Assemble a call instruction to ca. 
				 
				                $COLON  5,'call,',CALLC 
 11E6                        2	CALLC:                                    ; 
 18A2                        2	ORG     _NAME                             ; 
 18A2  11E6 R 18B0 R         2	        DW       _CODE,_LINK              ; 
 18A6  05 63 61 6C 6C 2C     2	        DB      5,'call,'                  ; 
 11E6                        2	ORG     _CODE                             ; 
 11E6  CD00                  1	        DW      CALLL                     ; 
 11E8  0160 R                1	        DW      LISTT                     ; 
 11EA  0156 R CD00 1014 R	                DW      DOLIT,CALLL,COMMA       ;Direct Threaded Code 
 11F0  1014 R 016E R		                DW      COMMA,EXIT      ;DTC 8086 relative call 
				 
				;   :           ( -- ; <string> ) 
				;               Start a new colon definition using next word as its name. 
				 
				                $COLON  1,':',COLON 
 11F4                        2	COLON:                                    ; 
 189C                        2	ORG     _NAME                             ; 
 189C  11F4 R 18A6 R         2	        DW       _CODE,_LINK              ; 
 18A0  01 3A                 2	        DB      1,':'                  ; 
 11F4                        2	ORG     _CODE                             ; 
 11F4  CD00                  1	        DW      CALLL                     ; 
 11F6  0160 R                1	        DW      LISTT                     ; 
 11F8  0C46 R 1150 R 0156 R	                DW      TOKEN,SNAME,DOLIT,LISTT 
       0160 R			
 1200  11E6 R 11D8 R 016E R	                DW      CALLC,RBRAC,EXIT 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-49


				;   IMMEDIATE   ( -- ) 
				;               Make the last compiled word an immediate word. 
				 
				                $COLON  9,'IMMEDIATE',IMMED 
 1206                        2	IMMED:                                    ; 
 188E                        2	ORG     _NAME                             ; 
 188E  1206 R 18A0 R         2	        DW       _CODE,_LINK              ; 
 1892  09 49 4D 4D 45 44 49  2	        DB      9,'IMMEDIATE'                  ; 
 1206                        2	ORG     _CODE                             ; 
 1206  CD00                  1	        DW      CALLL                     ; 
 1208  0160 R                1	        DW      LISTT                     ; 
 120A  0156 R 0080 045A R	                DW      DOLIT,IMEDD,LAST,AT,AT,ORR 
       01C0 R 01C0 R 0250 R	
 1216  045A R 01C0 R 01B8 R	                DW      LAST,AT,STORE,EXIT 
       016E R			
				 
				;; Defining words 
				 
				;   USER        ( u -- ; <string> ) 
				;               Compile a new user variable. 
				 
				                $COLON  4,'USER',USER 
 121E                        2	USER:                                    ; 
 1884                        2	ORG     _NAME                             ; 
 1884  121E R 1892 R         2	        DW       _CODE,_LINK              ; 
 1888  04 55 53 45 52        2	        DB      4,'USER'                  ; 
 121E                        2	ORG     _CODE                             ; 
 121E  CD00                  1	        DW      CALLL                     ; 
 1220  0160 R                1	        DW      LISTT                     ; 
 1222  0C46 R 1150 R 11BA R	                DW      TOKEN,SNAME,OVERT 
 1228  0156 R 0160 R 11E6 R	                DW      DOLIT,LISTT,CALLC 
 122E  1030 R 039A R 1014 R	                DW      COMPI,DOUSE,COMMA,EXIT 
       016E R			
				 
				;   CREATE      ( -- ; <string> ) 
				;               Compile a new array entry without allocating code space. 
				 
				                $COLON  6,'CREATE',CREAT 
 1236                        2	CREAT:                                    ; 
 1878                        2	ORG     _NAME                             ; 
 1878  1236 R 1888 R         2	        DW       _CODE,_LINK              ; 
 187C  06 43 52 45 41 54 45  2	        DB      6,'CREATE'                  ; 
 1236                        2	ORG     _CODE                             ; 
 1236  CD00                  1	        DW      CALLL                     ; 
 1238  0160 R                1	        DW      LISTT                     ; 
 123A  0C46 R 1150 R 11BA R	                DW      TOKEN,SNAME,OVERT 
 1240  0156 R 0160 R 11E6 R	                DW      DOLIT,LISTT,CALLC 
 1246  1030 R 038A R 016E R	                DW      COMPI,DOVAR,EXIT 
				 
				;   VARIABLE    ( -- ; <string> ) 
				;               Compile a new variable initialized to 0. 
				 
				                $COLON  8,'VARIABLE',VARIA 
 124C                        2	VARIA:                                    ; 
 186A                        2	ORG     _NAME                             ; 
 186A  124C R 187C R         2	        DW       _CODE,_LINK              ; 
 186E  08 56 41 52 49 41 42  2	        DB      8,'VARIABLE'                  ; 
 124C                        2	ORG     _CODE                             ; 
 124C  CD00                  1	        DW      CALLL                     ; 
 124E  0160 R                1	        DW      LISTT                     ; 
 1250  1236 R 0156 R 0000	                DW      CREAT,DOLIT,0,COMMA,EXIT 
       1014 R 016E R		
				 
				;; Tools 
				 
				;   _TYPE       ( b u -- ) 
				;               Display a string. Filter non-printing characters. 
				 
				                $COLON  5,'_TYPE',UTYPE 
 125A                        2	UTYPE:                                    ; 
 1860                        2	ORG     _NAME                             ; 
 1860  125A R 186E R         2	        DW       _CODE,_LINK              ; 
 1864  05 5F 54 59 50 45     2	        DB      5,'_TYPE'                  ; 
 125A                        2	ORG     _CODE                             ; 
 125A  CD00                  1	        DW      CALLL                     ; 
 125C  0160 R                1	        DW      LISTT                     ; 
 125E  01D6 R			                DW      TOR                     ;start count down loop 
 1260  01B0 R 1272 R		                DW      BRAN,UTYP2              ;skip first pass 
 1264  021A R 01CE R 070C R	UTYP1:          DW      DUPP,CAT,TCHAR,EMIT     ;display only printable 
       0A38 R			
 126C  0156 R 0001 04A6 R	                DW      DOLIT,1,PLUS            ;increment address 
 1272  017E R 1264 R		UTYP2:          DW      DONXT,UTYP1             ;loop till done 
 1276  0220 R 016E R		                DW      DROP,EXIT 
				 
				;   dm+         ( a u -- a ) 
				;               Dump u bytes from , leaving a+u on the stack. 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-50


				 
				                $COLON  3,'dm+',DMP 
 127A                        2	DMP:                                    ; 
 1858                        2	ORG     _NAME                             ; 
 1858  127A R 1864 R         2	        DW       _CODE,_LINK              ; 
 185C  03 64 6D 2B           2	        DB      3,'dm+'                  ; 
 127A                        2	ORG     _CODE                             ; 
 127A  CD00                  1	        DW      CALLL                     ; 
 127C  0160 R                1	        DW      LISTT                     ; 
 127E  022A R 0156 R 0004	                DW      OVER,DOLIT,4,UDOTR      ;display address 
       0AF8 R			
 1286  0A66 R 01D6 R		                DW      SPACE,TOR               ;start count down loop 
 128A  01B0 R 129E R		                DW      BRAN,PDUM2              ;skip first pass 
 128E  021A R 01CE R 0156 R	PDUM1:          DW      DUPP,CAT,DOLIT,3,UDOTR  ;display numeric data 
       0003 0AF8 R		
 1298  0156 R 0001 04A6 R	                DW      DOLIT,1,PLUS            ;increment address 
 129E  017E R 128E R		PDUM2:          DW      DONXT,PDUM1             ;loop till done 
 12A2  016E R			                DW      EXIT 
				 
				;   DUMP        ( a u -- ) 
				;               Dump u bytes from a, in a formatted manner. 
				 
				                $COLON  4,'DUMP',DUMP 
 12A4                        2	DUMP:                                    ; 
 184E                        2	ORG     _NAME                             ; 
 184E  12A4 R 185C R         2	        DW       _CODE,_LINK              ; 
 1852  04 44 55 4D 50        2	        DB      4,'DUMP'                  ; 
 12A4                        2	ORG     _CODE                             ; 
 12A4  CD00                  1	        DW      CALLL                     ; 
 12A6  0160 R                1	        DW      LISTT                     ; 
 12A8  03EA R 01C0 R 01D6 R	                DW      BASE,AT,TOR,HEX         ;save radix, set hex 
       092C R			
 12B0  0156 R 0010 0632 R	                DW      DOLIT,16,SLASH          ;change count to lines 
 12B6  01D6 R			                DW      TOR                     ;start count down loop 
 12B8  0AA6 R 0156 R 0010	DUMP1:          DW      CR,DOLIT,16,DDUP,DMP    ;display numeric 
       049C R 127A R		
 12C2  0484 R 0484 R		                DW      ROT,ROT 
 12C6  0A66 R 0A66 R 125A R	                DW      SPACE,SPACE,UTYPE       ;display printable characters 
 12CC  0A42 R 04B0 R		                DW      NUFQ,INVER              ;user control 
 12D0  019E R 12DC R		                DW      QBRAN,DUMP2 
 12D4  017E R 12B8 R		                DW      DONXT,DUMP1             ;loop till done 
 12D8  01B0 R 12E0 R		                DW      BRAN,DUMP3 
 12DC  01EE R 0220 R		DUMP2:          DW      RFROM,DROP              ;cleanup loop stack, early exit 
 12E0  0220 R 01EE R 03EA R	DUMP3:          DW      DROP,RFROM,BASE,STORE   ;restore radix 
       01B8 R			
 12E8  016E R			                DW      EXIT 
				 
				;   .S          ( ... -- ... ) 
				;               Display the contents of the data stack. 
				 
				                $COLON  2,'.S',DOTS 
 12EA                        2	DOTS:                                    ; 
 1846                        2	ORG     _NAME                             ; 
 1846  12EA R 1852 R         2	        DW       _CODE,_LINK              ; 
 184A  02 2E 53              2	        DB      2,'.S'                  ; 
 12EA                        2	ORG     _CODE                             ; 
 12EA  CD00                  1	        DW      CALLL                     ; 
 12EC  0160 R                1	        DW      LISTT                     ; 
 12EE  0AA6 R 072C R		                DW      CR,DEPTH                ;stack depth 
 12F2  01D6 R			                DW      TOR                     ;start count down loop 
 12F4  01B0 R 12FE R		                DW      BRAN,DOTS2              ;skip first pass 
 12F8  01E4 R 0742 R 0B20 R	DOTS1:          DW      RAT,PICK,DOT            ;index stack, display contents 
 12FE  017E R 12F8 R		DOTS2:          DW      DONXT,DOTS1             ;loop till done 
				                D$      DOTQP,' <sp' 
 1302  0AD8 R                1	        DW      DOTQP                     ; 
 1304  00 20 3C 73 70        1	        DB      0,' <sp'                   ; 
 1304                        1	ORG     _LEN                              ; 
 1304  04                    1	        DB      _CODE-_LEN-1              ; 
 1309                        1	ORG     _CODE                             ; 
 1309  90                    2	        EVEN                                    ; 
 130A  016E R			                DW      EXIT 
				 
				;   !CSP        ( -- ) 
				;               Save stack pointer in CSP for error checking. 
				 
				                $COLON  4,'!CSP',STCSP 
 130C                        2	STCSP:                                    ; 
 183C                        2	ORG     _NAME                             ; 
 183C  130C R 184A R         2	        DW       _CODE,_LINK              ; 
 1840  04 21 43 53 50        2	        DB      4,'!CSP'                  ; 
 130C                        2	ORG     _CODE                             ; 
 130C  CD00                  1	        DW      CALLL                     ; 
 130E  0160 R                1	        DW      LISTT                     ; 
 1310  020C R 0412 R 01B8 R	                DW      SPAT,CSP,STORE,EXIT     ;save pointer 
       016E R			
				 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-51


				;   ?CSP        ( -- ) 
				;               Abort if stack pointer differs from that saved in CSP. 
				 
				                $COLON  4,'?CSP',QCSP 
 1318                        2	QCSP:                                    ; 
 1832                        2	ORG     _NAME                             ; 
 1832  1318 R 1840 R         2	        DW       _CODE,_LINK              ; 
 1836  04 3F 43 53 50        2	        DB      4,'?CSP'                  ; 
 1318                        2	ORG     _CODE                             ; 
 1318  CD00                  1	        DW      CALLL                     ; 
 131A  0160 R                1	        DW      LISTT                     ; 
 131C  020C R 0412 R 01C0 R	                DW      SPAT,CSP,AT,XORR        ;compare pointers 
       025C R			
				                D$      ABORQ,'stacks'          ;abort if different 
 1324  0E9A R                1	        DW      ABORQ                     ; 
 1326  00 73 74 61 63 6B 73  1	        DB      0,'stacks'                   ; 
 1326                        1	ORG     _LEN                              ; 
 1326  06                    1	        DB      _CODE-_LEN-1              ; 
 132D                        1	ORG     _CODE                             ; 
 132D  90                    2	        EVEN                                    ; 
 132E  016E R			                DW      EXIT 
				 
				;   >NAME       ( ca -- na | F ) 
				;               Convert code address to a name address. 
				 
				                $COLON  5,'>NAME',TNAME 
 1330                        2	TNAME:                                    ; 
 1828                        2	ORG     _NAME                             ; 
 1828  1330 R 1836 R         2	        DW       _CODE,_LINK              ; 
 182C  05 3E 4E 41 4D 45     2	        DB      5,'>NAME'                  ; 
 1330                        2	ORG     _CODE                             ; 
 1330  CD00                  1	        DW      CALLL                     ; 
 1332  0160 R                1	        DW      LISTT                     ; 
 1334  0442 R			                DW      CRRNT                   ;vocabulary link 
 1336  06BA R 01C0 R 0476 R	TNAM1:          DW      CELLP,AT,QDUP           ;check all vocabularies 
 133C  019E R 136E R		                DW      QBRAN,TNAM4 
 1340  049C R			                DW      DDUP 
 1342  01C0 R 021A R		TNAM2:          DW      AT,DUPP                 ;?last word in a vocabulary 
 1346  019E R 135A R		                DW      QBRAN,TNAM3 
 134A  049C R 0C6E R 025C R	                DW      DDUP,NAMET,XORR         ;compare 
 1350  019E R 135A R		                DW      QBRAN,TNAM3 
 1354  06C6 R			                DW      CELLM                   ;continue with next word 
 1356  01B0 R 1342 R		                DW      BRAN,TNAM2 
 135A  0224 R 0220 R 0476 R	TNAM3:          DW      SWAP,DROP,QDUP 
 1360  019E R 1336 R		                DW      QBRAN,TNAM1 
 1364  0224 R 0220 R 0224 R	                DW      SWAP,DROP,SWAP,DROP,EXIT 
       0220 R 016E R		
 136E  0220 R 0156 R 0000	TNAM4:          DW      DROP,DOLIT,0,EXIT       ;false flag 
       016E R			
				 
				;   .ID         ( na -- ) 
				;               Display the name at address. 
				 
				                $COLON  3,'.ID',DOTID 
 1376                        2	DOTID:                                    ; 
 1820                        2	ORG     _NAME                             ; 
 1820  1376 R 182C R         2	        DW       _CODE,_LINK              ; 
 1824  03 2E 49 44           2	        DB      3,'.ID'                  ; 
 1376                        2	ORG     _CODE                             ; 
 1376  CD00                  1	        DW      CALLL                     ; 
 1378  0160 R                1	        DW      LISTT                     ; 
 137A  0476 R			                DW      QDUP                    ;if zero no name 
 137C  019E R 138C R		                DW      QBRAN,DOTI1 
 1380  0788 R 0156 R 001F	                DW      COUNT,DOLIT,01FH,ANDD   ;mask lexicon bits 
       0244 R			
 1388  125A R 016E R		                DW      UTYPE,EXIT              ;display name string 
 138C				DOTI1:          D$      DOTQP,' {noName}' 
 138C  0AD8 R                1	        DW      DOTQP                     ; 
 138E  00 20 7B 6E 6F 4E 61  1	        DB      0,' {noName}'                   ; 
 138E                        1	ORG     _LEN                              ; 
 138E  09                    1	        DB      _CODE-_LEN-1              ; 
 1398                        1	ORG     _CODE                             ; 
 1398  016E R			                DW      EXIT 
				 
				;   SEE         ( -- ; <string> ) 
				;               A simple decompiler. 
				 
				                $COLON  3,'SEE',SEE 
 139A                        2	SEE:                                    ; 
 1818                        2	ORG     _NAME                             ; 
 1818  139A R 1824 R         2	        DW       _CODE,_LINK              ; 
 181C  03 53 45 45           2	        DB      3,'SEE'                  ; 
 139A                        2	ORG     _CODE                             ; 
 139A  CD00                  1	        DW      CALLL                     ; 
 139C  0160 R                1	        DW      LISTT                     ; 
 139E  0FFA R			                DW      TICK                    ;starting address 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-52


 13A0  0AA6 R 06BA R		                DW      CR,CELLP 
 13A4  06BA R 021A R 01C0 R	SEE1:           DW      CELLP,DUPP,AT,DUPP      ;?does it contain a zero 
       021A R			
 13AC  019E R 13B2 R		                DW      QBRAN,SEE2 
 13B0  1330 R			                DW      TNAME                   ;?is it a name 
 13B2  0476 R			SEE2:           DW      QDUP                    ;name address or zero 
 13B4  019E R 13C0 R		                DW      QBRAN,SEE3 
 13B8  0A66 R 1376 R		                DW      SPACE,DOTID             ;display name 
 13BC  01B0 R 13C6 R		                DW      BRAN,SEE4 
 13C0  021A R 01C0 R 0B10 R	SEE3:           DW      DUPP,AT,UDOT            ;display number 
 13C6  0A42 R			SEE4:           DW      NUFQ                    ;user control 
 13C8  019E R 13A4 R		                DW      QBRAN,SEE1 
 13CC  0220 R 016E R		                DW      DROP,EXIT 
				 
				;   WORDS       ( -- ) 
				;               Display the names in the context vocabulary. 
				 
				                $COLON  5,'WORDS',WORDS 
 13D0                        2	WORDS:                                    ; 
 180E                        2	ORG     _NAME                             ; 
 180E  13D0 R 181C R         2	        DW       _CODE,_LINK              ; 
 1812  05 57 4F 52 44 53     2	        DB      5,'WORDS'                  ; 
 13D0                        2	ORG     _CODE                             ; 
 13D0  CD00                  1	        DW      CALLL                     ; 
 13D2  0160 R                1	        DW      LISTT                     ; 
 13D4  0AA6 R 043A R 01C0 R	                DW      CR,CNTXT,AT             ;only in context 
 13DA  01C0 R 0476 R		WORS1:          DW      AT,QDUP                 ;?at end of list 
 13DE  019E R 13F2 R		                DW      QBRAN,WORS2 
 13E2  021A R 0A66 R 1376 R	                DW      DUPP,SPACE,DOTID        ;display a name 
 13E8  06C6 R 0A42 R		                DW      CELLM,NUFQ              ;user control 
 13EC  019E R 13DA R		                DW      QBRAN,WORS1 
 13F0  0220 R			                DW      DROP 
 13F2  016E R			WORS2:          DW      EXIT 
				 
				;; Hardware reset 
				 
				;   VER         ( -- n ) 
				;               Return the version number of this implementation. 
				 
				                $COLON  3,'VER',VERSN 
 13F4                        2	VERSN:                                    ; 
 1806                        2	ORG     _NAME                             ; 
 1806  13F4 R 1812 R         2	        DW       _CODE,_LINK              ; 
 180A  03 56 45 52           2	        DB      3,'VER'                  ; 
 13F4                        2	ORG     _CODE                             ; 
 13F4  CD00                  1	        DW      CALLL                     ; 
 13F6  0160 R                1	        DW      LISTT                     ; 
 13F8  0156 R 0100 016E R	                DW      DOLIT,VER*256+EXT,EXIT 
				 
				;   hi          ( -- ) 
				;               Display the sign-on message of eForth. 
				 
				                $COLON  2,'hi',HI 
 13FE                        2	HI:                                    ; 
 17FE                        2	ORG     _NAME                             ; 
 17FE  13FE R 180A R         2	        DW       _CODE,_LINK              ; 
 1802  02 68 69              2	        DB      2,'hi'                  ; 
 13FE                        2	ORG     _CODE                             ; 
 13FE  CD00                  1	        DW      CALLL                     ; 
 1400  0160 R                1	        DW      LISTT                     ; 
 1402  027C R 0AA6 R		                DW      STOIO,CR                ;initialize I/O 
				                D$      DOTQP,'eForth v'        ;model 
 1406  0AD8 R                1	        DW      DOTQP                     ; 
 1408  00 65 46 6F 72 74 68  1	        DB      0,'eForth v'                   ; 
 1408                        1	ORG     _LEN                              ; 
 1408  08                    1	        DB      _CODE-_LEN-1              ; 
 1411                        1	ORG     _CODE                             ; 
 1411  90                    2	        EVEN                                    ; 
 1412  03EA R 01C0 R 092C R	                DW      BASE,AT,HEX             ;save radix 
 1418  13F4 R 08AE R 08D2 R	                DW      VERSN,BDIGS,DIG,DIG 
       08D2 R			
 1420  0156 R 002E 08BA R	                DW      DOLIT,'.',HOLD 
 1426  08E0 R 0904 R 0A88 R	                DW      DIGS,EDIGS,TYPEE        ;format version number 
 142C  03EA R 01B8 R 0AA6 R	                DW      BASE,STORE,CR,EXIT      ;restore radix 
       016E R			
				 
				;   'BOOT       ( -- a ) 
				;               The application startup vector. 
				 
				                $COLON  5,"'BOOT",TBOOT 
 1434                        2	TBOOT:                                    ; 
 17F4                        2	ORG     _NAME                             ; 
 17F4  1434 R 1802 R         2	        DW       _CODE,_LINK              ; 
 17F8  05 27 42 4F 4F 54     2	        DB      5,"'BOOT"                  ; 
 1434                        2	ORG     _CODE                             ; 
 1434  CD00                  1	        DW      CALLL                     ; 
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Page     1-53


 1436  0160 R                1	        DW      LISTT                     ; 
 1438  038A R			                DW      DOVAR 
 143A  13FE R			                DW      HI                      ;application to boot 
				 
				;   COLD        ( -- ) 
				;               The hilevel cold start sequence. 
				 
				                $COLON  4,'COLD',COLD 
 143C                        2	COLD:                                    ; 
 17EA                        2	ORG     _NAME                             ; 
 17EA  143C R 17F8 R         2	        DW       _CODE,_LINK              ; 
 17EE  04 43 4F 4C 44        2	        DB      4,'COLD'                  ; 
 143C                        2	ORG     _CODE                             ; 
 143C  CD00                  1	        DW      CALLL                     ; 
 143E  0160 R                1	        DW      LISTT                     ; 
 1440  0156 R 0080 R 0156 R	COLD1:          DW      DOLIT,UZERO,DOLIT,UPP 
       E100			
 1448  0156 R 004E 07CE R	                DW      DOLIT,ULAST-UZERO,CMOVE ;initialize user area 
 144E  0F42 R			                DW      PRESE                   ;initialize stack and TIB 
 1450  1434 R 07BE R		                DW      TBOOT,ATEXE             ;application boot 
 1454  046A R 043A R 01C0 R	                DW      FORTH,CNTXT,AT,DUPP     ;initialize search order 
       021A R			
 145C  0442 R 0768 R 11BA R	                DW      CRRNT,DSTOR,OVERT 
 1462  0FAC R			                DW      QUIT                    ;start interpretation 
 1464  01B0 R 1440 R		                DW      BRAN,COLD1              ;just in case 
				 
				 
				 
				;=============================================================== 
				 
 = 17EE				LASTN           EQU     _NAME+4      ;last name address 
				 
 = DFFE				NTOP            EQU     0DFFEH       ;next available memory in name dictionary 
 = C000				CTOP            EQU     0C000H       ;next available memory in code dictionary 
				 
 1468				MAIN    ENDS 
				END     ORIG 

Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Symbols-1


Macros:

		N a m e			Lines

$ALIGN . . . . . . . . . . . . .  	   1
$CODE  . . . . . . . . . . . . .  	  10
$COLON . . . . . . . . . . . . .  	   3
$USER  . . . . . . . . . . . . .  	   5
D$ . . . . . . . . . . . . . . .  	   8

Segments and Groups:

                N a m e         	Length	 Align	Combine Class

MAIN . . . . . . . . . . . . . .  	1FFE	PARA	NONE	

Symbols:            

                N a m e         	Type	 Value	 Attr

ABOR1  . . . . . . . . . . . . .  	L NEAR	0EA6	MAIN
ABORQ  . . . . . . . . . . . . .  	L NEAR	0E9A	MAIN
ABORT  . . . . . . . . . . . . .  	L NEAR	0E92	MAIN
ABRTQ  . . . . . . . . . . . . .  	L NEAR	110C	MAIN
ABS1 . . . . . . . . . . . . . .  	L NEAR	04F8	MAIN
ABSS . . . . . . . . . . . . . .  	L NEAR	04EA	MAIN
ACCEP  . . . . . . . . . . . . .  	L NEAR	0DDA	MAIN
ACCP1  . . . . . . . . . . . . .  	L NEAR	0DE4	MAIN
ACCP2  . . . . . . . . . . . . .  	L NEAR	0E02	MAIN
ACCP3  . . . . . . . . . . . . .  	L NEAR	0E06	MAIN
ACCP4  . . . . . . . . . . . . .  	L NEAR	0E0A	MAIN
AFT  . . . . . . . . . . . . . .  	L NEAR	10E8	MAIN
AGAIN  . . . . . . . . . . . . .  	L NEAR	109E	MAIN
AHEAD  . . . . . . . . . . . . .  	L NEAR	10BC	MAIN
ALGN1  . . . . . . . . . . . . .  	L NEAR	06FE	MAIN
ALGND  . . . . . . . . . . . . .  	L NEAR	06DE	MAIN
ALLOT  . . . . . . . . . . . . .  	L NEAR	100A	MAIN
ANDD . . . . . . . . . . . . . .  	L NEAR	0244	MAIN
AT . . . . . . . . . . . . . . .  	L NEAR	01C0	MAIN
ATEXE  . . . . . . . . . . . . .  	L NEAR	07BE	MAIN

BACK1  . . . . . . . . . . . . .  	L NEAR	0D94	MAIN
BASE . . . . . . . . . . . . . .  	L NEAR	03EA	MAIN
BASEE  . . . . . . . . . . . . .  	NUMBER	000A	
BCOMP  . . . . . . . . . . . . .  	L NEAR	1026	MAIN
BDIGS  . . . . . . . . . . . . .  	L NEAR	08AE	MAIN
BEGIN  . . . . . . . . . . . . .  	L NEAR	107E	MAIN
BKSLA  . . . . . . . . . . . . .  	L NEAR	0C2A	MAIN
BKSP . . . . . . . . . . . . . .  	L NEAR	0D64	MAIN
BKSPP  . . . . . . . . . . . . .  	NUMBER	0008	
BLANK  . . . . . . . . . . . . .  	L NEAR	0702	MAIN
BM . . . . . . . . . . . . . . .  	NUMBER	0000	
BRAN . . . . . . . . . . . . . .  	L NEAR	01B0	MAIN

CALLC  . . . . . . . . . . . . .  	L NEAR	11E6	MAIN
CALLL  . . . . . . . . . . . . .  	NUMBER	CD00	
CAT  . . . . . . . . . . . . . .  	L NEAR	01CE	MAIN
CATCH  . . . . . . . . . . . . .  	L NEAR	0E40	MAIN
CELLL  . . . . . . . . . . . . .  	NUMBER	0002	
CELLM  . . . . . . . . . . . . .  	L NEAR	06C6	MAIN
CELLP  . . . . . . . . . . . . .  	L NEAR	06BA	MAIN
CELLS  . . . . . . . . . . . . .  	L NEAR	06D2	MAIN
CHAR . . . . . . . . . . . . . .  	L NEAR	0C38	MAIN
CHAR1  . . . . . . . . . . . . .  	L NEAR	0A80	MAIN
CHAR2  . . . . . . . . . . . . .  	L NEAR	0A82	MAIN
CMOV1  . . . . . . . . . . . . .  	L NEAR	07D8	MAIN
CMOV2  . . . . . . . . . . . . .  	L NEAR	07F0	MAIN
CMOVE  . . . . . . . . . . . . .  	L NEAR	07CE	MAIN
CNTXT  . . . . . . . . . . . . .  	L NEAR	043A	MAIN
CODEE  . . . . . . . . . . . . .  	NUMBER	0000	
COLD . . . . . . . . . . . . . .  	L NEAR	143C	MAIN
COLD1  . . . . . . . . . . . . .  	L NEAR	1440	MAIN
COLDD  . . . . . . . . . . . . .  	NUMBER	0000	
COLON  . . . . . . . . . . . . .  	L NEAR	11F4	MAIN
COMMA  . . . . . . . . . . . . .  	L NEAR	1014	MAIN
COMPI  . . . . . . . . . . . . .  	L NEAR	1030	MAIN
COMPO  . . . . . . . . . . . . .  	NUMBER	0040	
CONSO  . . . . . . . . . . . . .  	L NEAR	0F9C	MAIN
COUNT  . . . . . . . . . . . . .  	L NEAR	0788	MAIN
CP . . . . . . . . . . . . . . .  	L NEAR	044A	MAIN
CR . . . . . . . . . . . . . . .  	L NEAR	0AA6	MAIN
CREAT  . . . . . . . . . . . . .  	L NEAR	1236	MAIN
CRR  . . . . . . . . . . . . . .  	NUMBER	000D	
CRRNT  . . . . . . . . . . . . .  	L NEAR	0442	MAIN
CSP  . . . . . . . . . . . . . .  	L NEAR	0412	MAIN
CSTOR  . . . . . . . . . . . . .  	L NEAR	01C8	MAIN
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Symbols-2


CTOP . . . . . . . . . . . . . .  	NUMBER	C000	

DAT  . . . . . . . . . . . . . .  	L NEAR	0778	MAIN
DDROP  . . . . . . . . . . . . .  	L NEAR	0492	MAIN
DDUP . . . . . . . . . . . . . .  	L NEAR	049C	MAIN
DECIM  . . . . . . . . . . . . .  	L NEAR	093A	MAIN
DEPTH  . . . . . . . . . . . . .  	L NEAR	072C	MAIN
DGTQ1  . . . . . . . . . . . . .  	L NEAR	0970	MAIN
DIG  . . . . . . . . . . . . . .  	L NEAR	08D2	MAIN
DIGIT  . . . . . . . . . . . . .  	L NEAR	0880	MAIN
DIGS . . . . . . . . . . . . . .  	L NEAR	08E0	MAIN
DIGS1  . . . . . . . . . . . . .  	L NEAR	08E4	MAIN
DIGS2  . . . . . . . . . . . . .  	L NEAR	08F0	MAIN
DIGTQ  . . . . . . . . . . . . .  	L NEAR	0948	MAIN
DMP  . . . . . . . . . . . . . .  	L NEAR	127A	MAIN
DNEGA  . . . . . . . . . . . . .  	L NEAR	04CA	MAIN
DOLIT  . . . . . . . . . . . . .  	L NEAR	0156	MAIN
DOLST  . . . . . . . . . . . . .  	L NEAR	0160	MAIN
DONXT  . . . . . . . . . . . . .  	L NEAR	017E	MAIN
DOSTR  . . . . . . . . . . . . .  	L NEAR	0AB8	MAIN
DOT  . . . . . . . . . . . . . .  	L NEAR	0B20	MAIN
DOT1 . . . . . . . . . . . . . .  	L NEAR	0B36	MAIN
DOTI1  . . . . . . . . . . . . .  	L NEAR	138C	MAIN
DOTID  . . . . . . . . . . . . .  	L NEAR	1376	MAIN
DOTO1  . . . . . . . . . . . . .  	L NEAR	0F06	MAIN
DOTOK  . . . . . . . . . . . . .  	L NEAR	0EEE	MAIN
DOTPR  . . . . . . . . . . . . .  	L NEAR	0C0E	MAIN
DOTQ . . . . . . . . . . . . . .  	L NEAR	1124	MAIN
DOTQP  . . . . . . . . . . . . .  	L NEAR	0AD8	MAIN
DOTR . . . . . . . . . . . . . .  	L NEAR	0AE4	MAIN
DOTS . . . . . . . . . . . . . .  	L NEAR	12EA	MAIN
DOTS1  . . . . . . . . . . . . .  	L NEAR	12F8	MAIN
DOTS2  . . . . . . . . . . . . .  	L NEAR	12FE	MAIN
DOUSE  . . . . . . . . . . . . .  	L NEAR	039A	MAIN
DOVAR  . . . . . . . . . . . . .  	L NEAR	038A	MAIN
DROP . . . . . . . . . . . . . .  	L NEAR	0220	MAIN
DSTOR  . . . . . . . . . . . . .  	L NEAR	0768	MAIN
DTRA1  . . . . . . . . . . . . .  	L NEAR	0822	MAIN
DTRA2  . . . . . . . . . . . . .  	L NEAR	083C	MAIN
DTRAI  . . . . . . . . . . . . .  	L NEAR	0818	MAIN
DUMP . . . . . . . . . . . . . .  	L NEAR	12A4	MAIN
DUMP1  . . . . . . . . . . . . .  	L NEAR	12B8	MAIN
DUMP2  . . . . . . . . . . . . .  	L NEAR	12DC	MAIN
DUMP3  . . . . . . . . . . . . .  	L NEAR	12E0	MAIN
DUPP . . . . . . . . . . . . . .  	L NEAR	021A	MAIN

EDIGS  . . . . . . . . . . . . .  	L NEAR	0904	MAIN
ELSEE  . . . . . . . . . . . . .  	L NEAR	10F6	MAIN
EM . . . . . . . . . . . . . . .  	NUMBER	FFFF	
EMIT . . . . . . . . . . . . . .  	L NEAR	0A38	MAIN
EQU1 . . . . . . . . . . . . . .  	L NEAR	050A	MAIN
EQUAL  . . . . . . . . . . . . .  	L NEAR	04FA	MAIN
ERR  . . . . . . . . . . . . . .  	NUMBER	001B	
EVAL . . . . . . . . . . . . . .  	L NEAR	0F22	MAIN
EVAL1  . . . . . . . . . . . . .  	L NEAR	0F26	MAIN
EVAL2  . . . . . . . . . . . . .  	L NEAR	0F3A	MAIN
EXE1 . . . . . . . . . . . . . .  	L NEAR	07CC	MAIN
EXECU  . . . . . . . . . . . . .  	L NEAR	017C	MAIN
EXIT . . . . . . . . . . . . . .  	L NEAR	016E	MAIN
EXPEC  . . . . . . . . . . . . .  	L NEAR	0E12	MAIN
EXT  . . . . . . . . . . . . . .  	NUMBER	0000	
EXTRC  . . . . . . . . . . . . .  	L NEAR	089C	MAIN

FILE . . . . . . . . . . . . . .  	L NEAR	0F6A	MAIN
FILL . . . . . . . . . . . . . .  	L NEAR	07F8	MAIN
FILL1  . . . . . . . . . . . . .  	L NEAR	0806	MAIN
FILL2  . . . . . . . . . . . . .  	L NEAR	0810	MAIN
FIND . . . . . . . . . . . . . .  	L NEAR	0CB0	MAIN
FIND1  . . . . . . . . . . . . .  	L NEAR	0CCE	MAIN
FIND2  . . . . . . . . . . . . .  	L NEAR	0CF2	MAIN
FIND3  . . . . . . . . . . . . .  	L NEAR	0CFA	MAIN
FIND4  . . . . . . . . . . . . .  	L NEAR	0D0A	MAIN
FIND5  . . . . . . . . . . . . .  	L NEAR	0D16	MAIN
FIND6  . . . . . . . . . . . . .  	L NEAR	0CFE	MAIN
FOR  . . . . . . . . . . . . . .  	L NEAR	1072	MAIN
FORTH  . . . . . . . . . . . . .  	L NEAR	046A	MAIN

HAND . . . . . . . . . . . . . .  	L NEAR	0F7E	MAIN
HANDL  . . . . . . . . . . . . .  	L NEAR	0432	MAIN
HERE . . . . . . . . . . . . . .  	L NEAR	079A	MAIN
HEX  . . . . . . . . . . . . . .  	L NEAR	092C	MAIN
HI . . . . . . . . . . . . . . .  	L NEAR	13FE	MAIN
HLD  . . . . . . . . . . . . . .  	L NEAR	042A	MAIN
HOLD . . . . . . . . . . . . . .  	L NEAR	08BA	MAIN

IFF  . . . . . . . . . . . . . .  	L NEAR	10AA	MAIN
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Symbols-3


IMEDD  . . . . . . . . . . . . .  	NUMBER	0080	
IMMED  . . . . . . . . . . . . .  	L NEAR	1206	MAIN
INN  . . . . . . . . . . . . . .  	L NEAR	0402	MAIN
INTE1  . . . . . . . . . . . . .  	L NEAR	0ED4	MAIN
INTE2  . . . . . . . . . . . . .  	L NEAR	0EDE	MAIN
INTER  . . . . . . . . . . . . .  	L NEAR	0EAC	MAIN
INVER  . . . . . . . . . . . . .  	L NEAR	04B0	MAIN
ISLO . . . . . . . . . . . . . .  	L NEAR	0F92	MAIN
IVEC . . . . . . . . . . . . . .  	NUMBER	FE00	

KEY  . . . . . . . . . . . . . .  	L NEAR	0A2C	MAIN
KEY1 . . . . . . . . . . . . . .  	L NEAR	0A30	MAIN
KTAP . . . . . . . . . . . . . .  	L NEAR	0DAC	MAIN
KTAP1  . . . . . . . . . . . . .  	L NEAR	0DCC	MAIN
KTAP2  . . . . . . . . . . . . .  	L NEAR	0DD0	MAIN

LAST . . . . . . . . . . . . . .  	L NEAR	045A	MAIN
LASTN  . . . . . . . . . . . . .  	NUMBER	17EE	
LBRAC  . . . . . . . . . . . . .  	L NEAR	0EE0	MAIN
LESS . . . . . . . . . . . . . .  	L NEAR	052C	MAIN
LESS1  . . . . . . . . . . . . .  	L NEAR	0540	MAIN
LF . . . . . . . . . . . . . . .  	NUMBER	000A	
LISTT  . . . . . . . . . . . . .  	ALIAS	 DOLST		
LITER  . . . . . . . . . . . . .  	L NEAR	1042	MAIN

MASKK  . . . . . . . . . . . . .  	NUMBER	7F1F	
MAX  . . . . . . . . . . . . . .  	L NEAR	0546	MAIN
MAX1 . . . . . . . . . . . . . .  	L NEAR	0554	MAIN
MIN  . . . . . . . . . . . . . .  	L NEAR	0558	MAIN
MIN1 . . . . . . . . . . . . . .  	L NEAR	0568	MAIN
MMOD1  . . . . . . . . . . . . .  	L NEAR	05FA	MAIN
MMOD2  . . . . . . . . . . . . .  	L NEAR	0608	MAIN
MMOD3  . . . . . . . . . . . . .  	L NEAR	0618	MAIN
MODD . . . . . . . . . . . . . .  	L NEAR	0628	MAIN
MSMOD  . . . . . . . . . . . . .  	L NEAR	05E2	MAIN
MSTA1  . . . . . . . . . . . . .  	L NEAR	069E	MAIN
MSTAR  . . . . . . . . . . . . .  	L NEAR	0682	MAIN

NAMEE  . . . . . . . . . . . . .  	NUMBER	1FFE	
NAMEQ  . . . . . . . . . . . . .  	L NEAR	0D28	MAIN
NAMET  . . . . . . . . . . . . .  	L NEAR	0C6E	MAIN
NAMQ1  . . . . . . . . . . . . .  	L NEAR	0D3A	MAIN
NAMQ2  . . . . . . . . . . . . .  	L NEAR	0D3C	MAIN
NAMQ3  . . . . . . . . . . . . .  	L NEAR	0D5A	MAIN
NEGAT  . . . . . . . . . . . . .  	L NEAR	04BC	MAIN
NEXT . . . . . . . . . . . . . .  	L NEAR	1086	MAIN
NEXTSTEP . . . . . . . . . . . .  	L NEAR	014F	MAIN
NP . . . . . . . . . . . . . . .  	L NEAR	0452	MAIN
NTIB . . . . . . . . . . . . . .  	L NEAR	040A	MAIN
NTOP . . . . . . . . . . . . . .  	NUMBER	DFFE	
NUFQ . . . . . . . . . . . . . .  	L NEAR	0A42	MAIN
NUFQ1  . . . . . . . . . . . . .  	L NEAR	0A58	MAIN
NULLS  . . . . . . . . . . . . .  	L NEAR	0E84	MAIN
NUMBQ  . . . . . . . . . . . . .  	L NEAR	0978	MAIN
NUMQ1  . . . . . . . . . . . . .  	L NEAR	09AA	MAIN
NUMQ2  . . . . . . . . . . . . .  	L NEAR	09D0	MAIN
NUMQ3  . . . . . . . . . . . . .  	L NEAR	0A02	MAIN
NUMQ4  . . . . . . . . . . . . .  	L NEAR	0A08	MAIN
NUMQ5  . . . . . . . . . . . . .  	L NEAR	0A14	MAIN
NUMQ6  . . . . . . . . . . . . .  	L NEAR	0A16	MAIN

ORIG . . . . . . . . . . . . . .  	L NEAR	0000	MAIN
ORR  . . . . . . . . . . . . . .  	L NEAR	0250	MAIN
OVER . . . . . . . . . . . . . .  	L NEAR	022A	MAIN
OVERT  . . . . . . . . . . . . .  	L NEAR	11BA	MAIN

PACE . . . . . . . . . . . . . .  	L NEAR	0A5A	MAIN
PACKS  . . . . . . . . . . . . .  	L NEAR	0846	MAIN
PAD  . . . . . . . . . . . . . .  	L NEAR	07A4	MAIN
PAREN  . . . . . . . . . . . . .  	L NEAR	0C1C	MAIN
PARS . . . . . . . . . . . . . .  	L NEAR	0B48	MAIN
PARS1  . . . . . . . . . . . . .  	L NEAR	0B6E	MAIN
PARS2  . . . . . . . . . . . . .  	L NEAR	0B94	MAIN
PARS3  . . . . . . . . . . . . .  	L NEAR	0B96	MAIN
PARS4  . . . . . . . . . . . . .  	L NEAR	0B9C	MAIN
PARS5  . . . . . . . . . . . . .  	L NEAR	0BB4	MAIN
PARS6  . . . . . . . . . . . . .  	L NEAR	0BCA	MAIN
PARS7  . . . . . . . . . . . . .  	L NEAR	0BD8	MAIN
PARS8  . . . . . . . . . . . . .  	L NEAR	0BE4	MAIN
PARSE  . . . . . . . . . . . . .  	L NEAR	0BEC	MAIN
PCAT . . . . . . . . . . . . . .  	L NEAR	0310	MAIN
PCSTO  . . . . . . . . . . . . .  	L NEAR	0306	MAIN
PDUM1  . . . . . . . . . . . . .  	L NEAR	128E	MAIN
PDUM2  . . . . . . . . . . . . .  	L NEAR	129E	MAIN
PICK . . . . . . . . . . . . . .  	L NEAR	0742	MAIN
PLUS . . . . . . . . . . . . . .  	L NEAR	04A6	MAIN
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Symbols-4


PNAM1  . . . . . . . . . . . . .  	L NEAR	1182	MAIN
PRESE  . . . . . . . . . . . . .  	L NEAR	0F42	MAIN
PSTOR  . . . . . . . . . . . . .  	L NEAR	0756	MAIN

QBRAN  . . . . . . . . . . . . .  	L NEAR	019E	MAIN
QCSP . . . . . . . . . . . . . .  	L NEAR	1318	MAIN
QDUP . . . . . . . . . . . . . .  	L NEAR	0476	MAIN
QDUP1  . . . . . . . . . . . . .  	L NEAR	0482	MAIN
QKEY . . . . . . . . . . . . . .  	L NEAR	0A22	MAIN
QRX  . . . . . . . . . . . . . .  	L NEAR	031C	MAIN
QSTAC  . . . . . . . . . . . . .  	L NEAR	0F0A	MAIN
QUERY  . . . . . . . . . . . . .  	L NEAR	0E22	MAIN
QUEST  . . . . . . . . . . . . .  	L NEAR	0B3E	MAIN
QUIT . . . . . . . . . . . . . .  	L NEAR	0FAC	MAIN
QUIT1  . . . . . . . . . . . . .  	L NEAR	0FB6	MAIN
QUIT2  . . . . . . . . . . . . .  	L NEAR	0FB8	MAIN
QUIT3  . . . . . . . . . . . . .  	L NEAR	0FE4	MAIN
QUIT4  . . . . . . . . . . . . .  	L NEAR	0FF4	MAIN

RAT  . . . . . . . . . . . . . .  	L NEAR	01E4	MAIN
RBRAC  . . . . . . . . . . . . .  	L NEAR	11D8	MAIN
RECUR  . . . . . . . . . . . . .  	L NEAR	1064	MAIN
REPEA  . . . . . . . . . . . . .  	L NEAR	10CE	MAIN
RFROM  . . . . . . . . . . . . .  	L NEAR	01EE	MAIN
ROT  . . . . . . . . . . . . . .  	L NEAR	0484	MAIN
RP . . . . . . . . . . . . . . .  	NUMBER	FE10	
RPAT . . . . . . . . . . . . . .  	L NEAR	01FC	MAIN
RPP  . . . . . . . . . . . . . .  	NUMBER	E0FE	
RPSTO  . . . . . . . . . . . . .  	L NEAR	0204	MAIN
RZERO  . . . . . . . . . . . . .  	L NEAR	03B2	MAIN

SAME1  . . . . . . . . . . . . .  	L NEAR	0C84	MAIN
SAME2  . . . . . . . . . . . . .  	L NEAR	0CA6	MAIN
SAMEQ  . . . . . . . . . . . . .  	L NEAR	0C7A	MAIN
SCOM1  . . . . . . . . . . . . .  	L NEAR	11A8	MAIN
SCOM2  . . . . . . . . . . . . .  	L NEAR	11AC	MAIN
SCOM3  . . . . . . . . . . . . .  	L NEAR	11B8	MAIN
SCOMP  . . . . . . . . . . . . .  	L NEAR	118C	MAIN
SEE  . . . . . . . . . . . . . .  	L NEAR	139A	MAIN
SEE1 . . . . . . . . . . . . . .  	L NEAR	13A4	MAIN
SEE2 . . . . . . . . . . . . . .  	L NEAR	13B2	MAIN
SEE3 . . . . . . . . . . . . . .  	L NEAR	13C0	MAIN
SEE4 . . . . . . . . . . . . . .  	L NEAR	13C6	MAIN
SEMIS  . . . . . . . . . . . . .  	L NEAR	11CA	MAIN
SIGN . . . . . . . . . . . . . .  	L NEAR	08F2	MAIN
SIGN1  . . . . . . . . . . . . .  	L NEAR	0902	MAIN
SIOBRXBAVL . . . . . . . . . . .  	L NEAR	0366	MAIN
SIOBRXQ  . . . . . . . . . . . .  	NUMBER	FB00	
SIOBRXQIN  . . . . . . . . . . .  	NUMBER	FE12	
SIOBRXQOUT . . . . . . . . . . .  	NUMBER	FE14	
SIOBSRXCOND  . . . . . . . . . .  	L NEAR	0377	MAIN
SLASH  . . . . . . . . . . . . .  	L NEAR	0632	MAIN
SLMOD  . . . . . . . . . . . . .  	L NEAR	061A	MAIN
SNAME  . . . . . . . . . . . . .  	L NEAR	1150	MAIN
SPACE  . . . . . . . . . . . . .  	L NEAR	0A66	MAIN
SPACS  . . . . . . . . . . . . .  	L NEAR	0A70	MAIN
SPAN . . . . . . . . . . . . . .  	L NEAR	03FA	MAIN
SPAT . . . . . . . . . . . . . .  	L NEAR	020C	MAIN
SPP  . . . . . . . . . . . . . .  	NUMBER	E1FE	
SPSTO  . . . . . . . . . . . . .  	L NEAR	0214	MAIN
SSMOD  . . . . . . . . . . . . .  	L NEAR	06A0	MAIN
STAR . . . . . . . . . . . . . .  	L NEAR	0678	MAIN
STASL  . . . . . . . . . . . . .  	L NEAR	06AE	MAIN
STCSP  . . . . . . . . . . . . .  	L NEAR	130C	MAIN
STOIO  . . . . . . . . . . . . .  	L NEAR	027C	MAIN
STORE  . . . . . . . . . . . . .  	L NEAR	01B8	MAIN
STR  . . . . . . . . . . . . . .  	L NEAR	0916	MAIN
STRCQ  . . . . . . . . . . . . .  	L NEAR	104E	MAIN
STRQ . . . . . . . . . . . . . .  	L NEAR	1118	MAIN
STRQP  . . . . . . . . . . . . .  	L NEAR	0AD0	MAIN
SUBB . . . . . . . . . . . . . .  	L NEAR	04E0	MAIN
SVAB . . . . . . . . . . . . . .  	NUMBER	FE00	
SWAP . . . . . . . . . . . . . .  	L NEAR	0224	MAIN
SZERO  . . . . . . . . . . . . .  	L NEAR	03AA	MAIN

TAP  . . . . . . . . . . . . . .  	L NEAR	0D96	MAIN
TBOOT  . . . . . . . . . . . . .  	L NEAR	1434	MAIN
TCHA1  . . . . . . . . . . . . .  	L NEAR	072A	MAIN
TCHAR  . . . . . . . . . . . . .  	L NEAR	070C	MAIN
TECHO  . . . . . . . . . . . . .  	L NEAR	03DA	MAIN
TEMIT  . . . . . . . . . . . . .  	L NEAR	03C2	MAIN
TEMP . . . . . . . . . . . . . .  	L NEAR	03F2	MAIN
TEVAL  . . . . . . . . . . . . .  	L NEAR	041A	MAIN
TEXPE  . . . . . . . . . . . . .  	L NEAR	03CA	MAIN
THENN  . . . . . . . . . . . . .  	L NEAR	10DC	MAIN
THROW  . . . . . . . . . . . . .  	L NEAR	0E66	MAIN
Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Symbols-5


TIB  . . . . . . . . . . . . . .  	L NEAR	07B2	MAIN
TIBB . . . . . . . . . . . . . .  	NUMBER	E000	
TIC  . . . . . . . . . . . . . .  	NUMBER	0027	
TICK . . . . . . . . . . . . . .  	L NEAR	0FFA	MAIN
TICK1  . . . . . . . . . . . . .  	L NEAR	1008	MAIN
TNAM1  . . . . . . . . . . . . .  	L NEAR	1336	MAIN
TNAM2  . . . . . . . . . . . . .  	L NEAR	1342	MAIN
TNAM3  . . . . . . . . . . . . .  	L NEAR	135A	MAIN
TNAM4  . . . . . . . . . . . . .  	L NEAR	136E	MAIN
TNAME  . . . . . . . . . . . . .  	L NEAR	1330	MAIN
TNUMB  . . . . . . . . . . . . .  	L NEAR	0422	MAIN
TOKEN  . . . . . . . . . . . . .  	L NEAR	0C46	MAIN
TOR  . . . . . . . . . . . . . .  	L NEAR	01D6	MAIN
TPROM  . . . . . . . . . . . . .  	L NEAR	03E2	MAIN
TQKEY  . . . . . . . . . . . . .  	L NEAR	03BA	MAIN
TST  . . . . . . . . . . . . . .  	L NEAR	027C	MAIN
TTAP . . . . . . . . . . . . . .  	L NEAR	03D2	MAIN
TX1  . . . . . . . . . . . . . .  	L NEAR	0344	MAIN
TXSTO  . . . . . . . . . . . . .  	L NEAR	0340	MAIN
TYPE1  . . . . . . . . . . . . .  	L NEAR	0A92	MAIN
TYPE2  . . . . . . . . . . . . .  	L NEAR	0A9E	MAIN
TYPEE  . . . . . . . . . . . . .  	L NEAR	0A88	MAIN

UAB  . . . . . . . . . . . . . .  	NUMBER	C000	
UAEM . . . . . . . . . . . . . .  	NUMBER	E200	
UDOT . . . . . . . . . . . . . .  	L NEAR	0B10	MAIN
UDOTR  . . . . . . . . . . . . .  	L NEAR	0AF8	MAIN
ULAST  . . . . . . . . . . . . .  	L NEAR	00CE	MAIN
ULES1  . . . . . . . . . . . . .  	L NEAR	0526	MAIN
ULESS  . . . . . . . . . . . . .  	L NEAR	0510	MAIN
UMM1 . . . . . . . . . . . . . .  	L NEAR	0592	MAIN
UMM2 . . . . . . . . . . . . . .  	L NEAR	05C8	MAIN
UMM3 . . . . . . . . . . . . . .  	L NEAR	05CA	MAIN
UMM4 . . . . . . . . . . . . . .  	L NEAR	05D6	MAIN
UMMOD  . . . . . . . . . . . . .  	L NEAR	057E	MAIN
UMST1  . . . . . . . . . . . . .  	L NEAR	064E	MAIN
UMST2  . . . . . . . . . . . . .  	L NEAR	066E	MAIN
UMSTA  . . . . . . . . . . . . .  	L NEAR	063E	MAIN
UNIQ1  . . . . . . . . . . . . .  	L NEAR	114C	MAIN
UNIQU  . . . . . . . . . . . . .  	L NEAR	1130	MAIN
UNTIL  . . . . . . . . . . . . .  	L NEAR	1092	MAIN
UP . . . . . . . . . . . . . . .  	L NEAR	0392	MAIN
UPLUS  . . . . . . . . . . . . .  	L NEAR	0268	MAIN
UPP  . . . . . . . . . . . . . .  	NUMBER	E100	
USER . . . . . . . . . . . . . .  	L NEAR	121E	MAIN
UTYP1  . . . . . . . . . . . . .  	L NEAR	1264	MAIN
UTYP2  . . . . . . . . . . . . .  	L NEAR	1272	MAIN
UTYPE  . . . . . . . . . . . . .  	L NEAR	125A	MAIN
UZERO  . . . . . . . . . . . . .  	L NEAR	0080	MAIN

VARIA  . . . . . . . . . . . . .  	L NEAR	124C	MAIN
VER  . . . . . . . . . . . . . .  	NUMBER	0001	
VERSN  . . . . . . . . . . . . .  	L NEAR	13F4	MAIN
VFRTH  . . . . . . . . . . . . .  	L NEAR	0462	MAIN
VOCSS  . . . . . . . . . . . . .  	NUMBER	0008	

WHILE  . . . . . . . . . . . . .  	L NEAR	1102	MAIN
WITHI  . . . . . . . . . . . . .  	L NEAR	056C	MAIN
WORDD  . . . . . . . . . . . . .  	L NEAR	0C62	MAIN
WORDS  . . . . . . . . . . . . .  	L NEAR	13D0	MAIN
WORS1  . . . . . . . . . . . . .  	L NEAR	13DA	MAIN
WORS2  . . . . . . . . . . . . .  	L NEAR	13F2	MAIN

XIO  . . . . . . . . . . . . . .  	L NEAR	0F58	MAIN
XORR . . . . . . . . . . . . . .  	L NEAR	025C	MAIN

ZLESS  . . . . . . . . . . . . .  	L NEAR	0232	MAIN

@FILENAME  . . . . . . . . . . .  	TEXT  efZ80		
_CODE  . . . . . . . . . . . . .  	NEAR	143C	MAIN
_LEN . . . . . . . . . . . . . .  	NUMBER	0002	
_LINK  . . . . . . . . . . . . .  	NEAR	17EE	MAIN
_NAME  . . . . . . . . . . . . .  	NUMBER	17EA	
_USER  . . . . . . . . . . . . .  	NUMBER	004C	

Microsoft (R) Macro Assembler Version 5.00                  4/23/91 15:25:46
Z80 eForth                                                  Symbols-6



   2733 Source  Lines
   5860 Total   Lines
    382 Symbols

  50842 + 254054 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
