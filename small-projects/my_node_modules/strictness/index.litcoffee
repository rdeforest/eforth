# Making a point

I assert that type strictness is better implemented on top of a programming
language rather than as part of the language's implementation. This module
will demonstrate how that might be accomplished.

## About the 'S' prefix

I'm using reserved words for obvious reasons and must prefix them in order to
not conflict. I chose 'S' for 'Strict'.

# The classes

## Interface - a boundary between functions

    class SInterface
      constructor: (@protocols = {}) ->
        @protocolIds =
          Object.getOwnProperyNames(@protocols)
            .concat Object.getOwnPropertySymbols(@protocols)

      does: (protocol) ->
        protocol.id in @protocolIds

      addProtocol: (protocol) ->
        if @does protocol
          return

        @protocolIds.push id = protocol.id
        @protocols[id] = protocol

## Protocol - an agreement about an interface

    class SProtocol
      constructor: (@name, @
