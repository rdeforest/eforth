
class Readline
  @defaults:
    options:
      offerBlockMode: true
      blockModeToggleKey: 'C-v'

    lineParser: (line) -> line.split /\s+/g

    prompt:
      format: '> '
      formatExprPatterns: new Map
      formatter: ->
        fmt = @prompt.format
        prompt = ""

        while fmt.length
          for [pattern, replacer] from @prompt.formatExprPatterns
            if matched = fmt.match pattern and 'string' is typeof replacement = (replacer.bind @) matched...
              prompt += replacement
              fmt = fmt[matched[0].length..]


  enhance: (opts) ->
    if not opts
      throw new Error "Why would you use rl-enhanced without requesting an enhancement?!"

    { options
      promptFormat
      promptFormatter
      lineParser
    } = Object.assign {}, Readline.defaults, opts


  
twoCharPattern '\\', backslashOps
twoCharPattern '%' , percentOps

twoCharPattern = (prefix, ops) ->
  Readline.defaults.formatExprPatterns[prefix + '(.)'] =
    (matched, char) ->
      if char is prefix
        char
      else if fn = ops[char]
        (fn.bind @) char
      else
        matched

formatter: ->
idx = 0

while idx < promptFormat.length
  for promptFormatter
  if matched = promptFormat[idx..].match

