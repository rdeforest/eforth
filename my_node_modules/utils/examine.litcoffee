    setVar = (name, value) ->
      """
        return (function (v) {
          #{name} = v
        })
      """

    makeVar = (name, value) ->
      s =
        """
          var #{name};

        """

      if value isnt undefined
        s + setVar name, value
      else
        s

    asVars = (dict) ->
      newDict = {}

      for k, v of dict

        if 'function' is typeof v
          v = eval v.toString()

        eval makeVar k, dict[k]

        (eval "(v) -> #{k} = v") v

    module.exports = (opts) ->
      asVars exports =
        descriptor: Object.getOwnPropertyDescriptor

        proto: Object.getPrototypeOf

        ctor: (o) -> o.constructor

        props: (o) -> Object.getOwnPropertyNames(o).sort()

        syms: Object.getOwnPropertySymbols

        merged: (os...) -> Object.assign {}, os...

        descriptors: (o) ->
          merged
            props o
              .map (name) ->
                (o = {})[name] = descriptor o, name
                o

        definers: (o) ->
          o while o = proto o

        parents: (o) ->
          definers(o).map ctor

        allProps: (o) ->
          (props o).concat (props o for o in parents o)

        propDefiners: (o) ->
          for d in [o].concat definers o
            pd = {}
            pd[ctor(d).name] = props d

        globalNames: (o) ->
          k for k in props global when global[k] is o

