
If I made a new wiki platform...

* ...
  * Performance
    * 'single page' app with pre-loading of neighbors
  * Features
    * Real-time collaborative editing
  * UI
    * Markdown for syntax
    * Link path syntax like unix including meaning of ., .. and /
    * Automatically turn external links to internal if possible
      * but offer an override for those rare cases
    * when pages move
      * default to no redirect
      * default to updating internal links where possible
  * Data model
    * links are by object ID, not name
      * updating links when pages move is also O(1)
    * page names are derived
      * moving a hierarchy is O(1)
    * links are two directional:
      * 'what links here' is O(N) by number of inbound links
    * Oh crap this is starting to sound like a file system...
      * And this is bad because... ?
      * Use a file system for persistence
      * Use git for version control
      * Each page is a directory
      * page data is in .wiki/
      * The '.wiki' name is prohibited to simplify implementation
        * requests for it return 4XX
        * requests to create pages named .wiki are denied
        * Actually, periods are entirely prohibited in page names
  * Hierarchy
    * No Foo: namespacing
    * Regular wiki content in /w
    * Config in /etc (because yay unix!)
    * Templates in /bin (because yay unix!)
    * Users in /home (etc)
    * etc
    * Will this confuse/irritate people? HELL YEAH! :)
    - /home/
      - username/ contains
        - profile/ - public page editable by owner
        - messages/ - writable by others
        - preferences/
        - groups/
          - ./groupName is a link to /group/groupName
          - Only valid if groupName/members/username links back to the user
        - history
    - /group/
      - groupName/
        - members/
    - /role/
      - groups/
      - users/
      - perms/
    - /config/
      - persistence/
        - git settings or whatever
      - frontEnds/
        - web server and VIP settings
      - notification/
        - pubSub stuff
      - feature/
        - featureName/
          - package/
          - libs/
          - scripts/
          - docs/
  * / is read-only to normal users
  * Access control based on ACLs or capabilities or something
    * /home/* and /group/* can be members of /ACL pages
