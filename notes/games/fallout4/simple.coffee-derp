
proximity = (a, b) -> (x for x, i in a when b[i] is x).length

module.exports = class WordTree
  constructor: (words) ->
    @words = words.map (s) -> s.split //
    @tree = @branches @words
    # tree is <picked>: [<dist>: (recurse)]


  mostInfo: (tree) ->
    bucketCounts = {}
    bucketDepths = {}

    for word, buckets of tree
      bucketDepths[word] = buckets.map (b) -> b.length
      bucketCounts[word] = (buckets.filter (b) -> b.length > 0).length

    console.log bucketCounts, bucketDepths

  branches: (words) ->
    whatif = {}

    if words.length < 3
      return "just pick one"

    for pick in words
      whatif[pick] = @treesByDistance pick, words


  treesByDistance: (pick, choices) ->
    otherwise = {}

    for other in choices when other isnt pick
      dist = proximity pick, other
      otherwise[dist] or= []
      otherwise[dist].push other

    for dist, remaining in otherwise
      otherwise[dist] = branches remaining

